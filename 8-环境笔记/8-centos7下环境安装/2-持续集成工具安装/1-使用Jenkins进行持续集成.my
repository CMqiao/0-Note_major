<h1>使用Jenkins进行持续集成</h1>

<p>上次介绍了开源项目如何利用Travis CI进行持续集成，但是如果你的项目不是开源项目，用Travis Pro就需要交钱了。</p>

<p>如果不想交钱，可以自己搭建CI环境，利用Jenkins CI进行持续集成。</p>

<p>首先，我们从Jenkins官方网站<a href="https://jenkins.io/" target="_blank">https://jenkins.io/</a>下载最新的war包。虽然Jenkins提供了Windows、Linux、OS X等各种安装程序，但是，这些安装程序都没有war包好使。我从未见过Jenkins这样把Java包做得如此简单的项目。只需要运行命令：</p>

<pre>
<code>java -jar jenkins.war
</code></pre>

<p>Jenkins就启动成功了！它的war包自带Jetty服务器，剩下的工作我们全部在浏览器中进行。</p>

<p>第一次启动Jenkins时，出于安全考虑，Jenkins会自动生成一个随机的按照口令。注意控制台输出的口令，复制下来，然后在浏览器输入：</p>

<p><a href="http://localhost:8080/" target="_blank">http://localhost:8080/</a></p>

<p>粘贴口令，进入安装界面，如果执行默认的安装，Jenkins就自动配置好了Maven、git等常用插件。最后，创建一个admin用户，完成安装。</p>

<p>用管理员账号登录Jenkins后，第一次使用前，需要在&ldquo;系统管理&rdquo;-&gt;&ldquo;Global Tool Configuration&rdquo;-&gt;&ldquo;Maven&rdquo;中新增一个Maven，直接输入一个名字，选中&ldquo;自动安装&rdquo;，Jenkins会自动下载并安装Maven：</p>

<p><img alt="install-maven" src="https://cdn.webxueyuan.com/cdn/files/attachments/0014632784306517526814978b244e0a9c882c23ddcdbff000/l" /></p>

<p>然后，在Jenkins首页选择&ldquo;新建&rdquo;，输入名字，选择&ldquo;构建一个maven项目&rdquo;：</p>

<p><img alt="new-job" src="https://cdn.webxueyuan.com/cdn/files/attachments/001463278452803c9a341771b694e4ab7a8de601944da5a000/l" /></p>

<p>在配置页中，源码管理选择Git，填入地址：</p>

<p><img alt="git-config" src="https://cdn.webxueyuan.com/cdn/files/attachments/0014632784671786d5d233d34214a028813763903617480000/l" /></p>

<p>默认使用master分支。如果需要口令，在Credentials中添加用户名/口令，或者使用SSH Key。</p>

<p>构建触发器指定了触发一次构建的条件。推荐使用最简单的配置&ldquo;Poll SCM&rdquo;，它的意思是，定时检查版本库，发现有新的提交就触发构建。这种方式对git、SVN等所有版本管理系统都是通用的。</p>

<p>我们在日程表中填入：</p>

<pre>
<code>* * * * *
</code></pre>

<p><img alt="trigger" src="https://cdn.webxueyuan.com/cdn/files/attachments/00146327849499017559f1c3205410e82719c7540b115d8000/l" /></p>

<p>表示每分钟检查一次。如果你觉得太频繁，可以改成&ldquo;每3分钟检查一次&rdquo;：</p>

<pre>
<code>*/3 * * * *
</code></pre>

<p>在&ldquo;Build&rdquo;中，默认的Root POM是<code>pom.xml</code>。如果<code>pom.xml</code>不在根目录下，就填入子目录，例如：<code>wxapi/pom.xml</code>。</p>

<p>在Goals and options中，填入需要执行的mvn命令：<code>clean package</code>，Jenkins将执行如下命令：</p>

<pre>
<code>mvn clean package
</code></pre>

<p>特殊参数也在这里填写，如<code>-DskipTests=true clean package</code>。</p>

<p>保存后，就可以执行自动化构建了。</p>

<p>点击一个构建任务，可以在Console Output中看到控制台详细输出，便于出错排查：</p>

<p><img alt="console-output" src="https://cdn.webxueyuan.com/cdn/files/attachments/001463278521544b499a3af398742fb95dd1a9fe4c9f1c4000/l" /></p>

<h2>如何部署</h2>

<p>如果要部署构建好的war包，可以在Post Steps中填上shell命令，直接用脚本部署。</p>

<p>另一种方式是创建另外一个构建项目，手动触发部署。</p>

<p>无论用哪种方式，都是为了确保编译、部署是通过CI服务器完成的，而不是某台开发机器。</p>

<h2>如何创建Linux服务</h2>

<p>有了Jenkins，我们就可以在内网或者租用一台EC2服务器来搭建CI环境，每月费用不到&yen;100。推荐Ubuntu Linux系统。因为我们不想每次登录到Linux去启动Jenkins，也不想写脚本来启动服务。推荐安装JDK后，配合supervisor，把Jenkins直接变成一个服务。</p>

<p>可以在Linux上创建一个<code>ci</code>用户，然后，用supervisor启动并指定9001端口：</p>

<pre>
<code># /etc/supervisor/conf.d/ci.conf

[program:ci]
command=java -jar /home/ci/jenkins.war --httpPort=9001
user=ci
autostart=true
autorestart=true
startsecs=30
startretries=5
</code></pre>

<p>Jenkins默认在当前用户的主目录下创建<code>.jenkins</code>目录，所有的配置文件、数据库都存放在里面，只需要备份这个目录就备份了整个CI配置。</p>

<p>这样，一个CI环境就搭建完毕。</p>
