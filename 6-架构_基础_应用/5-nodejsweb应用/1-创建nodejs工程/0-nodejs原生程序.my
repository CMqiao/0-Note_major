<h1>Node.js 第一个web应用 hello world</h1>

<hr />
<h2>用法</h2>

<p><code>node [options] [V8 options] [script.js | -e &quot;script&quot; | - ] [arguments]</code></p>

<p>可查看<a href="http://nodejs.cn/api/cli.html#cli_command_line_options">命令行选项</a>文档，了解更多使用 Node.js 运行脚本的选项与方法。</p>

<h2>例子</h2>

<p>例子，一个使用 Node.js 编写的&nbsp;<a href="http://nodejs.cn/api/http.html">web服务器</a>，响应返回&nbsp;<code>&#39;Hello World&#39;</code>：</p>

<pre>
<code>const http = require(&#39;http&#39;);

const hostname = &#39;127.0.0.1&#39;;
const port = 3000;

const server = http.createServer((req, res) =&gt; {
  res.statusCode = 200;
  res.setHeader(&#39;Content-Type&#39;, &#39;text/plain&#39;);
  res.end(&#39;Hello World\n&#39;);
});

server.listen(port, hostname, () =&gt; {
  console.log(`服务器运行在 http://${hostname}:${port}/`);
});
</code></pre>

<p>要运行这个服务器，需将代码保存到一个名为&nbsp;<code>example.js</code>&nbsp;的文件，并使用 Node.js 执行：</p>

<pre>
<code>$ node example.js
服务器运行在 http://127.0.0.1:3000/
</code></pre>

<p>文档中大部分例子都可以用类似的方法运行。</p>

<p>&nbsp;</p>

<h1>Node.js 创建第一个应用</h1>

<p>如果我们使用PHP来编写后端的代码时，需要Apache 或者 Nginx 的HTTP 服务器，并配上 mod_php5 模块和php-cgi。</p>

<p>从这个角度看，整个&quot;接收 HTTP 请求并提供 Web 页面&quot;的需求根本不需 要 PHP 来处理。</p>

<p>不过对 Node.js 来说，概念完全不一样了。使用 Node.js 时，我们不仅仅 在实现一个应用，同时还实现了整个 HTTP 服务器。事实上，我们的 Web 应用以及对应的 Web 服务器基本上是一样的。</p>

<p>在我们创建 Node.js 第一个 &quot;Hello, World!&quot; 应用前，让我们先了解下 Node.js 应用是由哪几部分组成的：</p>

<ol>
	<li>
	<p><strong>引入 required 模块：</strong>我们可以使用&nbsp;<strong>require</strong>&nbsp;指令来载入 Node.js 模块。</p>
	</li>
	<li>
	<p><strong>创建服务器：</strong>服务器可以监听客户端的请求，类似于 Apache 、Nginx 等 HTTP 服务器。</p>
	</li>
	<li>
	<p><strong>接收请求与响应请求</strong>&nbsp;服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。</p>
	</li>
</ol>

<hr />
<h2>创建 Node.js 应用</h2>

<h3>步骤一、引入 required 模块</h3>

<p>我们使用&nbsp;<strong>require</strong>&nbsp;指令来载入 http 模块，并将实例化的 HTTP 赋值给变量 http，实例如下:</p>

<pre>
var http = require(&quot;http&quot;);</pre>

<h3>步骤二、创建服务器</h3>

<p>接下来我们使用 http.createServer() 方法创建服务器，并使用 listen 方法绑定 8888 端口。 函数通过 request, response 参数来接收和响应数据。</p>

<p>实例如下，在你项目的根目录下创建一个叫 server.js 的文件，并写入以下代码：</p>

<pre>
var http = require(&#39;http&#39;);

http.createServer(function (request, response) {

&nbsp;&nbsp;&nbsp;&nbsp;// 发送 HTTP 头部 
&nbsp;&nbsp;&nbsp;&nbsp;// HTTP 状态值: 200 : OK
&nbsp;&nbsp;&nbsp;&nbsp;// 内容类型: text/plain
&nbsp;&nbsp;&nbsp;&nbsp;response.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});

&nbsp;&nbsp;&nbsp;&nbsp;// 发送响应数据 &quot;Hello World&quot;
&nbsp;&nbsp;&nbsp;&nbsp;response.end(&#39;Hello World\n&#39;);
}).listen(8888);

// 终端打印如下信息
console.log(&#39;Server running at http://127.0.0.1:8888/&#39;);</pre>

<p>以上代码我们完成了一个可以工作的 HTTP 服务器。</p>

<p>使用&nbsp;<strong>node</strong>&nbsp;命令执行以上的代码：</p>

<pre>
node server.js
Server running at http://127.0.0.1:8888/</pre>

<p><img alt="cmdrun" src="https://www.runoob.com/wp-content/uploads/2014/03/cmdrun.jpg" style="height:59px; width:371px" /></p>

<p>接下来，打开浏览器访问 http://127.0.0.1:8888/，你会看到一个写着 &quot;Hello World&quot;的网页。</p>

<p><img alt="nodejs-helloworld" src="https://www.runoob.com/wp-content/uploads/2014/03/nodejs-helloworld.jpg" style="height:112px; width:445px" /></p>

<p><strong>分析Node.js 的 HTTP 服务器：</strong></p>

<ul>
	<li>第一行请求（require）Node.js 自带的 http 模块，并且把它赋值给 http 变量。</li>
	<li>接下来我们调用 http 模块提供的函数： createServer 。这个函数会返回 一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数， 指定这个 HTTP 服务器监听的端口号。</li>
</ul>

<hr />
<h2>Gif 实例演示</h2>

<p>接下来我们通过 Gif 图为大家演示实例操作：</p>

<p><img src="https://www.runoob.com/wp-content/uploads/2014/03/node-hello.gif" /></p>
