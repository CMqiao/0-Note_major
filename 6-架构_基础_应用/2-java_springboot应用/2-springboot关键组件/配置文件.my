<h1>Spring Boot配置接口 WebMvcConfigurer</h1>

<p>WebMvcConfigurer配置类其实是<code>Spring</code>内部的一种配置方式，采用<code>JavaBean</code>的形式来代替传统的<code>xml</code>配置文件形式进行针对框架个性化定制。基于java-based方式的spring mvc配置，需要创建一个<strong>配置</strong>类并实现<code>WebMvcConfigurer</code>&nbsp;接口，<code>WebMvcConfigurerAdapter</code>&nbsp;抽象类是对<code>WebMvcConfigurer</code>接口的简单抽象（增加了一些默认实现），但在在SpringBoot2.0及Spring5.0中WebMvcConfigurerAdapter已被废弃 。官方推荐直接实现WebMvcConfigurer或者直接继承WebMvcConfigurationSupport，方式一实现WebMvcConfigurer接口（推荐），方式二继承WebMvcConfigurationSupport类，具体实现可看这篇文章。<a href="https://blog.csdn.net/fmwind/article/details/82832758" rel="nofollow" target="_blank">https://blog.csdn.net/fmwind/article/details/82832758</a></p>

<pre>

&nbsp;</pre>

<ol>
	<li>
	<p><code>//</code></p>
	</li>
	<li>
	<p><code>// Source code recreated from a .class file by IntelliJ IDEA</code></p>
	</li>
	<li>
	<p><code>// (powered by Fernflower decompiler)</code></p>
	</li>
	<li>
	<p><code>//</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>package org.springframework.web.servlet.config.annotation;</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>import java.util.List;</code></p>
	</li>
	<li>
	<p><code>import org.springframework.format.FormatterRegistry;</code></p>
	</li>
	<li>
	<p><code>import org.springframework.http.converter.HttpMessageConverter;</code></p>
	</li>
	<li>
	<p><code>import org.springframework.validation.MessageCodesResolver;</code></p>
	</li>
	<li>
	<p><code>import org.springframework.validation.Validator;</code></p>
	</li>
	<li>
	<p><code>import org.springframework.web.method.support.HandlerMethodArgumentResolver;</code></p>
	</li>
	<li>
	<p><code>import org.springframework.web.method.support.HandlerMethodReturnValueHandler;</code></p>
	</li>
	<li>
	<p><code>import org.springframework.web.servlet.HandlerExceptionResolver;</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>public interface WebMvcConfigurer {</code></p>
	</li>
	<li>
	<p><code>void configurePathMatch(PathMatchConfigurer var1);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>void configureContentNegotiation(ContentNegotiationConfigurer var1);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>void configureAsyncSupport(AsyncSupportConfigurer var1);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>void configureDefaultServletHandling(DefaultServletHandlerConfigurer var1);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>void addFormatters(FormatterRegistry var1);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>void addInterceptors(InterceptorRegistry var1);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>void addResourceHandlers(ResourceHandlerRegistry var1);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>void addCorsMappings(CorsRegistry var1);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>void addViewControllers(ViewControllerRegistry var1);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>void configureViewResolvers(ViewResolverRegistry var1);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>void addArgumentResolvers(List&lt;HandlerMethodArgumentResolver&gt; var1);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>void addReturnValueHandlers(List&lt;HandlerMethodReturnValueHandler&gt; var1);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; var1);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>void extendMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; var1);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; var1);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>void extendHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; var1);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>Validator getValidator();</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>MessageCodesResolver getMessageCodesResolver();</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
</ol>

<p>接下来我们着重找几个方法讲解一下：</p>

<p>&nbsp;</p>

<pre>

&nbsp;</pre>

<ol>
	<li>
	<p><code>/* 拦截器配置 */</code></p>
	</li>
	<li>
	<p><code>void addInterceptors(InterceptorRegistry var1);</code></p>
	</li>
	<li>
	<p><code>/* 视图跳转控制器 */</code></p>
	</li>
	<li>
	<p><code>void addViewControllers(ViewControllerRegistry registry);</code></p>
	</li>
	<li>
	<p><code>/**</code></p>
	</li>
	<li>
	<p><code>*静态资源处理</code></p>
	</li>
	<li>
	<p><code>**/</code></p>
	</li>
	<li>
	<p><code>void addResourceHandlers(ResourceHandlerRegistry registry);</code></p>
	</li>
	<li>
	<p><code>/* 默认静态资源处理器 */</code></p>
	</li>
	<li>
	<p><code>void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer);</code></p>
	</li>
	<li>
	<p><code>/**</code></p>
	</li>
	<li>
	<p><code>* 这里配置视图解析器</code></p>
	</li>
	<li>
	<p><code>**/</code></p>
	</li>
	<li>
	<p><code>void configureViewResolvers(ViewResolverRegistry registry);</code></p>
	</li>
	<li>
	<p><code>/* 配置内容裁决的一些选项*/</code></p>
	</li>
	<li>
	<p><code>void configureContentNegotiation(ContentNegotiationConfigurer configurer);</code></p>
	</li>
</ol>

<p>&nbsp;</p>

<h3><a name="t0"></a>1、addInterceptors(InterceptorRegistry registry)</h3>

<p>此方法用来专门注册一个Interceptor，如HandlerInterceptorAdapter</p>

<pre>

&nbsp;</pre>

<ol>
	<li>
	<p><code>@Configuration</code></p>
	</li>
	<li>
	<p><code>public class MyWebMvcConfigurer implements WebMvcConfigurer { </code></p>
	</li>
	<li>
	<p><code>@Override</code></p>
	</li>
	<li>
	<p><code>public void addInterceptors(InterceptorRegistry registry) {</code></p>
	</li>
	<li>
	<p><code>registry.addInterceptor(new MyInterceptor()).addPathPatterns(&quot;/**&quot;).excludePathPatterns(&quot;/emp/toLogin&quot;,&quot;/emp/login&quot;,&quot;/js/**&quot;,&quot;/css/**&quot;,&quot;/images/**&quot;);</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
</ol>

<p><code>addPathPatterns(&quot;/**&quot;)</code>对所有请求都拦截，但是排除了<code>/toLogin</code>和<code>/login</code>请求的拦截。</p>

<p>当spring boot版本升级为2.x时，访问静态资源就会被HandlerInterceptor拦截,网上有很多处理办法都是如下写法</p>

<pre>
<code>.excludePathPatterns(&quot;/index.html&quot;,&quot;/&quot;,&quot;/user/login&quot;,&quot;/static/**&quot;);</code></pre>

<p>可惜本人在使用时一直不起作用，查看请求的路径里并没有/static/如图：</p>

<p><img alt="" src="https://img-blog.csdn.net/20180829180040150?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Ztd2luZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style="height:285px; width:525px" /></p>

<p>于是我改成了&quot;/js/**&quot;,&quot;/css/**&quot;,&quot;/images/**&quot;这样页面内容就可以正常访问了，我的项目结构如下：</p>

<p><img alt="" src="https://img-blog.csdn.net/20180829175908380?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Ztd2luZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style="height:175px; width:383px" /></p>

<h3><a name="t1"></a>2. 页面跳转addViewControllers</h3>

<p>以前写SpringMVC的时候，如果需要访问一个页面，必须要写Controller类，然后再写一个方法跳转到页面，感觉好麻烦，其实重写WebMvcConfigurer中的addViewControllers方法即可达到效果了</p>

<pre>

&nbsp;</pre>

<ol>
	<li>
	<p><code>/**</code></p>
	</li>
	<li>
	<p><code>* 以前要访问一个页面需要先创建个Controller控制类，再写方法跳转到页面</code></p>
	</li>
	<li>
	<p><code>* 在这里配置后就不需要那么麻烦了，直接访问http://localhost:8080/toLogin就跳转到login.jsp页面了</code></p>
	</li>
	<li>
	<p><code>* @param registry</code></p>
	</li>
	<li>
	<p><code>*/</code></p>
	</li>
	<li>
	<p><code>@Override</code></p>
	</li>
	<li>
	<p><code>public void addViewControllers(ViewControllerRegistry registry) {</code></p>
	</li>
	<li>
	<p><code>registry.addViewController(&quot;/toLogin&quot;).setViewName(&quot;login&quot;);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>}</code></p>
	</li>
</ol>

<p>值的指出的是，在这里重写addViewControllers方法，并不会覆盖WebMvcAutoConfiguration中的addViewControllers（在此方法中，Spring Boot将&ldquo;/&rdquo;映射至index.html），这也就意味着我们自己的配置和Spring Boot的自动配置同时有效，这也是我们推荐添加自己的MVC配置的方式。</p>

<h3><a name="t2"></a>3. 自定义资源映射addResourceHandlers</h3>

<p>比如，我们想自定义静态资源映射目录的话，只需重写addResourceHandlers方法即可。</p>

<p>注：如果继承WebMvcConfigurationSupport类实现配置时必须要重写该方法，具体见其它文章</p>

<pre>

&nbsp;</pre>

<ol>
	<li>
	<p><code>@Configuration</code></p>
	</li>
	<li>
	<p><code>public class MyWebMvcConfigurerAdapter implements WebMvcConfigurer {</code></p>
	</li>
	<li>
	<p><code>/**</code></p>
	</li>
	<li>
	<p><code>* 配置静态访问资源</code></p>
	</li>
	<li>
	<p><code>* @param registry</code></p>
	</li>
	<li>
	<p><code>*/</code></p>
	</li>
	<li>
	<p><code>@Override</code></p>
	</li>
	<li>
	<p><code>public void addResourceHandlers(ResourceHandlerRegistry registry) {</code></p>
	</li>
	<li>
	<p><code>registry.addResourceHandler(&quot;/my/**&quot;).addResourceLocations(&quot;classpath:/my/&quot;);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>}</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
</ol>

<p>通过addResourceHandler添加映射路径，然后通过addResourceLocations来指定路径。我们访问自定义my文件夹中的elephant.jpg 图片的地址为&nbsp;<a href="http://localhost:8080/my/elephant.jpg" rel="nofollow" target="_blank">http://localhost:8080/my/elephant.jpg</a></p>

<p>如果你想指定外部的目录也很简单，直接addResourceLocations指定即可，代码如下：</p>

<pre>

&nbsp;</pre>

<ol>
	<li>
	<p><code>@Override</code></p>
	</li>
	<li>
	<p><code>public void addResourceHandlers(ResourceHandlerRegistry registry) {</code></p>
	</li>
	<li>
	<p><code>registry.addResourceHandler(&quot;/my/**&quot;).addResourceLocations(&quot;file:E:/my/&quot;);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>}</code></p>
	</li>
</ol>

<p>addResourceLocations指的是文件放置的目录，addResoureHandler指的是对外暴露的访问路径</p>

<h3><a name="t3"></a>4. configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer)</h3>

<p>　　用法：</p>

<pre>

&nbsp;</pre>

<ol>
	<li>
	<p><code>@Override</code></p>
	</li>
	<li>
	<p><code>public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {</code></p>
	</li>
	<li>
	<p><code>configurer.enable();</code></p>
	</li>
	<li>
	<p><code>configurer.enable(&quot;defaultServletName&quot;);</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
</ol>

<p>　　此时会注册一个默认的Handler：DefaultServletHttpRequestHandler，这个Handler也是用来处理静态文件的，它会尝试映射/<em>。当DispatcherServelt映射/时（/ 和/</em>&nbsp;是有区别的），并且没有找到合适的Handler来处理请求时，就会交给DefaultServletHttpRequestHandler 来处理。注意：这里的静态资源是放置在web根目录下，而非WEB-INF 下。<br />
　　可能这里的描述有点不好懂（我自己也这么觉得），所以简单举个例子，例如：在webroot目录下有一个图片：1.png 我们知道Servelt规范中web根目录（webroot）下的文件可以直接访问的，但是由于DispatcherServlet配置了映射路径是：/ ，它几乎把所有的请求都拦截了，从而导致1.png 访问不到，这时注册一个DefaultServletHttpRequestHandler 就可以解决这个问题。其实可以理解为DispatcherServlet破坏了Servlet的一个特性（根目录下的文件可以直接访问），DefaultServletHttpRequestHandler是帮助回归这个特性的。</p>

<h3><a name="t4"></a>5、configureViewResolvers(ViewResolverRegistry registry)</h3>

<p>　　从方法名称我们就能看出这个方法是用来配置视图解析器的，该方法的参数ViewResolverRegistry 是一个注册器，用来注册你想自定义的视图解析器等。ViewResolverRegistry 常用的几个方法：</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; １)．enableContentNegotiation()</p>

<pre>

&nbsp;</pre>

<ol>
	<li>
	<p><code>/** 启用内容裁决视图解析器*/</code></p>
	</li>
	<li>
	<p><code>public void enableContentNegotiation(View... defaultViews) {</code></p>
	</li>
	<li>
	<p><code>initContentNegotiatingViewResolver(defaultViews);</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
</ol>

<p>　　该方法会创建一个内容裁决解析器ContentNegotiatingViewResolver ，该解析器不进行具体视图的解析，而是管理你注册的所有视图解析器，所有的视图会先经过它进行解析，然后由它来决定具体使用哪个解析器进行解析。具体的映射规则是根据请求的media types来决定的。<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2). 　UrlBasedViewResolverRegistration()</p>

<pre>

&nbsp;</pre>

<ol>
	<li>
	<p><code>public UrlBasedViewResolverRegistration jsp(String prefix, String suffix) {</code></p>
	</li>
	<li>
	<p><code>InternalResourceViewResolver resolver = new InternalResourceViewResolver();</code></p>
	</li>
	<li>
	<p><code>resolver.setPrefix(prefix);</code></p>
	</li>
	<li>
	<p><code>resolver.setSuffix(suffix);</code></p>
	</li>
	<li>
	<p><code>this.viewResolvers.add(resolver);</code></p>
	</li>
	<li>
	<p><code>return new UrlBasedViewResolverRegistration(resolver);</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
</ol>

<p>　　该方法会注册一个内部资源视图解析器InternalResourceViewResolver 显然访问的所有jsp都是它进行解析的。该方法参数用来指定路径的前缀和文件后缀，如：　　</p>

<pre>
<code>registry.jsp(&quot;/WEB-INF/jsp/&quot;, &quot;.jsp&quot;);
</code></pre>

<p>　对于以上配置，假如返回的视图名称是example，它会返回/WEB-INF/jsp/example.jsp给前端，找不到则报404。　　</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3). 　beanName()</p>

<pre>

&nbsp;</pre>

<ol>
	<li>
	<p><code>public void beanName() {</code></p>
	</li>
	<li>
	<p><code>BeanNameViewResolver resolver = new BeanNameViewResolver();</code></p>
	</li>
	<li>
	<p><code>this.viewResolvers.add(resolver);</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
</ol>

<p>　　该方法会注册一个BeanNameViewResolver 视图解析器，这个解析器是干嘛的呢？它主要是将视图名称解析成对应的bean。什么意思呢？假如返回的视图名称是example，它会到spring容器中找有没有一个叫example的bean，并且这个bean是View.class类型的？如果有，返回这个bean。　　</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4). 　viewResolver()</p>

<pre>

&nbsp;</pre>

<ol>
	<li>
	<p><code>public void viewResolver(ViewResolver viewResolver) {</code></p>
	</li>
	<li>
	<p><code>if (viewResolver instanceof ContentNegotiatingViewResolver) {</code></p>
	</li>
	<li>
	<p><code>throw new BeanInitializationException(</code></p>
	</li>
	<li>
	<p><code>&quot;addViewResolver cannot be used to configure a ContentNegotiatingViewResolver. Please use the method enableContentNegotiation instead.&quot;);</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
	<li>
	<p><code>this.viewResolvers.add(viewResolver);</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
</ol>

<p>　　这个方法想必看名字就知道了，它就是用来注册各种各样的视图解析器的，包括自己定义的。</p>

<h3><a name="t5"></a>6. configureContentNegotiation(ContentNegotiationConfigurer configurer)</h3>

<p>　　上面我们讲了configureViewResolvers 方法，假如在该方法中我们启用了内容裁决解析器，那么configureContentNegotiation(ContentNegotiationConfigurer configurer) 这个方法是专门用来配置内容裁决的一些参数的。这个比较简单，我们直接通过一个例子看：<br />
　　</p>

<pre>

&nbsp;</pre>

<ol>
	<li>
	<p><code>public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {</code></p>
	</li>
	<li>
	<p><code>/* 是否通过请求Url的扩展名来决定media type */</code></p>
	</li>
	<li>
	<p><code>configurer.favorPathExtension(true) </code></p>
	</li>
	<li>
	<p><code>/* 不检查Accept请求头 */</code></p>
	</li>
	<li>
	<p><code>.ignoreAcceptHeader(true)</code></p>
	</li>
	<li>
	<p><code>.parameterName(&quot;mediaType&quot;)</code></p>
	</li>
	<li>
	<p><code>/* 设置默认的media yype */</code></p>
	</li>
	<li>
	<p><code>.defaultContentType(MediaType.TEXT_HTML)</code></p>
	</li>
	<li>
	<p><code>/* 请求以.html结尾的会被当成MediaType.TEXT_HTML*/</code></p>
	</li>
	<li>
	<p><code>.mediaType(&quot;html&quot;, MediaType.TEXT_HTML)</code></p>
	</li>
	<li>
	<p><code>/* 请求以.json结尾的会被当成MediaType.APPLICATION_JSON*/</code></p>
	</li>
	<li>
	<p><code>.mediaType(&quot;json&quot;, MediaType.APPLICATION_JSON);</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
</ol>

<p>到这里我们就可以举个例子来进一步熟悉下我们上面讲的知识了，假如我们MVC的配置如下：</p>

<pre>

&nbsp;</pre>

<ol>
	<li>
	<p><code>@EnableWebMvc</code></p>
	</li>
	<li>
	<p><code>@Configuration</code></p>
	</li>
	<li>
	<p><code>public class MyWebMvcConfigurerAdapte extends WebMvcConfigurerAdapter {</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>@Override</code></p>
	</li>
	<li>
	<p><code>public void configureViewResolvers(ViewResolverRegistry registry) {</code></p>
	</li>
	<li>
	<p><code>registry.jsp(&quot;/WEB-INF/jsp/&quot;, &quot;.jsp&quot;);</code></p>
	</li>
	<li>
	<p><code>registry.enableContentNegotiation(new MappingJackson2JsonView());</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>@Override</code></p>
	</li>
	<li>
	<p><code>public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {</code></p>
	</li>
	<li>
	<p><code>configurer.favorPathExtension(true)</code></p>
	</li>
	<li>
	<p><code>.ignoreAcceptHeader(true)</code></p>
	</li>
	<li>
	<p><code>.parameterName(&quot;mediaType&quot;)</code></p>
	</li>
	<li>
	<p><code>.defaultContentType(MediaType.TEXT_HTML)</code></p>
	</li>
	<li>
	<p><code>.mediaType(&quot;html&quot;, MediaType.TEXT_HTML)</code></p>
	</li>
	<li>
	<p><code>.mediaType(&quot;json&quot;, MediaType.APPLICATION_JSON);</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
</ol>

<p>controller的代码如下:</p>

<pre>

&nbsp;</pre>

<ol>
	<li>
	<p><code>@Controller</code></p>
	</li>
	<li>
	<p><code>public class ExampleController {</code></p>
	</li>
	<li>
	<p><code>@RequestMapping(&quot;/test&quot;)</code></p>
	</li>
	<li>
	<p><code>public ModelAndView test() {</code></p>
	</li>
	<li>
	<p><code>Map&lt;String, String&gt; map = new HashMap();</code></p>
	</li>
	<li>
	<p><code>map.put(&quot;哈哈&quot;, &quot;哈哈哈哈&quot;);</code></p>
	</li>
	<li>
	<p><code>map.put(&quot;呵呵&quot;, &quot;呵呵呵呵&quot;);</code></p>
	</li>
	<li>
	<p><code>return new ModelAndView(&quot;test&quot;, map);</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
</ol>

<p>在WEB-INF/jsp目录下创建一个test.jsp文件，内容随意。现在启动tomcat，在浏览器输入以下链接：<a href="http://localhost:8080/test.json" rel="nofollow" target="_blank">http://localhost:8080/test.json</a>，浏览器内容返回如下：</p>

<pre>

&nbsp;</pre>

<ol>
	<li>
	<p><code>{</code></p>
	</li>
	<li>
	<p><code>&quot;哈哈&quot;:&quot;哈哈哈哈&quot;,</code></p>
	</li>
	<li>
	<p><code>&quot;呵呵&quot;:&quot;呵呵呵呵&quot;</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
</ol>

<p>在浏览器输入<a href="http://localhost:8080/test" rel="nofollow" target="_blank">http://localhost:8080/test</a>&nbsp;或者<a href="http://localhost:8080/test.html" rel="nofollow" target="_blank">http://localhost:8080/test.html</a>，内容返回如下：</p>

<pre>
<code>this is test.jsp
</code></pre>

<p>　<br />
显然，两次使用了不同的视图解析器，那么底层到底发生了什么？在配置里我们注册了两个视图解析器：ContentNegotiatingViewResolver 和 InternalResourceViewResolver，还有一个默认视图：MappingJackson2JsonView。controller执行完毕之后返回一个ModelAndView，其中视图的名称为example1。</p>

<pre>

&nbsp;</pre>

<ol>
	<li>
	<p><code>1.返回首先会交给ContentNegotiatingViewResolver 进行视图解析处理，而ContentNegotiatingViewResolver 会先把视图名example1交给它持有的所有ViewResolver尝试进行解析（本实例中只有InternalResourceViewResolver），</code></p>
	</li>
	<li>
	<p><code>2.根据请求的mediaType，再将example1.mediaType（这里是example1.json 和example1.html）作为视图名让所有视图解析器解析一遍，两步解析完毕之后会获得一堆候选的List&lt;View&gt; 再加上默认的MappingJackson2JsonView ，</code></p>
	</li>
	<li>
	<p><code>3.根据请求的media type从候选的List&lt;View&gt; 中选择一个最佳的返回，至此视图解析完毕。</code></p>
	</li>
</ol>

<p>现在就可以理解上例中为何请求链接加上.json 和不.json 结果会不一样。当加上.json 时，表示请求的media type 为MediaType.APPLICATION_JSON，而InternalResourceViewResolver 解析出来的视图的ContentType与其不符，而与MappingJackson2JsonView 的ContentType相符，所以选择了MappingJackson2JsonView 作为视图返回。当不加.json 请求时，默认的media type 为MediaType.TEXT_HTML，所以就使用了InternalResourceViewResolver解析出来的视图作为返回值了。我想看到这里你已经大致可以自定义视图了。</p>
