<h1>springboot过滤器和拦截器的实现和区别</h1>

<h2>前言</h2>

<p>springmvc中有两种很普遍的AOP实现：</p>

<p>1.过滤器（Filter）<br />
2.拦截器（Interceptor）</p>

<p>所以主要讲解filter和interceptor的简单实现和它们之间到底有什么区别</p>

<h2>Filter的简单实现</h2>

<p>字面意思：过滤器就是过滤的作用，在web开发中过滤一些我们指定的url<br />
那么它能帮我们过滤什么呢？<br />
那功能可就多了：<br />
比如过拦截掉我们不需要的接口请求<br />
修改请求（request）和响应（response）内容<br />
完成CORS跨域请求等等</p>

<h3>方式一：注解方式</h3>

<p>现在我们来实现一个简单的过滤器：</p>

<p>可以新建一个filter包，随着项目的扩大过滤器会越来越多<br />
在这里我新建了一个TestFilter类，实现Filter接口</p>

<p>@Component<br />
@WebFilter(urlPatterns = &quot;/Blogs&quot;,filterName = &quot;blosTest&quot;)<br />
public class TestFilter implements Filter{}<br />
我们一步步来<br />
1.@Component就是把这个类注入到IOC容器中<br />
2.@WebFilter(urlPatterns = &quot;/Blogs&quot;,filterName = &quot;blosTest&quot;)说明这是一个web过滤器，它拦截的url为/Blogs，过滤器名字为blogsTest</p>

<p>下面贴出实现接口之后的三个重构方法：</p>

<p>@Override<br />
&nbsp; &nbsp; public void init(FilterConfig filterConfig) throws ServletException {<br />
&nbsp;<br />
&nbsp; &nbsp; }<br />
&nbsp;<br />
&nbsp; &nbsp; @Override<br />
&nbsp; &nbsp; public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {<br />
&nbsp; &nbsp; &nbsp; &nbsp; HttpServletRequest request= (HttpServletRequest) servletRequest;<br />
&nbsp; &nbsp; &nbsp; &nbsp; HttpServletResponse response = (HttpServletResponse) servletResponse;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.printf(&quot;过滤器实现&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; filterChain.doFilter(request,response);<br />
&nbsp; &nbsp; }<br />
&nbsp;<br />
&nbsp; &nbsp; @Override<br />
&nbsp; &nbsp; public void destroy() {<br />
&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>初始化（init）和摧毁（destroy）方法一般不会用到，具体使用看下源码便知</p>

<p>doFilter（）是过滤器的核心<br />
注意：在实现接口方法之后，我们要转换request和response类型至HttpServlet，否则接下去的操作可能会报错。<br />
如果过滤通过，执行filterChain.doFilter(request,response);<br />
说明这个url已经经过了我们的Filter<br />
其他不要设置，我们执行看下结果：</p>

<p>可以看到，只需要一个类我们就实现了一个简单的过滤器</p>

<h3>方式二：配置启动类</h3>

<h3>当然可以不用注解的方式，配置启动类</h3>

<p>//过滤器<br />
&nbsp; &nbsp; @Bean<br />
&nbsp; &nbsp; public FilterRegistrationBean filterRegistrationBean(){<br />
&nbsp; &nbsp; &nbsp; &nbsp; FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();<br />
&nbsp; &nbsp; &nbsp; &nbsp; List&lt;String&gt; urlPatterns = new ArrayList&lt;String&gt;();<br />
&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; TestFilter testFilter = new TestFilter(); &nbsp; //new过滤器<br />
&nbsp; &nbsp; &nbsp; &nbsp; urlPatterns.add(&quot;/Blogs&quot;); &nbsp; &nbsp; &nbsp;//指定需要过滤的url<br />
&nbsp; &nbsp; &nbsp; &nbsp; filterRegistrationBean.setFilter(testFilter); &nbsp; &nbsp; &nbsp; //set<br />
&nbsp; &nbsp; &nbsp; &nbsp; filterRegistrationBean.setUrlPatterns(urlPatterns); &nbsp; &nbsp; //set<br />
&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; return filterRegistrationBean;<br />
&nbsp; &nbsp; }</p>

<p>这也是可以的，本人其实还是比较推荐这种方式添加过滤器</p>

<h2>Interceptor的简单实现</h2>

<p>拦截器的实现比过滤器稍微复杂一点<br />
我们同样可以新建一个interceptor包<br />
在里面新建一个名为MyInterceptor的类</p>

<p>public class MyInterceptor implements HandlerInterceptor {}<br />
这个类实现了HandleInterceptor接口<br />
直接贴类代码，我会在代码中注释功能</p>

<p>public class MyInterceptor implements HandlerInterceptor {<br />
&nbsp; &nbsp; //在请求处理之前进行调用（Controller方法调用之前<br />
&nbsp; &nbsp; @Override<br />
&nbsp; &nbsp; public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o) throws Exception {<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.printf(&quot;preHandle被调用&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; return true; &nbsp; &nbsp;//如果false，停止流程，api被拦截<br />
&nbsp; &nbsp; }<br />
&nbsp;<br />
&nbsp; &nbsp; //请求处理之后进行调用，但是在视图被渲染之前（Controller方法调用之后）<br />
&nbsp; &nbsp; @Override<br />
&nbsp; &nbsp; public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception {<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;postHandle被调用&quot;);<br />
&nbsp; &nbsp; }<br />
&nbsp;<br />
&nbsp; &nbsp; //在整个请求结束之后被调用，也就是在DispatcherServlet 渲染了对应的视图之后执行（主要是用于进行资源清理工作）<br />
&nbsp; &nbsp; @Override<br />
&nbsp; &nbsp; public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception {<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;afterCompletion被调用&quot;);<br />
&nbsp; &nbsp; }<br />
}</p>

<p>它依次实现了三个方法</p>

<h3>相比过滤器，拦截器还需要在springmvc中注入</h3>

<p>所以我们打开启动类，写入以下代码</p>

<p>public class WarApplication {<br />
&nbsp;<br />
&nbsp; &nbsp; public static void main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; SpringApplication.run(WarApplication.class, args);<br />
&nbsp; &nbsp; }<br />
&nbsp;<br />
&nbsp; &nbsp; //mvc控制器<br />
&nbsp; &nbsp; //@Configuration<br />
&nbsp; &nbsp; static class WebMvcConfigurer extends WebMvcConfigurerAdapter{<br />
&nbsp; &nbsp; &nbsp; &nbsp; //增加拦截器<br />
&nbsp; &nbsp; &nbsp; &nbsp; public void addInterceptors(InterceptorRegistry registry){<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; registry.addInterceptor(new MyInterceptor()) &nbsp; &nbsp;//指定拦截器类<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .addPathPatterns(&quot;/Handles&quot;); &nbsp; &nbsp; &nbsp; &nbsp;//指定该类拦截的url<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
&nbsp; &nbsp; }<br />
}<br />
这里我在/Handles这个url中进行拦截<br />
代码写完了，来看下结果</p>

<p>clipboard.png</p>

<p>clipboard.png</p>

<p>当进入指定url时，我们执行到了拦截器<br />
接下来就可以根据需求去使用拦截器了</p>

<h2>区别</h2>

<p>过滤器和拦截器非常相似，但是它们有很大的区别<br />
最简单明了的区别就是过滤器可以修改request，而拦截器不能<br />
过滤器需要在servlet容器中实现，拦截器可以适用于javaEE，javaSE等各种环境<br />
拦截器可以调用IOC容器中的各种依赖，而过滤器不能<br />
过滤器只能在请求的前后使用，而拦截器可以详细到每个方法<br />
区别很多，大家可以去查下</p>

<p>总的来说<br />
过滤器就是筛选出你要的东西，比如requeset中你要的那部分<br />
拦截器在做安全方面用的比较多，比如终止一些流程<br />
网上有一张图片很不错，这里拷过来给大家看一下</p>

<p>clipboard.png</p>

<p>以上便是springboot中过滤器和拦截器的实现和区别；<br />
觉得还可以的请点个赞，赞不了也可以收藏下；<br />
总之，谢谢阅读～</p>
