<h1>配置虚拟路径</h1>

<h2>&lt;Context path=&quot;/files&quot; docBase=&quot;D:\upload&quot;&gt;&lt;/Context&gt;</h2>

<p>发布到tomcat中的项目有在上传文件后，再下载时候出场，通过配置tomcat的虚拟目录即可解决：&nbsp;<br />
在tomcat中的conf目录中，在server.xml中的，&lt;host/&gt;节点中添加：&nbsp;<br />
&lt;Context path=&quot;/files&quot; docBase=&quot;D:\upload&quot;&gt;&lt;/Context&gt;&nbsp;<br />
<br />
下面简单介绍一下tomcat中三种部署项目的方法,这也涉及到了上面的虚拟目录。&nbsp;<br />
来源：http://www.newsmth.net/pc/pccon.php?id=10003032&amp;nid=402938&nbsp;<br />
第一种方法：在tomcat中的conf目录中，在server.xml中的，&lt;host/&gt;节点中添加：&nbsp;<br />
&lt;Context path=&quot;/hello&quot; docBase=&quot;D:eclipse3.2.2forwebtoolsworkspacehelloWebRoot&quot; debug=&quot;0&quot; privileged=&quot;true&quot;&gt;&nbsp;<br />
&lt;/Context&gt;&nbsp;<br />
至于Context 节点属性，可详细见相关文档。&nbsp;<br />
<br />
第二种方法：将web项目文件件拷贝到webapps 目录中。&nbsp;<br />
<br />
第三种方法：很灵活，在conf目录中，新建 Catalina（注意大小写）＼localhost目录，在该目录中新建一个xml文件，名字可以随意取，只要和当前文件中的文件名不重复就行了，该xml文件的内容为：&nbsp;<br />
&lt;Context path=&quot;/hello&quot; docBase=&quot;D:eclipse3.2.2forwebtoolsworkspacehelloWebRoot&quot; debug=&quot;0&quot; privileged=&quot;true&quot;&gt;&nbsp;<br />
&lt;/Context&gt;&nbsp;<br />
<br />
第3个方法有个优点，可以定义别名。服务器端运行的项目名称为path，外部访问的URL则使用XML的文件名。这个方法很方便的隐藏了项目的名称，对一些项目名称被固定不能更换，但外部访问时又想换个路径，非常有效。&nbsp;<br />
<br />
第2、3还有优点，可以定义一些个性配置，如数据源的配置等。&nbsp;<br />
<br />
还有一篇 详细的&nbsp;<br />
<br />
此处主要讲述Tomcat部署发布JSP应用程序的三种方法&nbsp;<br />
&nbsp;&nbsp;&nbsp; 1、直接放到Webapps目录下&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp; Tomcat的Webapps目录是Tomcat默认的应用目录，当服务器启动时，会加载所有这个目录下的应用。也可以将JSP程序打包成一个 war包放在目录下，服务器会自动解开这个war包，并在这个目录下生成一个同名的文件夹。一个war包就是有特性格式的jar包，它是将一个Web程序的所有内容进行压缩得到。具体如何打包，可以使用许多开发工具的IDE环境，如Eclipse、NetBeans、ant、JBuilder等。也可以用 cmd 命令：jar -cvf applicationname.war package.*；&nbsp;<br />
甚至可以在程序执行中打包：&nbsp;<br />
try{&nbsp;<br />
string strjavahome = system.getproperty(&quot;java.home&quot;);&nbsp;<br />
strjavahome = strjavahome.substring(0,strjavahome.lastindexof(\\))+&quot;\\bin\\&quot;;&nbsp;<br />
runtime.getruntime().exec(&quot;cmd /c start &quot;+strjavahome+&quot;jar cvf hello.war c:\\tomcat5.0\\webapps\\root\\*&quot;);&nbsp;<br />
}&nbsp;&nbsp;<br />
catch(exception e){system.out.println(e);}&nbsp;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp; webapps这个默认的应用目录也是可以改变。打开Tomcat的conf目录下的server.xml文件，找到下面内容：&nbsp;<br />
&lt;Host name=&quot;localhost&quot; debug=&quot;0&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeloy=&quot;true&quot; xmlValidation=&quot;falase&quot; xmlNamespaceAware=&quot;false&quot;&gt;&nbsp;<br />
<br />
&nbsp;&nbsp; 2、在server.xml中指定&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp; 在Tomcat的配置文件中，一个Web应用就是一个特定的Context，可以通过在server.xml中新建Context里部署一个JSP应用程序。打开server.xml文件，在Host标签内建一个Context，内容如下。&nbsp;<br />
&lt;Context path=&quot;/myapp&quot; reloadable=&quot;true&quot; docBase=&quot;D:\myapp&quot; workDir=&quot;D:\myapp\work&quot;/&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp; 其中path是虚拟路径，docBase是JSP应用程序的物理路径，workDir是这个应用的工作目录，存放运行是生成的于这个应用相关的文件。&nbsp;<br />
<br />
&nbsp;&nbsp; 3、创建一个Context文件&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp; 以上两种方法，Web应用被服务器加载后都会在Tomcat的conf\catalina\localhost目录下生成一个XML文件，其内容如下：&nbsp;<br />
&lt;Context path=&quot;/admin&quot; docBase=&quot;${catalina.home}/server/webapps/admin&quot; debug=&quot;0&quot; privileged=&quot;true&quot;&gt;&lt;/Context&gt;&nbsp;<br />
可以看出，文件中描述一个应用程序的Context信息，其内容和server.xml中的Context信息格式是一致的，文件名便是虚拟目录名。您可以直接建立这样的一个xml文件，放在Tomcat的conf\catalina\localhost目录下。例子如下：&nbsp;<br />
注意：删除一个Web应用同时也要删除webapps下相应的文件夹祸server.xml中相应的Context，还要将Tomcat的conf&nbsp;<br />
\catalina\localhost目录下相应的xml文件删除。否则Tomcat仍会岸配置去加载。。。</p>
