<h1>CAS 中央认证服务流程[译]</h1>

<h2>约定：</h2>

<ul>
	<li>应用：指代网站等服务，原文中的Service Provider。</li>
	<li>站点：网站类型的应用，原文中的Service Provider site。</li>
</ul>

<h2>CAS 服务器对应的路径</h2>

<ul>
	<li>/cas/: 重定向至 /cas/login</li>
	<li>/cas/login: 登录</li>
	<li>/cas/logout: 登出</li>
	<li>/cas/validate: CAS 1.0 版本的ticket 验证</li>
	<li>/cas/serviceValidate: CAS 2.0 版本的ticket 验证</li>
	<li>/cas/proxyValidate: CAS 2.0版本的ticket/代理ticket 验证</li>
	<li>/cas/proxy: CAS 2.0 代理ticket服务</li>
	<li>/cas/samlValidate: SAML 服务ticket验证（Jasig CAS feature, not in CAS protocol）</li>
</ul>

<h2>简化的登录认证流程</h2>

<p><img alt="登录认证流程" src="http://infrastructure.tamu.edu/images/CASflow.jpg" /></p>

<h4>开始之前：对应用启用CAS</h4>

<p>要使用CAS 进行身份认证，需要以下步骤：</p>

<ul>
	<li>将应用注册到CAS 服务器。</li>
	<li>在后台代码中添加CAS 客户端。CAS client 代码有许多语言版本，这让应用提供者可以选择适合的语言版本。</li>
	<li>配置CAS client, 指定应用中被CAS 保护的部分，以及会被重定向到CAS 的参数值。可能的参数值将在下面解释。</li>
</ul>

<h3>第一步：用户访问注册到CAS 的应用</h3>

<p>当用户访问注册到CAS 的站点时，应用中的CAS client 重定向用户到CAS 服务 /cas/login。</p>

<p>站点的标识将作为 service 这个参数包含在CAS 重定向URL 中，以便让CAS 知晓是哪个应用在请求身份认证，以及认证成功后重定向回要访问的站点。</p>

<p>http(s)://cas_server/cas/login?service=http(s)://your_server/yourApplication</p>

<h3>第二步：用户登录到CAS</h3>

<p>用户首次被重定向/cas/login 时，CAS 会呈现一个登陆界面，要求用户填写登录认证信息。填写完成后，包含登录认证信息的表单将被POST 到 /cas/login。</p>

<h3>第三步：CAS 验证登录认证信息</h3>

<p>CAS 将登录认证信息提交至认证数据库进行验证。如果验证通过，CAS 检索出需要的用户属性，包含在给应用的response 中。 同时，CAS 用这些属性生成一个Ticket Granting Ticket，TGT 将被存储在用户浏览器的Cookie 中。</p>

<h3>第四步：CAS 检验Service Provide 是否已注册</h3>

<p>用户验证成功后，CAS 检验 service 这个参数代表的应用是否在注册白名单中。若否，CAS 将给出未注册的错误信息。</p>

<h3>第五步： CAS 生成Server Ticket, 重定向浏览器回到应用</h3>

<p>若通过了第四步检验，CAS 生成Server Ticket，将其作为参数夹带在重定向URL 中，浏览器回到应用。</p>

<p>e.g. http(s)://your_server/yourApplication?ticket=ST-9781-123cvUwGGkp980</p>

<pre>
<code>译注：ticket 也可以用返回的其他参数替代，例如将 sessionID 作为 ticket 使用。  
http(s)://your_server/yourApplication?sessionid=ST-9781-123cvUwGGkp980 </code></pre>

<h3>第六步：应用验证 Service Ticket</h3>

<p>用户再次请求应用时，CAS client打开一个至/cas/serviceValidate 的新连接，将Server Ticket 包含其中。 CAS 检验Server Ticket 是否有效（是否存在于CAS的数据库中，时间不超过两分钟，指向的站点一致）。若验证有效，CAS 返回用户的username， 以及应用期望的其他用户信息。</p>

<h4>访问注册到相同CAS 的站点</h4>

<p>如果用户在进行过CAS 身份认证之后，再访问注册到该CAS 的第二个站点，会是这样：</p>

<ul>
	<li>重定向至/cas/login</li>
	<li>因为Cookie 中的TGT 的Domain 相同，所以TGT 会被包含在request 中</li>
	<li>CAS 验证TGT 是否在数据库中，并且在过去的6小时内使用过。</li>
	<li>若是，则CAS 认为该用户已经进行过身份验证，跳过以上第二、三步；</li>
	<li>若否，则CAS 将作为初次登录处理，按第二、三步顺序执行。</li>
</ul>

<h2>应用重定向到CAS 的可选参数</h2>

<ul>
	<li>
	<p>service, 指定CAS登录成功后跳转回的Url。<br />
	e.g. https://server/cas/login?service=http%3A%2F%2FmySite.edu&nbsp;<br />
	若无，则显示一个成功登录界面。</p>
	</li>
	<li>
	<p>renew, Boolean值，指定是否无视之前的登录，默认为False，只在需要设置true时存在。<br />
	当设置为Flase 时，CAS 检查此用户是否存在单点登录session（Cookie中的TGT）。若无，则进行身份验证；若有，则跳过。 当设置为True 时，CAS 将无视用户是否存在单点登录session，始终进行身份验证。 e.g. https://server/cas/login?service=http%3A%2F%2FmySite.edu&amp;renew=true</p>
	</li>
	<li>
	<p>gateway, Boolean值，指定应用 是否希望进行单点登录验证，默认为False，只在需要设置true 时存在。<br />
	当设置为False 时，CAS 检查此用户是否存在单点登录session。</p>

	<ul>
		<li>若无，则进行身份验证；</li>
		<li>若有，则跳过。</li>
	</ul>

	<p>当设置为True 时，CAS 检查此用户是否存在单点登录session。</p>

	<ul>
		<li>若有，CAS 生成Service Ticket, 将其作为参数夹带在重定向URL中，浏览器回到应用 site。</li>
		<li>若无，CAS 直接重定向回应用 site，不验证也不携带Service Ticket。</li>
	</ul>

	<p>e.g. https://server/cas/login?service=http%3A%2F%2FmySite.edu&amp;gateway=true</p>

	<p>gateway 参数用来展示无需登录的页面，站点也可以通过此参数区别呈现登录与未登录的同一页面内容。</p>
	</li>
</ul>

<h2>What is Cookie</h2>

<p>Cookie 是个小文本文件，由浏览器储存在用户计算机。Cookie 是纯文本，不包含可执行代码。</p>

<p>当Web Server 返回的Http response中含有 Set-Cookie 时，一个Cookie 就会被创建。以后每次访问该站点时，储存的Cookie 都会被附加在request 中。</p>

<p>Set-Cookie 头部最简形式为 cookieName=cookieValue ，也可选得包含以下参数：</p>

<ul>
	<li>expires 指定过期的时间戳。如果未指定，则与session 的生存周期一致。</li>
	<li>domain 指定该cookie 所属站点，下次访问该站点时将被附加在request 中。其默认且唯一值为站点的host-name，或者不设置。</li>
	<li>path 指定该cookie 所属路径，下次访问该站点该路径时将被附加在request 中（子路径会继承父路径的cookie）。</li>
	<li>secure 指定该cookie只能通过加密连接发送，如SSL、HTTPS 协议。</li>
</ul>

<p>CAS 生成的TGT 也作为cookie 存储，但不同的是其 path 并不是 /cas/login, 而是 /cas，这样对于CAS 下的所有URI 都会发送这个TGT。</p>

<p>被CAS server 创建并存储的cookie 有这些：</p>

<ul>
	<li>CASTGC - ticket granting cookie，值为TGT</li>
	<li>csrftoken - 防止CSRF 攻击（跨站请求伪造）</li>
	<li>sessionid - session cookie</li>
	<li>CASMFA - 多重认证token</li>
</ul>
