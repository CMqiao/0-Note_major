<h1>jQuery.on() 函数详解</h1>

<p><iframe align="center,center" frameborder="0" height="80" id="iframeu1349697_0" name="iframeu1349697_0" scrolling="no" src="http://pos.baidu.com/lcsm?conwid=468&amp;conhei=80&amp;rdid=1349697&amp;dc=3&amp;di=u1349697&amp;dri=0&amp;dis=0&amp;dai=1&amp;ps=326x296&amp;enu=encoding&amp;dcb=___adblockplus&amp;dtm=HTML_POST&amp;dvi=0.0&amp;dci=-1&amp;dpt=none&amp;tsr=0&amp;tpr=1523169415267&amp;ti=jQuery.on()%20%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3%20-%20CodePlayer&amp;ari=2&amp;dbv=2&amp;drs=1&amp;pcs=1536x746&amp;pss=1536x746&amp;cfv=0&amp;cpl=4&amp;chi=1&amp;cce=true&amp;cec=UTF-8&amp;tlm=1523169415&amp;rw=746&amp;ltu=http%3A%2F%2Fwww.365mini.com%2Fpage%2Fjquery-on.htm&amp;ltr=https%3A%2F%2Fwww.baidu.com%2Flink%3Furl%3Dk0UqeEA6CgzbnTdanayrVTAuFXS0P1XOidK5bu3g3HcwZVB3WDCRU2DR890y0JMv7by5IWi_0QQYP5OwH4EcY_%26wd%3D%26eqid%3Da195b4ee0004eed6000000055ac9b881&amp;ecd=1&amp;uc=1536x837&amp;pis=-1x-1&amp;sr=1536x864&amp;tcn=1523169415&amp;qn=c14a4ad08fb0447d&amp;tt=1523169415248.22.233.236" width="468"></iframe></p>

<p><code>on()</code>函数用于<strong>为指定元素的一个或多个事件绑定事件处理函数</strong>。</p>

<p>此外，你还可以额外传递给事件处理函数一些所需的数据。</p>

<p>从jQuery 1.7开始，<code>on()</code>函数提供了绑定事件处理程序所需的所有功能，用于统一取代以前的bind()、 delegate()、 live()等事件函数。</p>

<p><code>on()</code>支持直接在目标元素上绑定事件，也支持在目标元素的祖辈元素上委托绑定。在事件委托绑定模式下，即使是执行<code>on()</code>函数之后新添加的元素，只要它符合条件，绑定的事件处理函数也对其有效。</p>

<p>此外，该函数可以为同一元素、同一事件类型绑定多个事件处理函数。触发事件时，jQuery会按照绑定的先后顺序依次执行绑定的事件处理函数。</p>

<p>要删除通过<code>on()</code>绑定的事件，请使用<a href="http://www.365mini.com/page/jquery-off.htm" target="_blank" title="jQuery.off()函数详解">off()</a>函数。如果要附加一个事件，只执行一次，然后删除自己，请使用one()函数。</p>

<p>该函数属于<code>jQuery</code>对象(实例)。</p>

<h3>语法</h3>

<p>jQuery&nbsp;1.7 新增该函数。其主要有以下两种形式的用法：</p>

<p><strong>用法一</strong>：</p>

<pre>
jQueryObject.on( events [, selector ] [, data ], handler )</pre>

<p><strong>用法二</strong>：</p>

<pre>
jQueryObject.on( eventsMap [, selector ] [, data ] )</pre>

<h3>参数</h3>

<table>
	<tbody>
		<tr>
			<th>参数</th>
			<th>描述</th>
		</tr>
		<tr>
			<td>events</td>
			<td>String类型一个或多个用空格分隔的事件类型和<a href="http://www.365mini.com/page/jquery-event-namespace.htm" target="_blank" title="jQuery Event.namespace 属性详解">可选的命名空间</a>，例如&quot;click&quot;、&quot;focus click&quot;、&quot;keydown.myPlugin&quot;。</td>
		</tr>
		<tr>
			<td>eventsMap</td>
			<td>Object类型一个Object对象，其每个属性对应事件类型和可选的命名空间(参数<code>events</code>)，属性值对应绑定的事件处理函数(参数<code>handler</code>)。</td>
		</tr>
		<tr>
			<td>selector</td>
			<td>可选/String类型一个jQuery选择器，用于指定哪些后代元素可以触发绑定的事件。如果该参数为<code>null</code>或被省略，则表示当前元素自身绑定事件(实际触发者也可能是后代元素，只要事件流能到达当前元素即可)。</td>
		</tr>
		<tr>
			<td>data</td>
			<td>可选/任意类型触发事件时，需要通过<a href="http://www.365mini.com/page/jquery-event-data.htm" target="_blank" title="jQuery Event.data 属性详解">event.data</a>传递给事件处理函数的任意数据。</td>
		</tr>
		<tr>
			<td>handler</td>
			<td>Function类型指定的事件处理函数。</td>
		</tr>
	</tbody>
</table>

<p>关于参数<code>events</code>中可选的命名空间，请参考最下面的示例代码。</p>

<p>关于参数<code>selector</code>，你可以简单地理解为：如果该参数等于<code>null</code>或被省略，则为当前匹配元素绑定事件；否则就是为当前匹配元素的后代元素中符合<code>selector</code>选择器的元素绑定事件。</p>

<p>参数<code>handler</code>中的<code>this</code>指向当前匹配元素的后代元素中触发该事件的DOM元素。如果参数<code>selector</code>等于<code>null</code>或被省略，则<code>this</code>指向当前匹配元素(也就是该元素)。</p>

<p><code>on()</code>还会为<code>handler</code>传入一个参数：表示当前事件的<a href="http://www.365mini.com/page/tag/jquery-event-object" target="_blank" title="jQuery Event对象的属性和方法">Event对象</a>。</p>

<p>参数<code>handler</code>的返回值与DOM原生事件的处理函数返回值作用一致。例如&quot;submit&quot;(表单提交)事件的事件处理函数返回<code>false</code>，可以阻止表单的提交。</p>

<p>如果事件处理函数<code>handler</code>仅仅只为返回<code>false</code>值，可以直接将<code>handler</code>设为<code>false</code>。</p>

<h3>返回值</h3>

<p><code>on()</code>函数的返回值为jQuery类型，返回当前jQuery对象本身。</p>

<p><strong>重要说明</strong>：</p>

<p>如果传递了<code>selector</code>参数，那么<code>on()</code>函数并<strong>不是</strong>为当前jQuery对象匹配的元素绑定事件处理函数，而是为它们的后代元素中符合选择器<code>selector</code>参数的元素绑定事件处理函数。<code>on()</code>函数并不是直接为这些后代元素挨个绑定事件，而是委托给当前jQuery对象的匹配元素来处理。由于DOM 2级的事件流机制，当后代元素<code>selector</code>触发事件时，该事件会在事件冒泡中传递给其所有的祖辈元素，当事件流传递到当前匹配元素时，jQuery会判断是哪个后代元素触发了事件，如果该元素符合选择器<code>selector</code>，jQuery就会捕获该事件，从而执行绑定的事件处理函数。</p>

<p>通俗易懂地说，如果我们希望给页面上所有的&lt;P&gt;标签绑定click事件处理函数，我们可以在每个P标签上直接分别绑定click事件处理函数。例如：</p>

<pre>
// 为所有P元素分别绑定click事件处理函数handler
$(&quot;p&quot;).on(&quot;click&quot;, handler);</pre>

<p>我们也可以在这些P标签的任意一个公共祖辈元素上绑定事件委托机制，利用DOM的事件冒泡机制来统一委托处理。当我们触发了某个元素的click事件，JS会依次通知该元素及其&quot;父辈&quot;元素、&quot;爷爷辈&quot;元素&hellip;&hellip;直到最顶部的document对象为止，如果这些元素上绑定了click事件处理函数就会依次执行。</p>

<pre>
// 在body元素上绑定click事件处理函数handler，如果这个click事件是由其后代的P元素触发的，就执行handler
$(document.body).on(&quot;click&quot;, &quot;p&quot;, handler);</pre>

<p>在这里的示例中，事件委托机制就是，我们不为每个P元素直接绑定click事件处理函数，而是委托给其某个公共的祖辈元素(此处示例中为<code>document.body</code>)，&quot;告诉&quot;他：如果接收到了click事件触发通知，并且这个click事件是由我们这些P元素其中之一触发的，就执行祖辈元素上委托绑定的事件处理函数。</p>

<p><em>注意</em>：&quot;focus&quot;、&quot;blur&quot;等部分事件不支持冒泡，使用事件委托机制将无效。不过，他们一般也有对应的支持冒泡的事件。例如与&quot;focus&quot;对应的&quot;focusin&quot;，与&quot;blur&quot;对应的&quot;focusout&quot;。此外，我们也可以使用<a href="http://www.365mini.com/page/jquery-event-stoppropagation.htm" target="_blank" title="jQuery Event.stopPropagation() 函数详解">event.stopPropagation()</a>方法，让当前触发的事件停止冒泡。</p>

<h3>示例&amp;说明</h3>

<p>以点击事件(&quot;click&quot;)为例，以下是jQuery中事件函数的常规用法(某些函数也存在其它形式的用法，此处暂不列出)：</p>

<pre>
// 这里的选择器selector用于指定可以触发事件的元素
// 这里的选择器ancestor应是selector的祖辈元素，selector触发的事件可以被其祖辈元素在事件流中捕获，从而以&quot;代理&quot;的形式触发事件。

// jQuery 1.0+ (1.4.3+支持参数data)
$(&quot;selector&quot;).click( [ data ,] handler );

// jQuery 1.0+ (1.4.3+支持参数data)
$(&quot;selector&quot;).bind( &quot;click&quot; [, data ], handler );

// jQuery 1.3+ (1.4+支持参数data)
$(&quot;selector&quot;).live( &quot;click&quot; [, data ], handler );

// jQuery 1.4.2+
$(&quot;ancestor&quot;).delegate( &quot;selector&quot;, &quot;click&quot; [, data ], handler );

// jQuery 1.7+
$(&quot;ancestor&quot;).on( &quot;click&quot;, &quot;selector&quot; [, data ], handler );</pre>

<p>请参考下面这段初始HTML代码：</p>

<pre>
&lt;div id=&quot;n1&quot;&gt;
&nbsp; &nbsp; &lt;p id=&quot;n2&quot;&gt;&lt;span&gt;CodePlayer&lt;/span&gt;&lt;/p&gt;
&nbsp; &nbsp; &lt;p id=&quot;n3&quot;&gt;&lt;span&gt;专注于编程开发技术分享&lt;/span&gt;&lt;/p&gt;
&nbsp; &nbsp; &lt;em id=&quot;n4&quot;&gt;http://www.365mini.com&lt;/em&gt;
&lt;/div&gt;
&lt;p id=&quot;n5&quot;&gt;Google&lt;/p&gt;</pre>

<p>我们为&lt;div&gt;中的所有&lt;p&gt;元素绑定点击事件：</p>

<pre>
// 为div中的所有p元素绑定click事件处理程序
// 只有n2、n3可以触发该事件
$(&quot;div&quot;).on(&quot;click&quot;, &quot;p&quot;, function(){
&nbsp; &nbsp; // 这里的this指向触发点击事件的p元素(Element)
&nbsp; &nbsp; alert( $(this).text() );
});</pre>

<p><a href="http://www.365mini.com/diy.php?f=jquery-on-demo" target="_blank" title="运行代码">运行代码</a>(其他代码请自行复制到演示页面运行)</p>

<p>如果要绑定所有的&lt;p&gt;元素，你可以编写如下jQuery代码：</p>

<pre>
//为所有p元素绑定click事件处理程序(注意：这里省略了selector参数)
//n2、n3、n5均可触发该事件
$(&quot;p&quot;).on(&quot;click&quot;, function(event){
// 这里的this指向触发点击事件的p元素(Element)
&nbsp; &nbsp; alert( $(this).text() );
});</pre>

<p>此外，我们还可以同时绑定多个事件，并为事件处理函数传递一些附加的数据，我们可以通过jQuery为事件处理函数传入的参数<code>event</code>(Event事件对象)来进行处理：</p>

<pre>
var data = { id: 5, name: &quot;张三&quot; };

// 为n5绑定mouseenter mouseleave两个事件，并为其传入附加数据data
// 附加数据可以是任意类型
$(&quot;body&quot;).on(&quot;mouseenter mouseleave&quot;, &quot;#n5&quot;, data, function(event){
&nbsp; &nbsp; var $me = $(this);
&nbsp; &nbsp; var options = event.data; // 这就是传入的附加数据
&nbsp; &nbsp; if( event.type == &quot;mouseenter&quot;){
&nbsp; &nbsp; &nbsp; &nbsp; $me.html( &quot;你好，&quot; + options.name + &quot;!&quot;); &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; }else if(event.type == &quot;mouseleave&quot; ){
&nbsp; &nbsp; &nbsp; &nbsp; $me.html( &quot;再见!&quot;); &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
});</pre>

<p>此外，即使符合条件的元素是<code>on()</code>函数执行后新添加，绑定事件对其依然有效。同样以初始HTML代码为例，我们可以编写如下jQuery代码：</p>

<pre>
// 为div中的所有p元素绑定click事件处理程序
// 只有n2、n3可以触发该事件
$(&quot;div&quot;).on(&quot;click&quot;, &quot;p&quot;, function(event){
&nbsp; &nbsp; alert( $(this).text() );
});

// 后添加的n6也可以触发上述click事件，因为它也是div中的p元素
$(&quot;#n1&quot;).append(&#39;&lt;p id=&quot;n6&quot;&gt;上述绑定的click事件对此元素也生效!&lt;/p&gt;&#39;);</pre>

<p>参数<code>events</code>还支持为事件类型附加额外的命名空间。当为同一元素绑定多个相同类型的事件处理函数时。使用命名空间，可以在触发事件、移除事件时限定触发或移除的范围。</p>

<pre>
function clickHandler(event){
&nbsp; &nbsp; alert( &quot;触发时的命名空间:[&quot; + event.namespace + &quot;]&quot;);
}

var $p = $(&quot;p&quot;);

// A：为所有p元素绑定click事件，定义在foo和bar两个命名空间下
$p.on( &quot;click.foo.bar&quot;, clickHandler );

// B：为所有p元素绑定click事件，定义在test命名空间下
$p.on( &quot;click.test&quot;, clickHandler );

var $n2 = $(&quot;#n2&quot;);

// 触发所有click事件
$n2.trigger(&quot;click&quot;); // 触发A和B (event.namespace = &quot;&quot;)

// 触发定义在foo命名空间下的click事件
$n2.trigger(&quot;click.foo&quot;); // 触发A (event.namespace = &quot;foo&quot;)
// 触发定义在bar命名空间下的click事件
$n2.trigger(&quot;click.bar&quot;); // 触发A (event.namespace = &quot;bar&quot;)
// 触发同时定义在foo和bar两个命名空间下的click事件
$n2.trigger(&quot;click.foo.bar&quot;); // 触发A (event.namespace = &quot;bar.foo&quot;)

// 触发定义在test命名空间下的click事件
$n2.trigger(&quot;click.test&quot;); // 触发B (event.namespace = &quot;test&quot;)

// 移除所有p元素定义在foo命名空间下的click事件处理函数
$p.off( &quot;click.foo&quot; ); // 移除A</pre>

<p><code>on()</code>函数的参数<code>eventsMap</code>是一个对象，可以&quot;属性-值&quot;的方式指定多个&quot;事件类型-处理函数&quot;。对应的示例代码如下：</p>

<pre>
var data = { id: 5, name: &quot;张三&quot; };

var events = {
&nbsp; &nbsp; &quot;mouseenter&quot;: function(event){
&nbsp; &nbsp; &nbsp; &nbsp; $(this).html( &quot;你好，&quot; + event.data.name + &quot;!&quot;); &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; },
&nbsp; &nbsp; 
&nbsp; &nbsp; &quot;mouseleave&quot;: function(event){
&nbsp; &nbsp; &nbsp; &nbsp; $(this).html( &quot;再见!&quot;);
&nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; 
};

//为n5绑定mouseenter mouseleave两个事件，并为其传入附加数据data
$(&quot;body&quot;).on(events, &quot;#n5&quot;, data);</pre>

<p>&nbsp;</p>

<h2><a href="http://www.cnblogs.com/tanxu/p/5915644.html" id="cb_post_title_url">关于jquery的on，你怎么绑定就怎么解除</a></h2>

<p>基本上绑定时间可以统一成了on，不管你是不是动态进来的dom节点</p>

<p>live我们知道1.7的时候就已经废弃了，还在觉得live很好用的同学要注意了，别说live为什么不管用，因为废弃了。</p>

<p>如今统一了on的方式去绑定</p>

<p>1、如果不是动态加载进来的</p>

<p>&nbsp; &nbsp; 还是按照你的一贯思维，$(&quot;#aa&quot;).on(&quot;click&quot;,function(){});</p>

<p>　 on比较坑爹，每次执行该方法都会给你重新绑定一次，你最好是每一次执行前不管有用没用，你最好解绑一次 $(&quot;#aa&quot;).off(&quot;click&quot;)</p>

<p>2、如果动态加载进来的，借助委托机制到document或者body</p>

<p>　 $(document).on(&#39;click&#39;,&#39;#aa&#39;,function(){});</p>

<p>　 解除绑定时，请按照怎么绑定就怎么解除，不然无效，这里需要解除的方式是 &nbsp; $(document).off(&quot;click&quot;);</p>
