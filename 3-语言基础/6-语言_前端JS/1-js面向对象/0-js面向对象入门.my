<h1>JavaScript对象</h1>

<p>JavaScript是一种面向对象编程(OOP)语言。一种编程语言可以被称为面向对象的，它为开发者提供了四种基本功能：</p>

<ul>
	<li>
	<p>封装 -&nbsp;存储相关的信息，无论是数据或方法，还是对象</p>
	</li>
	<li>
	<p>聚合 -&nbsp;&nbsp;存储一个对象到另一个对象的内部</p>
	</li>
	<li>
	<p>继承 -&nbsp;类的能力依赖于另一个类(或类数)，用于其部分的属性和方法</p>
	</li>
	<li>
	<p>多态性 -&nbsp;编写函数或者方法，在各种不同的方式工作</p>
	</li>
</ul>

<p>对象是由属性。如果属性包含一个函数，它被认为是一个对象的方法，否则，该属性被认为是一个属性。</p>

<h2>对象属性：</h2>

<p>对象的属性可以是任何三种基本数据类型的，或者任何抽象数据类型，如另一个对象。对象属性通常是内部使用的对象的方法的变量，但也可以是用于整个页面全局可见的变量。</p>

<p>用于添加属性的目的语法是：</p>

<pre>
objectName.objectProperty = propertyValue;
</pre>

<h2>示例 :</h2>

<p>下面是一个简单的例子来说明如何利用&ldquo;称号&rdquo;的文件对象的属性来获取文档标题：</p>

<pre>
var str = document.title;
</pre>

<h2><br />
对象的方法：</h2>

<p>方法是让对象做某件事。一个函数和一个方法，所不同的是一个 function语句的一个独立的单元和方法被附加到对象，并可以通过这个关键字被引用之间的差别不大。</p>

<p>方法可用于一切从显示对象的屏幕上的内容，以对一组本地的属性和参数执行复杂的数学运算是有用的。</p>

<h2>例子：</h2>

<p>下面是一个简单的例子来说明如何使用write()文档对象的方法写在文档中的任何内容：</p>

<pre>
document.write(&quot;This is test&quot;);
</pre>

<h2>用户定义的对象：</h2>

<p>所有用户定义的对象和内置对象被称为对象的对象的后代。</p>

<h3>new&nbsp;操作符:</h3>

<p>new运算符用于创建对象的实例。要创建一个对象，new运算符后面是构造方法。</p>

<p>在下面的例子中，构造方法Object(), Array(), 和 Date().。这些构造函数是内置的 JavaScript 函数。</p>

<pre>
var employee = new Object();
var books = new Array(&quot;C++&quot;, &quot;Perl&quot;, &quot;Java&quot;);
var day = new Date(&quot;August 15, 1947&quot;);
</pre>

<h3><br />
Object()&nbsp;构造函数:</h3>

<p>构造函数是用来创建和初始化对象的函数。 JavaScript提供了一个特殊的构造函数调用Object()来构建的对象。Object()构造的返回值被分配给一个变量。</p>

<p>变量包含一个引用到新的对象。分配给该对象的属性是不变量，并且不使用var关键字来定义。</p>

<h3>示例 1:</h3>

<p>这个例子演示了如何创建一个对象：</p>

<pre>
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;User-defined objects&lt;/title&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
var book = new Object();   // Create the object
    book.subject = &quot;Perl&quot;; // Assign properties to the object
    book.author  = &quot;Mohtashim&quot;;
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
   document.write(&quot;Book name is : &quot; + book.subject + &quot;&lt;br&gt;&quot;);
   document.write(&quot;Book author is : &quot; + book.author + &quot;&lt;br&gt;&quot;);
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>

<p>&nbsp;</p>

<h3>示例 2:</h3>

<p>这个例子演示如何创建一个对象，一个用户定义的函数。此处this关键字用于指已传递给函数的对象：</p>

<pre>
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;User-defined objects&lt;/title&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
function book(title, author){
    this.title = title; 
    this.author  = author;
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
   var myBook = new book(&quot;Perl&quot;, &quot;Mohtashim&quot;);
   document.write(&quot;Book title is : &quot; + myBook.title + &quot;&lt;br&gt;&quot;);
   document.write(&quot;Book author is : &quot; + myBook.author + &quot;&lt;br&gt;&quot;);
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>

<p>&nbsp;</p>

<h2>定义方法的对象：</h2>

<p>前面的示例演示了如何构造函数创建对象并分配属性。但是，我们需要通过分配方法，以它来完成一个对象的定义。</p>

<h3>例子：</h3>

<p>下面是一个简单的例子来说明如何与一个对象添加一个函数：</p>

<pre>
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;User-defined objects&lt;/title&gt;
&lt;script type=&quot;text/javascript&quot;&gt;

// Define a function which will work as a method
function addPrice(amount){
    this.price = amount; 
}

function book(title, author){
    this.title = title; 
    this.author  = author;
    this.addPrice = addPrice; // Assign that method as property.
}

&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
   var myBook = new book(&quot;Perl&quot;, &quot;Mohtashim&quot;);
   myBook.addPrice(100);
   document.write(&quot;Book title is : &quot; + myBook.title + &quot;&lt;br&gt;&quot;);
   document.write(&quot;Book author is : &quot; + myBook.author + &quot;&lt;br&gt;&quot;);
   document.write(&quot;Book price is : &quot; + myBook.price + &quot;&lt;br&gt;&quot;);
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>

<h2>with&nbsp;关键字:</h2>

<p>with关键字作为一种速记的引用对象的属性或方法。</p>

<p>指定为参数的对象就成为接下来的块的持续时间的默认对象。为对象的属性和方法可以在不命名的对象。</p>

<h3>语法</h3>

<p>&nbsp;</p>

<pre>
with (object){
    properties used without the object name and dot
}
</pre>

<h3>例子：</h3>

<pre>
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;User-defined objects&lt;/title&gt;
&lt;script type=&quot;text/javascript&quot;&gt;

// Define a function which will work as a method
function addPrice(amount){
    with(this){
       price = amount; 
    }
}
function book(title, author){
    this.title = title; 
    this.author  = author;
    this.price = 0;
    this.addPrice = addPrice; // Assign that method as property.
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
   var myBook = new book(&quot;Perl&quot;, &quot;Mohtashim&quot;);
   myBook.addPrice(100);
   document.write(&quot;Book title is : &quot; + myBook.title + &quot;&lt;br&gt;&quot;);
   document.write(&quot;Book author is : &quot; + myBook.author + &quot;&lt;br&gt;&quot;);
   document.write(&quot;Book price is : &quot; + myBook.price + &quot;&lt;br&gt;&quot;);
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>

<p>&nbsp;</p>

<h2>JavaScript原生对象：</h2>

<p>JavaScript有几个内置的或本地对象。这些对象是在你的程序访问的任何地方，将以同样的方式工作在任何操作系统上运行的任何浏览器。</p>

<p>这里是所有重要的JavaScript本地对象的列表：</p>

<ul>
	<li>
	<p><a href="http://www.yiibai.com/javascript/javascript_number_object.html" target="_blank" title="JavaScript Number 对象">JavaScript Number 对象</a></p>
	</li>
	<li>
	<p><a href="http://www.yiibai.com/javascript/javascript_boolean_object.html" target="_blank" title="JavaScript Boolean对象">JavaScript Boolean对象</a></p>
	</li>
	<li>
	<p><a href="http://www.yiibai.com/javascript/javascript_strings_object.html" target="_blank" title="JavaScript String对象">JavaScript String对象</a></p>
	</li>
	<li>
	<p><a href="http://www.yiibai.com/javascript/javascript_arrays_object.html" target="_blank" title="JavaScript Array对象">JavaScript Array对象</a></p>
	</li>
	<li>
	<p><a href="http://www.yiibai.com/javascript/javascript_date_object.html" target="_blank">JavaScript Date对象</a></p>
	</li>
	<li>
	<p><a href="http://www.yiibai.com/javascript/javascript_math_object.html" target="_blank" title="JavaScript Math对象">JavaScript Math对象</a></p>
	</li>
	<li>
	<p><a href="http://www.yiibai.com/javascript/javascript_regexp_object.html" target="_blank" title="JavaScript RegExp对象">JavaScript RegExp对象</a></p>
	</li>
</ul>
