<h1>java从源码到执行的过程</h1>

<p>java源文件 -&gt; class文件《字节码、Java 虚拟机的指令集》 &nbsp;==&gt; 交由解释器：解码-运行。解码过程相对完全解释类程序简单得多的多。</p>

<p>原先:java先把代码（.java文件）编译成字节码，交给字节码虚拟机，然后虚拟机一条一条执行(解释器工作:解码-运行)字节码指令，从而完成程序的执行。<br />
Java 语言的最初实现是混合方式的，它的中间形式称为字节码，可移植到装有字节码解释器和相应运行时系统的任何机器上。字节码解释器和相应的运行时系统统称为 Java 虚拟机。<br />
&nbsp;</p>

<p>java源文件 -&gt; class文件《字节码、Java 虚拟机的指令集》 -&gt; 机器码《特定CPU指令集》</p>

<p>现在出现了将 Java 字节码翻译为机器码的系统，可以提高执行速度。即时(JIT)实现系统先将程序翻译为中间语言，然后在执行过程调用方法时，将中间语言的方法编译为机器代码，机器代码会保留，用于之后的调用。即时系统现在广泛用于 Java.<br />
&nbsp;</p>

<p>JAVA 虚拟机 编译<br />
Java 虚拟机是为了支持 Java 语言而的设计的。 Oracle 的 JDK 包括两部分内容：一部分是将 Java 源代码编译成 Java 虚拟机的指令集的编译器，另一部分是用于 Java 虚拟机的运行时环境。理解编译器是如何与 Java 虚拟机协同工作的，对编译器开发人员来说很有好处，同样也有助于理解 Java 虚拟机本身。</p>

<p>请注意：术语&ldquo;编译器&rdquo;在某些上下文场景中专指把 Java 虚拟机的指令集转换为特定 CPU指令集的翻译器。譬如即时代码生成器（ Just-In-Time/JIT Code Generator）就是一种在Class 文件中的代码被 Java 虚拟机代码加载后，生成与平台相关的特定指令的编译器。<br />
&nbsp;</p>
