<h1><a href="http://blog.csdn.net/alan_liuyue/article/details/71794632">mybatis的xml映射文件SQL语句的增删改查、参数、缓存</a></h1>

<p>&nbsp;</p>

<h2>&nbsp;2.2 select</h2>

<p>一个select 元素非常简单。例如：</p>

<p>Xml代码&nbsp;&nbsp;<img alt="收藏代码" src="http://limingnihao.iteye.com/images/icon_star.png" /></p>

<ol start="1">
	<li>&lt;!--&nbsp;查询学生，根据id&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&lt;select&nbsp;id=&quot;getStudent&quot;&nbsp;parameterType=&quot;String&quot;&nbsp;resultMap=&quot;studentResultMap&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;SELECT&nbsp;ST.STUDENT_ID,&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ST.STUDENT_NAME,&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ST.STUDENT_SEX,&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ST.STUDENT_BIRTHDAY,&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ST.CLASS_ID&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FROM&nbsp;STUDENT_TBL&nbsp;ST&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;ST.STUDENT_ID&nbsp;=&nbsp;#{studentID}&nbsp;&nbsp;</li>
	<li>&lt;/select&gt;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<p><br />
这条语句就叫做&lsquo;getStudent，有一个String参数，并返回一个StudentEntity类型的对象。<br />
注意参数的标识是：#{studentID}。</p>

<p>&nbsp;</p>

<p>select 语句属性配置细节：&nbsp;</p>

<table border="1">
	<tbody>
		<tr>
			<td>属性</td>
			<td>描述</td>
			<td>取值</td>
			<td>默认</td>
		</tr>
		<tr>
			<td>id</td>
			<td>在这个模式下唯一的标识符，可被其它语句引用</td>
			<td>&nbsp;</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>parameterType</td>
			<td>传给此语句的参数的完整类名或别名</td>
			<td>&nbsp;</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>resultType</td>
			<td>语句返回值类型的整类名或别名。注意，如果是集合，那么这里填写的是集合的项的整类名或别名，而不是集合本身的类名。（resultType 与resultMap 不能并用）</td>
			<td>&nbsp;</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>resultMap</td>
			<td>引用的外部resultMap 名。结果集映射是MyBatis 中最强大的特性。许多复杂的映射都可以轻松解决。（resultType 与resultMap 不能并用）</td>
			<td>&nbsp;</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>flushCache</td>
			<td>如果设为true，则会在每次语句调用的时候就会清空缓存。select 语句默认设为false</td>
			<td>true|false</td>
			<td>false</td>
		</tr>
		<tr>
			<td>useCache</td>
			<td>如果设为true，则语句的结果集将被缓存。select 语句默认设为false&nbsp;true|false&nbsp;false<br />
			timeout&nbsp;设置驱动器在抛出异常前等待回应的最长时间，默认为不设值，由驱动器自己决定</td>
			<td>true|false</td>
			<td>false</td>
		</tr>
		<tr>
			<td>timeout&nbsp;</td>
			<td>设置驱动器在抛出异常前等待回应的最长时间，默认为不设值，由驱动器自己决定</td>
			<td>正整数</td>
			<td>未设置</td>
		</tr>
		<tr>
			<td>fetchSize</td>
			<td>设置一个值后，驱动器会在结果集数目达到此数值后，激发返回，默认为不设值，由驱动器自己决定</td>
			<td>正整数</td>
			<td>驱动器决定</td>
		</tr>
		<tr>
			<td>statementType</td>
			<td>statement，preparedstatement，callablestatement。<br />
			预准备语句、可调用语句</td>
			<td>STATEMENT<br />
			PREPARED<br />
			CALLABLE</td>
			<td>PREPARED</td>
		</tr>
		<tr>
			<td>resultSetType</td>
			<td>forward_only，scroll_sensitive，scroll_insensitive<br />
			只转发，滚动敏感，不区分大小写的滚动</td>
			<td>FORWARD_ONLY<br />
			SCROLL_SENSITIVE<br />
			SCROLL_INSENSITIVE</td>
			<td>驱动器决定</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2>2.3 insert</h2>

<p>&nbsp;一个简单的insert语句：</p>

<p>Xml代码&nbsp;&nbsp;<img alt="收藏代码" src="http://limingnihao.iteye.com/images/icon_star.png" /></p>

<ol start="1">
	<li>&lt;!--&nbsp;插入学生&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&lt;insert&nbsp;id=&quot;insertStudent&quot;&nbsp;parameterType=&quot;StudentEntity&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INSERT&nbsp;INTO&nbsp;STUDENT_TBL&nbsp;(STUDENT_ID,&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STUDENT_NAME,&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STUDENT_SEX,&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STUDENT_BIRTHDAY,&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CLASS_ID)&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VALUES&nbsp;&nbsp;&nbsp;(#{studentID},&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#{studentName},&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#{studentSex},&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#{studentBirthday},&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#{classEntity.classID})&nbsp;&nbsp;</li>
	<li>&lt;/insert&gt;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;insert可以使用数据库支持的自动生成主键策略，设置useGeneratedKeys=&rdquo;true&rdquo;，然后把keyProperty 设成对应的列，就搞定了。比如说上面的StudentEntity 使用auto-generated 为id 列生成主键.<br />
&nbsp;还可以使用selectKey元素。下面例子，使用mysql数据库nextval(&#39;student&#39;)为自定义函数，用来生成一个key。</p>

<p>Xml代码&nbsp;&nbsp;<img alt="收藏代码" src="http://limingnihao.iteye.com/images/icon_star.png" /></p>

<ol start="1">
	<li>&lt;!--&nbsp;插入学生&nbsp;自动主键--&gt;&nbsp;&nbsp;</li>
	<li>&lt;insert&nbsp;id=&quot;insertStudentAutoKey&quot;&nbsp;parameterType=&quot;StudentEntity&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;selectKey&nbsp;keyProperty=&quot;studentID&quot;&nbsp;resultType=&quot;String&quot;&nbsp;order=&quot;BEFORE&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;select&nbsp;nextval(&#39;student&#39;)&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/selectKey&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INSERT&nbsp;INTO&nbsp;STUDENT_TBL&nbsp;(STUDENT_ID,&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STUDENT_NAME,&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STUDENT_SEX,&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STUDENT_BIRTHDAY,&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CLASS_ID)&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VALUES&nbsp;&nbsp;&nbsp;(#{studentID},&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#{studentName},&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#{studentSex},&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#{studentBirthday},&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#{classEntity.classID})&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&lt;/insert&gt;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>insert语句属性配置细节：</p>

<table border="1">
	<tbody>
		<tr>
			<td>属性</td>
			<td>描述</td>
			<td>取值</td>
			<td>默认</td>
		</tr>
		<tr>
			<td>id</td>
			<td>在这个模式下唯一的标识符，可被其它语句引用</td>
			<td>&nbsp;</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>parameterType</td>
			<td>传给此语句的参数的完整类名或别名</td>
			<td>&nbsp;</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>flushCache</td>
			<td>如果设为true，则会在每次语句调用的时候就会清空缓存。select 语句默认设为false</td>
			<td>true|false</td>
			<td>false</td>
		</tr>
		<tr>
			<td>useCache</td>
			<td>如果设为true，则语句的结果集将被缓存。select 语句默认设为false&nbsp;true|false&nbsp;false<br />
			timeout&nbsp;设置驱动器在抛出异常前等待回应的最长时间，默认为不设值，由驱动器自己决定</td>
			<td>true|false</td>
			<td>false</td>
		</tr>
		<tr>
			<td>timeout&nbsp;</td>
			<td>设置驱动器在抛出异常前等待回应的最长时间，默认为不设值，由驱动器自己决定</td>
			<td>正整数</td>
			<td>未设置</td>
		</tr>
		<tr>
			<td>fetchSize</td>
			<td>设置一个值后，驱动器会在结果集数目达到此数值后，激发返回，默认为不设值，由驱动器自己决定</td>
			<td>正整数</td>
			<td>驱动器决定</td>
		</tr>
		<tr>
			<td>statementType</td>
			<td>statement，preparedstatement，callablestatement。<br />
			预准备语句、可调用语句</td>
			<td>STATEMENT<br />
			PREPARED<br />
			CALLABLE</td>
			<td>PREPARED</td>
		</tr>
		<tr>
			<td>useGeneratedKeys</td>
			<td>
			<p>告诉MyBatis 使用JDBC 的getGeneratedKeys 方法来获取数据库自己生成的主键（MySQL、SQLSERVER 等</p>

			<p>关系型数据库会有自动生成的字段）。默认：false</p>
			</td>
			<td>true|false</td>
			<td>false</td>
		</tr>
		<tr>
			<td>keyProperty</td>
			<td>
			<p>标识一个将要被MyBatis 设置进getGeneratedKeys 的key 所返回的值，或者为insert 语句使用一个selectKey</p>

			<p>子元素。</p>
			</td>
			<td>&nbsp;</td>
			<td>&nbsp;</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>selectKey语句属性配置细节：</p>

<p>&nbsp;</p>

<table border="1">
	<tbody>
		<tr>
			<td>属性</td>
			<td>描述</td>
			<td>取值</td>
		</tr>
		<tr>
			<td>keyProperty</td>
			<td>selectKey 语句生成结果需要设置的属性。</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>resultType</td>
			<td>生成结果类型，MyBatis 允许使用基本的数据类型，包括String 、int类型。</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>order</td>
			<td>可以设成BEFORE 或者AFTER，如果设为BEFORE，那它会先选择主键，然后设置keyProperty，再执行insert语句；如果设为AFTER，它就先运行insert 语句再运行selectKey 语句，通常是insert 语句中内部调用数据库（像Oracle）内嵌的序列机制。&nbsp;</td>
			<td>BEFORE<br />
			AFTER</td>
		</tr>
		<tr>
			<td>statementType</td>
			<td>像上面的那样， MyBatis 支持STATEMENT，PREPARED和CALLABLE 的语句形式， 对应Statement ，PreparedStatement 和CallableStatement 响应</td>
			<td>STATEMENT<br />
			PREPARED<br />
			CALLABLE</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2>2.4 update、delete</h2>

<p>一个简单的update：</p>

<p>Xml代码&nbsp;&nbsp;<img alt="收藏代码" src="http://limingnihao.iteye.com/images/icon_star.png" /></p>

<ol start="1">
	<li>&lt;!--&nbsp;更新学生信息&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&lt;update&nbsp;id=&quot;updateStudent&quot;&nbsp;parameterType=&quot;StudentEntity&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UPDATE&nbsp;STUDENT_TBL&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SET&nbsp;STUDENT_TBL.STUDENT_NAME&nbsp;=&nbsp;#{studentName},&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STUDENT_TBL.STUDENT_SEX&nbsp;=&nbsp;#{studentSex},&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STUDENT_TBL.STUDENT_BIRTHDAY&nbsp;=&nbsp;#{studentBirthday},&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STUDENT_TBL.CLASS_ID&nbsp;=&nbsp;#{classEntity.classID}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;STUDENT_TBL.STUDENT_ID&nbsp;=&nbsp;#{studentID};&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&lt;/update&gt;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<p>一个简单的delete：</p>

<p>Xml代码&nbsp;&nbsp;<img alt="收藏代码" src="http://limingnihao.iteye.com/images/icon_star.png" /></p>

<ol start="1">
	<li>&lt;!--&nbsp;删除学生&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&lt;delete&nbsp;id=&quot;deleteStudent&quot;&nbsp;parameterType=&quot;StudentEntity&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DELETE&nbsp;FROM&nbsp;STUDENT_TBL&nbsp;WHERE&nbsp;STUDENT_ID&nbsp;=&nbsp;#{studentID}&nbsp;&nbsp;</li>
	<li>&lt;/delete&gt;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<p>&nbsp;update、delete语句属性配置细节：</p>

<p>&nbsp;</p>

<table border="1">
	<tbody>
		<tr>
			<td>属性</td>
			<td>描述</td>
			<td>取值</td>
			<td>默认</td>
		</tr>
		<tr>
			<td>id</td>
			<td>在这个模式下唯一的标识符，可被其它语句引用</td>
			<td>&nbsp;</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>parameterType</td>
			<td>传给此语句的参数的完整类名或别名</td>
			<td>&nbsp;</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>flushCache</td>
			<td>如果设为true，则会在每次语句调用的时候就会清空缓存。select 语句默认设为false</td>
			<td>true|false</td>
			<td>false</td>
		</tr>
		<tr>
			<td>useCache</td>
			<td>如果设为true，则语句的结果集将被缓存。select 语句默认设为false&nbsp;true|false&nbsp;false<br />
			timeout&nbsp;设置驱动器在抛出异常前等待回应的最长时间，默认为不设值，由驱动器自己决定</td>
			<td>true|false</td>
			<td>false</td>
		</tr>
		<tr>
			<td>timeout&nbsp;</td>
			<td>设置驱动器在抛出异常前等待回应的最长时间，默认为不设值，由驱动器自己决定</td>
			<td>正整数</td>
			<td>未设置</td>
		</tr>
		<tr>
			<td>fetchSize</td>
			<td>设置一个值后，驱动器会在结果集数目达到此数值后，激发返回，默认为不设值，由驱动器自己决定</td>
			<td>正整数</td>
			<td>驱动器决定</td>
		</tr>
		<tr>
			<td>statementType</td>
			<td>statement，preparedstatement，callablestatement。<br />
			预准备语句、可调用语句</td>
			<td>STATEMENT<br />
			PREPARED<br />
			CALLABLE</td>
			<td>PREPARED</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<h2>2.5 sql</h2>

<p>Sql元素用来定义一个可以复用的SQL 语句段，供其它语句调用。比如：</p>

<p>Xml代码&nbsp;&nbsp;<img alt="收藏代码" src="http://limingnihao.iteye.com/images/icon_star.png" /></p>

<ol start="1">
	<li>&lt;!--&nbsp;复用sql语句&nbsp;&nbsp;查询student表所有字段&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&lt;sql&nbsp;id=&quot;selectStudentAll&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SELECT&nbsp;ST.STUDENT_ID,&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ST.STUDENT_NAME,&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ST.STUDENT_SEX,&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ST.STUDENT_BIRTHDAY,&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ST.CLASS_ID&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FROM&nbsp;STUDENT_TBL&nbsp;ST&nbsp;&nbsp;</li>
	<li>&lt;/sql&gt;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;<br />
&nbsp;&nbsp;&nbsp;这样，在select的语句中就可以直接引用使用了，将上面select语句改成：</p>

<p>Xml代码&nbsp;&nbsp;<img alt="收藏代码" src="http://limingnihao.iteye.com/images/icon_star.png" /></p>

<ol start="1">
	<li>&lt;!--&nbsp;查询学生，根据id&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&lt;select&nbsp;id=&quot;getStudent&quot;&nbsp;parameterType=&quot;String&quot;&nbsp;resultMap=&quot;studentResultMap&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;include&nbsp;refid=&quot;selectStudentAll&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;ST.STUDENT_ID&nbsp;=&nbsp;#{studentID}&nbsp;&nbsp;&nbsp;</li>
	<li>&lt;/select&gt;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<h2>2.6parameters</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 上面很多地方已经用到了参数，比如查询、修改、删除的条件，插入，修改的数据等，MyBatis可以使用的基本数据类型和Java的复杂数据类型。<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 基本数据类型，String，int，date等。<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 但是使用基本数据类型，只能提供一个参数，所以需要使用Java实体类，或Map类型做参数类型。通过#{}可以直接得到其属性。</p>

<h3>2.6.1基本类型参数</h3>

<p>&nbsp;根据入学时间，检索学生列表：</p>

<p>Xml代码&nbsp;&nbsp;<img alt="收藏代码" src="http://limingnihao.iteye.com/images/icon_star.png" /></p>

<ol start="1">
	<li>&lt;!--&nbsp;查询学生list，根据入学时间&nbsp;&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&lt;select&nbsp;id=&quot;getStudentListByDate&quot;&nbsp;&nbsp;parameterType=&quot;Date&quot;&nbsp;resultMap=&quot;studentResultMap&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;SELECT&nbsp;*&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FROM&nbsp;STUDENT_TBL&nbsp;ST&nbsp;LEFT&nbsp;JOIN&nbsp;CLASS_TBL&nbsp;CT&nbsp;ON&nbsp;ST.CLASS_ID&nbsp;=&nbsp;CT.CLASS_ID&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;CT.CLASS_YEAR&nbsp;=&nbsp;#{classYear};&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&lt;/select&gt;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<p>Java代码&nbsp;&nbsp;<img alt="收藏代码" src="http://limingnihao.iteye.com/images/icon_star.png" /></p>

<ol start="1">
	<li>List&lt;StudentEntity&gt;&nbsp;studentList&nbsp;=&nbsp;studentMapper.getStudentListByClassYear(StringUtil.parse(&quot;2007-9-1&quot;));&nbsp;&nbsp;</li>
	<li>for&nbsp;(StudentEntity&nbsp;entityTemp&nbsp;:&nbsp;studentList)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(entityTemp.toString());&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<h3><br />
2.6.2Java实体类型参数</h3>

<p>&nbsp;根据姓名和性别，检索学生列表。使用实体类做参数：</p>

<p>Xml代码&nbsp;&nbsp;<img alt="收藏代码" src="http://limingnihao.iteye.com/images/icon_star.png" /></p>

<ol start="1">
	<li>&lt;!--&nbsp;查询学生list，like姓名、=性别，参数entity类型&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&lt;select&nbsp;id=&quot;getStudentListWhereEntity&quot;&nbsp;parameterType=&quot;StudentEntity&quot;&nbsp;resultMap=&quot;studentResultMap&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;SELECT&nbsp;*&nbsp;from&nbsp;STUDENT_TBL&nbsp;ST&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;ST.STUDENT_NAME&nbsp;LIKE&nbsp;CONCAT(CONCAT(&#39;%&#39;,&nbsp;#{studentName}),&#39;%&#39;)&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AND&nbsp;ST.STUDENT_SEX&nbsp;=&nbsp;#{studentSex}&nbsp;&nbsp;</li>
	<li>&lt;/select&gt;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<ol start="1">
	<li>StudentEntity&nbsp;entity&nbsp;=&nbsp;new&nbsp;StudentEntity();&nbsp;&nbsp;</li>
	<li>entity.setStudentName(&quot;李&quot;);&nbsp;&nbsp;</li>
	<li>entity.setStudentSex(&quot;男&quot;);&nbsp;&nbsp;</li>
	<li>List&lt;StudentEntity&gt;&nbsp;studentList&nbsp;=&nbsp;studentMapper.getStudentListWhereEntity(entity);&nbsp;&nbsp;</li>
	<li>for&nbsp;(StudentEntity&nbsp;entityTemp&nbsp;:&nbsp;studentList)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(entityTemp.toString());&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p><br />
2.6.3Map参数</p>

<p>根据姓名和性别，检索学生列表。使用Map做参数：</p>

<p>Xml代码&nbsp;&nbsp;<img alt="收藏代码" src="http://limingnihao.iteye.com/images/icon_star.png" /></p>

<ol start="1">
	<li>&lt;!--&nbsp;查询学生list，=性别，参数map类型&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&lt;select&nbsp;id=&quot;getStudentListWhereMap&quot;&nbsp;parameterType=&quot;Map&quot;&nbsp;resultMap=&quot;studentResultMap&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;SELECT&nbsp;*&nbsp;from&nbsp;STUDENT_TBL&nbsp;ST&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;ST.STUDENT_SEX&nbsp;=&nbsp;#{sex}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AND&nbsp;ST.STUDENT_SEX&nbsp;=&nbsp;#{sex}&nbsp;&nbsp;</li>
	<li>&lt;/select&gt;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<ol start="1">
	<li>Map&lt;String,&nbsp;String&gt;&nbsp;map&nbsp;=&nbsp;new&nbsp;HashMap&lt;String,&nbsp;String&gt;();&nbsp;&nbsp;</li>
	<li>map.put(&quot;sex&quot;,&nbsp;&quot;女&quot;);&nbsp;&nbsp;</li>
	<li>map.put(&quot;name&quot;,&nbsp;&quot;李&quot;);&nbsp;&nbsp;</li>
	<li>List&lt;StudentEntity&gt;&nbsp;studentList&nbsp;=&nbsp;studentMapper.getStudentListWhereMap(map);&nbsp;&nbsp;</li>
	<li>for&nbsp;(StudentEntity&nbsp;entityTemp&nbsp;:&nbsp;studentList)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(entityTemp.toString());&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<h3>2.6.4多参数的实现&nbsp;</h3>

<p>&nbsp;如果想传入多个参数，则需要在接口的参数上添加@Param注解。给出一个实例：<br />
&nbsp;接口写法：</p>

<ol start="1">
	<li>public&nbsp;List&lt;StudentEntity&gt;&nbsp;getStudentListWhereParam(@Param(value&nbsp;=&nbsp;&quot;name&quot;)&nbsp;String&nbsp;name,&nbsp;@Param(value&nbsp;=&nbsp;&quot;sex&quot;)&nbsp;String&nbsp;sex,&nbsp;@Param(value&nbsp;=&nbsp;&quot;birthday&quot;)&nbsp;Date&nbsp;birthdar,&nbsp;@Param(value&nbsp;=&nbsp;&quot;classEntity&quot;)&nbsp;ClassEntity&nbsp;classEntity);&nbsp;&nbsp;</li>
</ol>

<p>SQL写法：</p>

<ol start="1">
	<li>&lt;!--&nbsp;查询学生list，like姓名、=性别、=生日、=班级，多参数方式&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&lt;select&nbsp;id=&quot;getStudentListWhereParam&quot;&nbsp;resultMap=&quot;studentResultMap&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;SELECT&nbsp;*&nbsp;from&nbsp;STUDENT_TBL&nbsp;ST&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;where&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;if&nbsp;test=&quot;name!=null&nbsp;and&nbsp;name!=&#39;&#39;&nbsp;&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ST.STUDENT_NAME&nbsp;LIKE&nbsp;CONCAT(CONCAT(&#39;%&#39;,&nbsp;#{name}),&#39;%&#39;)&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/if&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;if&nbsp;test=&quot;sex!=&nbsp;null&nbsp;and&nbsp;sex!=&nbsp;&#39;&#39;&nbsp;&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AND&nbsp;ST.STUDENT_SEX&nbsp;=&nbsp;#{sex}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/if&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;if&nbsp;test=&quot;birthday!=null&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AND&nbsp;ST.STUDENT_BIRTHDAY&nbsp;=&nbsp;#{birthday}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/if&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;if&nbsp;test=&quot;classEntity!=null&nbsp;and&nbsp;classEntity.classID&nbsp;!=null&nbsp;and&nbsp;classEntity.classID!=&#39;&#39;&nbsp;&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AND&nbsp;ST.CLASS_ID&nbsp;=&nbsp;#{classEntity.classID}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/if&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/where&gt;&nbsp;&nbsp;</li>
	<li>&lt;/select&gt;&nbsp;&nbsp;</li>
</ol>

<p>进行查询：</p>

<p>List&lt;StudentEntity&gt;&nbsp;studentList&nbsp;=&nbsp;studentMapper.getStudentListWhereParam(&quot;&quot;,&nbsp;&quot;&quot;,StringUtil.parse(&quot;1985-05-28&quot;),&nbsp;classMapper.getClassByID(&quot;20000002&quot;));&nbsp;&nbsp;</p>

<ol start="1">
	<li>for&nbsp;(StudentEntity&nbsp;entityTemp&nbsp;:&nbsp;studentList)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(entityTemp.toString());&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<h3>2.6.5字符串代入法</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 默认的情况下，使用#{}语法会促使MyBatis 生成PreparedStatement 属性并且使用PreparedStatement 的参数（=？）来安全的设置值。尽量这些是快捷安全，也是经常使用的。但有时候你可能想直接未更改的字符串代入到SQL 语句中。比如说，对于ORDER BY，你可能会这样使用：ORDER BY ${columnName}但MyBatis 不会修改和规避掉这个字符串。<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 注意：这样地接收和应用一个用户输入到未更改的语句中，是非常不安全的。这会让用户能植入破坏代码，所以，要么要求字段不要允许客户输入，要么你直接来检测他的合法性&nbsp;。</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2>2.7 cache缓存</h2>

<p><br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MyBatis 包含一个强在的、可配置、可定制的缓存机制。MyBatis 3 的缓存实现有了许多改进，既强劲也更容易配置。默认的情况，缓存是没有开启，除了会话缓存以外，它可以提高性能，且能解决全局依赖。开启二级缓存，你只需要在SQL 映射文件中加入简单的一行：&lt;cache/&gt;</p>

<p><br />
这句简单的语句的作用如下：</p>

<p>1.&nbsp;所有在映射文件里的select 语句都将被缓存。<br />
2.&nbsp;所有在映射文件里insert,update 和delete 语句会清空缓存。<br />
3.&nbsp;缓存使用&ldquo;最近很少使用&rdquo;算法来回收<br />
4.&nbsp;缓存不会被设定的时间所清空。<br />
5.&nbsp;每个缓存可以存储1024 个列表或对象的引用（不管查询出来的结果是什么）。<br />
6.&nbsp;缓存将作为&ldquo;读/写&rdquo;缓存，意味着获取的对象不是共享的且对调用者是安全的。不会有其它的调用<br />
7.&nbsp;者或线程潜在修改。</p>

<p>&nbsp;</p>

<p>例如，创建一个FIFO 缓存让60 秒就清空一次，存储512 个对象结果或列表引用，并且返回的结果是只读。因为在不用的线程里的两个调用者修改它们可能会导致引用冲突。</p>

<ol start="1">
	<li>&lt;cache&nbsp;eviction=&quot;FIFO&quot;&nbsp;flushInterval=&quot;60000&quot;&nbsp;size=&quot;512&quot;&nbsp;readOnly=&quot;true&quot;&gt;&nbsp;&nbsp;</li>
	<li>&lt;/cache&gt;&nbsp;&nbsp;</li>
</ol>

<p><br />
&nbsp;&nbsp; &nbsp;还可以在不同的命名空间里共享同一个缓存配置或者实例。在这种情况下，你就可以使用cache-ref 来引用另外一个缓存。</p>

<ol start="1">
	<li>&lt;cache-ref&nbsp;namespace=&quot;com.liming.manager.data.StudentMapper&quot;/&gt;&nbsp;&nbsp;</li>
</ol>

<p>Cache 语句属性配置细节：</p>

<p>&nbsp;</p>

<table border="1">
	<tbody>
		<tr>
			<td>属性</td>
			<td>说明</td>
			<td>取值</td>
			<td>默认值</td>
		</tr>
		<tr>
			<td>eviction</td>
			<td>缓存策略：<br />
			LRU - 最近最少使用法：移出最近较长周期内都没有被使用的对象。<br />
			FIFI- 先进先出：移出队列里较早的对象<br />
			SOFT - 软引用：基于软引用规则，使用垃圾回收机制来移出对象<br />
			WEAK - 弱引用：基于弱引用规则，使用垃圾回收机制来强制性地移出对象</td>
			<td>LRU<br />
			FIFI<br />
			SOFT<br />
			WEAK</td>
			<td>LRU</td>
		</tr>
		<tr>
			<td>flushInterval</td>
			<td>代表一个合理的毫秒总计时间。默认是不设置，因此使用无间隔清空即只能调用语句来清空。</td>
			<td>正整数</td>
			<td>
			<p>不设置</p>
			</td>
		</tr>
		<tr>
			<td>size</td>
			<td>缓存的对象的大小</td>
			<td>正整数</td>
			<td>1024</td>
		</tr>
		<tr>
			<td>readOnly</td>
			<td>
			<p>只读缓存将对所有调用者返回同一个实例。因此都不能被修改，这可以极大的提高性能。可写的缓存将通过序列</p>

			<p>化来返回一个缓存对象的拷贝。这会比较慢，但是比较安全。所以默认值是false。</p>
			</td>
			<td>true|false</td>
			<td>false</td>
		</tr>
	</tbody>
</table>
