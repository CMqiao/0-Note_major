<h1>Java Web容器与servlet</h1>

<h2>web应用基础</h2>

<p>自从计算机软件开发进入网络时代，就开始涉及到通讯问题。在客户/服务器（也叫C/S应用）时期，每个软件都有自己的客户端和服务器端软件。并且客户端和服务器端之间的通讯协议差别也很大。后来随着互联网的发展，基于浏览器/服务器的应用逐渐成为主流，通讯协议也统一到HTTP协议。但是，在HTTP协议之上，如何处理来自客户端的请求信息，以及如何对请求进行回应，则经历了很长时间也没有统一下来。目前，对于这个问题的解决方案主要有两种，一个是CGI，另一个是Servlet。</p>

<h2>CGI(Common Gateway Interface)，通用网关接口</h2>

<p>通用网关接口，简称CGI，是一种根据请求信息动态产生回应内容的技术。通过CGI，Web 服务器可以将根据请求不同启动不同的外部程序，并将请求内容转发给该程序，在程序执行结束后，将执行结果作为回应返回给客户端。也就是说，对于每个请求，都要产生一个新的进程进行处理。因为每个进程都会占有很多服务器的资源和时间，这就导致服务器无法同时处理很多的并发请求。另外CGI程序都是与<a href="http://lib.csdn.net/base/operatingsystem" target="_blank" title="操作系统知识库">操作系统</a>平台相关的，虽然在互联网爆发的初期，CGI为开发互联网应用做出了很大的贡献，但是随着技术的发展，开始逐渐衰落。</p>

<h2>Servlet</h2>

<p>Servlet最初是在1995年由James Gosling 提出的，因为使用该技术需要复杂的Web服务器支持，所以当时并没有得到重视，也就放弃了。后来随着Web应用复杂度的提升，并要求提供更高的并发处理能力，Servlet被重新捡起，并在Java平台上得到实现，现在提起Servlet，指的都是Java Servlet。Java Servlet要求必须运行在Web服务器当中，与Web服务器之间属于分工和互补关系。确切的说，在实际运行的时候Java Servlet与Web服务器会融为一体，如同一个程序一样运行在同一个Java虚拟机（JVM）当中。与CGI不同的是，Servlet对每个请求都是单独启动一个线程，而不是进程。这种处理方式大幅度地降低了系统里的进程数量，提高了系统的并发处理能力。另外因为Java Servlet是运行在虚拟机之上的，也就解决了跨平台问题。如果没有Servlet的出现，也就没有互联网的今天。<br />
在Servlet出现之后，随着使用范围的扩大，人们发现了它的一个很大的一个弊端。那就是为了能够输出HTML格式内容，需要编写大量重复代码，造成不必要的重复劳动。为了解决这个问题，基于Servlet技术产生了JavaServet Pages技术，也就是JSP。Servlet和JSP两者分工协作，Servlet侧重于解决运算和业务逻辑问题，JSP则侧重于解决展示问题。Servlet与JSP一起为Web应用开发带来了巨大的贡献，后来出现的众多Java Web应用开发框架都是基于这两种技术的，更确切的说，都是基于Servlet技术的。</p>

<h2>servlet和web容器之间的关系</h2>

<p><a href="http://lib.csdn.net/base/java" target="_blank" title="Java 知识库">Java</a>是一种动态加载和运行的语言。也就是说当应用程序持有一个类的地址（CLASSPATH）和名称（包名和类名）的情况下，可以在程序运行期 间任何时候加载这个类，并创建和使用该类的对象。Servlet就是基于这个机制与Web容器融合在一起的。目前已知的所有支持<a href="http://lib.csdn.net/base/java" target="_blank" title="Java 知识库">Java&nbsp;</a>Servlet的Web容器都是采用Java开发的。当Web容器接收到来自客户端的请求信息之后，会根据URL中的Web元件地址信息到Servlet 队列中查找对应的Servlet对象，如果找到则直接使用，如果没有找到则加载对应的类，并创建对象。也就是说，Servlet对象是在第一次被使用的时 候才创建的，并且一旦创建就会被反复使用，不再创建新的对象。所有创建出的Servlet对象会在Web服务器停止运行的时候统一进行垃圾回收。</p>

<p>为 了解决客户端请求地址与<a href="http://lib.csdn.net/base/java" target="_blank" title="Java 知识库">java&nbsp;</a>Servlet之间对应关系问题，Web容器需要一个用来描述这种对应关系的文件，一般是web.xml文件。如果一个Web应用程序中存在很多个 Servlet，那么web.xml会变得非常庞大。在Servlet 3.0规范推出之后，允许在Servlet代码中使用声明式语法来代替web.xml中的描述信息，这才让web.xml瘦身下来。下图是这个过程的一个 示意图。</p>

<p>&nbsp;</p>

<h2>容器启动时的加载顺序</h2>

<p>一、启动一个WEB项目的时候，WEB容器会去读取它的配置文件web.xml，读取&lt;context-param&gt;结点。<br />
二、容创建一个ServletContext（servlet上下文），这个 web项目的所有部分都将共享这个上下文。&nbsp;<br />
三、容器将&lt;context-param&gt;转换为键值对，并交给 servletContext。&nbsp;因为listener,&nbsp;filter&nbsp;等在初始化时会用到这些上下文中的信息，所以要先加载。&nbsp;<br />
四、容器创建&lt;listener&gt;中的类实例，创建监听器。<br />
五、对所有的Filter进行初始化。<br />
六、加载servlet&nbsp;<br />
load- on-startup&nbsp;元素在web应用启动的时候指定了servlet被加载的顺序，它的值必须是一个整数。</p>

<p>如果它的值是一个负整数或是这个元素不存在，那么容器会在该servlet被调用的时候，加载这个servlet。如果值是正整数或零，容器在配置的时候就加载并初始化这个servlet，容器必须保证值小的先被加载。如果值相等，容器可以自动选择先加载谁。</p>

<p>web.xml&nbsp;的加载顺序是：context-param&nbsp;-&gt;&nbsp;listener&nbsp;-&gt;&nbsp;filter&nbsp;-&gt;&nbsp;servlet。</p>

<h2>容器处理请求的过程</h2>

<p>当Web容器接收到来自客户端的请求信息之后，会根据URL中的Web元件地址信息到Servlet 队列中查找对应的Servlet对象，如果找到则直接使用，如果没有找到则加载对应的类，并创建对象。</p>

<p>也就是说，Servlet对象是在第一次被使用的时 候才创建的，并且一旦创建就会被反复使用，不再创建新的对象。所有创建出的Servlet对象会在Web服务器停止运行的时候统一进行垃圾回收。</p>

<p><img alt="" src="http://images2015.cnblogs.com/blog/345531/201511/345531-20151115194849212-1961616978.jpg" /></p>

<p>&nbsp;</p>

<p>参考文献：</p>

<p>http://blog.csdn.net/seelye/article/details/8469575</p>
