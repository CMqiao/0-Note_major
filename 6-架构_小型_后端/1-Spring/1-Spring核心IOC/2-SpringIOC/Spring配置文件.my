<p>我们应该怎么理解和认识Spring的配置文件呢？</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 其实，Spring的配置文件是Spring容器对Bean进行生产以及关系注入的图纸，他是Spring的基础。如果我们没有配置文件的话，则Spring的容器将无从谈起。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; Spring 的配置文件是用于指导 Spring 工厂进行 Bean 的生产、依赖关系注入及 Bean 实例分发的&ldquo;图纸&rdquo;， J2EE 程序员必须学会并灵活应用这份&ldquo;图纸&rdquo;，准确地表达自己的&ldquo;生产意图&rdquo;。它是一个或多个标准的XML文档，其ApplicationContext.xml是Spring的默认配置文件，当容器启动时找不到其他的配置文件时，则会尝试加载这个默认的配置文件。</p>

<p>&nbsp;</p>

<p>Spring容器成功启动需要以下三方面的条件同时具备：</p>

<ol>
	<li>Spring的类包必须已经放在Spring的类容器下面</li>
	<li>应用程序应当为Spring提供完备的Bean的配置信息</li>
	<li>Bean的类都已经放在Spring的类容器下面&nbsp; &nbsp;&nbsp;</li>
</ol>

<p>Spring启动时读取应用程序提供的Bean的配置信息，并在Spring容器中生成一份相应的Bean的配置注册表，然后根据这张注册表来实例化Bean，装配好Bean之间的依赖关系，为上层应用提供准备就绪的运行环境。</p>

<p>而bean的<strong>配置信息</strong>就是Bean的<strong>元数据信息</strong>，他由以下五个方面来组成：</p>

<ol>
	<li><strong>Bean的实现类</strong></li>
	<li><strong>Bean的属性信息</strong>&nbsp;比如：数据源的连接数，用户名和密码等等。</li>
	<li><strong>Bean的依赖关系</strong>&nbsp;Spring根据依赖关系配置完成Bean之间的装配</li>
	<li><strong>Bean的行为配置</strong>&nbsp;比如：生命周期范围以及生命周期各个过程的回调函数等</li>
	<li><strong>Bean的创建方式定义</strong>&nbsp;主要说明是通过构造器还是工厂方法来构造Bean</li>
</ol>

<p>接下来是他们之间的相互关系：</p>

<p><img alt="" src="http://img.blog.csdn.net/20160601225420830?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /></p>

<p>&nbsp;</p>

<p>有时，一个项目中可能存在多个配置文件，那么Spring项目加载多个配置文件的方法：</p>

<ol>
	<li>在配置文件中使用import来导入所需的配置文件。</li>
	<li>将多个配置文件构造为一个数组，然后传递给ApplicationContext实现加载多个配置文件。</li>
</ol>

<p>这两种方式都是通过调用BeanDefinitionReader来读取定义文件的，在内部实现上没有任何的区别。</p>

<p>&nbsp; &nbsp; &nbsp;&nbsp;在大型的Spring项目当中，所有的bean配置在一个配置文件当中很不容易管理且也不利于团队的开发。通常在开发过程当中，我们会按照功能模块和开发人员来将配置文件分成多个。这样会有利与模块的划分。接下来我们需要使用import属性来引入多个配置文件到项目当中。</p>

<p>假如我们的项目需要用到多个配置文件，且配置文件位于不同的文件夹下，比如：</p>

<p>Spring-Common.xml位于common文件夹下</p>

<p>Spring-Connection.xml位于connection文件夹下</p>

<p>Spring-Module.xml位于module文件夹下</p>

<p>传统加载方式：</p>

<ol start="1">
	<li>ApplicationContext&nbsp;context&nbsp;=&nbsp;new&nbsp;ClassPathXmlApplicationContext(new&nbsp;String[]&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;{&quot;Spring-Common.xml&quot;,&quot;Spring-Connection.xml&quot;,&quot;Spring-ModuleA.xml&quot;});&nbsp;&nbsp;</li>
</ol>

<p>但是这种方法不宜组织，且不宜维护。</p>

<p>则我们使用整合配置文件：Spring-All-Module.xml</p>

<ol start="1">
	<li>&lt;beans&nbsp;.....&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;import&nbsp;resource=&quot;common/Spring-Common.xml&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;import&nbsp;resource=&quot;connection/Spring-Connection.xml&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;import&nbsp;resource=&quot;module/Spring-Module.xml&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&lt;/beans&gt;&nbsp;&nbsp;</li>
</ol>

<p>在文件当中使用import直接将其他的配置文件导入到这个文件当中就好了。</p>

<p>整合后加载方式：</p>

<ol start="1">
	<li>ApplicationContext&nbsp;context&nbsp;=&nbsp;new&nbsp;ClassPathXmlApplicationContext(&ldquo;Spring-All-Module.xml&rdquo;);&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<p>可以看到配置文件是整个Spring项目的灵魂，我们先来看一下Spring配置文件的一般结构：</p>

<ol start="1">
	<li>&lt;beans&gt;//Bean定义的开始和结束&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;import&nbsp;&nbsp;resource=&ldquo;resource1.xml&rdquo;&nbsp;/&gt;//导入其他配置文件Bean的定义&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;import&nbsp;&nbsp;resource=&ldquo;resource2.xml&rdquo;&nbsp;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&ldquo;bean1&rdquo;&nbsp;class=&ldquo;***&rdquo;&gt;&lt;/bean&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;name=&ldquo;bean2&rdquo;&nbsp;class=&ldquo;***&rdquo;&gt;&lt;/bean&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;alias&nbsp;alias=&ldquo;bean3&rdquo;&nbsp;name=&ldquo;bean2&rdquo;&nbsp;/&gt;//alias用于定义Bean的别名&nbsp;&nbsp;</li>
	<li>&lt;/beans&gt;&nbsp;&nbsp;</li>
</ol>

<p>可以看到一个简单的Spring配置文件就是这样。</p>

<p>其中：</p>

<ul>
	<li>Import标签可以放在Beans标签下的任何位置，没有顺序关系。</li>
	<li>bean3和bean2是同一个Bean，bean3是bean2的别名。</li>
</ul>

<p>&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; Spring 的配置文件是基于XML格式的，Spring1.0的配置文件采用DTD格式，Spring2.0以后使用Schema的格式，后者让不同类型的配置拥有了自己的命名空间，使配置文件更具有扩展性。</p>

<p>采取基于Schema的配置格式，文件头的声明会复杂一些，请看一个简单示例：</p>

<ol start="1">
	<li>&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;UTF-8&quot;&nbsp;?&gt;&nbsp;&nbsp;</li>
	<li>&lt;beans&nbsp;&nbsp;</li>
	<li>&lt;!--标准命名空间--&gt;&nbsp;&nbsp;</li>
	<li>xmlns=&quot;http://www.springframework.org/schema/beans&quot;&nbsp;&nbsp;</li>
	<li>&lt;!--xsi标准命名空间，用于指定自定义命名空间的Schema文件--&gt;&nbsp;&nbsp;</li>
	<li>xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&nbsp;&nbsp;</li>
	<li>&lt;!&mdash;aop表示自定义命名空间，aop是该命名空间的简称，而后面是命名空间的全称。必须在xsi命名空间为其指定的命名空间对应的Schema文件--&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&lt;!&mdash;下面这四行代码，是为每个命名空间指定具体的schema文件--&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;xsi:schemaLocation=&quot;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/beans&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/aop&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context/spring-aop-3.0.xsd&quot;&gt;&nbsp;&nbsp;</li>
	<li>&lt;!&mdash;默认命名空间的配置&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id&nbsp;=&nbsp;&quot;app&quot;&nbsp;class=&quot;cn.lovepi.App&quot;&nbsp;/&gt;&nbsp;&nbsp;</li>
	<li>&lt;!&mdash;aop命名空间的配置&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;aop:config&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;aop:pointcut&nbsp;id=&quot;mycut&quot;&nbsp;expression=&quot;execution(*&nbsp;cn.love*(..))&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/aop:config&gt;&nbsp;&nbsp;</li>
	<li>&lt;/beans&gt;&nbsp;&nbsp;</li>
</ol>

<p>注：</p>

<p>Xml Schema：Schema在文档根节点中通过<strong>xmlns</strong>对文档当中的命名空间进行命名。</p>

<p>&nbsp;</p>

<p>我们在上面的代码中定义了三个命名空间，</p>

<ol>
	<li>首先我们定义了一个默认命名空间，他没有空间名，用于Spring Bean的定义。</li>
	<li>接下来我们命名了一个xsi命名空间，这个命名空间用于为每个文档中命名空间指定相对应的schema的样式文件。是标准组织定义的标准命名空间。</li>
	<li>我们还命名了一个aop的命名空间，这个命名空间是Spring配置aop的命名空间，是用户自定义的命名空间。</li>
</ol>

<p>&nbsp;</p>

<p>命名空间的定义分为了两个步骤：</p>

<ol>
	<li>指定命名空间的名称，需要指定命名空间的缩类名和全名</li>
	<li>指定命名空间的schema文档样式文件的位置，用空格或回车行来进行分割。</li>
</ol>

<p>指定命名空间schema地址有两个用途：</p>

<ol>
	<li>xml解析器可以获取schema文件，并对文档进行格式合法性验证</li>
	<li>在开发环境下，IDE可以用schema文件来对文档编辑器进行诱导功能。</li>
</ol>

<p>Spring3.0 的配置Schema文件分布在各模块类包中，如果模块拥有对应的Schema文件，则可以在模块类包中找到一个config目录，Schema文件就位于该目录中，如下是对这些Schema文件的用途进行了简单说明：</p>

<p>示例说明：<strong>Spring-beans-3.0.xsd</strong></p>

<p>命名空间：<strong>http://www.springframework.org/schema/beans</strong></p>

<p>Schema 文件：<strong>http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</strong></p>

<p>可以看出在Spring3.0当中，所有的Schema文件的命名空间以及对应的位置都和Beans这个Schema文件是类似的。</p>

<p>那么接下来来了解以下Spring当中其他Schema文件的用途：</p>

<ul>
	<li><strong>spring-beans-3.0.xsd</strong>：Spring3.0最主要的配置文件，主要是用于配置Bean</li>
	<li><strong>spring-aop-3.0.xsd</strong>：aop配置定义的schema</li>
	<li><strong>spring-tx-3.0.xsd</strong>：声明式事物配置定义的Schema</li>
	<li><strong>spring-mvc-3.0.xsd</strong>：Spring3.0当中新增的</li>
	<li><strong>spring-util-3.0.xsd</strong>：是为简化某些复杂的标准配置而提供的Schema</li>
	<li><strong>spring-jee-3.0.xsd</strong>：是为简化J2EE中EJB等功能的配置而提供的Schema</li>
	<li><strong>spring-jdbc-3.0.xsd</strong>：为Spring内接数据库而提供的Schema，3.0新增</li>
	<li><strong>spring-jms-3.0.xsd</strong>：jms配置的Schema</li>
	<li><strong>spring-lang-3.0.xsd</strong>：增加了对动态语言的支持，为集成动态语言而定义</li>
	<li><strong>spring-oxm-3.0.xsd</strong>：配置对象xml映射到schema，3.0新增</li>
	<li><strong>spring-task-3.0.xsd</strong>：任务调度的Schema</li>
	<li><strong>spring-tool-3.0.xsd</strong>：为集成Schema一些有用工具而提供的Schema</li>
</ul>
