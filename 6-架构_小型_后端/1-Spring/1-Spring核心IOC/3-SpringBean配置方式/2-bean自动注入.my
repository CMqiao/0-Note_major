<h1>@Autowired与@Resource的区别</h1>

<p>1、@Autowired与@Resource都可以用来装配bean. 都可以写在字段上,或写在setter方法上。&nbsp;<br />
2、@Autowired默认按类型装配（这个注解是属业spring的），默认情况下必须要求依赖对象必须存在，如果要允许null&nbsp;值，可以设置它的required属性为false，如：@Autowired(required=false) ，如果我们想使用名称装配可以结合@Qualifier注解进行使用，如下：&nbsp;</p>

<ol start="1">
	<li>@Autowired()&nbsp;@Qualifier(&quot;baseDao&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>private&nbsp;BaseDao&nbsp;baseDao;&nbsp;&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;3、@Resource（这个注解属于J2EE的），默认安照名称进行装配，名称可以通过name属性进行指定，&nbsp;<br />
如果没有指定name属性，当注解写在字段上时，默认取字段名进行按照名称查找，如果注解写在setter方法上默认取属性名进行装配。&nbsp;当找不到与名称匹配的bean时才按照类型进行装配。但是需要注意的是，如果name属性一旦指定，就只会按照名称进行装配。</p>

<ol start="1">
	<li>@Resource(name=&quot;baseDao&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>private&nbsp;BaseDao&nbsp;baseDao;&nbsp;&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>我喜欢用 @Resource注解在字段上，且这个注解是属于J2EE的，减少了与spring的耦合。最重要的这样代码看起就比较优雅。</p>

<p>&nbsp;</p>

<h1>@Qualifier</h1>

<p>@Qualifier是一种计算机编程，是在使用Spring框架中@Autowired注解进行自动注入时，Spring 容器中匹配的候选Bean数目必须有且仅有一个<sup>[1]</sup>。应用在程序设计。</p>

<h2>编程介绍</h2>

<p>@Qualifier，在使用Spring框架中@Autowired标签时默认情况下使用 @Autowired 注释进行自动注入时，Spring 容器中匹配的候选 Bean 数目必须有且仅有一个。</p>

<h2>注解</h2>

<p>在使用Spring框架中@Autowired标签时默认情况下使用 @Autowired 注释进行自动注入时，Spring 容器中匹配的候选 Bean 数目必须有且仅有一个。当找不到一个匹配的 Bean 时，Spring 容器将抛BeanCreationException 异常，并指出必须至少拥有一个匹配的 Bean。</p>

<p>Spring 允许我们通过 @Qualifier 注释指定注入 Bean 的名称，这样歧义就消除了，可以通过下面的方法解决异常。</p>

<h2>意义</h2>

<p>@Qualifier(&quot;XXX&quot;) 中的 XX是 Bean 的名称，所以 @Autowired 和 @Qualifier 结合使用时，自动注入的策略就从 byType 转变成 byName 了。</p>

<p>@Autowired 可以对<a href="https://baike.baidu.com/item/%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F" target="_blank">成员变量</a>、方法以及<a href="https://baike.baidu.com/item/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0" target="_blank">构造函数</a>进行注释，而 @Qualifier 的标注对象是成员变量、方法入参、构造函数入参。</p>

<p><strong>示例</strong></p>

<p>配合autowired使用：</p>

<p>@Autowired</p>

<p>@Qualifier(&quot;userService&quot;)</p>

<p>public IUserService userService;</p>

<p>&nbsp;</p>
