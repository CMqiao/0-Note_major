<h1>Spring Bean配置的三种不同方式</h1>

<ul>
	<li>基于XML的配置方式</li>
	<li>基于注解的配置方式</li>
	<li>基于Java类的配置方式</li>
</ul>

<h2><strong>一.基于XML的配置</strong></h2>

<p>请看<a href="http://blog.csdn.net/icarus_wang/article/details/51559850" target="_blank">Spring学习（十二）Spring 的配置文件概述</a></p>

<h2><strong>二.基于注解的配置</strong></h2>

<p><strong>Spring2.0</strong>开始引入基于<strong>注解</strong>的配置方式,即Bean的定义信息可以通过在Bean的实现类上标注注解实现。</p>

<p>具体关于注解的知识请看<a href="http://blog.csdn.net/icarus_wang/article/details/51638504" target="_blank">Java注解（Annotation）介绍</a></p>

<p><strong>@Component</strong>是Spring容器中的基本注解，表示容器中的一个组件（<strong>bean</strong>），可以作用在任何层次，下面的示例介绍该注解的使用方法。</p>

<p>注解配置示例：</p>

<ol start="1">
	<li>@Component(&quot;userDao&quot;)&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;userDao{......}&nbsp;&nbsp;</li>
</ol>

<p>他等效于XML配置</p>

<ol start="1">
	<li>&lt;bean&nbsp;id=&quot;userDao&quot;&nbsp;class=&quot;cn.lovepi.***.userDao&quot;/&gt;&nbsp;&nbsp;</li>
</ol>

<p>此外，还有一些其他的可以被用来注解bean的注解，这些可以让注解类本身的用途更加清晰，此外，特定的注解也具备特定的功能。</p>

<p>Spring在2.5后提供了一个<strong>context</strong>的命名空间，它提供了通过扫描<strong>类包</strong>来加载利用注解定义的Bean的方式。</p>

<p>在context中可以使用<strong>resource-pattern</strong>来过滤出特定的类。</p>

<ol start="1">
	<li>&lt;context:component-scan&nbsp;base-package=&quot;cn.lovepi.spring&quot;&nbsp;resource-pattern=&quot;anno/*.class&quot;/&gt;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<p>默认情况下加载的是package下的*.class即扫描全部类，在使用了resource-pattern之后，则只扫描package下的anno子包下的所有类。</p>

<p>不过使用resource-pattern并不能提供给我们完善的功能，所有我们得使用<strong>过滤子元素</strong>的方法。</p>

<ol start="1">
	<li>&lt;context:component-scan&nbsp;base-package=&quot;cn.lovepi.spring&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&lt;context:include-filter&nbsp;type=&quot;regex&quot;&nbsp;expression=&quot;cn.lovepi.spring.*&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&lt;context:exclude-filter&nbsp;type=&quot;aspectj&quot;&nbsp;expression=&quot;cn.lovepi..*Controller+&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&lt;/context:component-scan&gt;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<p>其中：</p>

<p><strong>include-filter</strong>表示要包含的目标类，</p>

<p><strong>exclude-filter</strong>表示要排除在外的目标类</p>

<p>&nbsp;</p>

<p>一个<strong>component-scan</strong>标签下可以有<strong>多个</strong>include-filter和exclude-filter，</p>

<p>过滤表达式所支持的<strong>类型</strong>如下表所示：</p>

<p><img alt="" src="http://img.blog.csdn.net/20160612231026381?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" style="width:800px" /></p>

<p>在这些类型当中，除了<strong>Custom</strong>外，<strong>aspectj</strong>的过滤功能最强大，他能轻易的实现其他类别的过滤规则。</p>

<p>&nbsp;</p>

<p>Spring3.0提供了一系列的针对依赖注入的注解，这使得Spring IoC在XML文件之外多了一种可行的选择，主要包含如下注解类型：</p>

<ul>
	<li><strong>Bean的定义注解</strong></li>
	<li><strong>Bean的生命周期注解</strong></li>
	<li><strong>Bean的依赖检查注解</strong></li>
	<li><strong>Bean的自动装配注解</strong></li>
</ul>

<h3><strong>1.Bea</strong>n的定义注解</h3>

<p>Spring自2.0开始，陆续引入了一些注解用于简化Spring的开发。</p>

<p><strong>@Repository</strong>注解便属于最先引入的一批，用于将<strong>数据访问层</strong>（DAO层）的类标识为Spring Bean。具体使用如下：</p>

<p>①首先使用<strong>@Repository</strong>将DAO类声明为Bean</p>

<ol start="1">
	<li>@Repository&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;UserDaoImpl&nbsp;implements&nbsp;UserDao{......}&nbsp;&nbsp;</li>
</ol>

<p>②在XML配置文件中启动Spring的自动扫描功能</p>

<ol start="1">
	<li>&lt;beans&nbsp;...&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;context:component-scan&nbsp;base-package=&quot;cn.lovepi.dao&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;......&nbsp;&nbsp;</li>
	<li>&lt;beans/&gt;&nbsp;&nbsp;</li>
</ol>

<p>如此的话，我们便不在需要在XML当中显式使用bean来进行bean的配置。Spring容器在初始化的时候便会自动扫描base-package所指定的包以及子包下面的所有class文件。所有标注为Repository的类将被自动注册为bean。</p>

<p>&nbsp;</p>

<p><strong>为什么Repository只能标注在DAO类上面呢？</strong></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;因为该注解的作用不只是将类识别为bean，同时他还能将所标注的类中所抛出的<strong>数据访问异常</strong>封装为<strong>Spring的数据访问异常类型</strong>。Spring本身提供了一个丰富的，并且是与具体的访问技术无关的数据访问异常结构，用于封装不同的持久层框架所抛出的异常，使得<strong>异常独立与底层的框架。</strong></p>

<p>&nbsp;</p>

<p>Spring2.5在@Repository的基础上增加了功能类似的额外三个注解，总共有如下四种注解：</p>

<ul>
	<li><strong>@Component：</strong>一个泛化的概念，表示一个组件（<strong>Bean</strong>），可作用在任何层次</li>
	<li><strong>@Controller：</strong>用于对<strong>Controller</strong>实现类进行标注，目前该功能与Component相同</li>
	<li><strong>@Repository：</strong>用于对<strong>DAO</strong>实现类进行标注</li>
	<li><strong>@Service：</strong>用于对<strong>Service</strong>实现类进行标注，目前该功能与Component相同</li>
</ul>

<p>这三个注解除了作用于不同软件层次的类，其使用方式与Repository是完全相同的。</p>

<p>&nbsp;</p>

<h3><strong>2.Bean的生命周期注解</strong></h3>

<p>在某些情况下，可能需要我们手工做一些额外的初始化或者销毁操作，例如资源的获取和是否操作，<strong>Spring1.x</strong>为此提供了两种方式供用户<strong>指定执行生命周期回调</strong>的方法：</p>

<ol>
	<li>实现Spring提供的两个接口：<strong>initializingBean</strong>&nbsp;和&nbsp;<strong>DisposableBean</strong>，这种方法是要求bean类实现Spring的接口，但增加了bean和Spring容器的耦合度，因此不推荐使用。</li>
	<li>在XML文件中使用&lt;bean&gt;的<strong>init-method</strong>&nbsp;和&nbsp;<strong>destory-method</strong>&nbsp;属性，指定初始化之后和回调之前的回调方法。这两个属性的取值是bean中相应的初始化和销毁方法的名称。<strong>方法名称任意，但是方法不能有参数。</strong></li>
</ol>

<p>示例如下：</p>

<ol start="1">
	<li>&lt;bean&nbsp;id=&quot;userService&quot;&nbsp;class=&quot;cn.lovepi.***.UserService&quot;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;init-method=&quot;init&quot;&nbsp;destory-method=&quot;destory&quot;&gt;&nbsp;&nbsp;</li>
	<li>&lt;/bean&gt;&nbsp;&nbsp;</li>
</ol>

<p>在这里，我们指定了userService 这个bean的初始化方法为：init &nbsp; &nbsp; 销毁方法为：destory</p>

<p>&nbsp;</p>

<p><strong>Spring2.5</strong>在保留以上两种方式的基础上，提供了对<strong>JSR-250</strong>的支持。</p>

<p><strong>JSR-250</strong>规范定义了两个用于指定声明周期方法的注解：</p>

<ul>
	<li><strong>@PostConstruct</strong>：初始化之后的执行的回调方法</li>
	<li><strong>@PreDestroy</strong>：销毁之前的回调方法</li>
</ul>

<p>注解示例说明：</p>

<ol start="1">
	<li>public&nbsp;class&nbsp;PersonService{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;@PostConstruct&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;init(){......}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;@PreDestory&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;destory(){......}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>在这里init方法是初始化之后执行的方法，而destory方法为销毁之前执行的方法</p>

<p>由于使用了注解，所以得<strong>激活Bean的后处理器</strong>，所以得在XML配置文件当中增加</p>

<ol start="1">
	<li>&lt;context:annotation-config/&gt;&nbsp;&nbsp;</li>
</ol>

<h3><strong>3.Bean的依赖检查注解</strong></h3>

<p><strong>Spring2.0</strong>之前使用<strong>dependency-check</strong>在配置文件中设置属性用于<strong>依赖检查</strong>（只会检查Setter方法是否被调用），缺点是<strong>粒度较粗</strong>，该属性的取值包括以下几种：</p>

<ul>
	<li><strong>none</strong>： 默认不执行依赖检查</li>
	<li><strong>simple</strong>&nbsp;：对原始基本类型和集合类型进行检查</li>
	<li><strong>objects</strong>&nbsp;：对复杂类型进行检查</li>
	<li><strong>all</strong>&nbsp;：对所有类型进行检查</li>
</ul>

<p>使用<strong>Spring2.0</strong>提供的<strong>@Required</strong>注解，提供了<strong>更细粒度</strong>的控制，<strong>@Required</strong>注解只能标注在Setter方法之上，（标注在其他方法之上会被忽略&nbsp;）用于检查其是否被调用，当Setter方法未被调用的话会<strong>抛出异常</strong>。</p>

<p>由于使用了注解，所以得<strong>激活Bean的后处理器</strong>，所以得在XML配置文件当中增加</p>

<ol start="1">
	<li>&lt;context:annotation-config/&gt;&nbsp;&nbsp;</li>
</ol>

<h3><strong>4.Bean的自动装配注解</strong></h3>

<p><strong>@Autowired</strong>可以对成员变量、方法和构造函数进行标注，来完成自动装配的工作，他根据<strong>类型</strong>进行自动装配，如果需要按<strong>名称</strong>进行装配，则需要配合<strong>@Qualifier</strong>使用。</p>

<p>当标注了@Autowired的方法所需的<strong>类型</strong>在Spring容器中不存在的话会<strong>抛出异常</strong></p>

<ol start="1">
	<li>@Service&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;LoginService{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;@Autowired&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;private&nbsp;LogDao&nbsp;logDao;&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>如上面的例子所示，假如Spring容器中没有LogDao这个bean的话便会抛出异常。</p>

<p>解决的办法便是使用<strong>required=false</strong>属性来标注</p>

<ol start="1">
	<li>public&nbsp;class&nbsp;LoginService{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;@Autowired(required=false)&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;private&nbsp;LogDao&nbsp;LogDao;&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>但是假如Spring当中存在多个所需类型的bean，那么便要使用<strong>@Qualifier</strong>注解来指定名称。</p>

<ol start="1">
	<li>public&nbsp;class&nbsp;LoginService{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;@Autowired&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;@Qualifier(&quot;userDao&quot;)&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;private&nbsp;UserDao&nbsp;userDao;&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p><strong>@Autowired</strong>&nbsp;可以对类中<strong>集合类</strong>的变量或方法入参进行标注,此时会将容器中<strong>类型匹配的所有Bean</strong>都注入进来，如下所示：</p>

<ol start="1">
	<li>public&nbsp;class&nbsp;loginService{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;@Autowired(required=false)&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;public&nbsp;List&lt;Plugin&gt;&nbsp;pligins;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;public&nbsp;List&lt;Plugin&gt;&nbsp;getPlugins(){&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;plugins;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>Spring会将容器中所有类型为Plugin的bean都注入到集合中去。</p>

<p>&nbsp;</p>

<h2>三.基于Java类的配置</h2>

<p>基于Java类定义Bean配置元数据，其实就是通过Java类定义Spring配置元数据，且直接消除XML配置文件。</p>

<p>首先让我们看一下基于Java类如何定义Bean配置元数据，具体<strong>步骤</strong>如下：</p>

<ol>
	<li>使用<strong>@Configuration</strong>注解需要作为配置的类，表示该类将定义Bean的元数据</li>
	<li>使用<strong>@Bean</strong>注解相应的方法，该方法名默认就是Bean的名称，该方法返回值就是Bean的对象。</li>
	<li><strong>AnnotationConfigApplicationContext</strong>或子类进行加载基于java类的配置</li>
</ol>

<p>接下来通过示例来演示下如何基于Java类来配置Spring</p>

<p>首先创建一个配置类</p>

<ol start="1">
	<li>@Configuration&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;ApplicationContextConfig&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Bean&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;message()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;hello&quot;;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}</li>
</ol>

<p>然后还需要一个测试类，来查看配置是否成功</p>

<ol start="1">
	<li>public&nbsp;class&nbsp;ConfigurationTest&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AnnotationConfigApplicationContext&nbsp;ctx&nbsp;=&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;AnnotationConfigApplicationContext(ApplicationContextConfig.class);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(ctx.getBean(&quot;message&quot;));&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>通过<strong>@Configuration</strong>注解的类将被作为配置类使用，表示在该类中将定义Bean配置元数据，且使用@Configuration注解的类本身也是一个Bean，使用方式如下所示：</p>

<ol start="1">
	<li>@Configuration(&quot;ctxConfig&quot;)&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;ApplicationContextConfig&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&hellip;&hellip;&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>其中Configuration中的<strong>参数值</strong>即为该bean的<strong>名称</strong>。</p>

<p>通过<strong>@Bean</strong>注解配置类中的相应方法，则该方法名默认就是Bean名，该方法返回值就是Bean对象，并定义了Spring IoC容器如何实例化、自动装配、初始化Bean逻辑，具体使用方法如下：</p>

<ol start="1">
	<li>@Bean(name={},&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;autowire=Autowire.NO,&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMethod=&quot;&quot;,&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;destroyMethod=&quot;&quot;)&nbsp;&nbsp;</li>
</ol>

<p>其中name为bean的名称，可以有多个，autowire为是否自动装配，默认值为NO，initMethod为bean的初始化方法，destoryMethod为bean的销毁方法。</p>

<p>bean的注解具体使用如下：</p>

<ol start="1">
	<li>@Bean&nbsp;&nbsp;</li>
	<li>public&nbsp;String&nbsp;message()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;String(&quot;hello&quot;);&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>如上的代码等价与XML配置：</p>

<ol start="1">
	<li>&lt;bean&nbsp;id=&quot;message&quot;&nbsp;class=&quot;java.lang.String&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;constructor-arg&nbsp;index=&quot;0&quot;&nbsp;value=&quot;hello&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&lt;/bean&gt;&nbsp;&nbsp;</li>
</ol>

<p><strong>注意</strong>：<strong>使用bean注解的方法不能是private、final、static的。</strong></p>

<p>&nbsp;</p>

<p>基于Java方式的配置方式不是为了完全替代基于XML方式的配置，两者可以结合使用，因此可以有两种结合使用方式：</p>

<ul>
	<li>在基于Java方式的配置类中引入基于XML方式的配置文件</li>
	<li>在基于XML方式的配置文件中中引入基于Java方式的配置</li>
</ul>

<p>&nbsp;</p>

<p>引入基于XML配置文件：</p>

<ol start="1">
	<li>&lt;bean&nbsp;id=&quot;message&quot;&nbsp;class=&quot;java.lang.String&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;constructor-arg&nbsp;index=&quot;0&quot;&nbsp;value=&quot;test&quot;&gt;&lt;/constructor-arg&gt;&nbsp;&nbsp;</li>
	<li>&lt;/bean&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>@Configuration(&quot;ctxConfig&quot;)&nbsp;&nbsp;</li>
	<li>@ImportResource(&quot;classpath:com/jike/***/appCtx.xml&quot;)&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;ApplicationContextConfig&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&hellip;&hellip;&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>可以看到在java程序中使用<strong>@</strong><strong>ImportResource</strong>导入了XML的配置文件</p>

<p>&nbsp;</p>

<p><strong>引入基于Java的配置文件：</strong></p>

<ol start="1">
	<li>&lt;context:annotation-config/&gt;&nbsp;&nbsp;</li>
	<li>&lt;bean&nbsp;id=&quot;ctxConfig&quot;&nbsp;class=&ldquo;com.jike.***..ApplicationContextConfig&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>//测试类&nbsp;&nbsp;</li>
	<li>public&nbsp;void&nbsp;testXmlConfig()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;configLocations[]&nbsp;=&nbsp;{&quot;&nbsp;classpath:com/jike/***/appCtx.xml&quot;};&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ApplicationContext&nbsp;ctx&nbsp;=&nbsp;new&nbsp;ClassPathXmlApplicationContext(configLocations);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&hellip;&hellip;&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>可以看到在<strong>XML</strong>的配置文件当中将java的配置类当中Bean来声明，第一行的是开启注解驱动支持。</p>

<p>值得注意的是必须得配置<strong>&lt;context:annotation-config/&gt;</strong>在XML配置文件中。</p>

<p>&nbsp;</p>

<p>Spring提供了一个<strong>AnnotationConfigApplicanContext</strong>类，能够<strong>直接</strong>通过标注<strong>@Configuration</strong>的Java类启动Spring容器：</p>

<p>通过构造函数加载配置类:</p>

<ol start="1">
	<li>ApplicationContext&nbsp;ctx&nbsp;=&nbsp;new&nbsp;AnnotationConfigApplicationContext(AppConf.class);&nbsp;&nbsp;</li>
</ol>

<p><strong>通过编码方式注册配置类：</strong></p>

<ol start="1">
	<li>AnnotationConfigApplicationContext&nbsp;ctx&nbsp;=&nbsp;new&nbsp;AnnotationConfigApplicationContext();&nbsp;&nbsp;</li>
	<li>ctx.register(DaoConfig.class);&nbsp;&nbsp;</li>
	<li>ctx.register(ServiceConfig.class);&nbsp;&nbsp;</li>
	<li>ctx.refresh();&nbsp;&nbsp;</li>
</ol>

<p>可以看到ctx注册了多个configuration类，然后通过refresh类来刷新容器以应用这些配置文件。</p>

<p>可以通过代码一个个的引入配置类，当然也可以使用<strong>@Import</strong>注解来引入配置类</p>

<p><strong>引入多个配置类：</strong></p>

<ol start="1">
	<li>@Configuration&nbsp;&nbsp;</li>
	<li>@Import(DaoConfig.class)&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;ServiceConfig&nbsp;&nbsp;{&hellip;&hellip;}&nbsp;&nbsp;</li>
</ol>

<p><strong>总结：不同配置方式比较</strong></p>

<p>我们来看一下不同配置方式在不同方面的使用</p>

<p><img alt="" src="http://img.blog.csdn.net/20160612232202278?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" style="width:800px" /><br />
&nbsp;</p>

<h2>四、不同方式适用场景</h2>

<p>其实Spring支持这么多的配置方式，那么这些配置方式必然有其自己独特的舞台</p>

<h3><strong>基于</strong><strong>XML的配置主要使用场景：</strong></h3>

<ul>
	<li>第三方类库，如DataSource、JdbcTemplate等；</li>
	<li>命名空间，如aop、context等；</li>
</ul>

<h3><strong>基于注解的配置主要使用场景：</strong></h3>

<ul>
	<li>Bean的实现类是当前项目开发的，可直接在Java类中使用注解配置</li>
</ul>

<h3><strong>基于Java类的配置主要使用场景</strong>：</h3>

<ul>
	<li>对于实例化Bean的逻辑比较复杂，则比较适合用基于Java类配置的方式</li>
</ul>

<p>在日常的开发中我们主要是使用<strong>XML配置</strong>和<strong>注解配置</strong>方式向结合的开发方式，一般不推荐使用基于Java类的配置方式。</p>

<p>&nbsp;</p>
