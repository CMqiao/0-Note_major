<h1><strong>Bean的调用</strong></h1>

<p>&nbsp;[ 通过ApplicationContextAware接口&nbsp;]</p>

<h2>Bean访问接口：ApplicationContextAware</h2>

<h2>一、这个接口的作用</h2>

<p>访问Spring容器中Bean的接口。</p>

<p>当一个类实现了这个接口（ApplicationContextAware）之后，这个类就可以方便获得ApplicationContext中的所有bean。换句话说，就是这个类可以直接获取spring配置文件中，所有有引用到的bean对象。</p>

<h2>二、用法</h2>

<p>例如我有一个方法类AppUtil(ContextUtil)，这个方法类中需要使用到的ApplicationContext中的某个bean（companyService）。</p>

<h3>1、配置初始化SpringBean</h3>

<p>因为spring要建立属于自己的容器，就必须要加载自己的配置文件。</p>

<p>&nbsp;&nbsp; &nbsp;&nbsp;这个时候，需要注册ContextLoaderListener或者这个类的子类。</p>

<p>在web.xml加上以下的信息：</p>

<p><code>&lt;</code><code>listener</code><code>&gt;</code></p>

<p><code>&nbsp; </code><code>&lt;</code><code>listener-class</code><code>&gt;org.springframework.web.context.ContextLoaderListener&lt;/</code><code>listener-class</code><code>&gt;</code></p>

<p><code>&lt;/</code><code>listener</code><code>&gt;</code></p>

<p>当然，这样子的话只会读取默认路径下的application.xml配置文件的。如果需要读取特定路径下的配置文件。需要在web.xml中</p>

<p>添加如下信息。可以参考我的示例，指定配置文件，如下：</p>

<p><code>&lt;</code><code>context-param</code><code>&gt;</code></p>

<p><code>&nbsp; &nbsp; &nbsp;</code><code>&lt;</code><code>param-name</code><code>&gt;contextConfigLocation&lt;/</code><code>param-name</code><code>&gt;</code></p>

<p><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;</code><code>param-value</code><code>&gt;classpath:conf/app-context.xml&lt;/</code><code>param-value</code><code>&gt;</code></p>

<p><code>&lt;/</code><code>context-param</code><code>&gt;</code></p>

<p><br />
注意：<code>&lt;</code><code>param-name&gt;contextConfigLocation&lt;/param-name&gt;</code>是不能改变的。</p>

<p>&nbsp;</p>

<h3>2、方法类AppUtil的处理</h3>

<h4>1&gt;方法类AppUtil实现ApplicationContextAware接口：</h4>

<p><code>public</code>&nbsp;<code>class</code>&nbsp;<code>AppUtil implements</code>&nbsp;<code>ApplicationContextAware</code></p>

<h4>2&gt;为方法类AppUtil增加一个静态的成员ApplicationContext类型的对象。</h4>

<p>以后方法类AppUtil获取ApplicationContext，就是通过读取这个成员变量的。具体如下所示：</p>

<p>private static ApplicationContext appContext;</p>

<h4>3&gt;实现ApplicationContextAware接口的默认方法：</h4>

<p><code>public</code>&nbsp;<code>void</code>&nbsp;<code>setApplicationContext(ApplicationContext&nbsp;paramApplicationContext)</code></p>

<p><code>&nbsp;throws</code>&nbsp;<code>BeansException</code></p>

<p><code>&nbsp;&nbsp;</code><code>{</code></p>

<p><code>&nbsp;&nbsp; &nbsp;</code><code>appContext&nbsp;=&nbsp;paramApplicationContext;</code></p>

<p><code>&nbsp;&nbsp;</code><code>}</code></p>

<h4>4&gt;在方法类AppUtil中增加如下方法，使用静态的成员ApplicationContext类型的对象，appContext，来调用其他bean。</h4>

<p><code>public</code>&nbsp;<code>static</code>&nbsp;<code>Object&nbsp;getBean(String&nbsp;paramString)</code></p>

<p><code>&nbsp;</code><code>{</code></p>

<p><code>&nbsp; &nbsp;</code><code>return</code>&nbsp;<code>appContext.getBean(paramString);</code></p>

<p><code>&nbsp;</code><code>}</code></p>

<h3>3、注册方法类AppUtil</h3>

<p><strong>原理：spring能够为我们自动地执行了setApplicationContext</strong></p>

<p>严格上来说，方法类AppUtil是一个bean,而且从步骤2中我们不难发现，之所以方法类AppUtil能够灵活自如地获取ApplicationContext</p>

<p>就是因为<u><strong>spring能够为我们自动地执行了setApplicationContext</strong></u>。但是，spring不会无缘无故地为某个类执行它的方法的，所以，就很有必要通过注册方法类AppUtil的方式告知spring有这样子一个类的存在。</p>

<p>其实，方法很简单，就是将方法类AppUtil作为一个普通的bean在spring的配置文件中进行注册，或者通知声明方式：</p>

<p><code>&lt;</code><code>bean</code>&nbsp;<code>id</code><code>=</code><code>&quot;appUtil&quot;</code>&nbsp;<code>class</code><code>=</code><code>&quot;com.htsoft.core.util.AppUtil&quot;</code><code>/&gt;</code></p>

<p>@Component<br />
public class ContextUtil implements ApplicationContextAware&nbsp;</p>

<h3>4、调用Bean</h3>

<p>使用静态的成员ApplicationContext类型的对象，appContext，来调用其他bean。那么，在方法类AppUtil中就能够灵活地调用其他任何一个bean了，例如：</p>

<p><code>CompanyService&nbsp;localCompanyService&nbsp;=&nbsp;(CompanyService)getBean(</code><code>&quot;companyService&quot;</code><code>);</code></p>

<p>注：配置文件中关于companyService的内容：</p>

<p><code>&lt;</code><code>bean</code>&nbsp;<code>id</code><code>=</code><code>&quot;companyService&quot;</code>&nbsp;<code>class</code><code>=</code><code>&quot;com.kaiwii.service.system.impl.CompanyServiceImpl&quot;</code><code>&gt;</code></p>

<p><code>&nbsp; &nbsp;</code><code>&lt;</code><code>constructor-arg</code>&nbsp;<code>index</code><code>=</code><code>&quot;0&quot;</code>&nbsp;<code>ref</code><code>=</code><code>&quot;companyDao&quot;</code><code>/&gt;</code></p>

<p><code>&lt;/</code><code>bean</code><code>&gt;</code></p>

<p>&nbsp;</p>

<h2>三、实例：</h2>

<p>Bean访问工具类：ContextUtil.java</p>

<p>package com.suning.bdsp.dataService.util;</p>

<p>import org.springframework.beans.BeansException;<br />
import org.springframework.context.ApplicationContext;<br />
import org.springframework.context.ApplicationContextAware;<br />
import org.springframework.stereotype.Component;</p>

<p>/**<br />
&nbsp;* 系统上下文工具类&lt;br&gt;<br />
&nbsp;* 〈功能详细描述〉<br />
&nbsp;*&nbsp;<br />
&nbsp;* @author 11075490<br />
&nbsp;* @see [相关类/方法]（可选）<br />
&nbsp;* @since [产品/模块版本] （可选）<br />
&nbsp;*/<br />
@Component<br />
public class ContextUtil implements ApplicationContextAware&nbsp;<br />
{</p>

<p>&nbsp; &nbsp; private static ApplicationContext springContext;</p>

<p>&nbsp; &nbsp; public void setApplicationContext(ApplicationContext applicationContext) throws BeansException&nbsp;<br />
&nbsp; &nbsp; {<br />
&nbsp; &nbsp; &nbsp; &nbsp; if (null == springContext)&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; springContext = applicationContext;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; /**<br />
&nbsp; &nbsp; &nbsp;* 获取Spring容器中的实例<br />
&nbsp; &nbsp; &nbsp;*/<br />
&nbsp; &nbsp; public static Object getBean(String beanId)<br />
&nbsp; &nbsp; {<br />
&nbsp; &nbsp; &nbsp; &nbsp; return springContext.getBean(beanId);<br />
&nbsp; &nbsp; }</p>

<p>}</p>
