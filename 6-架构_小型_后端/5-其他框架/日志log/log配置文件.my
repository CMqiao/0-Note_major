<h1>log配置文件基础</h1>

<p>通常，我们都提供一个名为 log4j.properties的文件，在第一次调用到Log4J时，Log4J会在类路径（../web-inf/class/当然也可以放到其它任何目录，只要该目录被包含到类路径中即可）中定位这个文件，并读入这个文件完成的配置。这个配置文件告 诉Log4J以什么样的格式、把什么样的信息、输出到什么地方。<br />
　　Log4j有三个主要的组件：Loggers(记录器)，Appenders(输出源)和Layouts(布局)，这里可简单理解为日志类别，日志要输出的地方和日志以何种形式输出。综合使用这三个组件可以轻松的记录信息的类型和级别，并可以在运行时控制日志输出的样式和位置。下面对三个组件分别进行说明：</p>

<h2>　　<strong>1、 Loggers</strong></h2>

<p>　 　Loggers组件在此系统中被分为五个级别：DEBUG、INFO、WARN、ERROR和FATAL。这五个级别是有顺序的，DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，分别用来指定这条日志信息的重要程度,明白这一点很重要，这里Log4j有一个规则：假设Loggers级别为P，如果在Loggers中发生了一个级别Q比P高，则可以启动，否则屏蔽掉。<br />
假设你定义的级别是info，那么error和warn的日志可以显示而比他低的debug信息就不显示了。<br />
&nbsp;　<br />
　　Java程序举例来说：<br />
　　<br />
　　//建立Logger的一个实例，命名为&ldquo;com.foo&rdquo;<br />
　　　Logger　logger = Logger.getLogger(&quot;com.foo&quot;); //&quot;com.foo&quot;是实例进行命名，也可以任意<br />
　　//设置logger的级别。通常不在程序中设置logger的级别。一般在配置文件中设置。<br />
　　logger.setLevel(Level.INFO);<br />
　　Logger barlogger = Logger.getLogger(&quot;com.foo.Bar&quot;);<br />
　　//下面这个请求可用，因为WARN &gt;= INFO<br />
　　logger.warn(&quot;Low fuel level.&quot;);<br />
　　//下面这个请求不可用，因为DEBUG &lt; INFO<br />
　　logger.debug(&quot;Starting search for nearest gas station.&quot;);<br />
　　//命名为&ldquo;com.foo.bar&rdquo;的实例barlogger会继承实例&ldquo;com.foo&rdquo;的级别。因此，下面这个请求可用，因为INFO &gt;= INFO<br />
　　barlogger.info(&quot;Located nearest gas station.&quot;);<br />
　　//下面这个请求不可用，因为DEBUG &lt; INFO<br />
　　barlogger.debug(&quot;Exiting gas station search&quot;);<br />
　　这里&ldquo;是否可用&rdquo;的意思是能否输出Logger信息。<br />
　　　　在对Logger实例进行命名时，没有限制，可以取任意自己感兴趣的名字。一般情况下建议以类的所在位置来命名Logger实例，这是目前来讲比较有效的Logger命名方式。这样可以使得每个类建立自己的日志信息，便于管理。比如：<br />
　　<br />
　　static Logger logger = Logger.getLogger(ClientWithLog4j.class.getName());</p>

<h2>　<strong>　2、Appenders</strong></h2>

<p>　　禁用与使用日志请求只是Log4j其中的一个小小的地方，Log4j日志系统允许把日志输出到不同的地方，如控制台（Console）、文件（Files）、根据天数或者文件大小产生新的文件、以流的形式发送到其它地方等等。<br />
　　<br />
　　其语法表示为：<br />
　　<br />
　　org.apache.log4j.ConsoleAppender（控制台）<br />
　　org.apache.log4j.FileAppender（文件）<br />
　　org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）<br />
&nbsp;&nbsp;&nbsp; org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）<br />
　　org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）<br />
　　<br />
　　配置时使用方式为：<br />
　　log4j.appender.appenderName = fully.qualified.name.of.appender.class<br />
　　log4j.appender.appenderName.option1 = value1<br />
　　&hellip;<br />
&nbsp;&nbsp;&nbsp; log4j.appender.appenderName.option = valueN<br />
　　这样就为日志的输出提供了相当大的便利。</p>

<h2><strong>　　3、Layouts</strong></h2>

<p>　 　有时用户希望根据自己的喜好格式化自己的日志输出。Log4j可以在Appenders的后面附加Layouts来完成这个功能。Layouts提供了 四种日志输出样式，如根据HTML样式、自由指定样式、包含日志级别与信息的样式和包含日志时间、线程、类别等信息的样式等等。<br />
　　<br />
　　其语法表示为：<br />
　　<br />
　　org.apache.log4j.HTMLLayout（以HTML表格形式布局），<br />
　　org.apache.log4j.PatternLayout（可以灵活地指定布局模式），<br />
　　org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），<br />
　　org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）<br />
　　<br />
　　配置时使用方式为：<br />
　　<br />
　　log4j.appender.appenderName.layout =fully.qualified.name.of.layout.class<br />
　　log4j.appender.appenderName.layout.option1 = value1<br />
　　&hellip;<br />
　　log4j.appender.appenderName.layout.option = valueN</p>
