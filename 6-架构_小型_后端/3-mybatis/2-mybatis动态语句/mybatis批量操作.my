<h1>Mybatis foreach 批量操作</h1>

<h2>foreach属性</h2>

<table border="0">
	<thead>
		<tr>
			<th>属性</th>
			<th>描述</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td><tt>item</tt></td>
			<td>循环体中的具体对象。支持属性的点路径访问，如item.age,item.info.details。<br />
			具体说明：在list和数组中是其中的对象，在map中是value。<br />
			该参数为必选。</td>
		</tr>
		<tr>
			<td><tt>collection</tt></td>
			<td>要做foreach的对象，作为入参时，List&lt;?&gt;对象默认用list代替作为键，数组对象有array代替作为键，Map对象用map代替作为键。<br />
			当然在作为入参时可以使用@Param(&quot;keyName&quot;)来设置键，设置keyName后，list,array,map将会失效。 除了入参这种情况外，还有一种作为参数对象的某个字段的时候。举个例子：<br />
			如果User有属性List ids。入参是User对象，那么这个collection = &quot;ids&quot;<br />
			如果User有属性Ids ids;其中Ids是个对象，Ids有个属性List id;入参是User对象，那么collection = &quot;ids.id&quot;<br />
			上面只是举例，具体collection等于什么，就看你想对那个元素做循环。<br />
			该参数为必选。</td>
		</tr>
		<tr>
			<td><tt>separator</tt></td>
			<td>元素之间的分隔符，例如在in()的时候，separator=&quot;,&quot;会自动在元素中间用&ldquo;,&ldquo;隔开，避免手动输入逗号导致sql错误，如in(1,2,)这样。该参数可选。</td>
		</tr>
		<tr>
			<td><tt>open</tt></td>
			<td>foreach代码的开始符号，一般是(和close=&quot;)&quot;合用。常用在in(),values()时。该参数可选。</td>
		</tr>
		<tr>
			<td><tt>close</tt></td>
			<td>foreach代码的关闭符号，一般是)和open=&quot;(&quot;合用。常用在in(),values()时。该参数可选。</td>
		</tr>
		<tr>
			<td><tt>index</tt></td>
			<td>在list和数组中,index是元素的序号，在map中，index是元素的key，该参数可选。</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<h3>1.select count(*) from users id in (x1,x2,x3,...)</h3>

<pre>
&lt;select id=&quot;countByUserList&quot; resultType=&quot;int&quot; parameterType=&quot;list&quot;&gt;    
select count(*) from users    
  &lt;where&gt;    
    id in    
    &lt;foreach item=&quot;item&quot; collection=&quot;list&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot; index=&quot;&quot;&gt;    
      #{item.id, jdbcType=NUMERIC}    
    &lt;/foreach&gt;    
  &lt;/where&gt;    
&lt;/select&gt; 
</pre>

<h3>2.循环插入表数据，用到dual伪表给数据做掩护。</h3>

<p>insert into deliver (col1,col2,col3,col4,...) select col1,col2,col3,col4... from dual union all select col11,col22,col33,col44,... from dual。（字段col1,col2,col3,col4,...）添加 或者 insert into deliver select col1,col2,col3,col4,... from dual union all select col11,col22,col33,col44,... from dual。（全部字段添加）</p>

<pre>
&lt;insert id=&quot;addList&quot;&gt;  
          
        INSERT INTO DELIVER  
            (  
                &lt;include refid=&quot;selectAllColumnsSql&quot;/&gt;  
             )  
           
          &lt;foreach collection=&quot;deliverList&quot; item=&quot;item&quot; separator=&quot;UNION ALL&quot;&gt;  
                SELECT   
                     #{item.id, jdbcType=NUMERIC},  
                     #{item.name, jdbcType=VARCHAR}  
                FROM DUAL  
          &lt;/foreach&gt;  
    &lt;/insert&gt;  
</pre>

<h3>3.循环插入map值 &nbsp;insert into users(key,values) values(key1,values1),(key2,values3),(key3,values4)</h3>

<pre>
&lt;insert id=&quot;ins_string_string&quot;&gt;    
        insert into string_string (key, value) values    
        &lt;foreach item=&quot;item&quot; index=&quot;key&quot; collection=&quot;map&quot;    
            open=&quot;&quot; separator=&quot;,&quot; close=&quot;&quot;&gt;(#{key}, #{item})&lt;/foreach&gt;    
    &lt;/insert&gt; 
</pre>

<h3>4.select&nbsp;count(*)&nbsp;from&nbsp;key_cols&nbsp;where&nbsp;col_a&nbsp;=&nbsp;?&nbsp;AND&nbsp;col_b&nbsp;=&nbsp;?</h3>

<p>(<strong>一定要注意到$和#的区别</strong>，$的参数直接输出，#的参数会被替换为?，然后传入参数值，加上&#39; &#39;后执行。可以防止sql注入)</p>

<pre>
&lt;select id=&quot;sel_key_cols&quot; resultType=&quot;int&quot;&gt;    
        select count(*) from key_cols where    
        &lt;foreach item=&quot;item&quot; index=&quot;key&quot; collection=&quot;map&quot;    
            open=&quot;&quot; separator=&quot;AND&quot; close=&quot;&quot;&gt;${key} = #{item}&lt;/foreach&gt;    
    &lt;/select&gt;  
</pre>

<h3>5.select * from t_news n where n.tags like ? or n.tags like ?&nbsp;</h3>

<pre>
 &lt;select id=&quot;selectTestForEach&quot; parameterType=&quot;News&quot; resultMap=&quot;NewsResultMapper&quot;&gt;
  select * from t_news n where 
  &lt;foreach collection=&quot;listTag&quot; index=&quot;index&quot; item=&quot;tag&quot; open=&quot;&quot; separator=&quot;or&quot; close=&quot;&quot;&gt;
             n.tags like  &#39;%&#39;||#{tag}||&#39;%&#39;
  &lt;/foreach&gt;
 &lt;select&gt;</pre>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>
