<h1>&lt;mvc:annotation-driven /&gt;与&lt;context:annotation-config /&gt;</h1>

<p>　　Spring家族的配置中这两个配置的意义，说具体点其实根据标签的shecma就能看出来，mvc，主要就是为了Spring MVC来用的，提供Controller请求转发，json自动转换等功能，而context这个主要是解决spring容器的一些注解。</p>

<p>　　从百度参考了两个帖子：</p>

<p>　　　　http://blog.csdn.net/sxbjffsg163/article/details/9955511</p>

<p>　　　　http://blog.sina.com.cn/s/blog_872758480100wtfh.html</p>

<p>&lt;mvc:annotation-driven /&gt; 是一种简写形式，完全可以手动配置替代这种简写形式，简写形式可以让初学都快速应用默认配置方案。&lt;mvc:annotation-driven /&gt; 会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,是spring MVC为@Controllers分发请求所必须的。<br />
并提供了：数据绑定支持，@NumberFormatannotation支持，@DateTimeFormat支持，@Valid支持，读写XML的支持（JAXB），读写JSON的支持（Jackson）。<br />
后面，我们处理响应ajax请求时，就使用到了对json的支持。<br />
后面，对action写JUnit单元测试时，要从spring IOC容器中取DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean，来完成测试，取的时候要知道是&lt;mvc:annotation-driven /&gt;这一句注册的这两个bean。</p>

<p>&nbsp;</p>

<p><code>&lt;context:annotation-config&gt;</code>&nbsp;declares support for general annotations such as&nbsp;<code>@Required</code>,&nbsp;<code>@Autowired</code>,&nbsp;<code>@PostConstruct</code>, and so on.</p>

<p><code>&lt;mvc:annotation-driven /&gt;</code>&nbsp;is actually rather pointless. It declares explicit support for annotation-driven MVC controllers (i.e.<code>@RequestMapping</code>,&nbsp;<code>@Controller</code>, etc), even though support for those is the default behaviour.</p>

<p>My advice is to always declare&nbsp;<code>&lt;context:annotation-config&gt;</code>, but don&#39;t bother with&nbsp;<code>&lt;mvc:annotation-driven /&gt;</code>&nbsp;unless you want JSON support via Jackson.</p>

<p>&nbsp;</p>

<p>在基于主机方式配置Spring的配置文件中，你可能会见到&lt;context:annotation-config/&gt;这样一条配置，他的作用是式地向&nbsp;Spring&nbsp;容器注册</p>

<p>AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor、</p>

<p>PersistenceAnnotationBeanPostProcessor&nbsp;以及&nbsp;RequiredAnnotationBeanPostProcessor&nbsp;这&nbsp;4&nbsp;个BeanPostProcessor。</p>

<p>注册这4个<strong>&nbsp;</strong>BeanPostProcessor的作用，就是为了你的系统能够识别相应的注解。</p>

<p>例如：</p>

<p>如果你想使用@Autowired注解，那么就必须事先在&nbsp;Spring&nbsp;容器中声明&nbsp;AutowiredAnnotationBeanPostProcessor Bean。传统声明方式如下</p>

<p>&lt;bean&nbsp;class=&quot;org.springframework.beans.factory.annotation.&nbsp;AutowiredAnnotationBeanPostProcessor&nbsp;&quot;/&gt;&nbsp;</p>

<p>如果想使用@ Resource&nbsp;、@ PostConstruct、@ PreDestroy等注解就必须声明CommonAnnotationBeanPostProcessor</p>

<p>如果想使用@PersistenceContext注解，就必须声明PersistenceAnnotationBeanPostProcessor的Bean。</p>

<p>如果想使用&nbsp;@Required的注解，就必须声明RequiredAnnotationBeanPostProcessor的Bean。同样，传统的声明方式如下：</p>

<p>&lt;bean&nbsp;class=&quot;org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor&quot;/&gt;&nbsp;</p>

<p>一般来说，这些注解我们还是比较常用，尤其是Antowired的注解，在自动注入的时候更是经常使用，所以如果总是需要按照传统的方式一条一条配置显得有些繁琐和没有必要，于是spring给我们提供&lt;context:annotation-config/&gt;的简化配置方式，自动帮你完成声明。</p>

<p>&nbsp;&nbsp;&nbsp;不过，呵呵，我们使用注解一般都会配置扫描包路径选项</p>

<p>&lt;context:component-scan&nbsp;base-package=&rdquo;XX.XX&rdquo;/&gt;&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;该配置项其实也包含了自动注入上述processor的功能，因此当使用&nbsp;&lt;context:component-scan/&gt;&nbsp;后，就可以将&nbsp;&lt;context:annotation-config/&gt;&nbsp;移除了。</p>

<h1>&lt;url-pattern&gt;写成/和/*的区别</h1>

<p><code>&lt;url-pattern&gt;/&lt;/url-pattern&gt;</code>：&nbsp;<br />
会匹配到/springmvc这样的路径型url，不会匹配到模式为*.jsp这样的后缀型url。</p>

<p><code>&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</code>：&nbsp;<br />
会匹配所有的url：路径型的和后缀型的url(包括/springmvc，.jsp，.js和*.html等)。&nbsp;<br />
下面是关于这个问题在stack overflow上的解释：&nbsp;<br />
原文链接：<a href="http://stackoverflow.com/questions/4140448/difference-between-and-in-servlet-mapping-url-pattern" target="_blank">http://stackoverflow.com/questions/4140448/difference-between-and-in-servlet-mapping-url-pattern</a>&nbsp;<br />
简单的翻译如下：&nbsp;<br />
<code>&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</code>：&nbsp;<br />
这种形式将会覆盖所有其它的servlet。不管你发出了什么样的请求，最终都会在这个servlet中结束。因此，对于servlet来说，这是一个很糟糕的URL模式。通常来讲，你只会想要在一个Filter中使用这种模式。它可以通过调用doFilter()方法来使请求继续。&nbsp;<br />
<code>&lt;url-pattern&gt;/&lt;/url-pattern&gt;</code>：&nbsp;<br />
这种形式不会覆盖任何其它的servlet。它仅仅替换了servlet容器中内建的默认servlet。这种形式通常只用来请求静态资源（CSS/JS/image等）和展示目录的列表。servlet容器内建的默认servlet同样可以处理HTTP cache请求、媒体（声音/视频）流以及文件的下载。通常来说，你不会想要覆盖这个默认的servlet，否则，你将不得不自己处理一些琐碎的任务。因此，对于sevlet来说，这同样是一个糟糕的URL模式。说到为什么JSP页面的请求并不会命中这个servlet，那是因为servlet容器内建的JSP servlet将会被调用，而这个容器内建的JSP servlet已经默认地映射在了*.jsp上。&nbsp;<br />
<code>&lt;url-pattern&gt;&lt;/url-pattern&gt;</code>&nbsp;<br />
这种空串的形式。当上下文的根被请求的时候，它将被调用。这与<code>&lt;welcome-file&gt;</code>的方式是不同的，因为这种形式在当任何子目录被请求的时候不会被调用。当你期望一个&ldquo;首页servlet&rdquo;的时候，这种URL模式就是适合你的。</p>
