<h1>DispatcherServlet详解</h1>

<h2>1、DispatcherServlet作用</h2>

<p>DispatcherServlet是前端控制器设计模式的实现，提供Spring Web MVC的集中访问点，而且负责职责的分派，而且与Spring IoC容器无缝集成，从而可以获得Spring的所有好处。&nbsp;具体请参考第二章的图2-1。</p>

<p>DispatcherServlet主要用作职责调度工作，本身主要用于控制流程，主要职责如下：</p>

<p>1、文件上传解析，如果请求类型是multipart将通过MultipartResolver进行文件上传解析；</p>

<p>2、通过HandlerMapping，将请求映射到处理器（返回一个HandlerExecutionChain，它包括一个处理器、多个HandlerInterceptor拦截器）；</p>

<p>3、通过HandlerAdapter支持多种类型的处理器(HandlerExecutionChain中的处理器)；</p>

<p>4、通过ViewResolver解析逻辑视图名到具体视图实现；</p>

<p>5、本地化解析；</p>

<p>6、渲染具体的视图等；</p>

<p>7、如果执行过程中遇到异常将交给HandlerExceptionResolver来解析。</p>

<p>从以上我们可以看出DispatcherServlet主要负责流程的控制（而且在流程中的每个关键点都是很容易扩展的）。</p>

<p>&nbsp;</p>

<h2>2、DispatcherServlet在web.xml中的配置</h2>

<pre>
    &lt;servlet&gt;
        &lt;servlet-name&gt;chapter2&lt;/servlet-name&gt;
        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
    &lt;/servlet&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;chapter2&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
 </pre>

<p><strong>load-on-startup</strong><strong>：</strong>表示启动容器时初始化该Servlet；</p>

<p><strong>url-pattern</strong><strong>：</strong>表示哪些请求交给Spring Web MVC处理，&nbsp;&ldquo;/&rdquo;&nbsp;是用来定义默认servlet映射的。也可以如&ldquo;*.html&rdquo;表示拦截所有以html为扩展名的请求。</p>

<p>该DispatcherServlet默认使用WebApplicationContext作为上下文，Spring默认配置文件为&ldquo;/WEB-INF/[servlet名字]-servlet.xml&rdquo;。</p>

<p>DispatcherServlet也可以配置自己的初始化参数，覆盖默认配置：</p>

<p>摘自Spring Reference</p>

<table border="1" cellpadding="0">
	<tbody>
		<tr>
			<td>
			<p><strong>参数</strong></p>
			</td>
			<td>
			<p><strong>描述</strong></p>
			</td>
		</tr>
		<tr>
			<td>
			<p>contextClass</p>
			</td>
			<td>
			<p>实现WebApplicationContext接口的类，当前的servlet用它来创建上下文。如果这个参数没有指定， 默认使用XmlWebApplicationContext。</p>
			</td>
		</tr>
		<tr>
			<td>
			<p>contextConfigLocation</p>
			</td>
			<td>
			<p>传给上下文实例（由contextClass指定）的字符串，用来指定上下文的位置。这个字符串可以被分成多个字符串（使用逗号作为分隔符） 来支持多个上下文（在多上下文的情况下，如果同一个bean被定义两次，后面一个优先）。</p>
			</td>
		</tr>
		<tr>
			<td>
			<p>namespace</p>
			</td>
			<td>
			<p>WebApplicationContext命名空间。默认值是[server-name]-servlet。</p>
			</td>
		</tr>
	</tbody>
</table>

<p>因此我们可以通过添加初始化参数</p>

<p>&nbsp;</p>

<pre>
    &lt;servlet&gt;
        &lt;servlet-name&gt;chapter2&lt;/servlet-name&gt;
        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
            &lt;param-value&gt;classpath:spring-servlet-config.xml&lt;/param-value&gt;
        &lt;/init-param&gt;
    &lt;/servlet&gt;</pre>

<p>&nbsp;</p>

<p>如果使用如上配置，Spring Web MVC框架将加载&ldquo;classpath:spring-servlet-config.xml&rdquo;来进行初始化上下文而不是&ldquo;/WEB-INF/[servlet名字]-servlet.xml&rdquo;。</p>

<h2>3、上下文关系</h2>

<p>集成Web环境的通用配置：</p>

<pre>
&lt;context-param&gt;
      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
      &lt;param-value&gt;
          classpath:spring-common-config.xml,
          classpath:spring-budget-config.xml
      &lt;/param-value&gt;
&lt;/context-param&gt;
&lt;listener&gt;  &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
&lt;/listener&gt;</pre>

<p>如上配置是Spring集成Web环境的通用配置；一般用于加载除Web层的Bean（如DAO、Service等），以便于与其他任何Web框架集成。</p>

<p>contextConfigLocation：表示用于加载Bean的配置文件；</p>

<p>contextClass：表示用于加载Bean的ApplicationContext实现类，默认WebApplicationContext。</p>

<p>创建完毕后会将该上下文放在ServletContext：</p>

<p>servletContext.setAttribute(</p>

<p>WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE,</p>

<p>this.context);</p>

<p>&nbsp;</p>

<p><strong>ContextLoaderListener</strong><strong>初始化的上下文和</strong><strong>DispatcherServlet</strong><strong>初始化的上下文关系，如图</strong><strong>3-1</strong></p>

<p><img alt="" src="http://sishuok.com/forum/upload/2012/7/21/664811d1be029d66250bfe66d65fbe4f__1.JPG" style="height:507px; width:700px" title="点击查看原始大小图片" /></p>

<p>图3-1</p>

<p>从图中可以看出：</p>

<p>ContextLoaderListener初始化的上下文加载的Bean是对于整个应用程序共享的，不管是使用什么表现层技术，一般如DAO层、Service层Bean；</p>

<p>DispatcherServlet初始化的上下文加载的Bean是只对Spring Web MVC有效的Bean，如Controller、HandlerMapping、HandlerAdapter等等，该初始化上下文应该只加载Web相关组件。</p>

<h2>4、DispatcherServlet初始化顺序</h2>

<p><strong>继承体系结构如下所示：</strong></p>

<p><img alt="" src="http://sishuok.com/forum/upload/2012/7/21/248bdb02ef3126e542c3b99822ad77ee__2.JPG" /></p>

<p>&nbsp;</p>

<p>1、<strong>HttpServletBean</strong><strong>继承HttpServlet</strong><strong>，</strong>因此在Web容器启动时将调用它的init方法，该初始化方法的主要作用</p>

<p>：：：将Servlet初始化参数（init-param）设置到该组件上（如contextAttribute、contextClass、namespace、contextConfigLocation），通过BeanWrapper简化设值过程，方便后续使用；</p>

<p>：：：提供给子类初始化扩展点，initServletBean()，该方法由FrameworkServlet覆盖。</p>

<pre>
public abstract class HttpServletBean extends HttpServlet implements EnvironmentAware{
@Override
    public final void init() throws ServletException {
       //省略部分代码
       //1、如下代码的作用是将Servlet初始化参数设置到该组件上
       //如contextAttribute、contextClass、namespace、contextConfigLocation；
       try {
           PropertyValues pvs = new ServletConfigPropertyValues(getServletConfig(), this.requiredProperties);
           BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this);
           ResourceLoader resourceLoader = new ServletContextResourceLoader(getServletContext());
           bw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, this.environment));
           initBeanWrapper(bw);
           bw.setPropertyValues(pvs, true);
       }
       catch (BeansException ex) {
           //&hellip;&hellip;&hellip;&hellip;省略其他代码
       }
       //2、提供给子类初始化的扩展点，该方法由FrameworkServlet覆盖
       initServletBean();
       if (logger.isDebugEnabled()) {
           logger.debug(&quot;Servlet &#39;&quot; + getServletName() + &quot;&#39; configured successfully&quot;);
       }
    }
    //&hellip;&hellip;&hellip;&hellip;省略其他代码
}</pre>

<p>&nbsp;</p>

<p><strong>2</strong><strong>、FrameworkServlet</strong><strong>继承HttpServletBean</strong><strong>，</strong>通过initServletBean()进行Web上下文初始化，该方法主要覆盖一下两件事情：</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;初始化web上下文；</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;提供给子类初始化扩展点；</p>

<pre>
public abstract class FrameworkServlet extends HttpServletBean {
@Override
    protected final void initServletBean() throws ServletException {
        //省略部分代码
       try {
             //1、初始化Web上下文
           this.webApplicationContext = initWebApplicationContext();
             //2、提供给子类初始化的扩展点
           initFrameworkServlet();
       }
        //省略部分代码
    }
}
</pre>

<pre>
protected WebApplicationContext initWebApplicationContext() {
        //ROOT上下文（ContextLoaderListener加载的）
       WebApplicationContext rootContext =
              WebApplicationContextUtils.getWebApplicationContext(getServletContext());
       WebApplicationContext wac = null;
       if (this.webApplicationContext != null) {
           // 1、在创建该Servlet注入的上下文
           wac = this.webApplicationContext;
           if (wac instanceof ConfigurableWebApplicationContext) {
              ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;
              if (!cwac.isActive()) {
                  if (cwac.getParent() == null) {
                      cwac.setParent(rootContext);
                  }
                  configureAndRefreshWebApplicationContext(cwac);
              }
           }
       }
       if (wac == null) {
             //2、查找已经绑定的上下文
           wac = findWebApplicationContext();
       }
       if (wac == null) {
            //3、如果没有找到相应的上下文，并指定父亲为ContextLoaderListener
           wac = createWebApplicationContext(rootContext);
       }
       if (!this.refreshEventReceived) {
             //4、刷新上下文（执行一些初始化）
           onRefresh(wac);
       }
       if (this.publishContext) {
           // Publish the context as a servlet context attribute.
           String attrName = getServletContextAttributeName();
           getServletContext().setAttribute(attrName, wac);
           //省略部分代码
       }
       return wac;
    }</pre>

<p>&nbsp;</p>

<p>从initWebApplicationContext（）方法可以看出，基本上如果ContextLoaderListener加载了上下文将作为根上下文（DispatcherServlet的父容器）。</p>

<p>最后调用了onRefresh()方法执行容器的一些初始化，这个方法由子类实现，来进行扩展。</p>

<p><strong>3</strong><strong>、DispatcherServlet</strong><strong>继承FrameworkServlet</strong>，并实现了onRefresh()方法提供一些前端控制器相关的配置：</p>

<pre>
public class DispatcherServlet extends FrameworkServlet {
     //实现子类的onRefresh()方法，该方法委托为initStrategies()方法。
    @Override
    protected void onRefresh(ApplicationContext context) {
       initStrategies(context);
    }
 
    //初始化默认的Spring Web MVC框架使用的策略（如HandlerMapping）
    protected void initStrategies(ApplicationContext context) {
       initMultipartResolver(context);
       initLocaleResolver(context);
       initThemeResolver(context);
       initHandlerMappings(context);
       initHandlerAdapters(context);
       initHandlerExceptionResolvers(context);
       initRequestToViewNameTranslator(context);
       initViewResolvers(context);
       initFlashMapManager(context);
    }
}</pre>

<p>&nbsp;</p>

<p>从如上代码可以看出，DispatcherServlet启动时会进行我们需要的Web层Bean的配置，如HandlerMapping、HandlerAdapter等，而且如果我们没有配置，还会给我们提供默认的配置。</p>

<p>&nbsp;</p>

<p>从如上代码我们可以看出，整个DispatcherServlet初始化的过程和做了些什么事情，具体主要做了如下两件事情：</p>

<p>1、初始化Spring Web MVC使用的Web上下文，并且可能指定父容器为（ContextLoaderListener加载了根上下文）；</p>

<p>2、初始化DispatcherServlet使用的策略，如HandlerMapping、HandlerAdapter等。</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>服务器启动时的日志分析（此处加上了ContextLoaderListener从而启动ROOT上下文容器）：</p>

<p>&nbsp;</p>

<p>&nbsp;信息: Initializing Spring root WebApplicationContext&nbsp;<strong>//</strong><strong>由</strong><strong>ContextLoaderListener</strong><strong>启动</strong><strong>ROOT</strong><strong>上下文</strong></p>

<p>&nbsp;</p>

<p>2012-03-12&nbsp;13:33:55&nbsp;[main] INFO&nbsp;&nbsp;<strong>org.springframework.web.context.ContextLoader</strong>&nbsp;- Root WebApplicationContext: initialization started</p>

<p>2012-03-12&nbsp;13:33:55&nbsp;[main] INFO&nbsp; org.springframework.web.context.support.XmlWebApplicationContext - Refreshing Root WebApplicationContext: startup date [Mon&nbsp;Mar 12 13:33:55 CST 2012]; root of context hierarchy</p>

<p>2012-03-12&nbsp;13:33:55&nbsp;[main] DEBUG org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader - Loading bean definitions</p>

<p>2012-03-12&nbsp;13:33:55&nbsp;[main] DEBUG org.springframework.beans.factory.xml.XmlBeanDefinitionReader - Loaded 0 bean definitions from location pattern&nbsp;<strong>[/WEB-INF/ContextLoaderListener.xml]</strong></p>

<p>2012-03-12&nbsp;13:33:55&nbsp;[main] DEBUG org.springframework.web.context.support.XmlWebApplicationContext - Bean factory for Root WebApplicationContext: org.springframework.beans.factory.support.DefaultListableBeanFactory@1c05ffd: defining beans []; root of factory hierarchy</p>

<p>2012-03-12&nbsp;13:33:55&nbsp;[main] DEBUG org.springframework.web.context.support.XmlWebApplicationContext - Bean factory for Root WebApplicationContext:</p>

<p><strong>2012-03-12 13:33:55 [main] DEBUG org.springframework.web.context.ContextLoader - Published root WebApplicationContext as ServletContext attribute with name [org.springframework.web.context.WebApplicationContext.ROOT]&nbsp;</strong><strong>//</strong><strong>将</strong><strong>ROOT</strong><strong>上下文绑定到</strong><strong>ServletContext</strong></p>

<p>2012-03-12 13:33:55 [main] INFO&nbsp; org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 438 ms<strong>&nbsp; //</strong><strong>到此</strong><strong>ROOT</strong><strong>上下文启动完毕</strong></p>

<p>&nbsp;</p>

<p>&nbsp;2012-03-12&nbsp;13:33:55&nbsp;[main] DEBUG org.springframework.web.servlet.DispatcherServlet - Initializing servlet &#39;chapter2&#39;</p>

<p>信息: Initializing Spring FrameworkServlet &#39;chapter2&#39;&nbsp;&nbsp;<strong>//</strong><strong>开始初始化</strong><strong>FrameworkServlet</strong><strong>对应的</strong><strong>Web</strong><strong>上下文</strong></p>

<p>2012-03-12&nbsp;13:33:55&nbsp;[main] INFO&nbsp; org.springframework.web.servlet.DispatcherServlet - FrameworkServlet &#39;chapter2&#39;: initialization started</p>

<p>2012-03-12 13:33:55 [main] DEBUG org.springframework.web.servlet.DispatcherServlet - Servlet with name &#39;chapter2&#39; will try to<strong>&nbsp;create custom WebApplicationContext context</strong>&nbsp;of class &#39;org.springframework.web.context.support.XmlWebApplicationContext&#39;,&nbsp;<strong>using parent context [Root WebApplicationContext</strong>: startup date [Mon&nbsp;Mar 12 13:33:55 CST 2012]; root of context hierarchy]</p>

<p><strong>//</strong><strong>此处使用</strong><strong>Root WebApplicationContext</strong><strong>作为父容器。</strong></p>

<p>2012-03-12&nbsp;13:33:55&nbsp;[main] INFO&nbsp; org.springframework.web.context.support.XmlWebApplicationContext - Refreshing WebApplicationContext for&nbsp;namespace &#39;chapter2-servlet&#39;: startup date [Mon&nbsp;Mar 12 13:33:55 CST 2012]; parent: Root WebApplicationContext</p>

<p>2012-03-12&nbsp;13:33:55&nbsp;[main] INFO&nbsp; org.springframework.beans.factory.xml.XmlBeanDefinitionReader - Loading XML bean definitions from ServletContext resource [<strong>/WEB-INF/chapter2-servlet.xml]</strong></p>

<p>2012-03-12&nbsp;13:33:55&nbsp;[main] DEBUG org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader - Loading bean definitions</p>

<p>2012-03-12 13:33:55 [main] DEBUG org.springframework.beans.factory.xml.BeanDefinitionParserDelegate - Neither XML &#39;id&#39; nor &#39;name&#39; specified - using generated bean name<strong>[org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping#0]</strong><strong>&nbsp; //</strong><strong>我们配置的</strong><strong>HandlerMapping</strong></p>

<p>2012-03-12 13:33:55 [main] DEBUG org.springframework.beans.factory.xml.BeanDefinitionParserDelegate - Neither XML &#39;id&#39; nor &#39;name&#39; specified - using generated bean name<strong>[org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter#0]&nbsp;</strong><strong>//</strong><strong>我们配置的</strong><strong>HandlerAdapter</strong></p>

<p>2012-03-12 13:33:55 [main] DEBUG org.springframework.beans.factory.xml.BeanDefinitionParserDelegate - Neither XML &#39;id&#39; nor &#39;name&#39; specified - using generated bean name [org.springframework.web.servlet.view.InternalResourceViewResolver#0]&nbsp;<strong>//</strong><strong>我们配置的</strong><strong>ViewResolver</strong></p>

<p>2012-03-12&nbsp;13:33:55&nbsp;[main] DEBUG org.springframework.beans.factory.xml.BeanDefinitionParserDelegate - No XML &#39;id&#39; specified - using &#39;/hello&#39; as bean name and [] as aliases&nbsp;</p>

<p><strong>//</strong><strong>我们的处理器（</strong><strong>HelloWorldController</strong><strong>）</strong></p>

<p>2012-03-12&nbsp;13:33:55&nbsp;[main] DEBUG org.springframework.beans.factory.xml.XmlBeanDefinitionReader - Loaded 4 bean definitions from location pattern [/WEB-INF/chapter2-servlet.xml]</p>

<p>2012-03-12 13:33:55 [main] DEBUG org.springframework.web.context.support.XmlWebApplicationContext - Bean factory for WebApplicationContext for namespace &#39;chapter2-servlet&#39;: org.springframework.beans.factory.support.DefaultListableBeanFactory@1372656: defining beans [org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping#0,org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter#0,org.springframework.web.servlet.view.InternalResourceViewResolver#0,/hello]; parent: org.springframework.beans.factory.support.DefaultListableBeanFactory@1c05ffd</p>

<p><strong>//</strong><strong>到此容器注册的Bean</strong><strong>初始化完毕</strong></p>

<p>&nbsp;</p>

<p>2012-03-12&nbsp;13:33:56&nbsp;[main] DEBUG org.springframework.web.servlet.DispatcherServlet - Unable to locate MultipartResolver with name &#39;multipartResolver&#39;: no multipart request handling provided</p>

<p>&nbsp;</p>

<p>2012-03-12&nbsp;13:33:56&nbsp;[main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating instance of bean &#39;org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver&#39;</p>

<p><strong>//</strong><strong>默认的</strong><strong>LocaleResolver</strong><strong>注册</strong></p>

<p>2012-03-12&nbsp;13:33:56&nbsp;[main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating instance of bean &#39;org.springframework.web.servlet.theme.FixedThemeResolver&#39;</p>

<p><strong>//</strong><strong>默认的</strong><strong>ThemeResolver</strong><strong>注册</strong></p>

<p>&nbsp;</p>

<p>2012-03-12&nbsp;13:33:56&nbsp;[main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Returning cached instance of singleton bean &#39;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping#0&#39;</p>

<p><strong>//</strong><strong>发现我们定义的</strong><strong>HandlerMapping&nbsp;</strong><strong>不再</strong><strong>使用默认的</strong><strong>HandlerMapping</strong><strong>。</strong></p>

<p>&nbsp;</p>

<p>2012-03-12&nbsp;13:33:56&nbsp;[main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Returning cached instance of singleton bean &#39;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter#0&#39;</p>

<p><strong>//</strong><strong>发现我们定义的</strong><strong>HandlerAdapter&nbsp;</strong><strong>不再</strong><strong>使用默认的</strong><strong>HandlerAdapter</strong><strong>。</strong></p>

<p>&nbsp;</p>

<p>2012-03-12&nbsp;13:33:56&nbsp;[main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating instance of bean &#39;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver&#39;</p>

<p><strong>//</strong><strong>异常处理解析器</strong><strong>ExceptionResolver</strong></p>

<p>2012-03-12&nbsp;13:33:56&nbsp;[main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating instance of bean &#39;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver&#39;</p>

<p>&nbsp;</p>

<p>2012-03-12&nbsp;13:33:56&nbsp;[main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Returning cached instance of singleton bean &#39;org.springframework.web.servlet.view.InternalResourceViewResolver#0&#39;</p>

<p>&nbsp;</p>

<p>2012-03-12&nbsp;13:33:56&nbsp;[main] DEBUG org.springframework.web.servlet.DispatcherServlet - Published WebApplicationContext of servlet &#39;chapter2&#39; as ServletContext attribute with name [org.springframework.web.servlet.FrameworkServlet.CONTEXT.chapter2]</p>

<p><strong>//</strong><strong>绑定</strong><strong>FrameworkServlet</strong><strong>初始化的</strong><strong>Web</strong><strong>上下文到</strong><strong>ServletContext</strong></p>

<p>2012-03-12&nbsp;13:33:56&nbsp;[main] INFO&nbsp; org.springframework.web.servlet.DispatcherServlet - FrameworkServlet &#39;chapter2&#39;: initialization completed in &nbsp;297 ms</p>

<p>2012-03-12&nbsp;13:33:56&nbsp;[main] DEBUG org.springframework.web.servlet.DispatcherServlet - Servlet &#39;chapter2&#39; configured successfully</p>

<p><strong>//</strong><strong>到此完整流程结束</strong>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>从如上日志我们也可以看出，DispatcherServlet会进行一些默认的配置。接下来我们看一下默认配置吧。</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2>3.5、DispatcherServlet默认配置</h2>

<p>DispatcherServlet的默认配置在DispatcherServlet.properties（和DispatcherServlet类在一个包下）中，而且是当Spring配置文件中没有指定配置时使用的默认策略：</p>

<p>&nbsp;<img alt="" src="http://sishuok.com/forum/upload/2012/7/21/726521580481940b7e255d9443dba6d6__3.JPG" /></p>

<p>org.springframework.web.servlet.LocaleResolver=org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver</p>

<p>&nbsp;</p>

<p>org.springframework.web.servlet.ThemeResolver=org.springframework.web.servlet.theme.FixedThemeResolver</p>

<p>&nbsp;</p>

<p>org.springframework.web.servlet.HandlerMapping=org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\</p>

<p>&nbsp;&nbsp;&nbsp; org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping</p>

<p>&nbsp;</p>

<p>org.springframework.web.servlet.HandlerAdapter=org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\</p>

<p>&nbsp;&nbsp;&nbsp; org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter</p>

<p>&nbsp;</p>

<p>org.springframework.web.servlet.HandlerExceptionResolver=org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver,\</p>

<p>&nbsp;&nbsp;&nbsp; org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\</p>

<p>&nbsp;&nbsp;&nbsp; org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver</p>

<p>&nbsp;</p>

<p>org.springframework.web.servlet.RequestToViewNameTranslator=org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator</p>

<p>&nbsp;</p>

<p>org.springframework.web.servlet.ViewResolver=org.springframework.web.servlet.view.InternalResourceViewResolver</p>

<p>&nbsp;</p>

<p>org.springframework.web.servlet.FlashMapManager=org.springframework.web.servlet.support.SessionFlashMapManager</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>从如上配置可以看出DispatcherServlet在启动时会自动注册这些特殊的Bean，无需我们注册，如果我们注册了，默认的将不会注册。</p>

<p>&nbsp;</p>

<p>因此如第二章的BeanNameUrlHandlerMapping、SimpleControllerHandlerAdapter是不需要注册的，DispatcherServlet默认会注册这两个Bean。</p>

<p>&nbsp;</p>

<p>从DispatcherServlet.properties可以看出有许多特殊的Bean，那接下来我们就看看Spring Web MVC主要有哪些特殊的Bean。</p>

<h2>3.6、DispatcherServlet中使用的特殊的Bean</h2>

<p>DispatcherServlet默认使用WebApplicationContext作为上下文，因此我们来看一下该上下文中有哪些特殊的Bean：</p>

<p><strong>1</strong><strong>、Controller</strong><strong>：</strong>处理器/页面控制器，做的是MVC中的C的事情，但控制逻辑转移到前端控制器了，用于对请求进行处理；</p>

<p><strong>2</strong><strong>、HandlerMapping</strong><strong>：</strong>请求到处理器的映射，如果映射成功返回一个HandlerExecutionChain对象（包含一个Handler处理器（页面控制器）对象、多个HandlerInterceptor拦截器）对象；如BeanNameUrlHandlerMapping将URL与Bean名字映射，映射成功的Bean就是此处的处理器；</p>

<p><strong>3</strong><strong>、HandlerAdapter</strong><strong>：</strong>HandlerAdapter将会把处理器包装为适配器，从而支持多种类型的处理器，即适配器设计模式的应用，从而很容易支持很多类型的处理器；如SimpleControllerHandlerAdapter将对实现了Controller接口的Bean进行适配，并且掉处理器的handleRequest方法进行功能处理；</p>

<p><strong>4</strong><strong>、ViewResolver</strong><strong>：</strong>ViewResolver将把逻辑视图名解析为具体的View，通过这种策略模式，很容易更换其他视图技术；如InternalResourceViewResolver将逻辑视图名映射为jsp视图；</p>

<p><strong>5</strong><strong>、LocalResover</strong><strong>：</strong>本地化解析，因为Spring支持国际化，因此LocalResover解析客户端的Locale信息从而方便进行国际化；</p>

<p><strong>6</strong><strong>、ThemeResovler</strong><strong>：</strong>主题解析，通过它来实现一个页面多套风格，即常见的类似于软件皮肤效果；</p>

<p><strong>7</strong><strong>、MultipartResolver</strong><strong>：</strong>文件上传解析，用于支持文件上传；</p>

<p><strong>8</strong><strong>、</strong><strong>HandlerExceptionResolver</strong><strong>：</strong>处理器异常解析，可以将异常映射到相应的统一错误界面，从而显示用户友好的界面（而不是给用户看到具体的错误信息）；</p>

<p><strong>9</strong><strong>、</strong><strong>RequestToViewNameTranslator</strong><strong>：</strong>当处理器没有返回逻辑视图名等相关信息时，自动将请求URL映射为逻辑视图名；</p>

<p><strong>10</strong><strong>、</strong><strong>FlashMapManager</strong><strong>：</strong>用于管理FlashMap的策略接口，FlashMap用于存储一个请求的输出，当进入另一个请求时作为该请求的输入，通常用于重定向场景，后边会细述。</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>到此DispatcherServlet我们已经了解了，接下来我们就需要把上边提到的特殊Bean挨个击破，那首先从控制器开始吧。</p>
