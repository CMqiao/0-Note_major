<h1>视图解析器分类详解</h1>

<div class="article_content csdn-tracking-statistics" id="article_content" style="-webkit-text-stroke-width:0px; margin-bottom:35px; margin-left:0px; margin-right:0px; margin-top:35px; text-align:start">
<div class="markdown_views">
<p style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:16px">在<a href="http://blog.csdn.net/qwe6112071/article/details/51044414" style="text-decoration:none; box-sizing:border-box; color:#0c89cf" target="_blank">&nbsp;《springMVC4(7)模型视图方法源码综合分析》&nbsp;</a>一文中，我们介绍了ModelAndView的用法，它会在控制层方法调用完毕后作为返回值返回，里面封装好了我们的业务逻辑数据和视图对象或视图名&nbsp;<br />
。下一步，视图对象往往会对模型进一步渲染，再由视图解析器进一步解析并向前端发出响应。在下面，我们详细介绍视图和视图解析器的各种分类。&nbsp;<br />
在View接口中，定义了一个核心方法是：</span></span></span></span></span></p>

<pre style="margin-left:0px; margin-right:0px">
<span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:14px"><span style="font-family:Consolas,Inconsolata,Courier,monospace"><code>void render(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response) throws Exception;</code></span></span></span></span></span></span></pre>

<ul>
	<li>&nbsp;</li>
</ul>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:16px">它的作用主要是渲染模型数据，整合web资源，并以特定形式响应给客户，这些形式可以是复杂JSP页面，也可以是简单的json、xml字符串。&nbsp;<br />
针对不同的响应形式，spring为我们设计了不同的View实现类：</span></span></span></span></span></p>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:16px"><img alt="这里写图片描述" src="https://img-blog.csdn.net/20160402164450428" style="border:none; box-sizing:border-box; height:auto; margin:24px 0px; max-height:100%; max-width:602px" title="" /></span></span></span></span></span></p>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:16px">针对不同的视图对象，我们使用不同的视图解析器来完成实例化工作。我们可以在Spring上下文配置多个视图解析器，并通过order属性来指定他们之间的解析优先级顺序，order 越小，对应的 ViewResolver 将有越高的解析视图的权利。当一个 ViewResolver 在进行视图解析后返回的 View 对象是 null 的话就表示该 ViewResolver 不能解析该视图，这时候就交给优先级更低的进行解析，直到解析工作完成，如果所有视图解析器都不能完成将解析，则会抛出异常。&nbsp;<br />
类似于视图，Spring也为我们提供了众多的视图解析器实现类：&nbsp;<br />
<img alt="这里写图片描述" src="https://img-blog.csdn.net/20160402165444276" style="border:none; box-sizing:border-box; height:auto; margin:24px 0px; max-height:100%; max-width:602px" title="" /></span></span></span></span></span></p>

<h2 style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun">1. AbstractCachingViewResolver</span></span></span></span></h2>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:16px">这是一个抽象类，这种视图解析器会把它曾经解析过的视图保存起来，然后每次要解析视图的时候先从缓存里面找，如果找到了对应的视图就直接返回，如果没有就创建一个新的视图对象，然后把它放到一个用于缓存的 map 中，接着再把新建的视图返回。使用这种视图缓存的方式可以把解析视图的性能问题降到最低。</span></span></span></span></span></p>

<h2 style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun">2. UrlBasedViewResolver</span></span></span></span></h2>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:16px">它<strong>继承了AbstractCachingViewResolver</strong>&nbsp;，通过prefix、suffix**拼接 URL** 的方式来解析视图，支持返回的视图名称中包含 redirect: 、forward等前缀进行重定向或转发。使用 UrlBasedViewResolver 的时候必须指定属性 viewClass ，表示解析成哪种视图，一般使用较多的就是 InternalResourceView ，利用它来展现 jsp ，但是当我们使用 JSTL 的时候我们必须使用 JstlView 。下面是一段 UrlBasedViewResolver 的实例定义:</span></span></span></span></span></p>

<pre style="margin-left:0px; margin-right:0px">
<span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:14px"><span style="font-family:Consolas,Inconsolata,Courier,monospace"><code>&lt;bean class=&quot;org.springframework.web.servlet.view.UrlBasedViewResolver&quot;&gt;
   &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/&quot; /&gt;
   &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;
   &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.InternalResourceView&quot;/&gt;
&lt;/bean&gt;</code></span></span></span></span></span></span></pre>

<h2 style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun">3. InternalResourceViewResolver</span></span></span></span></h2>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:16px">它是 URLBasedViewResolver 的子类，所以 URLBasedViewResolver 支持的特性它都支持. InternalResourceViewResolver 会把返回的视图名称都解析为 InternalResourceView 对象， InternalResourceView 会把 Controller 处理器方法返回的模型属性都存放到对应的 request 属性中，然后通过 RequestDispatcher 在服务器端把请求 forword 重定向到目标 URL 。下面是一个配置实例：</span></span></span></span></span></p>

<pre style="margin-left:0px; margin-right:0px">
<span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:14px"><span style="font-family:Consolas,Inconsolata,Courier,monospace"><code>&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;
       &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/&quot;/&gt;
       &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;
    &lt;/bean&gt;</code></span></span></span></span></span></span></pre>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:16px">如果我们需要使用JstlView，则需指定vlewClass属性为JstlView。&nbsp;<br />
在前面的测试实例中，我们一直在使用这种视图解析器，所以不再举例。</span></span></span></span></span></p>

<h2 style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun">4. BeanNameViewResolver</span></span></span></span></h2>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:16px">根据它的名字，我们将视图在spring容器中注册为Bean，Bean的id即为视图名。在我们控制层返回视图时，BeanNameViewResolver会自动根据我们的试图名找到对应的视图Bean进行解析，下面我们看一个实例：</span></span></span></span></span></p>

<h3 style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun">1. 配置视图解析器和视图</span></span></span></span></h3>

<pre style="margin-left:0px; margin-right:0px">
<span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:14px"><span style="font-family:Consolas,Inconsolata,Courier,monospace"><code>&lt;bean class=&quot;org.springframework.web.servlet.view.BeanNameViewResolver&quot;&gt;
   &lt;property name=&quot;order&quot; value=&quot;1&quot;/&gt;&lt;!-- 设置优先级最高，最先开始解析--&gt;
&lt;/bean&gt;

&lt;bean id=&quot;hello&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceView&quot;&gt;
   &lt;property name=&quot;url&quot; value=&quot;/WEB-INF/views/hello.jsp&quot;/&gt;&lt;!--访问对应的jsp文件--&gt;
&lt;/bean&gt;</code></span></span></span></span></span></span></pre>

<h3 style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun">2. 配置控制器</span></span></span></span></h3>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:16px">配置好视图和视图解析器后，我们可以在控制层通过如下方法访问视图：</span></span></span></span></span></p>

<pre style="margin-left:0px; margin-right:0px">
<span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:14px"><span style="font-family:Consolas,Inconsolata,Courier,monospace"><code>@Controller
public class ViewController {
    @RequestMapping(&quot;view1&quot;)
    public String view1(){
        return &quot;hello&quot;;//返回字符串直接为视图名称，解析器会找到名称对应的视图Bean解析视图
    }
}</code></span></span></span></span></span></span></pre>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:16px">我们在游览器访问view1即会跳转到对应的hello.jsp视图。</span></span></span></span></span></p>

<h2 style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun">3. XmlViewResolver</span></span></span></span></h2>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:16px">它继承自 AbstractCachingViewResolver 抽象类，所以它也是支持视图缓存的。 XmlViewResolver 需要给定一个 xml 配置文件来定义视图的 bean 对象。在该文件中定义的每一个视图的 bean 对象都给定一个名字，然后 XmlViewResolver 将根据 Controller 处理器方法返回的逻辑视图名称到 XmlViewResolver 指定的配置文件中寻找对应名称的视图 bean 用于处理视图。该配置文件默认是 /WEB-INF/views.xml 文件，如果不使用默认值的时候可以在 XmlViewResolver 的 location 属性中指定它的位置。&nbsp;<br />
这里需要明确的是，使用XmlViewResolver最终不一定需要输出<strong>xml视图</strong>&nbsp;<br />
以下是使用 XmlViewResolver 的一个示例：</span></span></span></span></span></p>

<h3 style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun">1. 在 SpringMVC 的配置文件中加入 XmlViewResolver 的 bean 定义。</span></span></span></span></h3>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:16px">使用 location 属性指定其配置文件所在的位置， order 属性指定当有多个 ViewResolver 的时候其处理视图的优先级。</span></span></span></span></span></p>

<pre style="margin-left:0px; margin-right:0px">
<span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:14px"><span style="font-family:Consolas,Inconsolata,Courier,monospace"><code>&lt;bean class=&quot;org.springframework.web.servlet.view.XmlViewResolver&quot;&gt;
   &lt;property name=&quot;location&quot; value=&quot;/WEB-INF/views.xml&quot;/&gt;
   &lt;property name=&quot;order&quot; value=&quot;1&quot;/&gt;
&lt;/bean&gt;</code></span></span></span></span></span></span></pre>

<h3 style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun">2. 在 XmlViewResolver 对应的配置文件中配置好所需要的视图定义。</span></span></span></span></h3>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:16px">在下面的代码中我们就配置了一个名为 hello 的 InternalResourceView ，其 url 属性为&ldquo; /index.jsp &rdquo;。</span></span></span></span></span></p>

<pre style="margin-left:0px; margin-right:0px">
<span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:14px"><span style="font-family:Consolas,Inconsolata,Courier,monospace"><code>&lt;bean id=&quot;hello&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceView&quot;&gt;
   &lt;property name=&quot;url&quot; value=&quot;/WEB-UBF/view/hello.jsp&quot;/&gt;
&lt;/bean&gt;</code></span></span></span></span></span></span></pre>

<h3 style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun">3. 配置web层控制器</span></span></span></span></h3>

<pre style="margin-left:0px; margin-right:0px">
<span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:14px"><span style="font-family:Consolas,Inconsolata,Courier,monospace"><code>@Controller
public class ViewController {
    @RequestMapping(&quot;view2&quot;)
    public String view2(){
        return &quot;hello&quot;;//返回字符串直接为视图名称，解析器会找到名称对应的视图Bean解析视图
    }
}</code></span></span></span></span></span></span></pre>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:16px">类似于BeanNameViewResolver的实例，我们访问view2,XmlViewResolver会到/WEB-INF/views.xml中寻找相应id的视图完成解析。</span></span></span></span></span></p>

<h3 style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun">5. ResourceBundleViewResolver</span></span></span></span></h3>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:16px">它继承自 AbstractCachingViewResolver ，但是它缓存的不是视图.和 XmlViewResolver 一样它也<strong>需要有一个配置文件</strong>来<strong>定义逻辑视图名称和真正的 View 对象的对应关系</strong>，不同的是 ResourceBundleViewResolver 的配置文件是一个<strong>属性文件</strong>，而且必须是<strong>放在 classpath 路径</strong>下面的，默认情况下这个配置文件是在<em>* classpath 根目录下的 views.properties 文件<strong>，如果不使用默认值的话，则可以</strong>通过属性 baseName 或 baseNames 来指定*</em>。 baseName 只是指定一个基名称， Spring 会在指定的 classpath 根目录下寻找以指定的 baseName 开始的属性文件进行 View 解析，如指定的 baseName 是 base ，那么 base.properties 、 baseabc.properties 等等以 base 开始的属性文件都会被 Spring 当做 ResourceBundleViewResolver 解析视图的资源文件。 ResourceBundleViewResolver 使用的属性配置文件的内容类似于这样：</span></span></span></span></span></p>

<pre style="margin-left:0px; margin-right:0px">
<span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:14px"><span style="font-family:Consolas,Inconsolata,Courier,monospace"><code>resourceBundle.(class)=org.springframework.web.servlet.view.InternalResourceView
resourceBundle.url=/index.jsp
test.(class)=org.springframework.web.servlet.view.InternalResourceView
test.url=/test.jsp</code></span></span></span></span></span></span></pre>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:16px">对应与上述配置，spring会将其解析成如下Bean定义：</span></span></span></span></span></p>

<pre style="margin-left:0px; margin-right:0px">
<span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:14px"><span style="font-family:Consolas,Inconsolata,Courier,monospace"><code>&lt;bean id=&quot;resourceBundle&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceView&quot;&gt;
   &lt;property name=&quot;url&quot; value=&quot;/index.jsp&quot;/&gt;
&lt;/bean&gt;

&lt;bean id=&quot;test&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceView&quot;&gt;
   &lt;property name=&quot;url&quot; value=&quot;/test.jsp&quot;/&gt;
&lt;/bean&gt;</code></span></span></span></span></span></span></pre>

<p>&nbsp;</p>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:16px">接下来讲讲 Spring 通过 properties 文件生成 bean 的规则。它会把 properties 文件中定义的属性名称按<strong>最后一个点&ldquo; . &rdquo;进行分割</strong>，把<strong>点前面的内容当做是 bean 名称</strong>，<strong>点后面的内容当做是 bean 的属性</strong>。这其中<strong>有几个特别的属性， Spring 把它们用小括号包起来了</strong>，这些特殊的属性一般是对应的 attribute ，但不是 bean 对象所有的 attribute 都可以这样用。其中 (class) 是一个，除了 (class) 之外，还有 (scope) 、 (parent) 、 (abstract) 、 (lazy-init) 。而除了这些特殊的属性之外的其他属性， Spring 会把它们当做 bean 对象的一般属性进行处理，就是 bean 对象对应的 property 。所以根据上面的属性配置文件将生成如下两个 bean 对象：</span></span></span></span></span></p>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:16px">从 ResourceBundleViewResolver 使用的配置文件我们可以看出，它和 XmlViewResolver 一样可以解析多种不同类型的 View ，因为它们的 View 是通过配置的方式指定的，这也就意味着我们可以指定 A 视图是 InternalResourceView ， B 视图是 JstlView 。</span></span></span></span></span></p>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:15px"><span style="font-family:&quot;microsoft yahei&quot;"><span style="font-size:16px"><span style="font-family:-apple-system,&quot;SF UI Text&quot;,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;,sans-serif,SimHei,SimSun"><span style="font-size:16px">除了以上的视图解析器，常用的还有下面两个模板视图解析器：FreeMarkerViewResolver 、 VolocityViewResolver，在后面的文章会专门提到。</span></span></span></span></span></p>
</div>
</div>
