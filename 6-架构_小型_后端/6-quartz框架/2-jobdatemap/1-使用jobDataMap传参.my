<h1>使用JobDataMap传递参数</h1>

<p>如果想在任务的execute()方法实现中回去一些关于这个Job的一些信息，或者传递一些参数，就可以使用JobDataMap。</p>

<p>JobDetail job = JobBuilder.newJob(DemoJob.class)<br />
&nbsp; &nbsp; .withIdentity(&quot;myJob&quot;, &quot;group1&quot;)<br />
&nbsp; &nbsp; .usingJobData(&quot;strData&quot;, &quot;Tom&quot;)<br />
&nbsp; &nbsp; .usingJobData(&quot;intData&quot;, 15)<br />
&nbsp; &nbsp; .build();</p>

<p>在构建JobDetail的时候，使用usingJobData(key, value)方法提供的各种重载形式来加入一些自定义的参数。这些参数可以在execute(JobExecutionContext jobExecutionContext)方法中取得，如下示例所示：</p>

<p>@Override<br />
public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException {<br />
&nbsp; &nbsp; JobKey key = jobExecutionContext.getJobDetail().getKey();<br />
&nbsp; &nbsp; JobDataMap dataMap = jobExecutionContext.getJobDetail().getJobDataMap();<br />
&nbsp; &nbsp; String strData = dataMap.getString(&quot;strData&quot;);<br />
&nbsp; &nbsp; int intData = dataMap.getInt(&quot;intData&quot;);<br />
&nbsp; &nbsp; System.out.println(&quot;key : &quot; + key);<br />
&nbsp; &nbsp; System.out.println(&quot;strData : &quot; + strData);<br />
&nbsp; &nbsp; System.out.println(&quot;intData : &quot; + intData);<br />
}</p>

<p>运行结果：</p>

<p>key : group1.myJob<br />
strData : Tom<br />
intData : 15</p>
