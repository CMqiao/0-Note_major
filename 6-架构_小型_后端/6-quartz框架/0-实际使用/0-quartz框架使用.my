<h1>quartz使用</h1>

<h2>代码简述</h2>

<h3>controller层</h3>

<p>controller层就不说了，就job记录的增删改查，然后是job的启动、暂停和重启。调用的是server层几个方法。</p>

<p>&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; * 立即执行任务<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp;@RequestMapping(&quot;/run&quot;)<br />
&nbsp;&nbsp; &nbsp;@ResponseBody<br />
&nbsp;&nbsp; &nbsp;public Object run(@RequestBody String[] jobIds){<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Map&lt;String,Object&gt; data = new HashMap&lt;String,Object&gt;();<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;try{<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;scheduleJobService.run(jobIds);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;status&quot;, &quot;success&quot;);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;msg&quot;, &quot;启动定时任务成功!&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp;}catch(Exception e){<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;status&quot;, &quot;error&quot;);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;msg&quot;, &quot;启动定时任务异常!&quot;);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; logger.error(&quot;[启动定时任务异常-ErrorMsg:]&quot;, e);<br />
&nbsp; &nbsp; &nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return data;<br />
&nbsp;&nbsp; &nbsp;}</p>

<h3>service层</h3>

<p>job运行相关的方法，主要也就三四个，入参都为jobids，所有job相关的信息，这里不体现，就是循环，然后根据每个id，调用ScheduleUtils里的方法。</p>

<p>&nbsp;&nbsp; &nbsp;@Override<br />
&nbsp;&nbsp; &nbsp;@Transactional<br />
&nbsp;&nbsp; &nbsp;public void run(String[] jobIds) throws SchedulerException {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;for(String jobId : jobIds) {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;ScheduleUtils.run(scheduler, queryScheduleJobByJobId(jobId));<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Map&lt;String,Object&gt; map = new HashMap&lt;String,Object&gt;();<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;map.put(&quot;list&quot;, jobIds);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;map.put(&quot;status&quot;, GlobalConstant.ScheduleStatus.NORMAL.getValue());<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;updateScheduleJobEntityBatch(map);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>&nbsp;&nbsp; &nbsp;@Override<br />
&nbsp;&nbsp; &nbsp;public ScheduleJobEntity queryScheduleJobByJobId(String jobId) {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return scheduleJobMapper.queryScheduleJobByJobId(jobId);<br />
&nbsp;&nbsp; &nbsp;}</p>

<h3>ScheduleUtils工具类</h3>

<p>这个工具类是实现几个功能的主要类</p>

<p>import org.quartz.CronScheduleBuilder;<br />
import org.quartz.CronTrigger;<br />
import org.quartz.JobBuilder;<br />
import org.quartz.JobDataMap;<br />
import org.quartz.JobDetail;<br />
import org.quartz.JobKey;<br />
import org.quartz.Scheduler;<br />
import org.quartz.SchedulerException;<br />
import org.quartz.TriggerBuilder;<br />
import org.quartz.TriggerKey;</p>

<p>import com.ustc.wang.model.job.ScheduleJobEntity;</p>

<p>&nbsp; &nbsp; &nbsp;public static void run(Scheduler scheduler,ScheduleJobEntity scheduleJob) throws SchedulerException{<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; try{<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; JobDataMap jobDataMap = new JobDataMap();<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; jobDataMap.put(ScheduleJobEntity.JOB_PARAM_KEY, scheduleJob);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; <strong>scheduler.triggerJob(getJobKey(scheduleJob.getJobId()), jobDataMap);</strong><br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; } catch (SchedulerException e) {<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; throw new SchedulerException(&quot;执行定时任务失败&quot;,e);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; }<br />
&nbsp; &nbsp; &nbsp;}</p>

<h2>controller层</h2>

<p>package com.ustc.wang.controller.job;</p>

<p>import java.util.HashMap;<br />
import java.util.Map;</p>

<p>import javax.servlet.http.HttpServletRequest;<br />
import javax.servlet.http.HttpServletResponse;</p>

<p>import org.springframework.beans.factory.annotation.Autowired;<br />
import org.springframework.stereotype.Controller;<br />
import org.springframework.web.bind.annotation.PathVariable;<br />
import org.springframework.web.bind.annotation.RequestBody;<br />
import org.springframework.web.bind.annotation.RequestMapping;<br />
import org.springframework.web.bind.annotation.RequestMethod;<br />
import org.springframework.web.bind.annotation.ResponseBody;</p>

<p>import com.alibaba.fastjson.JSONObject;<br />
import com.ustc.wang.base.controller.BaseController;<br />
import com.ustc.wang.base.utils.DatatableUtil;<br />
import com.ustc.wang.base.utils.StringUtils;<br />
import com.ustc.wang.model.dataTableUtils.DataTableModel;<br />
import com.ustc.wang.model.dataTableUtils.DataTableParam;<br />
import com.ustc.wang.model.job.ScheduleJobEntity;<br />
import com.ustc.wang.service.job.IScheduleJobService;</p>

<p>@Controller<br />
@RequestMapping(&quot;/sys/schedule&quot;)<br />
@SuppressWarnings(&quot;all&quot;)<br />
public class ScheduleJobController extends BaseController{</p>

<p>&nbsp;&nbsp; &nbsp;@Autowired<br />
&nbsp;&nbsp; &nbsp;private IScheduleJobService scheduleJobService;<br />
&nbsp;&nbsp; &nbsp;<br />
&nbsp; &nbsp; @RequestMapping(value = &quot;/toScheduleJobContent&quot;, method = RequestMethod.POST)<br />
&nbsp; &nbsp; public String toScheduleJobContent(HttpServletRequest request,<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HttpServletResponse response) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; return &quot;sys/job/scheduleJob.ftl&quot;;<br />
&nbsp; &nbsp; }<br />
&nbsp; &nbsp;&nbsp;<br />
&nbsp;&nbsp; &nbsp;@RequestMapping(&quot;/jobList&quot;)<br />
&nbsp;&nbsp; &nbsp;@ResponseBody<br />
&nbsp;&nbsp; &nbsp;public Object list(HttpServletRequest request,HttpServletResponse response, @RequestBody DataTableParam[] dataTableParams){<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; DataTableModel dataTableModel = new DataTableModel();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Map&lt;String, String&gt; dataTableMap = DatatableUtil.convertToMap(dataTableParams);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;JSONObject json = new JSONObject();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;try {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dataTableModel = scheduleJobService.queryScheduleJobList(dataTableMap);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; json.put(&quot;status&quot;, &quot;success&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; json.put(&quot;jobsData&quot;, dataTableModel);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch(Exception e) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; json.put(&quot;status&quot;, &quot;error&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; json.put(&quot;msg&quot;, &quot;查询定时任务列表信息异常!&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; logger.error(&quot;[获取定时任务列表异常-ErrorMsg:]&quot;, e);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return json;<br />
&nbsp;&nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; * 获取定时任务信息<br />
&nbsp;&nbsp; &nbsp; * @param jobId<br />
&nbsp;&nbsp; &nbsp; * @return<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp;@RequestMapping(&quot;/info/{jobId}&quot;)<br />
&nbsp;&nbsp; &nbsp;@ResponseBody<br />
&nbsp;&nbsp; &nbsp;public Object info(@PathVariable(&quot;jobId&quot;) String jobId){<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Map&lt;String,Object&gt; data = new HashMap&lt;String,Object&gt;();<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;try{<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;ScheduleJobEntity scheduleJob = scheduleJobService.queryScheduleJobByJobId(jobId);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;data.put(&quot;status&quot;, &quot;success&quot;);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;data.put(&quot;scheduleJob&quot;, scheduleJob);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}catch(Exception e){<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;data.put(&quot;status&quot;, &quot;error&quot;);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;data.put(&quot;msg&quot;, &quot;查询定时任务信息异常!&quot;);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;logger.error(&quot;[获取定时任务异常-ErrorMsg:]&quot;, e);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return data;<br />
&nbsp;&nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; * 保存定时任务<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp;@RequestMapping(value=&quot;/save&quot;,method=RequestMethod.POST)<br />
&nbsp;&nbsp; &nbsp;@ResponseBody<br />
&nbsp;&nbsp; &nbsp;public Object save(@RequestBody ScheduleJobEntity scheduleJob){<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Map&lt;String,Object&gt; data = new HashMap&lt;String,Object&gt;();<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;try{<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; scheduleJob.setJobId(StringUtils.getUUId());<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; int retCount = scheduleJobService.addScheduleJobEntity(scheduleJob);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;status&quot;, &quot;success&quot;);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;msg&quot;, &quot;保存成功&quot;);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; if(retCount &lt;= 0) {<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;status&quot;, &quot;fail&quot;);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;msg&quot;, &quot;保存失败&quot;);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; }<br />
&nbsp; &nbsp; &nbsp; &nbsp;}catch(Exception e){<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;status&quot;, &quot;error&quot;);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;msg&quot;, &quot;新增定时任务异常!&quot;);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; logger.error(&quot;[新增定时任务异常-ErrorMsg:]&quot;, e);<br />
&nbsp; &nbsp; &nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return data;<br />
&nbsp;&nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; * 修改定时任务<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp;@RequestMapping(&quot;/update&quot;)<br />
&nbsp;&nbsp; &nbsp;@ResponseBody<br />
&nbsp;&nbsp; &nbsp;public Object update(@RequestBody ScheduleJobEntity scheduleJob){<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Map&lt;String,Object&gt; data = new HashMap&lt;String,Object&gt;();<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;try{<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; int retCount = scheduleJobService.updateScheduleJobEntity(scheduleJob);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;status&quot;, &quot;success&quot;);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;msg&quot;, &quot;保存成功&quot;);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; if(retCount &lt;= 0) {<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;status&quot;, &quot;fail&quot;);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;msg&quot;, &quot;保存失败&quot;);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; }<br />
&nbsp; &nbsp; &nbsp; &nbsp;}catch(Exception e){<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;status&quot;, &quot;error&quot;);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;msg&quot;, &quot;修改定时任务异常!&quot;);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; logger.error(&quot;[修改定时任务异常-ErrorMsg:]&quot;, e);<br />
&nbsp; &nbsp; &nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return data;<br />
&nbsp;&nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; * 删除定时任务<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp;@RequestMapping(&quot;/delete&quot;)<br />
&nbsp;&nbsp; &nbsp;@ResponseBody<br />
&nbsp;&nbsp; &nbsp;public Object delete(@RequestBody String[] jobIds){<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Map&lt;String,Object&gt; data = new HashMap&lt;String,Object&gt;();<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;try{<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;scheduleJobService.deleteScheduleJobEntityBatch(jobIds);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;status&quot;, &quot;success&quot;);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;msg&quot;, &quot;删除定时任务成功!&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp;}catch(Exception e){<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;status&quot;, &quot;error&quot;);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;msg&quot;, &quot;删除定时任务异常!&quot;);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; logger.error(&quot;[删除定时任务异常-ErrorMsg:]&quot;, e);<br />
&nbsp; &nbsp; &nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return data;<br />
&nbsp;&nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; * 立即执行任务<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp;@RequestMapping(&quot;/run&quot;)<br />
&nbsp;&nbsp; &nbsp;@ResponseBody<br />
&nbsp;&nbsp; &nbsp;public Object run(@RequestBody String[] jobIds){<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Map&lt;String,Object&gt; data = new HashMap&lt;String,Object&gt;();<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;try{<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;scheduleJobService.run(jobIds);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;status&quot;, &quot;success&quot;);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;msg&quot;, &quot;启动定时任务成功!&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp;}catch(Exception e){<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;status&quot;, &quot;error&quot;);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;msg&quot;, &quot;启动定时任务异常!&quot;);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; logger.error(&quot;[启动定时任务异常-ErrorMsg:]&quot;, e);<br />
&nbsp; &nbsp; &nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return data;<br />
&nbsp;&nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; * 暂停定时任务<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp;@RequestMapping(&quot;/pause&quot;)<br />
&nbsp;&nbsp; &nbsp;@ResponseBody<br />
&nbsp;&nbsp; &nbsp;public Object pause(@RequestBody String[] jobIds){<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Map&lt;String,Object&gt; data = new HashMap&lt;String,Object&gt;();<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;try{<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;scheduleJobService.pause(jobIds);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;status&quot;, &quot;success&quot;);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;msg&quot;, &quot;暂停定时任务成功!&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp;}catch(Exception e){<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;status&quot;, &quot;error&quot;);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;msg&quot;, &quot;暂停定时任务异常!&quot;);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; logger.error(&quot;[暂停定时任务异常-ErrorMsg:]&quot;, e);<br />
&nbsp; &nbsp; &nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return data;<br />
&nbsp;&nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; * 恢复定时任务<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp;@RequestMapping(&quot;/resume&quot;)<br />
&nbsp;&nbsp; &nbsp;@ResponseBody<br />
&nbsp;&nbsp; &nbsp;public Object resume(@RequestBody String[] jobIds){<br />
&nbsp;&nbsp; &nbsp; &nbsp; Map&lt;String,Object&gt; data = new HashMap&lt;String,Object&gt;();<br />
&nbsp;&nbsp; &nbsp; &nbsp; try{<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;scheduleJobService.resume(jobIds);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;data.put(&quot;status&quot;, &quot;success&quot;);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;data.put(&quot;msg&quot;, &quot;恢复定时任务成功!&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp;}catch(Exception e){<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;status&quot;, &quot;error&quot;);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; data.put(&quot;msg&quot;, &quot;恢复定时任务异常!&quot;);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; logger.error(&quot;[恢复定时任务异常-ErrorMsg:]&quot;, e);<br />
&nbsp; &nbsp; &nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp; &nbsp; return data;<br />
&nbsp;&nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;<br />
}</p>

<p>&nbsp;</p>

<h2>service接口层</h2>

<p>package com.ustc.wang.service.job;</p>

<p>import java.util.Map;</p>

<p>import org.quartz.SchedulerException;</p>

<p>import com.ustc.wang.model.dataTableUtils.DataTableModel;<br />
import com.ustc.wang.model.job.ScheduleJobEntity;<br />
@SuppressWarnings(&quot;all&quot;)<br />
public interface IScheduleJobService {</p>

<p>&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; * 跟jobId查询任务信息<br />
&nbsp;&nbsp; &nbsp; * @param jobId<br />
&nbsp;&nbsp; &nbsp; * @return<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp; &nbsp; ScheduleJobEntity queryScheduleJobByJobId(String jobId);<br />
&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; /**<br />
&nbsp; &nbsp; &nbsp;* 分页查询任务列表<br />
&nbsp; &nbsp; &nbsp;* @param page<br />
&nbsp; &nbsp; &nbsp;* @return<br />
&nbsp; &nbsp; &nbsp;*/<br />
&nbsp; &nbsp; DataTableModel queryScheduleJobList(Map&lt;String, String&gt; dataTableMap);<br />
&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp;<br />
&nbsp; &nbsp; /**<br />
&nbsp; &nbsp; &nbsp;* 新增任务<br />
&nbsp; &nbsp; &nbsp;* @param scheduleJobEntity<br />
&nbsp; &nbsp; &nbsp;* @return<br />
&nbsp; &nbsp; &nbsp;* @throws SchedulerException&nbsp;<br />
&nbsp; &nbsp; &nbsp;*/<br />
&nbsp; &nbsp; int addScheduleJobEntity(ScheduleJobEntity scheduleJob) throws SchedulerException;<br />
&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; /**<br />
&nbsp; &nbsp; &nbsp;* 修改任务<br />
&nbsp; &nbsp; &nbsp;* @param scheduleJobEntity<br />
&nbsp; &nbsp; &nbsp;* @return<br />
&nbsp; &nbsp; &nbsp;* @throws SchedulerException&nbsp;<br />
&nbsp; &nbsp; &nbsp;*/<br />
&nbsp; &nbsp; int updateScheduleJobEntity(ScheduleJobEntity scheduleJob) throws SchedulerException;<br />
&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; /**<br />
&nbsp; &nbsp; &nbsp;* 批量更新任务<br />
&nbsp; &nbsp; &nbsp;* @param map<br />
&nbsp; &nbsp; &nbsp;* @return<br />
&nbsp; &nbsp; &nbsp;*/<br />
&nbsp;&nbsp; &nbsp;int updateScheduleJobEntityBatch(Map&lt;String, Object&gt; map);<br />
&nbsp; &nbsp;&nbsp;<br />
&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; * 批量删除任务<br />
&nbsp;&nbsp; &nbsp; * @param jobIds<br />
&nbsp;&nbsp; &nbsp; * @return<br />
&nbsp;&nbsp; &nbsp; * @throws SchedulerException&nbsp;<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp;void deleteScheduleJobEntityBatch(String[] jobIds) throws SchedulerException;<br />
&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; * 执行任务<br />
&nbsp;&nbsp; &nbsp; * @param jobIds<br />
&nbsp;&nbsp; &nbsp; * @throws SchedulerException&nbsp;<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp;void run(String[] jobIds) throws SchedulerException;<br />
&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; * 暂停任务<br />
&nbsp;&nbsp; &nbsp; * @param jobIds<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp;void pause(String[] jobIds)throws SchedulerException;<br />
&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; * 恢复任务<br />
&nbsp;&nbsp; &nbsp; * @param jobIds<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp;void resume(String[] jobIds)throws SchedulerException;<br />
&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;void runByMethodName(String methodName)throws SchedulerException;<br />
}<br />
&nbsp;</p>

<p>&nbsp;</p>

<h2>service实现层</h2>

<p>package com.ustc.wang.service.Impl.job;</p>

<p>import java.util.Date;<br />
import java.util.HashMap;<br />
import java.util.List;<br />
import java.util.Map;</p>

<p>import javax.annotation.PostConstruct;</p>

<p>import org.quartz.CronTrigger;<br />
import org.quartz.Scheduler;<br />
import org.quartz.SchedulerException;<br />
import org.springframework.beans.factory.annotation.Autowired;<br />
import org.springframework.stereotype.Service;<br />
import org.springframework.transaction.annotation.Transactional;</p>

<p>import com.ustc.wang.base.utils.GlobalConstant;<br />
import com.ustc.wang.base.utils.ScheduleUtils;<br />
import com.ustc.wang.base.utils.XSSFilterUtils;<br />
import com.ustc.wang.dao.job.ScheduleJobMapper;<br />
import com.ustc.wang.model.Page;<br />
import com.ustc.wang.model.dataTableUtils.DataTableModel;<br />
import com.ustc.wang.model.job.ScheduleJobEntity;<br />
import com.ustc.wang.service.job.IScheduleJobService;<br />
import com.ustc.wang.tools.PaginationUtil;</p>

<p>@Service(&quot;scheduleJobService&quot;)<br />
@SuppressWarnings(&quot;all&quot;)<br />
public class ScheduleJobServiceImpl implements IScheduleJobService{</p>

<p>&nbsp;&nbsp; &nbsp;@Autowired<br />
&nbsp;&nbsp; &nbsp;private Scheduler scheduler;<br />
&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;@Autowired<br />
&nbsp;&nbsp; &nbsp;private ScheduleJobMapper scheduleJobMapper;<br />
&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;@PostConstruct<br />
&nbsp;&nbsp; &nbsp;public void init(){<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;List&lt;ScheduleJobEntity&gt; scheduleJobList = scheduleJobMapper.queryAllScheduleJob();<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;for(ScheduleJobEntity scheduleJob : scheduleJobList) {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;try {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;CronTrigger cronTrigger = ScheduleUtils.getCronTrigger(scheduler, scheduleJob.getJobId());<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;if(cronTrigger == null){<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;ScheduleUtils.buildScheduleJob(scheduler, scheduleJob);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;} else {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;ScheduleUtils.updateScheduleJob(scheduler, scheduleJob);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;} catch (SchedulerException e) {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// TODO Auto-generated catch block<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;e.printStackTrace();<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;@Override<br />
&nbsp;&nbsp; &nbsp;public ScheduleJobEntity queryScheduleJobByJobId(String jobId) {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return scheduleJobMapper.queryScheduleJobByJobId(jobId);<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>&nbsp;&nbsp; &nbsp;@Override<br />
&nbsp;&nbsp; &nbsp;public DataTableModel queryScheduleJobList(Map&lt;String, String&gt; dataTableMap) {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;DataTableModel dataTableModel = new DataTableModel();<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Map&lt;String, Object&gt; paramMap = new HashMap&lt;String, Object&gt;();<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;String sEcho = dataTableMap.get(&quot;sEcho&quot;);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;int start = Integer.parseInt(dataTableMap.get(&quot;iDisplayStart&quot;));<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;int length = Integer.parseInt(dataTableMap.get(&quot;iDisplayLength&quot;));<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;int currentPage = start / length + 1;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;paramMap.put(&quot;beanName&quot;, XSSFilterUtils.SQLEncode(dataTableMap.get(&quot;beanName&quot;).trim()));<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;paramMap.put(&quot;methodName&quot;, XSSFilterUtils.SQLEncode(dataTableMap.get(&quot;methodName&quot;).trim()));<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;paramMap.put(&quot;remark&quot;, XSSFilterUtils.SQLEncode(dataTableMap.get(&quot;remark&quot;).trim()));<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;paramMap.put(&quot;orderStr&quot;, dataTableMap.get(&quot;orderStr&quot;));<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Page&lt;Map&lt;String, Object&gt;&gt; page = PaginationUtil.setPageInfoStart(paramMap, currentPage, length);</p>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;List&lt;Map&lt;String, Object&gt;&gt; resList = scheduleJobMapper.queryScheduleJobList(page);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Integer count = scheduleJobMapper.queryScheduleJobCount(paramMap);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;dataTableModel.setiTotalDisplayRecords(count);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;dataTableModel.setiTotalRecords(count);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;dataTableModel.setsEcho(Integer.valueOf(sEcho));<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;dataTableModel.setAaData(resList);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return dataTableModel;<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>&nbsp;&nbsp; &nbsp;@Override<br />
&nbsp;&nbsp; &nbsp;@Transactional<br />
&nbsp;&nbsp; &nbsp;public int addScheduleJobEntity(ScheduleJobEntity scheduleJob) throws SchedulerException {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;scheduleJob.setCreateTime(new Date());<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;scheduleJob.setStatus(GlobalConstant.ScheduleStatus.NORMAL.getValue());<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;int retCount = scheduleJobMapper.addScheduleJobEntity(scheduleJob);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;ScheduleUtils.buildScheduleJob(scheduler, scheduleJob);<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;return retCount;<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>&nbsp;&nbsp; &nbsp;@Override<br />
&nbsp;&nbsp; &nbsp;@Transactional<br />
&nbsp;&nbsp; &nbsp;public int updateScheduleJobEntity(ScheduleJobEntity scheduleJob) throws SchedulerException {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;ScheduleJobEntity tempScheduleJobEntity = queryScheduleJobByJobId(scheduleJob.getJobId());<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;scheduleJob.setStatus(tempScheduleJobEntity.getStatus());<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;scheduleJob.setCreateTime(tempScheduleJobEntity.getCreateTime());<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;ScheduleUtils.updateScheduleJob(scheduler, scheduleJob);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return scheduleJobMapper.updateScheduleJobEntity(scheduleJob);<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>&nbsp;&nbsp; &nbsp;@Override<br />
&nbsp;&nbsp; &nbsp;public int updateScheduleJobEntityBatch(Map&lt;String, Object&gt; map) {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return scheduleJobMapper.updateScheduleJobEntityBatch(map);<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>&nbsp;&nbsp; &nbsp;@Override<br />
&nbsp;&nbsp; &nbsp;@Transactional<br />
&nbsp;&nbsp; &nbsp;public void deleteScheduleJobEntityBatch(String[] jobIds) throws SchedulerException {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;for(String jobId : jobIds) {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;ScheduleUtils.deleteJob(scheduler, jobId);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;scheduleJobMapper.deleteScheduleJobEntityBatch(jobIds);<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>&nbsp;&nbsp; &nbsp;@Override<br />
&nbsp;&nbsp; &nbsp;@Transactional<br />
&nbsp;&nbsp; &nbsp;public void run(String[] jobIds) throws SchedulerException {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;for(String jobId : jobIds) {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;ScheduleUtils.run(scheduler, queryScheduleJobByJobId(jobId));<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Map&lt;String,Object&gt; map = new HashMap&lt;String,Object&gt;();<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;map.put(&quot;list&quot;, jobIds);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;map.put(&quot;status&quot;, GlobalConstant.ScheduleStatus.NORMAL.getValue());<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;updateScheduleJobEntityBatch(map);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>&nbsp;&nbsp; &nbsp;@Override<br />
&nbsp;&nbsp; &nbsp;@Transactional<br />
&nbsp;&nbsp; &nbsp;public void runByMethodName(String methodName) throws SchedulerException {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;String jobIdByName = scheduleJobMapper.queryJobIdByMethodName(methodName);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;String[] jobIds = {jobIdByName};<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;for(String jobId : jobIds) {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;ScheduleUtils.run(scheduler, queryScheduleJobByJobId(jobId));<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Map&lt;String,Object&gt; map = new HashMap&lt;String,Object&gt;();<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;map.put(&quot;list&quot;, jobIds);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;map.put(&quot;status&quot;, GlobalConstant.ScheduleStatus.NORMAL.getValue());<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;updateScheduleJobEntityBatch(map);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>&nbsp;&nbsp; &nbsp;@Override<br />
&nbsp;&nbsp; &nbsp;@Transactional<br />
&nbsp;&nbsp; &nbsp;public void pause(String[] jobIds) throws SchedulerException {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;for(String jobId : jobIds) {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;ScheduleUtils.pauseJob(scheduler, jobId);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Map&lt;String,Object&gt; map = new HashMap&lt;String,Object&gt;();<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;map.put(&quot;list&quot;, jobIds);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;map.put(&quot;status&quot;, GlobalConstant.ScheduleStatus.PAUSE.getValue());<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;updateScheduleJobEntityBatch(map);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>&nbsp;&nbsp; &nbsp;@Override<br />
&nbsp;&nbsp; &nbsp;@Transactional<br />
&nbsp;&nbsp; &nbsp;public void resume(String[] jobIds) throws SchedulerException {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;for(String jobId : jobIds) {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;ScheduleUtils.resumeJob(scheduler, jobId);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Map&lt;String,Object&gt; map = new HashMap&lt;String,Object&gt;();<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;map.put(&quot;list&quot;, jobIds);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;map.put(&quot;status&quot;, GlobalConstant.ScheduleStatus.NORMAL.getValue());<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;updateScheduleJobEntityBatch(map);<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>}<br />
&nbsp;</p>

<h2>dao层</h2>

<p>package com.ustc.wang.dao.job;</p>

<p>import java.util.List;<br />
import java.util.Map;</p>

<p>import org.apache.ibatis.annotations.Param;</p>

<p>import com.ustc.wang.model.Page;<br />
import com.ustc.wang.model.job.ScheduleJobEntity;</p>

<p>public interface ScheduleJobMapper {<br />
&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; * 跟jobId查询任务信息<br />
&nbsp;&nbsp; &nbsp; * @param jobId<br />
&nbsp;&nbsp; &nbsp; * @return<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp; &nbsp; ScheduleJobEntity queryScheduleJobByJobId(@Param(&quot;jobId&quot;)String jobId);<br />
&nbsp; &nbsp;<br />
&nbsp; &nbsp; /**<br />
&nbsp; &nbsp; &nbsp;* 获取所有任务列表<br />
&nbsp; &nbsp; &nbsp;* @return<br />
&nbsp; &nbsp; &nbsp;*/<br />
&nbsp; &nbsp; List&lt;ScheduleJobEntity&gt; queryAllScheduleJob();<br />
&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; /**<br />
&nbsp; &nbsp; &nbsp;* 分页查询任务列表<br />
&nbsp; &nbsp; &nbsp;* @param page<br />
&nbsp; &nbsp; &nbsp;* @return<br />
&nbsp; &nbsp; &nbsp;*/<br />
&nbsp; &nbsp; List&lt;Map&lt;String,Object&gt;&gt; queryScheduleJobList(Page&lt;Map&lt;String, Object&gt;&gt; page);<br />
&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; /**<br />
&nbsp; &nbsp; &nbsp;* 查询任务总数<br />
&nbsp; &nbsp; &nbsp;* @param paramMap<br />
&nbsp; &nbsp; &nbsp;* @return<br />
&nbsp; &nbsp; &nbsp;*/<br />
&nbsp; &nbsp; Integer queryScheduleJobCount(Map&lt;String, Object&gt; paramMap);<br />
&nbsp; &nbsp;<br />
&nbsp; &nbsp; /**<br />
&nbsp; &nbsp; &nbsp;* 新增任务<br />
&nbsp; &nbsp; &nbsp;* @param scheduleJobEntity<br />
&nbsp; &nbsp; &nbsp;* @return<br />
&nbsp; &nbsp; &nbsp;*/<br />
&nbsp; &nbsp; int addScheduleJobEntity(ScheduleJobEntity scheduleJobEntity);<br />
&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; /**<br />
&nbsp; &nbsp; &nbsp;* 修改任务<br />
&nbsp; &nbsp; &nbsp;* @param scheduleJobEntity<br />
&nbsp; &nbsp; &nbsp;* @return<br />
&nbsp; &nbsp; &nbsp;*/<br />
&nbsp; &nbsp; int updateScheduleJobEntity(ScheduleJobEntity scheduleJobEntity);<br />
&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; /**<br />
&nbsp; &nbsp; &nbsp;* 批量更新任务<br />
&nbsp; &nbsp; &nbsp;* @param map<br />
&nbsp; &nbsp; &nbsp;* @return<br />
&nbsp; &nbsp; &nbsp;*/<br />
&nbsp;&nbsp; &nbsp;int updateScheduleJobEntityBatch(Map&lt;String, Object&gt; map);<br />
&nbsp; &nbsp;&nbsp;<br />
&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; * 批量删除任务<br />
&nbsp;&nbsp; &nbsp; * @param jobIds<br />
&nbsp;&nbsp; &nbsp; * @return<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp;int deleteScheduleJobEntityBatch(String[] jobIds);<br />
&nbsp; &nbsp;&nbsp;<br />
&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; * 获取任务ID通过BeanName<br />
&nbsp;&nbsp; &nbsp; * @param methodName<br />
&nbsp;&nbsp; &nbsp; * @return<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp;String queryJobIdByMethodName(String methodName);<br />
}<br />
&nbsp;</p>

<h2>实体层</h2>

<p>package com.ustc.wang.model.job;</p>

<p>import java.io.Serializable;<br />
import java.util.Date;</p>

<p>import org.hibernate.validator.constraints.NotBlank;</p>

<p>public class ScheduleJobEntity implements Serializable{</p>

<p>&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; *&nbsp;<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp;private static final long serialVersionUID = -579222341638101205L;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp; &nbsp;public static final String JOB_PARAM_KEY = &quot;JOB_PARAM_KEY&quot;;<br />
&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; * 任务id<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp;private String jobId;<br />
&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; * 方法名<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp;@NotBlank(message=&quot;bean名称不能为空&quot;)<br />
&nbsp;&nbsp; &nbsp;private String beanName;<br />
&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; * 方法名<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp;@NotBlank(message=&quot;方法名称不能为空&quot;)<br />
&nbsp;&nbsp; &nbsp;private String methodName;<br />
&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; * 参数<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp;private String params;<br />
&nbsp;&nbsp; &nbsp;</p>

<p>&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; * corn表达式<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp;@NotBlank(message=&quot;corn表达式不能为空&quot;)<br />
&nbsp;&nbsp; &nbsp;private String cronExpression;<br />
&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; * 任务状态<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp;private Integer status;<br />
&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; * 备注<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp;private String remark;<br />
&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;/**<br />
&nbsp;&nbsp; &nbsp; * 创建时间<br />
&nbsp;&nbsp; &nbsp; */<br />
&nbsp;&nbsp; &nbsp;private Date createTime;</p>

<p>&nbsp;&nbsp; &nbsp;public String getJobId() {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return jobId;<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>&nbsp;&nbsp; &nbsp;public void setJobId(String jobId) {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.jobId = jobId;<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>&nbsp;&nbsp; &nbsp;public String getBeanName() {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return beanName;<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>&nbsp;&nbsp; &nbsp;public void setBeanName(String beanName) {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.beanName = beanName;<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>&nbsp;&nbsp; &nbsp;public String getParams() {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return params;<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>&nbsp;&nbsp; &nbsp;public void setParams(String params) {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.params = params;<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>&nbsp;&nbsp; &nbsp;public String getCronExpression() {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return cronExpression;<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>&nbsp;&nbsp; &nbsp;public void setCronExpression(String cronExpression) {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.cronExpression = cronExpression;<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>&nbsp;&nbsp; &nbsp;public Integer getStatus() {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return status;<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>&nbsp;&nbsp; &nbsp;public void setStatus(Integer status) {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.status = status;<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>&nbsp;&nbsp; &nbsp;public String getRemark() {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return remark;<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>&nbsp;&nbsp; &nbsp;public void setRemark(String remark) {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.remark = remark;<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>&nbsp;&nbsp; &nbsp;public Date getCreateTime() {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return createTime;<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>&nbsp;&nbsp; &nbsp;public void setCreateTime(Date createTime) {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.createTime = createTime;<br />
&nbsp;&nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;public String getMethodName() {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return methodName;<br />
&nbsp;&nbsp; &nbsp;}</p>

<p>&nbsp;&nbsp; &nbsp;public void setMethodName(String methodName) {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.methodName = methodName;<br />
&nbsp;&nbsp; &nbsp;}<br />
}<br />
&nbsp;</p>

<h2>工具类</h2>

<p>package com.ustc.wang.base.utils;</p>

<p>import org.quartz.CronScheduleBuilder;<br />
import org.quartz.CronTrigger;<br />
import org.quartz.JobBuilder;<br />
import org.quartz.JobDataMap;<br />
import org.quartz.JobDetail;<br />
import org.quartz.JobKey;<br />
import org.quartz.Scheduler;<br />
import org.quartz.SchedulerException;<br />
import org.quartz.TriggerBuilder;<br />
import org.quartz.TriggerKey;</p>

<p>import com.ustc.wang.model.job.ScheduleJobEntity;</p>

<p>public class ScheduleUtils {<br />
&nbsp; &nbsp; &nbsp;private final static String JOB_NAME_PRE = &quot;EAS_TASK_&quot;;<br />
&nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp;/**<br />
&nbsp; &nbsp; &nbsp; * 获取触发器key<br />
&nbsp; &nbsp; &nbsp; * @param jobId<br />
&nbsp; &nbsp; &nbsp; * @return<br />
&nbsp; &nbsp; &nbsp; */<br />
&nbsp; &nbsp; &nbsp;public static TriggerKey getTriggerKey(String jobId) {<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; return TriggerKey.triggerKey(JOB_NAME_PRE + jobId);&nbsp;<br />
&nbsp; &nbsp; &nbsp;}<br />
&nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp;/**<br />
&nbsp; &nbsp; &nbsp; * 获取jobkey<br />
&nbsp; &nbsp; &nbsp; * @param jobId<br />
&nbsp; &nbsp; &nbsp; * @return<br />
&nbsp; &nbsp; &nbsp; */<br />
&nbsp; &nbsp; &nbsp;public static JobKey getJobKey(String jobId) {<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; return JobKey.jobKey(JOB_NAME_PRE + jobId);<br />
&nbsp; &nbsp; &nbsp;}<br />
&nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp;/**<br />
&nbsp; &nbsp; &nbsp; * 获取表达式触发器<br />
&nbsp; &nbsp; &nbsp; * @param scheduler<br />
&nbsp; &nbsp; &nbsp; * @param jobId<br />
&nbsp; &nbsp; &nbsp; * @return<br />
&nbsp; &nbsp; &nbsp; * @throws SchedulerException<br />
&nbsp; &nbsp; &nbsp; */<br />
&nbsp; &nbsp; &nbsp;public static CronTrigger getCronTrigger(Scheduler scheduler,String jobId) throws SchedulerException {<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; try{<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return (CronTrigger) scheduler.getTrigger(getTriggerKey(jobId));&nbsp;<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; }catch(SchedulerException e) {<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;throw new SchedulerException(&quot;获取定时任务CornTrigger出现异常&quot;,e);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; }<br />
&nbsp; &nbsp; &nbsp;}<br />
&nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp;/**<br />
&nbsp; &nbsp; &nbsp; * 创建定时任务<br />
&nbsp; &nbsp; &nbsp; * @param scheduler<br />
&nbsp; &nbsp; &nbsp; * @param scheduleJob<br />
&nbsp; &nbsp; &nbsp;* @throws SchedulerException&nbsp;<br />
&nbsp; &nbsp; &nbsp; */<br />
&nbsp; &nbsp; &nbsp;public static void buildScheduleJob(Scheduler scheduler,ScheduleJobEntity scheduleJob) throws SchedulerException {<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; try{<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; //创建job信息<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; JobDetail jobDetail = JobBuilder.newJob(ScheduleJob.class).withIdentity(getJobKey(scheduleJob.getJobId())).build();<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; //创建表达式构建器<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(scheduleJob.getCronExpression()).withMisfireHandlingInstructionDoNothing();<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; //根据新的cronExpression表达式创建一个新的trigger<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; CronTrigger trigger = TriggerBuilder.newTrigger().withIdentity(getTriggerKey(scheduleJob.getJobId())).withSchedule(scheduleBuilder).build();<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; jobDetail.getJobDataMap().put(ScheduleJobEntity.JOB_PARAM_KEY, scheduleJob);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; scheduler.scheduleJob(jobDetail,trigger);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; if(scheduleJob.getStatus() == GlobalConstant.ScheduleStatus.PAUSE.getValue()) {<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; pauseJob(scheduler,scheduleJob.getJobId());<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; }<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; } catch (SchedulerException e) {<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; throw new SchedulerException(&quot;创建定时任务失败&quot;,e);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; }<br />
&nbsp; &nbsp; &nbsp;}<br />
&nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp;/**<br />
&nbsp; &nbsp; &nbsp; * 暂停任务<br />
&nbsp; &nbsp; &nbsp; * @param scheduler<br />
&nbsp; &nbsp; &nbsp; * @param jobId<br />
&nbsp; &nbsp; &nbsp; * @throws SchedulerException<br />
&nbsp; &nbsp; &nbsp; */<br />
&nbsp; &nbsp; &nbsp;public static void pauseJob(Scheduler scheduler,String jobId) throws SchedulerException {<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; try{<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; scheduler.pauseJob(getJobKey(jobId));<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; }catch(SchedulerException e) {<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; throw new SchedulerException(&quot;暂停定时任务失败&quot;,e);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; }<br />
&nbsp; &nbsp; &nbsp;}<br />
&nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp;/**<br />
&nbsp; &nbsp; &nbsp; * 更新定时任务<br />
&nbsp; &nbsp; &nbsp; * @param scheduler<br />
&nbsp; &nbsp; &nbsp; * @param scheduleJob<br />
&nbsp; &nbsp; &nbsp; * @throws SchedulerException<br />
&nbsp; &nbsp; &nbsp; */<br />
&nbsp; &nbsp; &nbsp;public static void updateScheduleJob(Scheduler scheduler,ScheduleJobEntity scheduleJob) throws SchedulerException{<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; try{<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; TriggerKey triggerKey = getTriggerKey(scheduleJob.getJobId());<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; //表达式调度构建器<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(scheduleJob.getCronExpression()).withMisfireHandlingInstructionDoNothing();<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; CronTrigger trigger = getCronTrigger(scheduler,scheduleJob.getJobId());<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; trigger = trigger.getTriggerBuilder().withIdentity(triggerKey).withSchedule(scheduleBuilder).build();<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; trigger.getJobDataMap().put(ScheduleJobEntity.JOB_PARAM_KEY, scheduleJob);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; scheduler.rescheduleJob(triggerKey, trigger);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; if(scheduleJob.getStatus() == GlobalConstant.ScheduleStatus.PAUSE.getValue()) {<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; pauseJob(scheduler,scheduleJob.getJobId());<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; }<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; }catch(SchedulerException e) {<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; throw new SchedulerException(&quot;更新定时任务失败&quot;,e);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; }<br />
&nbsp; &nbsp; }<br />
&nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp;/**<br />
&nbsp; &nbsp; &nbsp; * 执行任务<br />
&nbsp; &nbsp; &nbsp; * @param scheduler<br />
&nbsp; &nbsp; &nbsp; * @param scheduleJob<br />
&nbsp; &nbsp; &nbsp; * @throws SchedulerException<br />
&nbsp; &nbsp; &nbsp; */<br />
&nbsp; &nbsp; &nbsp;public static void run(Scheduler scheduler,ScheduleJobEntity scheduleJob) throws SchedulerException{<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; try{<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; JobDataMap jobDataMap = new JobDataMap();<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; jobDataMap.put(ScheduleJobEntity.JOB_PARAM_KEY, scheduleJob);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; scheduler.triggerJob(getJobKey(scheduleJob.getJobId()), jobDataMap);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; } catch (SchedulerException e) {<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; throw new SchedulerException(&quot;执行定时任务失败&quot;,e);<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; }<br />
&nbsp; &nbsp; &nbsp;}<br />
&nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp;/**<br />
&nbsp; &nbsp; &nbsp; * 恢复定时任务失败<br />
&nbsp; &nbsp; &nbsp; * @param scheduler<br />
&nbsp; &nbsp; &nbsp; * @param jobId<br />
&nbsp; &nbsp; &nbsp; */<br />
&nbsp; &nbsp; &nbsp;public static void resumeJob(Scheduler scheduler,String jobId) throws SchedulerException{<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; try{<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;scheduler.resumeJob(getJobKey(jobId));&nbsp;<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; }catch( SchedulerException e) {<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; throw new SchedulerException(&quot;恢复定时任务失败&quot;,e);&nbsp;<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; }<br />
&nbsp; &nbsp; &nbsp;}<br />
&nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp;/**<br />
&nbsp; &nbsp; &nbsp; * 删除定时任务<br />
&nbsp; &nbsp; &nbsp; * @param scheduler<br />
&nbsp; &nbsp; &nbsp; * @param jobId<br />
&nbsp; &nbsp; &nbsp; * @throws SchedulerException<br />
&nbsp; &nbsp; &nbsp; */<br />
&nbsp; &nbsp; &nbsp;public static void deleteJob(Scheduler scheduler,String jobId) throws SchedulerException{<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; try{<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; scheduler.deleteJob(getJobKey(jobId));<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; }catch( SchedulerException e) {<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; throw new SchedulerException(&quot;删除定时任务失败&quot;,e);&nbsp;<br />
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; }<br />
&nbsp; &nbsp; &nbsp;}<br />
}</p>

<h2>常量类</h2>

<p>package com.ustc.wang.base.utils;</p>

<p>public class GlobalConstant {<br />
&nbsp; &nbsp;private GlobalConstant(){<br />
&nbsp;&nbsp; &nbsp; &nbsp; throw new IllegalAccessError(&quot;工具类不用实例化&quot;);<br />
&nbsp; &nbsp;}</p>

<p>&nbsp; &nbsp;/**<br />
&nbsp; &nbsp; * 定时任务状态<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; */<br />
&nbsp; &nbsp;public enum ScheduleStatus {<br />
&nbsp; &nbsp; &nbsp; &nbsp;/**<br />
&nbsp; &nbsp; &nbsp; &nbsp; * 正常<br />
&nbsp; &nbsp; &nbsp; &nbsp; */<br />
&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;NORMAL(0),<br />
&nbsp; &nbsp; &nbsp; &nbsp;/**<br />
&nbsp; &nbsp; &nbsp; &nbsp; * 暂停<br />
&nbsp; &nbsp; &nbsp; &nbsp; */<br />
&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;PAUSE(1);</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;private int value;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;private ScheduleStatus(int value) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;this.value = value;<br />
&nbsp; &nbsp; &nbsp; &nbsp;}<br />
&nbsp; &nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp;public int getValue() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return value;<br />
&nbsp; &nbsp; &nbsp; &nbsp;}<br />
&nbsp; &nbsp;}<br />
}<br />
&nbsp;</p>

<h2>业务类</h2>

<p>这里定义了bean的名字，在初见定时任务的时候，用到了这里的bean名子做唯一标识。</p>

<p>package com.ustc.wang.base.job.task.work;</p>

<p>import org.apache.logging.log4j.LogManager;<br />
import org.apache.logging.log4j.Logger;<br />
import org.quartz.DisallowConcurrentExecution;<br />
import org.springframework.beans.factory.annotation.Autowired;<br />
import org.springframework.stereotype.Component;</p>

<p>import com.ustc.wang.service.exam.IExamStudentRegisterService;</p>

<p><br />
@Component(&quot;examTask&quot;)<br />
@DisallowConcurrentExecution<br />
public class ExamTask {<br />
&nbsp;&nbsp; &nbsp;private Logger logger = LogManager.getLogger(ExamTask.class);<br />
&nbsp;&nbsp; &nbsp;@Autowired<br />
&nbsp;&nbsp; &nbsp;private IExamStudentRegisterService examStudentRegisterService;<br />
&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;public void studentRegisterLayOut() {<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;logger.info(&quot;报考编排定时任务开始--------&quot;);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;examStudentRegisterService.layOutData();<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;logger.info(&quot;报考编排定时任务开始--------&quot;);<br />
&nbsp;&nbsp; &nbsp;}<br />
}</p>

<h2>sql 语句</h2>

<p>DROP TABLE IF EXISTS `schedule_job`;<br />
CREATE TABLE `schedule_job` (<br />
&nbsp; `job_id` varchar(32) NOT NULL COMMENT &#39;任务id&#39;,<br />
&nbsp; `bean_name` varchar(255) DEFAULT NULL COMMENT &#39;spring bean 名称&#39;,<br />
&nbsp; `method_name` varchar(255) DEFAULT NULL COMMENT &#39;方法名称&#39;,<br />
&nbsp; `params` varchar(2048) DEFAULT NULL COMMENT &#39;入参&#39;,<br />
&nbsp; `cron_expression` varchar(128) DEFAULT NULL COMMENT &#39;cron表达式&#39;,<br />
&nbsp; `status` tinyint(2) NOT NULL COMMENT &#39;任务状态,0正常，1暂停&#39;,<br />
&nbsp; `remark` varchar(255) DEFAULT NULL COMMENT &#39;备注&#39;,<br />
&nbsp; `create_time` datetime DEFAULT NULL COMMENT &#39;创建时间&#39;,<br />
&nbsp; PRIMARY KEY (`job_id`)<br />
) ENGINE=InnoDB DEFAULT CHARSET=utf8;<br />
&nbsp;</p>

<p><br />
&nbsp;</p>
