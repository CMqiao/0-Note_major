<h1>第二章 身份验证&mdash;&mdash;《跟我学Shiro》</h1>

<p><strong>身份验证</strong>，即在应用中谁能证明他就是他本人。一般提供如他们的身份ID一些标识信息来表明他就是他本人，如提供身份证，用户名/密码来证明。</p>

<p>在shiro中，用户需要提供principals&nbsp;（身份）和credentials（证明）给shiro，从而应用能验证用户身份：</p>

<p><strong>principals</strong>：身份，即主体的标识属性，可以是任何东西，如用户名、邮箱等，唯一即可。一个主体可以有多个principals，但只有一个Primary principals，一般是用户名/密码/手机号。</p>

<p><strong>credentials</strong>：证明/凭证，即只有主体知道的安全值，如密码/数字证书等。</p>

<p>最常见的principals和credentials组合就是用户名/密码了。接下来先进行一个基本的身份认证。</p>

<p>&nbsp;</p>

<p>另外两个相关的概念是之前提到的<strong>Subject</strong>及<strong>Realm</strong>，分别是主体及验证主体的数据源。</p>

<p>&nbsp;</p>

<h2>2.2&nbsp;&nbsp;环境准备</h2>

<p>本文使用Maven构建，因此需要一点Maven知识。首先准备环境依赖：&nbsp;</p>

<ol start="1">
	<li>&lt;dependencies&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;dependency&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;junit&lt;/groupId&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;junit&lt;/artifactId&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;4.9&lt;/version&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/dependency&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;dependency&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;commons-logging&lt;/groupId&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;commons-logging&lt;/artifactId&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;1.1.3&lt;/version&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/dependency&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;dependency&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;shiro-core&lt;/artifactId&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;1.2.2&lt;/version&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/dependency&gt;&nbsp;&nbsp;</li>
	<li>&lt;/dependencies&gt;&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>添加junit、common-logging及shiro-core依赖即可。</p>

<p>&nbsp;</p>

<h2>2.3&nbsp;&nbsp;登录/退出</h2>

<p>1、首先准备一些用户身份/凭据（shiro.ini）</p>

<ol start="1">
	<li>[users]&nbsp;&nbsp;</li>
	<li>zhang=123&nbsp;&nbsp;</li>
	<li>wang=123&nbsp;&nbsp;</li>
</ol>

<p>此处使用ini配置文件，通过[users]指定了两个主体：zhang/123、wang/123。</p>

<p>&nbsp;&nbsp;</p>

<p>2、测试用例（com.github.zhangkaitao.shiro.chapter2.LoginLogoutTest）&nbsp;</p>

<ol start="1">
	<li>@Test&nbsp;&nbsp;</li>
	<li><strong>public</strong>&nbsp;<strong>void</strong>&nbsp;testHelloworld()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//1、获取SecurityManager工厂，此处使用Ini配置文件初始化SecurityManager&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;Factory&lt;org.apache.shiro.mgt.SecurityManager&gt;&nbsp;factory&nbsp;=&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>new</strong>&nbsp;IniSecurityManagerFactory(&quot;classpath:shiro.ini&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//2、得到SecurityManager实例&nbsp;并绑定给SecurityUtils&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;org.apache.shiro.mgt.SecurityManager&nbsp;securityManager&nbsp;=&nbsp;factory.getInstance();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;SecurityUtils.setSecurityManager(securityManager);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//3、得到Subject及创建用户名/密码身份验证Token（即用户身份/凭证）&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;Subject&nbsp;subject&nbsp;=&nbsp;SecurityUtils.getSubject();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;UsernamePasswordToken&nbsp;token&nbsp;=&nbsp;<strong>new</strong>&nbsp;UsernamePasswordToken(&quot;zhang&quot;,&nbsp;&quot;123&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;<strong>try</strong>&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//4、登录，即身份验证&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subject.login(token);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<strong>catch</strong>&nbsp;(AuthenticationException&nbsp;e)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//5、身份验证失败&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;Assert.assertEquals(<strong>true</strong>,&nbsp;subject.isAuthenticated());&nbsp;//断言用户已经登录&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//6、退出&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;subject.logout();&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>2.1、首先通过new IniSecurityManagerFactory并指定一个ini配置文件来创建一个SecurityManager工厂；</p>

<p>2.2、接着获取SecurityManager并绑定到SecurityUtils，这是一个全局设置，设置一次即可；</p>

<p>2.3、通过SecurityUtils得到Subject，其会自动绑定到当前线程；如果在web环境在请求结束时需要解除绑定；然后获取身份验证的Token，如用户名/密码；</p>

<p>2.4、调用subject.login方法进行登录，其会自动委托给SecurityManager.login方法进行登录；</p>

<p>2.5、如果身份验证失败请捕获AuthenticationException或其子类，常见的如：&nbsp;DisabledAccountException（禁用的帐号）、LockedAccountException（锁定的帐号）、UnknownAccountException（错误的帐号）、ExcessiveAttemptsException（登录失败次数过多）、IncorrectCredentialsException&nbsp;（错误的凭证）、ExpiredCredentialsException（过期的凭证）等，具体请查看其继承关系；对于页面的错误消息展示，最好使用如&ldquo;用户名/密码错误&rdquo;而不是&ldquo;用户名错误&rdquo;/&ldquo;密码错误&rdquo;，防止一些恶意用户非法扫描帐号库；</p>

<p>2.6、最后可以调用subject.logout退出，其会自动委托给SecurityManager.logout方法退出。</p>

<p>&nbsp;</p>

<p><strong>从如上代码可总结出身份验证的步骤：</strong></p>

<p>1、收集用户身份/凭证，即如用户名/密码；</p>

<p>2、调用Subject.login进行登录，如果失败将得到相应的AuthenticationException异常，根据异常提示用户错误信息；否则登录成功；</p>

<p>3、最后调用Subject.logout进行退出操作。</p>

<p>&nbsp;</p>

<p>如上测试的几个问题：</p>

<p>1、用户名/密码硬编码在ini配置文件，以后需要改成如数据库存储，且密码需要加密存储；</p>

<p>2、用户身份Token可能不仅仅是用户名/密码，也可能还有其他的，如登录时允许用户名/邮箱/手机号同时登录。&nbsp;</p>

<p>&nbsp;</p>

<h2>2.4&nbsp;&nbsp;身份认证流程</h2>

<p><img alt="" src="http://dl2.iteye.com/upload/attachment/0094/0173/8d639160-cd3e-3b9c-8dd6-c7f9221827a5.png" /></p>

<p>流程如下：</p>

<p>1、首先调用Subject.login(token)进行登录，其会自动委托给Security Manager，调用之前必须通过SecurityUtils. setSecurityManager()设置；</p>

<p>2、SecurityManager负责真正的身份验证逻辑；它会委托给Authenticator进行身份验证；</p>

<p>3、Authenticator才是真正的身份验证者，Shiro API中核心的身份认证入口点，此处可以自定义插入自己的实现；</p>

<p>4、Authenticator可能会委托给相应的AuthenticationStrategy进行多Realm身份验证，默认ModularRealmAuthenticator会调用AuthenticationStrategy进行多Realm身份验证；</p>

<p>5、Authenticator会把相应的token传入Realm，从Realm获取身份验证信息，如果没有返回/抛出异常表示身份验证失败了。此处可以配置多个Realm，将按照相应的顺序及策略进行访问。</p>

<h2>2.5&nbsp; Realm</h2>

<p>Realm：域，Shiro从从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作；可以把Realm看成DataSource，即安全数据源。如我们之前的ini配置方式将使用org.apache.shiro.realm.text.IniRealm。</p>

<p>&nbsp;</p>

<p>org.apache.shiro.realm.Realm接口如下：&nbsp;</p>

<ol start="1">
	<li>String&nbsp;getName();&nbsp;//返回一个唯一的Realm名字&nbsp;&nbsp;</li>
	<li><strong>boolean</strong>&nbsp;supports(AuthenticationToken&nbsp;token);&nbsp;//判断此Realm是否支持此Token&nbsp;&nbsp;</li>
	<li>AuthenticationInfo&nbsp;getAuthenticationInfo(AuthenticationToken&nbsp;token)&nbsp;&nbsp;</li>
	<li>&nbsp;<strong>throws</strong>&nbsp;AuthenticationException;&nbsp;&nbsp;//根据Token获取认证信息&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<p><strong>单</strong><strong>Realm</strong><strong>配置</strong></p>

<p>1、自定义Realm实现（com.github.zhangkaitao.shiro.chapter2.realm.MyRealm1）：&nbsp;&nbsp;</p>

<ol start="1">
	<li><strong>public</strong>&nbsp;<strong>class</strong>&nbsp;MyRealm1&nbsp;<strong>implements</strong>&nbsp;Realm&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;<strong>public</strong>&nbsp;String&nbsp;getName()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>return</strong>&nbsp;&quot;myrealm1&quot;;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;<strong>public</strong>&nbsp;<strong>boolean</strong>&nbsp;supports(AuthenticationToken&nbsp;token)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//仅支持UsernamePasswordToken类型的Token&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>return</strong>&nbsp;token&nbsp;<strong>instanceof</strong>&nbsp;UsernamePasswordToken;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;<strong>public</strong>&nbsp;AuthenticationInfo&nbsp;getAuthenticationInfo(AuthenticationToken&nbsp;token)&nbsp;<strong>throws</strong>&nbsp;AuthenticationException&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;username&nbsp;=&nbsp;(String)token.getPrincipal();&nbsp;&nbsp;//得到用户名&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;password&nbsp;=&nbsp;<strong>new</strong>&nbsp;String((<strong>char</strong>[])token.getCredentials());&nbsp;//得到密码&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>if</strong>(!&quot;zhang&quot;.equals(username))&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>throw</strong>&nbsp;<strong>new</strong>&nbsp;UnknownAccountException();&nbsp;//如果用户名错误&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>if</strong>(!&quot;123&quot;.equals(password))&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>throw</strong>&nbsp;<strong>new</strong>&nbsp;IncorrectCredentialsException();&nbsp;//如果密码错误&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//如果身份认证验证成功，返回一个AuthenticationInfo实现；&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>return</strong>&nbsp;<strong>new</strong>&nbsp;SimpleAuthenticationInfo(username,&nbsp;password,&nbsp;getName());&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<p>2、ini配置文件指定自定义Realm实现(shiro-realm.ini)&nbsp;&nbsp;</p>

<ol start="1">
	<li>#声明一个realm&nbsp;&nbsp;</li>
	<li>myRealm1=com.github.zhangkaitao.shiro.chapter2.realm.MyRealm1&nbsp;&nbsp;</li>
	<li>#指定securityManager的realms实现&nbsp;&nbsp;</li>
	<li>securityManager.realms=$myRealm1&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>通过$name来引入之前的realm定义</p>

<p>&nbsp;</p>

<p>3、测试用例请参考com.github.zhangkaitao.shiro.chapter2.LoginLogoutTest的testCustomRealm测试方法，只需要把之前的shiro.ini配置文件改成shiro-realm.ini即可。</p>

<p>&nbsp;</p>

<p><strong>多</strong><strong>Realm</strong><strong>配置</strong></p>

<p>1、ini配置文件（shiro-multi-realm.ini）&nbsp;&nbsp;</p>

<ol start="1">
	<li>#声明一个realm&nbsp;&nbsp;</li>
	<li>myRealm1=com.github.zhangkaitao.shiro.chapter2.realm.MyRealm1&nbsp;&nbsp;</li>
	<li>myRealm2=com.github.zhangkaitao.shiro.chapter2.realm.MyRealm2&nbsp;&nbsp;</li>
	<li>#指定securityManager的realms实现&nbsp;&nbsp;</li>
	<li>securityManager.realms=$myRealm1,$myRealm2&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>securityManager会按照realms指定的顺序进行身份认证。此处我们使用显示指定顺序的方式指定了Realm的顺序，如果删除&ldquo;securityManager.realms=$myRealm1,$myRealm2&rdquo;，那么securityManager会按照realm声明的顺序进行使用（即无需设置realms属性，其会自动发现），当我们显示指定realm后，其他没有指定realm将被忽略，如&ldquo;securityManager.realms=$myRealm1&rdquo;，那么myRealm2不会被自动设置进去。</p>

<p>&nbsp;</p>

<p>2、测试用例请参考com.github.zhangkaitao.shiro.chapter2.LoginLogoutTest的testCustomMultiRealm测试方法。</p>

<p>&nbsp;</p>

<p><strong>Shiro</strong><strong>默认提供的</strong><strong>Realm</strong></p>

<p><img alt="" src="http://dl2.iteye.com/upload/attachment/0094/0175/34062d4e-8ac5-378a-a9e2-4845f0828292.png" /></p>

<p>以后一般继承AuthorizingRealm（授权）即可；其继承了AuthenticatingRealm（即身份验证），而且也间接继承了CachingRealm（带有缓存实现）。其中主要默认实现如下：</p>

<p><strong>org.apache.shiro.realm.text.IniRealm</strong><strong>：</strong>[users]部分指定用户名/密码及其角色；[roles]部分指定角色即权限信息；</p>

<p><strong>org.apache.shiro.realm.text.PropertiesRealm</strong><strong>：</strong>&nbsp;user.username=password,role1,role2指定用户名/密码及其角色；role.role1=permission1,permission2指定角色及权限信息；</p>

<p><strong>org.apache.shiro.realm.jdbc.JdbcRealm</strong><strong>：</strong>通过sql查询相应的信息，如&ldquo;select password from users where username = ?&rdquo;获取用户密码，&ldquo;select password, password_salt from users where username = ?&rdquo;获取用户密码及盐；&ldquo;select role_name from user_roles where username = ?&rdquo;获取用户角色；&ldquo;select permission from roles_permissions where role_name = ?&rdquo;获取角色对应的权限信息；也可以调用相应的api进行自定义sql；</p>

<p>&nbsp;</p>

<p><strong>JDBC Realm</strong><strong>使用</strong></p>

<p>1、数据库及依赖</p>

<ol start="1">
	<li>&lt;dependency&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;mysql&lt;/groupId&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;5.1.25&lt;/version&gt;&nbsp;&nbsp;</li>
	<li>&lt;/dependency&gt;&nbsp;&nbsp;</li>
	<li>&lt;dependency&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;com.alibaba&lt;/groupId&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;druid&lt;/artifactId&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;0.2.23&lt;/version&gt;&nbsp;&nbsp;</li>
	<li>&lt;/dependency&gt;&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>本文将使用mysql数据库及druid连接池；&nbsp;</p>

<p>&nbsp;</p>

<p>2、到数据库shiro下建三张表：users（用户名/密码）、user_roles（用户/角色）、roles_permissions（角色/权限），具体请参照shiro-example-chapter2/sql/shiro.sql；并添加一个用户记录，用户名/密码为zhang/123；</p>

<p>&nbsp;</p>

<p>3、ini配置（shiro-jdbc-realm.ini）&nbsp;</p>

<ol start="1">
	<li>jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm&nbsp;&nbsp;</li>
	<li>dataSource=com.alibaba.druid.pool.DruidDataSource&nbsp;&nbsp;</li>
	<li>dataSource.driverClassName=com.mysql.jdbc.Driver&nbsp;&nbsp;</li>
	<li>dataSource.url=jdbc:mysql://localhost:3306/shiro&nbsp;&nbsp;</li>
	<li>dataSource.username=root&nbsp;&nbsp;</li>
	<li>#dataSource.password=&nbsp;&nbsp;</li>
	<li>jdbcRealm.dataSource=$dataSource&nbsp;&nbsp;</li>
	<li>securityManager.realms=$jdbcRealm&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>1、变量名=全限定类名会自动创建一个类实例</p>

<p>2、变量名.属性=值&nbsp;自动调用相应的setter方法进行赋值</p>

<p>3、$变量名&nbsp;引用之前的一个对象实例&nbsp;</p>

<p>4、测试代码请参照com.github.zhangkaitao.shiro.chapter2.LoginLogoutTest的testJDBCRealm方法，和之前的没什么区别。</p>

<p>&nbsp;</p>

<h2>2.6&nbsp;&nbsp;Authenticator及AuthenticationStrategy</h2>

<p>Authenticator的职责是验证用户帐号，是Shiro API中身份验证核心的入口点：&nbsp;</p>

<p><strong>Java代码&nbsp;<embed allowscriptaccess="always" height="15" pluginspage="http://www.macromedia.com/go/getflashplayer" quality="high" src="http://jinnianshilongnian.iteye.com/javascripts/syntaxhighlighter/clipboard_new.swf" type="application/x-shockwave-flash" width="14" wmode="transparent"></embed>&nbsp;<a href="javascript:void()" onclick="code_favorites_do_favorite(this);return false;" title="收藏这段代码"><img alt="收藏代码" src="http://jinnianshilongnian.iteye.com/images/icon_star.png" /></a></strong></p>

<ol start="1">
	<li><strong>public</strong>&nbsp;AuthenticationInfo&nbsp;authenticate(AuthenticationToken&nbsp;authenticationToken)&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>throws</strong>&nbsp;AuthenticationException;&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>如果验证成功，将返回AuthenticationInfo验证信息；此信息中包含了身份及凭证；如果验证失败将抛出相应的AuthenticationException实现。</p>

<p>&nbsp;</p>

<p>SecurityManager接口继承了Authenticator，另外还有一个ModularRealmAuthenticator实现，其委托给多个Realm进行验证，验证规则通过AuthenticationStrategy接口指定，默认提供的实现：</p>

<p><strong>FirstSuccessfulStrategy</strong>：只要有一个Realm验证成功即可，只返回第一个Realm身份验证成功的认证信息，其他的忽略；</p>

<p><strong>AtLeastOneSuccessfulStrategy</strong>：只要有一个Realm验证成功即可，和FirstSuccessfulStrategy不同，返回所有Realm身份验证成功的认证信息；</p>

<p><strong>AllSuccessfulStrategy</strong>：所有Realm验证成功才算成功，且返回所有Realm身份验证成功的认证信息，如果有一个失败就失败了。</p>

<p>&nbsp;</p>

<p>ModularRealmAuthenticator默认使用AtLeastOneSuccessfulStrategy策略。</p>

<p>&nbsp;</p>

<p>假设我们有三个realm：</p>

<p>myRealm1：&nbsp;用户名/密码为zhang/123时成功，且返回身份/凭据为zhang/123；</p>

<p>myRealm2：&nbsp;用户名/密码为wang/123时成功，且返回身份/凭据为wang/123；</p>

<p>myRealm3：&nbsp;用户名/密码为zhang/123时成功，且返回身份/凭据为zhang@163.com/123，和myRealm1不同的是返回时的身份变了；</p>

<p>&nbsp;</p>

<p>1、ini配置文件(shiro-authenticator-all-success.ini)&nbsp;</p>

<ol start="1">
	<li>#指定securityManager的authenticator实现&nbsp;&nbsp;</li>
	<li>authenticator=org.apache.shiro.authc.pam.ModularRealmAuthenticator&nbsp;&nbsp;</li>
	<li>securityManager.authenticator=$authenticator&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>#指定securityManager.authenticator的authenticationStrategy&nbsp;&nbsp;</li>
	<li>allSuccessfulStrategy=org.apache.shiro.authc.pam.AllSuccessfulStrategy&nbsp;&nbsp;</li>
	<li>securityManager.authenticator.authenticationStrategy=$allSuccessfulStrategy&nbsp;&nbsp;</li>
</ol>

<ol start="1">
	<li>myRealm1=com.github.zhangkaitao.shiro.chapter2.realm.MyRealm1&nbsp;&nbsp;</li>
	<li>myRealm2=com.github.zhangkaitao.shiro.chapter2.realm.MyRealm2&nbsp;&nbsp;</li>
	<li>myRealm3=com.github.zhangkaitao.shiro.chapter2.realm.MyRealm3&nbsp;&nbsp;</li>
	<li>securityManager.realms=$myRealm1,$myRealm3&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<p>2、测试代码（com.github.zhangkaitao.shiro.chapter2.AuthenticatorTest）</p>

<p>2.1、首先通用化登录逻辑&nbsp;</p>

<ol start="1">
	<li><strong>private</strong>&nbsp;<strong>void</strong>&nbsp;login(String&nbsp;configFile)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//1、获取SecurityManager工厂，此处使用Ini配置文件初始化SecurityManager&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;Factory&lt;org.apache.shiro.mgt.SecurityManager&gt;&nbsp;factory&nbsp;=&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>new</strong>&nbsp;IniSecurityManagerFactory(configFile);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//2、得到SecurityManager实例&nbsp;并绑定给SecurityUtils&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;org.apache.shiro.mgt.SecurityManager&nbsp;securityManager&nbsp;=&nbsp;factory.getInstance();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;SecurityUtils.setSecurityManager(securityManager);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//3、得到Subject及创建用户名/密码身份验证Token（即用户身份/凭证）&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;Subject&nbsp;subject&nbsp;=&nbsp;SecurityUtils.getSubject();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;UsernamePasswordToken&nbsp;token&nbsp;=&nbsp;<strong>new</strong>&nbsp;UsernamePasswordToken(&quot;zhang&quot;,&nbsp;&quot;123&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;subject.login(token);&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<p>2.2、测试AllSuccessfulStrategy成功：&nbsp;&nbsp;&nbsp;&nbsp;</p>

<ol start="1">
	<li>@Test&nbsp;&nbsp;</li>
	<li><strong>public</strong>&nbsp;<strong>void</strong>&nbsp;testAllSuccessfulStrategyWithSuccess()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;login(&quot;classpath:shiro-authenticator-all-success.ini&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;Subject&nbsp;subject&nbsp;=&nbsp;SecurityUtils.getSubject();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//得到一个身份集合，其包含了Realm验证成功的身份信息&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;PrincipalCollection&nbsp;principalCollection&nbsp;=&nbsp;subject.getPrincipals();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;Assert.assertEquals(2,&nbsp;principalCollection.asList().size());&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>即PrincipalCollection包含了zhang和zhang@163.com身份信息。</p>

<p>&nbsp;</p>

<p>2.3、测试AllSuccessfulStrategy失败：</p>

<ol start="1">
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Test(expected&nbsp;=&nbsp;UnknownAccountException.<strong>class</strong>)&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;<strong>public</strong>&nbsp;<strong>void</strong>&nbsp;testAllSuccessfulStrategyWithFail()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;login(&quot;classpath:shiro-authenticator-all-fail.ini&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject&nbsp;subject&nbsp;=&nbsp;SecurityUtils.getSubject();&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>shiro-authenticator-all-fail.ini与shiro-authenticator-all-success.ini不同的配置是使用了securityManager.realms=$myRealm1,$myRealm2；即myRealm验证失败。</p>

<p>对于AtLeastOneSuccessfulStrategy和FirstSuccessfulStrategy的区别，请参照testAtLeastOneSuccessfulStrategyWithSuccess和testFirstOneSuccessfulStrategyWithSuccess测试方法。唯一不同点一个是返回所有验证成功的Realm的认证信息；另一个是只返回第一个验证成功的Realm的认证信息。</p>

<p>自定义AuthenticationStrategy实现，首先看其API：</p>

<ol start="1">
	<li>//在所有Realm验证之前调用&nbsp;&nbsp;</li>
	<li>AuthenticationInfo&nbsp;beforeAllAttempts(&nbsp;&nbsp;</li>
	<li>Collection&lt;?&nbsp;<strong>extends</strong>&nbsp;Realm&gt;&nbsp;realms,&nbsp;AuthenticationToken&nbsp;token)&nbsp;&nbsp;&nbsp;</li>
	<li><strong>throws</strong>&nbsp;AuthenticationException;&nbsp;&nbsp;</li>
	<li>//在每个Realm之前调用&nbsp;&nbsp;</li>
	<li>AuthenticationInfo&nbsp;beforeAttempt(&nbsp;&nbsp;</li>
	<li>Realm&nbsp;realm,&nbsp;AuthenticationToken&nbsp;token,&nbsp;AuthenticationInfo&nbsp;aggregate)&nbsp;&nbsp;&nbsp;</li>
	<li><strong>throws</strong>&nbsp;AuthenticationException;&nbsp;&nbsp;</li>
	<li>//在每个Realm之后调用&nbsp;&nbsp;</li>
	<li>AuthenticationInfo&nbsp;afterAttempt(&nbsp;&nbsp;</li>
	<li>Realm&nbsp;realm,&nbsp;AuthenticationToken&nbsp;token,&nbsp;&nbsp;&nbsp;</li>
	<li>AuthenticationInfo&nbsp;singleRealmInfo,&nbsp;AuthenticationInfo&nbsp;aggregateInfo,&nbsp;Throwable&nbsp;t)&nbsp;&nbsp;</li>
	<li><strong>throws</strong>&nbsp;AuthenticationException;&nbsp;&nbsp;</li>
	<li>//在所有Realm之后调用&nbsp;&nbsp;</li>
	<li>AuthenticationInfo&nbsp;afterAllAttempts(&nbsp;&nbsp;</li>
	<li>AuthenticationToken&nbsp;token,&nbsp;AuthenticationInfo&nbsp;aggregate)&nbsp;&nbsp;&nbsp;</li>
	<li><strong>throws</strong>&nbsp;AuthenticationException;&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>因为每个AuthenticationStrategy实例都是无状态的，所有每次都通过接口将相应的认证信息传入下一次流程；通过如上接口可以进行如合并/返回第一个验证成功的认证信息。</p>

<p>自定义实现时一般继承org.apache.shiro.authc.pam.AbstractAuthenticationStrategy即可，具体可以参考代码com.github.zhangkaitao.shiro.chapter2.authenticator.strategy包下OnlyOneAuthenticatorStrategy&nbsp;和AtLeastTwoAuthenticatorStrategy。</p>

<p>到此基本的身份验证就搞定了，对于AuthenticationToken&nbsp;、AuthenticationInfo和Realm的详细使用后续章节再陆续介绍。</p>

<p>示例源代码：<a href="https://github.com/zhangkaitao/shiro-example" target="_blank">https://github.com/zhangkaitao/shiro-example</a>；可加群134755960探讨Spring/Shiro技术。</p>
