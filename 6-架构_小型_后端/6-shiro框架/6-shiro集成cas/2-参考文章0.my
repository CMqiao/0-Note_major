<h1>Shiro权限管理框架集成Cas扩展定义CasRealm</h1>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Apache Shiro是一个强大易用的Java安全框架，提供了认证、授权、加密和会话管理等功能： 认证是指用户身份识别，常被称为用户&ldquo;登录&rdquo;；授权是指访问控制；密码加密是指保护或隐藏数据防止被偷窥；会话管理是指每用户相关的时间敏感的状态。其他关于Shiro这里就不介绍了，下面本站www.yoodb.com为大家说一说Shiro权限管理框架集成Cas扩展自定义CasRealm类，来完成Cas单点登录权限管理的功能。</p>

<h2>shrio关于CAS单点登录具体配置</h2>

<p>搭建CAS服务端此处略过，本文采用cas-client-3.2.1版本为大家讲解，首先下载cas-client客户端项目，将/cas-client/modules/cas-client-core-3.2.1.jar包放到项目应用中， shrio关于CAS单点登录具体配置文件内容如下：</p>

<pre>
&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;UTF-8&quot;?&gt;
&lt;beans&nbsp;xmlns=&quot;http://www.springframework.org/schema/beans&quot;
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&nbsp;xmlns:cache=&quot;http://www.springframework.org/schema/cache&quot;
xmlns:p=&quot;http://www.springframework.org/schema/p&quot;&nbsp;xmlns:c=&quot;http://www.springframework.org/schema/c&quot;
xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;
xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/cache&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;
&lt;!--&nbsp;权限资源配置&nbsp;--&gt;
&lt;bean&nbsp;id=&quot;shiroFilter&quot;&nbsp;class=&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;&gt;
&lt;property&nbsp;name=&quot;securityManager&quot;&nbsp;ref=&quot;securityManager&quot;&nbsp;/&gt;
&lt;!--&nbsp;设定用户的登录链接，这里为cas登录页面的链接地址可配置回调地址&nbsp;--&gt;
&lt;property&nbsp;name=&quot;loginUrl&quot;&nbsp;value=&quot;${shiro.loginUrl}&quot;&nbsp;/&gt;
&lt;property&nbsp;name=&quot;filters&quot;&gt;
&lt;map&gt;
&lt;!--&nbsp;添加casFilter到shiroFilter&nbsp;--&gt;
&lt;entry&nbsp;key=&quot;casFilter&quot;&nbsp;value-ref=&quot;casFilter&quot;&nbsp;/&gt;
&lt;entry&nbsp;key=&quot;logoutFilter&quot;&nbsp;value-ref=&quot;logoutFilter&quot;&nbsp;/&gt;
&lt;/map&gt;
&lt;/property&gt;
&lt;property&nbsp;name=&quot;filterChainDefinitions&quot;&gt;
&lt;value&gt;
/shiro-cas&nbsp;=&nbsp;casFilter
/logout&nbsp;=&nbsp;logoutFilter
/users/**&nbsp;=&nbsp;user
&lt;/value&gt;
&lt;/property&gt;
&lt;/bean&gt;
&lt;bean&nbsp;id=&quot;casFilter&quot;&nbsp;class=&quot;org.apache.shiro.cas.CasFilter&quot;&gt;
&lt;!--&nbsp;配置验证错误时的失败页面&nbsp;--&gt;
&lt;property&nbsp;name=&quot;failureUrl&quot;&nbsp;value=&quot;${shiro.failureUrl}&quot;&nbsp;/&gt;
&lt;property&nbsp;name=&quot;successUrl&quot;&nbsp;value=&quot;${shiro.successUrl}&quot;&nbsp;/&gt;
&lt;/bean&gt;
&lt;bean&nbsp;id=&quot;logoutFilter&quot;&nbsp;class=&quot;org.apache.shiro.web.filter.authc.LogoutFilter&quot;&gt;
&lt;!--&nbsp;配置验证错误时的失败页面&nbsp;--&gt;
&lt;property&nbsp;name=&quot;redirectUrl&quot;&nbsp;value=&quot;${shiro.logoutUrl}&quot;&nbsp;/&gt;
&lt;/bean&gt;
&lt;bean&nbsp;id=&quot;casRealm&quot;&nbsp;class=&quot;com.spring.mybatis.realm.UserRealm&quot;&gt;
&lt;!--&nbsp;认证通过后的默认角色&nbsp;--&gt;
&lt;property&nbsp;name=&quot;defaultRoles&quot;&nbsp;value=&quot;ROLE_USER&quot;&nbsp;/&gt;
&lt;!--&nbsp;cas服务端地址前缀&nbsp;--&gt;
&lt;property&nbsp;name=&quot;casServerUrlPrefix&quot;&nbsp;value=&quot;${shiro.cas.serverUrlPrefix}&quot;&nbsp;/&gt;
&lt;!--&nbsp;应用服务地址，用来接收cas服务端票据&nbsp;--&gt;
&lt;property&nbsp;name=&quot;casService&quot;&nbsp;value=&quot;${shiro.cas.service}&quot;&nbsp;/&gt;
&lt;/bean&gt;
&lt;!--&nbsp;安全管理器&nbsp;--&gt;
&lt;bean&nbsp;id=&quot;securityManager&quot;&nbsp;class=&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;&gt;
&lt;property&nbsp;name=&quot;sessionManager&quot;&nbsp;ref=&quot;sessionManager&quot;&nbsp;/&gt;
&lt;property&nbsp;name=&quot;subjectFactory&quot;&nbsp;ref=&quot;casSubjectFactory&quot;&gt;&lt;/property&gt;
&lt;property&nbsp;name=&quot;realm&quot;&nbsp;ref=&quot;casRealm&quot;&nbsp;/&gt;
&lt;/bean&gt;
&lt;!--&nbsp;如果要实现cas的remember&nbsp;me的功能，需要用到下面这个bean，并设置到securityManager的subjectFactory中&nbsp;--&gt;&nbsp;&nbsp;
&lt;bean&nbsp;id=&quot;casSubjectFactory&quot;&nbsp;class=&quot;org.apache.shiro.cas.CasSubjectFactory&quot;&gt;&lt;/bean&gt;
&lt;bean&nbsp;class=&quot;org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor&quot;&gt;
&lt;property&nbsp;name=&quot;securityManager&quot;&nbsp;ref=&quot;securityManager&quot;&nbsp;/&gt;
&lt;/bean&gt;
&lt;!--&nbsp;会话管理器&nbsp;--&gt;&nbsp;&nbsp;
&lt;bean&nbsp;id=&quot;sessionManager&quot;&nbsp;class=&quot;org.apache.shiro.web.session.mgt.DefaultWebSessionManager&quot;&gt;&nbsp;
&lt;property&nbsp;name=&quot;globalSessionTimeout&quot;&nbsp;value=&quot;3600000&quot;&nbsp;/&gt;
&lt;property&nbsp;name=&quot;sessionDAO&quot;&nbsp;ref=&quot;sessionDAO&quot;&nbsp;/&gt;&nbsp;
&lt;/bean&gt;
&lt;!--&nbsp;会话读写实现类&nbsp;--&gt;&nbsp;&nbsp;
&lt;bean&nbsp;id=&quot;sessionDAO&quot;&nbsp;class=&quot;com.spring.mybatis.redis.RedisSessionDAO&quot;/&gt;
&lt;bean&nbsp;id=&quot;lifecycleBeanPostProcessor&quot;&nbsp;class=&quot;org.apache.shiro.spring.LifecycleBeanPostProcessor&quot;&gt;&lt;/bean&gt;
&lt;bean
class=&quot;org.springframework.beans.factory.config.MethodInvokingFactoryBean&quot;&gt;
&lt;property&nbsp;name=&quot;staticMethod&quot;
value=&quot;org.apache.shiro.SecurityUtils.setSecurityManager&quot;&gt;&lt;/property&gt;
&lt;property&nbsp;name=&quot;arguments&quot;&nbsp;ref=&quot;securityManager&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
&lt;/beans&gt;</pre>

<p>上述配置具体含义在注释中本人已经写的很详细，还有什么问题可以留言，此处就不一一介绍了，咱们继续。</p>

<h2>shiro安全框架和cas单点登录相关的jar包</h2>

<p>关于CAS单点登录需要重写casrealm类，上述配置com.spring.mybatis.realm.UserRealm类，就是我重写的类文件，主要是为了方便分配本地系统权限体系，shiro-cas提供的默认CasRealm功能比较有限,不能满足动态角色体系。shiro-cas版本采用的是1.2.3，maven下载shiro安全框架和cas单点登录相关的jar包pom.xml配置如下：</p>

<pre>
&lt;!--&nbsp;apache&nbsp;shiro&nbsp;相关jar&nbsp;--&gt;
&lt;dependency&gt;
&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;
&lt;artifactId&gt;shiro-aspectj&lt;/artifactId&gt;
&lt;version&gt;${shiro.version}&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
&lt;groupId&gt;redis.clients&lt;/groupId&gt;
&lt;artifactId&gt;jedis&lt;/artifactId&gt;
&lt;version&gt;2.4.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;
&lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;
&lt;version&gt;${shiro.version}&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;
&lt;artifactId&gt;shiro-core&lt;/artifactId&gt;
&lt;version&gt;${shiro.version}&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;
&lt;artifactId&gt;shiro-cas&lt;/artifactId&gt;
&lt;version&gt;${shiro.version}&lt;/version&gt;
&lt;/dependency&gt;</pre>

<h2>原始的CasRealm源码</h2>

<p>下面可以看看原始的CasRealm源码，它是不能满足我们的开发需求功能的，源码具体如下：</p>

<pre>
/*
&nbsp;*&nbsp;Licensed&nbsp;to&nbsp;the&nbsp;Apache&nbsp;Software&nbsp;Foundation&nbsp;(ASF)&nbsp;under&nbsp;one
&nbsp;*&nbsp;or&nbsp;more&nbsp;contributor&nbsp;license&nbsp;agreements.&nbsp;&nbsp;See&nbsp;the&nbsp;NOTICE&nbsp;file
&nbsp;*&nbsp;distributed&nbsp;with&nbsp;this&nbsp;work&nbsp;for&nbsp;additional&nbsp;information
&nbsp;*&nbsp;regarding&nbsp;copyright&nbsp;ownership.&nbsp;&nbsp;The&nbsp;ASF&nbsp;licenses&nbsp;this&nbsp;file
&nbsp;*&nbsp;to&nbsp;you&nbsp;under&nbsp;the&nbsp;Apache&nbsp;License,&nbsp;Version&nbsp;2.0&nbsp;(the
&nbsp;*&nbsp;&quot;License&quot;);&nbsp;you&nbsp;may&nbsp;not&nbsp;use&nbsp;this&nbsp;file&nbsp;except&nbsp;in&nbsp;compliance
&nbsp;*&nbsp;with&nbsp;the&nbsp;License.&nbsp;&nbsp;You&nbsp;may&nbsp;obtain&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;License&nbsp;at
&nbsp;*
&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.apache.org/licenses/LICENSE-2.0
&nbsp;*
&nbsp;*&nbsp;Unless&nbsp;required&nbsp;by&nbsp;applicable&nbsp;law&nbsp;or&nbsp;agreed&nbsp;to&nbsp;in&nbsp;writing,
&nbsp;*&nbsp;software&nbsp;distributed&nbsp;under&nbsp;the&nbsp;License&nbsp;is&nbsp;distributed&nbsp;on&nbsp;an
&nbsp;*&nbsp;&quot;AS&nbsp;IS&quot;&nbsp;BASIS,&nbsp;WITHOUT&nbsp;WARRANTIES&nbsp;OR&nbsp;CONDITIONS&nbsp;OF&nbsp;ANY
&nbsp;*&nbsp;KIND,&nbsp;either&nbsp;express&nbsp;or&nbsp;implied.&nbsp;&nbsp;See&nbsp;the&nbsp;License&nbsp;for&nbsp;the
&nbsp;*&nbsp;specific&nbsp;language&nbsp;governing&nbsp;permissions&nbsp;and&nbsp;limitations
&nbsp;*&nbsp;under&nbsp;the&nbsp;License.
&nbsp;*/
package&nbsp;org.apache.shiro.cas;
import&nbsp;org.apache.shiro.authc.AuthenticationException;
import&nbsp;org.apache.shiro.authc.AuthenticationInfo;
import&nbsp;org.apache.shiro.authc.AuthenticationToken;
import&nbsp;org.apache.shiro.authc.SimpleAuthenticationInfo;
import&nbsp;org.apache.shiro.authz.AuthorizationInfo;
import&nbsp;org.apache.shiro.authz.SimpleAuthorizationInfo;
import&nbsp;org.apache.shiro.realm.AuthorizingRealm;
import&nbsp;org.apache.shiro.subject.PrincipalCollection;
import&nbsp;org.apache.shiro.subject.SimplePrincipalCollection;
import&nbsp;org.apache.shiro.util.CollectionUtils;
import&nbsp;org.apache.shiro.util.StringUtils;
import&nbsp;org.jasig.cas.client.authentication.AttributePrincipal;
import&nbsp;org.jasig.cas.client.validation.*;
import&nbsp;org.slf4j.Logger;
import&nbsp;org.slf4j.LoggerFactory;
import&nbsp;java.util.ArrayList;
import&nbsp;java.util.List;
import&nbsp;java.util.Map;
/**
&nbsp;*&nbsp;This&nbsp;realm&nbsp;implementation&nbsp;acts&nbsp;as&nbsp;a&nbsp;CAS&nbsp;client&nbsp;to&nbsp;a&nbsp;CAS&nbsp;server&nbsp;for&nbsp;authentication&nbsp;and&nbsp;basic&nbsp;authorization.
&nbsp;*&nbsp;&lt;p/&gt;
&nbsp;*&nbsp;This&nbsp;realm&nbsp;functions&nbsp;by&nbsp;inspecting&nbsp;a&nbsp;submitted&nbsp;{@link&nbsp;org.apache.shiro.cas.CasToken&nbsp;CasToken}&nbsp;(which&nbsp;essentially&nbsp;
&nbsp;*&nbsp;wraps&nbsp;a&nbsp;CAS&nbsp;service&nbsp;ticket)&nbsp;and&nbsp;validates&nbsp;it&nbsp;against&nbsp;the&nbsp;CAS&nbsp;server&nbsp;using&nbsp;a&nbsp;configured&nbsp;CAS
&nbsp;*&nbsp;{@link&nbsp;org.jasig.cas.client.validation.TicketValidator&nbsp;TicketValidator}.
&nbsp;*&nbsp;&lt;p/&gt;
&nbsp;*&nbsp;The&nbsp;{@link&nbsp;#getValidationProtocol()&nbsp;validationProtocol}&nbsp;is&nbsp;{@code&nbsp;CAS}&nbsp;by&nbsp;default,&nbsp;which&nbsp;indicates&nbsp;that&nbsp;a
&nbsp;*&nbsp;a&nbsp;{@link&nbsp;org.jasig.cas.client.validation.Cas20ServiceTicketValidator&nbsp;Cas20ServiceTicketValidator}
&nbsp;*&nbsp;will&nbsp;be&nbsp;used&nbsp;for&nbsp;ticket&nbsp;validation.&nbsp;&nbsp;You&nbsp;can&nbsp;alternatively&nbsp;set
&nbsp;*&nbsp;or&nbsp;{@link&nbsp;org.jasig.cas.client.validation.Saml11TicketValidator&nbsp;Saml11TicketValidator}&nbsp;of&nbsp;CAS&nbsp;client.&nbsp;It&nbsp;is&nbsp;based&nbsp;on
&nbsp;*&nbsp;{@link&nbsp;AuthorizingRealm&nbsp;AuthorizingRealm}&nbsp;for&nbsp;both&nbsp;authentication&nbsp;and&nbsp;authorization.&nbsp;User&nbsp;id&nbsp;and&nbsp;attributes&nbsp;are&nbsp;retrieved&nbsp;from&nbsp;the&nbsp;CAS
&nbsp;*&nbsp;service&nbsp;ticket&nbsp;validation&nbsp;response&nbsp;during&nbsp;authentication&nbsp;phase.&nbsp;Roles&nbsp;and&nbsp;permissions&nbsp;are&nbsp;computed&nbsp;during&nbsp;authorization&nbsp;phase&nbsp;(according
&nbsp;*&nbsp;to&nbsp;the&nbsp;attributes&nbsp;previously&nbsp;retrieved).
&nbsp;*
&nbsp;*&nbsp;@since&nbsp;1.2
&nbsp;*/
public&nbsp;class&nbsp;CasRealm&nbsp;extends&nbsp;AuthorizingRealm&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;default&nbsp;name&nbsp;of&nbsp;the&nbsp;CAS&nbsp;attribute&nbsp;for&nbsp;remember&nbsp;me&nbsp;authentication&nbsp;(CAS&nbsp;3.4.10+)
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;final&nbsp;String&nbsp;DEFAULT_REMEMBER_ME_ATTRIBUTE_NAME&nbsp;=&nbsp;&quot;longTermAuthenticationRequestTokenUsed&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;final&nbsp;String&nbsp;DEFAULT_VALIDATION_PROTOCOL&nbsp;=&nbsp;&quot;CAS&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;Logger&nbsp;log&nbsp;=&nbsp;LoggerFactory.getLogger(CasRealm.class);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;this&nbsp;is&nbsp;the&nbsp;url&nbsp;of&nbsp;the&nbsp;CAS&nbsp;server&nbsp;(example&nbsp;:&nbsp;http://host:port/cas)
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;casServerUrlPrefix;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;this&nbsp;is&nbsp;the&nbsp;CAS&nbsp;service&nbsp;url&nbsp;of&nbsp;the&nbsp;application&nbsp;(example&nbsp;:&nbsp;http://host:port/mycontextpath/shiro-cas)
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;casService;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;CAS&nbsp;protocol&nbsp;to&nbsp;use&nbsp;for&nbsp;ticket&nbsp;validation&nbsp;:&nbsp;CAS&nbsp;(default)&nbsp;or&nbsp;SAML&nbsp;:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;CAS&nbsp;protocol&nbsp;can&nbsp;be&nbsp;used&nbsp;with&nbsp;CAS&nbsp;server&nbsp;version&nbsp;&lt;&nbsp;3.1&nbsp;:&nbsp;in&nbsp;this&nbsp;case,&nbsp;no&nbsp;user&nbsp;attributes&nbsp;can&nbsp;be&nbsp;retrieved&nbsp;from&nbsp;the
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CAS&nbsp;ticket&nbsp;validation&nbsp;response&nbsp;(except&nbsp;if&nbsp;there&nbsp;are&nbsp;some&nbsp;customizations&nbsp;on&nbsp;CAS&nbsp;server&nbsp;side)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;SAML&nbsp;protocol&nbsp;can&nbsp;be&nbsp;used&nbsp;with&nbsp;CAS&nbsp;server&nbsp;version&nbsp;&gt;=&nbsp;3.1&nbsp;:&nbsp;in&nbsp;this&nbsp;case,&nbsp;user&nbsp;attributes&nbsp;can&nbsp;be&nbsp;extracted&nbsp;from&nbsp;the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CAS&nbsp;ticket&nbsp;validation&nbsp;response
&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;validationProtocol&nbsp;=&nbsp;DEFAULT_VALIDATION_PROTOCOL;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;default&nbsp;name&nbsp;of&nbsp;the&nbsp;CAS&nbsp;attribute&nbsp;for&nbsp;remember&nbsp;me&nbsp;authentication&nbsp;(CAS&nbsp;3.4.10+)
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;rememberMeAttributeName&nbsp;=&nbsp;DEFAULT_REMEMBER_ME_ATTRIBUTE_NAME;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;this&nbsp;class&nbsp;from&nbsp;the&nbsp;CAS&nbsp;client&nbsp;is&nbsp;used&nbsp;to&nbsp;validate&nbsp;a&nbsp;service&nbsp;ticket&nbsp;on&nbsp;CAS&nbsp;server
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;TicketValidator&nbsp;ticketValidator;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;default&nbsp;roles&nbsp;to&nbsp;applied&nbsp;to&nbsp;authenticated&nbsp;user
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;defaultRoles;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;default&nbsp;permissions&nbsp;to&nbsp;applied&nbsp;to&nbsp;authenticated&nbsp;user
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;defaultPermissions;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;names&nbsp;of&nbsp;attributes&nbsp;containing&nbsp;roles
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;roleAttributeNames;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;names&nbsp;of&nbsp;attributes&nbsp;containing&nbsp;permissions
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;permissionAttributeNames;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;CasRealm()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setAuthenticationTokenClass(CasToken.class);
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;void&nbsp;onInit()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.onInit();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ensureTicketValidator();
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;TicketValidator&nbsp;ensureTicketValidator()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(this.ticketValidator&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.ticketValidator&nbsp;=&nbsp;createTicketValidator();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.ticketValidator;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;TicketValidator&nbsp;createTicketValidator()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;urlPrefix&nbsp;=&nbsp;getCasServerUrlPrefix();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(&quot;saml&quot;.equalsIgnoreCase(getValidationProtocol()))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;Saml11TicketValidator(urlPrefix);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;Cas20ServiceTicketValidator(urlPrefix);
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Authenticates&nbsp;a&nbsp;user&nbsp;and&nbsp;retrieves&nbsp;its&nbsp;information.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;token&nbsp;the&nbsp;authentication&nbsp;token
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@throws&nbsp;AuthenticationException&nbsp;if&nbsp;there&nbsp;is&nbsp;an&nbsp;error&nbsp;during&nbsp;authentication.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;@SuppressWarnings(&quot;unchecked&quot;)
&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;AuthenticationInfo&nbsp;doGetAuthenticationInfo(AuthenticationToken&nbsp;token)&nbsp;throws&nbsp;AuthenticationException&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CasToken&nbsp;casToken&nbsp;=&nbsp;(CasToken)&nbsp;token;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(token&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;ticket&nbsp;=&nbsp;(String)casToken.getCredentials();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!StringUtils.hasText(ticket))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TicketValidator&nbsp;ticketValidator&nbsp;=&nbsp;ensureTicketValidator();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;contact&nbsp;CAS&nbsp;server&nbsp;to&nbsp;validate&nbsp;service&nbsp;ticket
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assertion&nbsp;casAssertion&nbsp;=&nbsp;ticketValidator.validate(ticket,&nbsp;getCasService());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;get&nbsp;principal,&nbsp;user&nbsp;id&nbsp;and&nbsp;attributes
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AttributePrincipal&nbsp;casPrincipal&nbsp;=&nbsp;casAssertion.getPrincipal();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;userId&nbsp;=&nbsp;casPrincipal.getName();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.debug(&quot;Validate&nbsp;ticket&nbsp;:&nbsp;{}&nbsp;in&nbsp;CAS&nbsp;server&nbsp;:&nbsp;{}&nbsp;to&nbsp;retrieve&nbsp;user&nbsp;:&nbsp;{}&quot;,&nbsp;new&nbsp;Object[]{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ticket,&nbsp;getCasServerUrlPrefix(),&nbsp;userId
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;String,&nbsp;Object&gt;&nbsp;attributes&nbsp;=&nbsp;casPrincipal.getAttributes();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;refresh&nbsp;authentication&nbsp;token&nbsp;(user&nbsp;id&nbsp;+&nbsp;remember&nbsp;me)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;casToken.setUserId(userId);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;rememberMeAttributeName&nbsp;=&nbsp;getRememberMeAttributeName();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;rememberMeStringValue&nbsp;=&nbsp;(String)attributes.get(rememberMeAttributeName);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;isRemembered&nbsp;=&nbsp;rememberMeStringValue&nbsp;!=&nbsp;null&nbsp;&amp;&amp;&nbsp;Boolean.parseBoolean(rememberMeStringValue);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(isRemembered)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;casToken.setRememberMe(true);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;create&nbsp;simple&nbsp;authentication&nbsp;info
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Object&gt;&nbsp;principals&nbsp;=&nbsp;CollectionUtils.asList(userId,&nbsp;attributes);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PrincipalCollection&nbsp;principalCollection&nbsp;=&nbsp;new&nbsp;SimplePrincipalCollection(principals,&nbsp;getName());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;SimpleAuthenticationInfo(principalCollection,&nbsp;ticket);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(TicketValidationException&nbsp;e)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;CasAuthenticationException(&quot;Unable&nbsp;to&nbsp;validate&nbsp;ticket&nbsp;[&quot;&nbsp;+&nbsp;ticket&nbsp;+&nbsp;&quot;]&quot;,&nbsp;e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Retrieves&nbsp;the&nbsp;AuthorizationInfo&nbsp;for&nbsp;the&nbsp;given&nbsp;principals&nbsp;(the&nbsp;CAS&nbsp;previously&nbsp;authenticated&nbsp;user&nbsp;:&nbsp;id&nbsp;+&nbsp;attributes).
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;principals&nbsp;the&nbsp;primary&nbsp;identifying&nbsp;principals&nbsp;of&nbsp;the&nbsp;AuthorizationInfo&nbsp;that&nbsp;should&nbsp;be&nbsp;retrieved.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return&nbsp;the&nbsp;AuthorizationInfo&nbsp;associated&nbsp;with&nbsp;this&nbsp;principals.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;@SuppressWarnings(&quot;unchecked&quot;)
&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;AuthorizationInfo&nbsp;doGetAuthorizationInfo(PrincipalCollection&nbsp;principals)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;retrieve&nbsp;user&nbsp;information
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SimplePrincipalCollection&nbsp;principalCollection&nbsp;=&nbsp;(SimplePrincipalCollection)&nbsp;principals;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Object&gt;&nbsp;listPrincipals&nbsp;=&nbsp;principalCollection.asList();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;String,&nbsp;String&gt;&nbsp;attributes&nbsp;=&nbsp;(Map&lt;String,&nbsp;String&gt;)&nbsp;listPrincipals.get(1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;create&nbsp;simple&nbsp;authorization&nbsp;info
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SimpleAuthorizationInfo&nbsp;simpleAuthorizationInfo&nbsp;=&nbsp;new&nbsp;SimpleAuthorizationInfo();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;add&nbsp;default&nbsp;roles
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addRoles(simpleAuthorizationInfo,&nbsp;split(defaultRoles));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;add&nbsp;default&nbsp;permissions
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addPermissions(simpleAuthorizationInfo,&nbsp;split(defaultPermissions));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;get&nbsp;roles&nbsp;from&nbsp;attributes
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;String&gt;&nbsp;attributeNames&nbsp;=&nbsp;split(roleAttributeNames);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(String&nbsp;attributeName&nbsp;:&nbsp;attributeNames)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;value&nbsp;=&nbsp;attributes.get(attributeName);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addRoles(simpleAuthorizationInfo,&nbsp;split(value));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;get&nbsp;permissions&nbsp;from&nbsp;attributes
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;attributeNames&nbsp;=&nbsp;split(permissionAttributeNames);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(String&nbsp;attributeName&nbsp;:&nbsp;attributeNames)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;value&nbsp;=&nbsp;attributes.get(attributeName);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addPermissions(simpleAuthorizationInfo,&nbsp;split(value));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;simpleAuthorizationInfo;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Split&nbsp;a&nbsp;string&nbsp;into&nbsp;a&nbsp;list&nbsp;of&nbsp;not&nbsp;empty&nbsp;and&nbsp;trimmed&nbsp;strings,&nbsp;delimiter&nbsp;is&nbsp;a&nbsp;comma.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;s&nbsp;the&nbsp;input&nbsp;string
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return&nbsp;the&nbsp;list&nbsp;of&nbsp;not&nbsp;empty&nbsp;and&nbsp;trimmed&nbsp;strings
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;List&lt;String&gt;&nbsp;split(String&nbsp;s)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;String&gt;&nbsp;list&nbsp;=&nbsp;new&nbsp;ArrayList&lt;String&gt;();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String[]&nbsp;elements&nbsp;=&nbsp;StringUtils.split(s,&nbsp;&#39;,&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(elements&nbsp;!=&nbsp;null&nbsp;&amp;&amp;&nbsp;elements.length&nbsp;&gt;&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(String&nbsp;element&nbsp;:&nbsp;elements)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(StringUtils.hasText(element))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list.add(element.trim());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;list;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Add&nbsp;roles&nbsp;to&nbsp;the&nbsp;simple&nbsp;authorization&nbsp;info.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;simpleAuthorizationInfo
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;roles&nbsp;the&nbsp;list&nbsp;of&nbsp;roles&nbsp;to&nbsp;add
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;void&nbsp;addRoles(SimpleAuthorizationInfo&nbsp;simpleAuthorizationInfo,&nbsp;List&lt;String&gt;&nbsp;roles)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(String&nbsp;role&nbsp;:&nbsp;roles)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;simpleAuthorizationInfo.addRole(role);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Add&nbsp;permissions&nbsp;to&nbsp;the&nbsp;simple&nbsp;authorization&nbsp;info.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;simpleAuthorizationInfo
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;permissions&nbsp;the&nbsp;list&nbsp;of&nbsp;permissions&nbsp;to&nbsp;add
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;void&nbsp;addPermissions(SimpleAuthorizationInfo&nbsp;simpleAuthorizationInfo,&nbsp;List&lt;String&gt;&nbsp;permissions)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(String&nbsp;permission&nbsp;:&nbsp;permissions)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;simpleAuthorizationInfo.addStringPermission(permission);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getCasServerUrlPrefix()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;casServerUrlPrefix;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setCasServerUrlPrefix(String&nbsp;casServerUrlPrefix)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.casServerUrlPrefix&nbsp;=&nbsp;casServerUrlPrefix;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getCasService()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;casService;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setCasService(String&nbsp;casService)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.casService&nbsp;=&nbsp;casService;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getValidationProtocol()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;validationProtocol;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setValidationProtocol(String&nbsp;validationProtocol)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.validationProtocol&nbsp;=&nbsp;validationProtocol;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getRememberMeAttributeName()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;rememberMeAttributeName;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setRememberMeAttributeName(String&nbsp;rememberMeAttributeName)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.rememberMeAttributeName&nbsp;=&nbsp;rememberMeAttributeName;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getDefaultRoles()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;defaultRoles;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setDefaultRoles(String&nbsp;defaultRoles)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.defaultRoles&nbsp;=&nbsp;defaultRoles;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getDefaultPermissions()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;defaultPermissions;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setDefaultPermissions(String&nbsp;defaultPermissions)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.defaultPermissions&nbsp;=&nbsp;defaultPermissions;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getRoleAttributeNames()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;roleAttributeNames;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setRoleAttributeNames(String&nbsp;roleAttributeNames)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.roleAttributeNames&nbsp;=&nbsp;roleAttributeNames;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getPermissionAttributeNames()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;permissionAttributeNames;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setPermissionAttributeNames(String&nbsp;permissionAttributeNames)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.permissionAttributeNames&nbsp;=&nbsp;permissionAttributeNames;
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre>

<h2>CasRealm编写</h2>

<p>CasRealm和我们经常使用的UserRealm或JdbcRealm差异并不是很大,只是里边增加了casToken的验证,直接拿过来用再增加自己的逻辑就可以了,继承CasRealm类重载他的两个方法，具体代码如下：</p>

<pre>
package&nbsp;com.spring.mybatis.realm;
import&nbsp;java.util.ArrayList;
import&nbsp;java.util.List;
import&nbsp;java.util.Map;
import&nbsp;org.apache.shiro.authc.AuthenticationException;
import&nbsp;org.apache.shiro.authc.AuthenticationInfo;
import&nbsp;org.apache.shiro.authc.AuthenticationToken;
import&nbsp;org.apache.shiro.authc.SimpleAuthenticationInfo;
import&nbsp;org.apache.shiro.authz.AuthorizationInfo;
import&nbsp;org.apache.shiro.authz.SimpleAuthorizationInfo;
import&nbsp;org.apache.shiro.cas.CasAuthenticationException;
import&nbsp;org.apache.shiro.cas.CasRealm;
import&nbsp;org.apache.shiro.cas.CasToken;
import&nbsp;org.apache.shiro.subject.PrincipalCollection;
import&nbsp;org.apache.shiro.subject.SimplePrincipalCollection;
import&nbsp;org.apache.shiro.util.CollectionUtils;
import&nbsp;org.apache.shiro.util.StringUtils;
import&nbsp;org.jasig.cas.client.authentication.AttributePrincipal;
import&nbsp;org.jasig.cas.client.validation.Assertion;
import&nbsp;org.jasig.cas.client.validation.TicketValidationException;
import&nbsp;org.jasig.cas.client.validation.TicketValidator;
import&nbsp;org.slf4j.Logger;
import&nbsp;org.slf4j.LoggerFactory;
/**
&nbsp;*&nbsp;授权信息
&nbsp;*&nbsp;来自&nbsp;素文宅
&nbsp;*&nbsp;@author&nbsp;www.yoodb.com
&nbsp;*/
public&nbsp;class&nbsp;UserRealm&nbsp;extends&nbsp;CasRealm&nbsp;{
private&nbsp;final&nbsp;Logger&nbsp;log&nbsp;=&nbsp;LoggerFactory.getLogger(getClass());
@Override
protected&nbsp;AuthenticationInfo&nbsp;doGetAuthenticationInfo(
AuthenticationToken&nbsp;token)&nbsp;throws&nbsp;AuthenticationException&nbsp;{
CasToken&nbsp;casToken&nbsp;=&nbsp;(CasToken)&nbsp;token;
if&nbsp;(token&nbsp;==&nbsp;null)&nbsp;{
return&nbsp;null;
}
String&nbsp;ticket&nbsp;=&nbsp;(String)&nbsp;casToken.getCredentials();
if&nbsp;(!StringUtils.hasText(ticket))&nbsp;{
return&nbsp;null;
}
TicketValidator&nbsp;ticketValidator&nbsp;=&nbsp;ensureTicketValidator();
try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;Assertion&nbsp;casAssertion&nbsp;=&nbsp;ticketValidator.validate(ticket,getCasService());
&nbsp;&nbsp;&nbsp;&nbsp;AttributePrincipal&nbsp;casPrincipal&nbsp;=&nbsp;casAssertion.getPrincipal();
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;userId&nbsp;=&nbsp;casPrincipal.getName();
&nbsp;&nbsp;&nbsp;&nbsp;log.debug(&quot;Validate&nbsp;ticket&nbsp;:&nbsp;{}&nbsp;in&nbsp;CAS&nbsp;server&nbsp;:&nbsp;{}&nbsp;to&nbsp;retrieve&nbsp;user&nbsp;:&nbsp;{}&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;Object[]&nbsp;{&nbsp;ticket,&nbsp;getCasServerUrlPrefix(),&nbsp;userId&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;String,&nbsp;Object&gt;&nbsp;attributes&nbsp;=&nbsp;casPrincipal.getAttributes();
&nbsp;&nbsp;&nbsp;&nbsp;casToken.setUserId(userId);
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;rememberMeAttributeName&nbsp;=&nbsp;getRememberMeAttributeName();
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;rememberMeStringValue&nbsp;=&nbsp;(String)&nbsp;attributes.get(rememberMeAttributeName);
&nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;isRemembered&nbsp;=&nbsp;rememberMeStringValue&nbsp;!=&nbsp;null
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;Boolean.parseBoolean(rememberMeStringValue);
if&nbsp;(isRemembered)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;casToken.setRememberMe(true);
}
List&lt;Object&gt;&nbsp;principals&nbsp;=&nbsp;CollectionUtils.asList(userId,&nbsp;attributes);
PrincipalCollection&nbsp;principalCollection&nbsp;=&nbsp;new&nbsp;SimplePrincipalCollection(principals,&nbsp;getName());
//可以获取到Cas登录账号信息，此步将对应权限体系信息放到缓存
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;SimpleAuthenticationInfo(principalCollection,&nbsp;ticket);
}&nbsp;catch&nbsp;(TicketValidationException&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;CasAuthenticationException(&quot;Unable&nbsp;to&nbsp;validate&nbsp;ticket&nbsp;[&quot;&nbsp;+&nbsp;ticket&nbsp;+&nbsp;&quot;]&quot;,&nbsp;e);
}
}
@Override
@SuppressWarnings(&quot;unchecked&quot;)
protected&nbsp;AuthorizationInfo&nbsp;doGetAuthorizationInfo(
PrincipalCollection&nbsp;principals)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;SimplePrincipalCollection&nbsp;principalCollection&nbsp;=&nbsp;(SimplePrincipalCollection)&nbsp;principals;
&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Object&gt;&nbsp;listPrincipals&nbsp;=&nbsp;principalCollection.asList();
&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;String,&nbsp;String&gt;&nbsp;attributes&nbsp;=&nbsp;(Map&lt;String,&nbsp;String&gt;)&nbsp;listPrincipals
&nbsp;&nbsp;&nbsp;&nbsp;.get(1);
&nbsp;&nbsp;&nbsp;&nbsp;SimpleAuthorizationInfo&nbsp;simpleAuthorizationInfo&nbsp;=&nbsp;new&nbsp;SimpleAuthorizationInfo();
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;获取缓存信息放到认证实体中
&nbsp;&nbsp;&nbsp;&nbsp;addRoles(simpleAuthorizationInfo,&nbsp;split(getDefaultRoles()));
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;simpleAuthorizationInfo;
}
private&nbsp;List&lt;String&gt;&nbsp;split(String&nbsp;s)&nbsp;{
List&lt;String&gt;&nbsp;list&nbsp;=&nbsp;new&nbsp;ArrayList&lt;String&gt;();
String[]&nbsp;elements&nbsp;=&nbsp;StringUtils.split(s,&nbsp;&#39;,&#39;);
if&nbsp;(elements&nbsp;!=&nbsp;null&nbsp;&amp;&amp;&nbsp;elements.length&nbsp;&gt;&nbsp;0)&nbsp;{
for&nbsp;(String&nbsp;element&nbsp;:&nbsp;elements)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(StringUtils.hasText(element))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list.add(element.trim());
&nbsp;&nbsp;&nbsp;&nbsp;}
}
}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;list;
}
private&nbsp;void&nbsp;addRoles(SimpleAuthorizationInfo&nbsp;simpleAuthorizationInfo,List&lt;String&gt;&nbsp;roles)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(String&nbsp;role&nbsp;:&nbsp;roles)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;simpleAuthorizationInfo.addRole(role);
&nbsp;&nbsp;&nbsp;&nbsp;}
}
}</pre>

<h2>获取CAS返回的用户信息</h2>

<p>获取CAS返回的用户信息，具体代码如下：</p>

<pre>
Subject&nbsp;subject&nbsp;=&nbsp;SecurityUtils.getSubject();
List&nbsp;list&nbsp;=&nbsp;subject.getPrincipals().asList();
String&nbsp;name&nbsp;=&nbsp;(String)&nbsp;list.get(0);
Map&lt;String,&nbsp;Object&gt;&nbsp;info&nbsp;=&nbsp;(Map&lt;String,&nbsp;Object&gt;)list.get(1);</pre>

<p>&nbsp;</p>

<p>通过CAS3.5.2 Server登录后返回更多用户信息，参考资料：http://blog.yoodb.com/yoodb/article/detail/1223，List集合其中0元素是当前登录账号,1元素是一个map集合,存放的是cas Server返回的用户信息。</p>
