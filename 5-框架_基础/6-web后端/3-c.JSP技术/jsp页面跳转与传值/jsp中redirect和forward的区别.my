<h1>jsp页面的结果返回</h1>

<p>客户端访问jsp页面index.jsp，然后通过三种方式获取处理结果。</p>

<p>例如:client 通过/index.jsp?name=gauss&amp;pwd=123访问index.jsp,</p>

<p>&nbsp;&nbsp; &nbsp;方式一:直接返回处理生成的html页面; 对应于serverlet中的response.getWriter()方法返回的结果。</p>

<p>&nbsp;&nbsp; &nbsp;方式二:处理后用froward转到另一个jsp页面，有另一个页面接着处理。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;jsp:forward page=&quot;login.jsp&quot;/&gt;,则在login.jsp中可以通过request.getParameter()得到name和pwd，</p>

<p>&nbsp;&nbsp; &nbsp;方式三:通过重定向回到客户端，客户端再重发请求。然后在接着处理。&nbsp;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;%response.sendRedirect(&quot;login.jsp&quot;);%&gt;</p>

<h2>jsp中redirect和forward的区别</h2>

<h3>1.从地址栏显示来说</h3>

<p>&nbsp; &nbsp; &nbsp; &nbsp; forward是服务器请求资源,服务器直接访问目标地址的URL,把那个URL的响应内容读取过来,然后把这些内容<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;再发给浏览器.浏览器根本不知道服务器发送的内容从哪里来的,所以它的地址栏还是原来的地址.<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;redirect是服务端根据逻辑,发送一个状态码,告诉浏览器重新去请求那个地址.所以地址栏显示的是新的URL.所以redirect等于客户端向服务器端发出两次request，同时也接受两次response。</p>

<h3>2.从数据共享来说</h3>

<p>&nbsp; &nbsp; &nbsp; &nbsp; forward:转发页面和转发到的页面可以共享request里面的数据.<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;redirect:不能共享数据.<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;redirect不仅可以重定向到当前应用程序的其他资源,还可以重定向到同一个站点上的其他应用程序中的资源,</p>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;甚至是使用绝对URL重定向到其他站点的资源.<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;forward,方法只能在同一个Web应用程序内的资源之间转发请求.<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;forward 是服务器内部的一种操作.<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;redirect 是服务器通知客户端,让客户端重新发起请求.<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;所以,你可以说 redirect 是一种间接的请求, 但是你不能说&quot;一个请求是属于forward还是redirect &quot;</p>

<h3><br />
3.从运用地方来说</h3>

<p>&nbsp; &nbsp; &nbsp; &nbsp; forward:一般用于用户登陆的时候,根据角色转发到相应的模块.<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;redirect:一般用于用户注销登陆时返回主页面和跳转到其它的网站等.</p>

<h3>4.从效率来说</h3>

<p>&nbsp; &nbsp; &nbsp; &nbsp; forward:高.<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;redirect:低.</p>

<p>5.jsp 语法</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &lt;jsp:forward page={&quot;relativeurl&quot; | &quot;&lt;%= expression %&gt;&quot;} /&gt;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;或者这样写：<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;jsp:forward page={&quot;relativeurl&quot; | &quot;&lt;%= expression %&gt;&quot;} &gt;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;jsp:param name=&quot;parametername&quot; value=&quot;{parametervalue | &lt;%= expression %&gt;}&quot; /&gt;+<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;/jsp:forward&gt;&nbsp;</p>

<h3>6.例子</h3>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;jsp:forward page=&quot;/servlet/login&quot; /&gt;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;jsp:forward page=&quot;/servlet/login&quot;&gt;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;jsp:param name=&quot;username&quot; value=&quot;jsmith&quot; /&gt;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;/jsp:forward&gt;</p>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;描述</p>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;jsp:forward&gt;标签从一个jsp文件向另一个文件传递一个包含用户请求的request对象.&lt;jsp:forward&gt;标签以下的代码，将不能执行.</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;你能够向目标文件传送参数和值，在这个例子中我们传递的参数名为username,值为scott,如果你使用了&lt;jsp:param&gt;标签的话，目标文件必须是一个动态的文件，能够处理参数.</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;如果你使用了非缓冲输出的话，那么使用&lt;jsp:forward&gt;时就要小心。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;如果在你使用&lt;jsp:forward&gt;之前，jsp文件已经有了数据，那么文件执行就会出错.</p>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;属性</p>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;page=&quot;{relativeurl | &lt;%= expression %&gt;}&quot;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;这里是一个表达式或是一个字符串用于说明你将要定向的文件或url.这个文件可以是jsp,程序段，或者其它能够处理request对象的文件(如asp,cgi,php).</p>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;jsp:param name=&quot;parametername&quot; value=&quot;{parametervalue | &lt;%= expression %&gt;}&quot; /&gt;+<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;向一个动态文件发送一个或多个参数，这个文件一定是动态文件.</p>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;如果你想传递多个参数，你可以在一个jsp文件中使用多个&lt;jsp:param&gt;。name指定参数名，value指定参数值.</p>

<h4>forward例子：</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &lt;%@ page contentType=&quot;text/html;charset=gb2312&quot; %&gt;</p>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;html&gt;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&lt;head&gt;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;title&gt;test&lt;/title&gt;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&lt;/head&gt;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&lt;body&gt;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;jsp:forward page=&quot;forwardTo.jsp&quot;&gt;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;jsp:param name=&quot;userName&quot; value=&quot;riso&quot;/&gt;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;/jsp:forward&gt;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&lt;/body&gt;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;/html&gt;</p>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;forwardTo.jsp<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;%@ page contentType=&quot;text/html;charset=gb2312&quot; %&gt;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;!--forwardTo.jsp--&gt;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;%<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;String useName=request.getParameter(&quot;userName&quot;);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;String outStr= &quot;谢谢光临！&quot;;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;outStr+=useName;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;out.println(outStr);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;%&gt;</p>

<h4>redirect的例子：</h4>

<p>而&lt;%response.sendRedirect(&quot;login.jsp&quot;);%&gt;</p>

<h2>补充 serverlet 相关以及其他几种跳转方式:</h2>

<h3>1.RequestDispatcher.forward()</h3>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 是在服务器端起作用,当使用forward()时,Servlet engine传递HTTP请求从当前的Servlet or JSP到另外一个Servlet,JSP 或普通HTML文件,也即你的form提交至a.jsp,在a.jsp用到了forward()重定向至b.jsp,此时form提交的所有信息在b.jsp都可以获得,参数自动传递.</p>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;但forward()无法重定向至有frame的jsp文件,可以重定向至有frame的html文件,同时forward()无法在后面带参数传递,比如servlet?name=frank,这样不行,可以程序内通过response.setAttribute(&quot;name&quot;,name)来传至下一个页面.</p>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;重定向后浏览器地址栏URL不变.<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;例:在servlet中进行重定向<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;public void doPost(HttpServletRequest request,HttpServletResponse response)<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;throws ServletException,IOException<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;{<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;　response.setContentType(&quot;text/html; charset=gb2312&quot;);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;　ServletContext sc = getServletContext();<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;　RequestDispatcher rd = null;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;　rd = sc.getRequestDispatcher(&quot;/index.jsp&quot;); //定向的页面<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;　rd.forward(request, response);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;通常在servlet中使用，不在jsp中使用。</p>

<h3>2.response.sendRedirect()</h3>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 是在用户的浏览器端工作,sendRedirect()可以带参数传递,比如servlet?name=frank传至下个页面,同时它可以重定向至不同的主机上,sendRedirect()可以重定向有frame.的jsp文件.<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;重定向后在浏览器地址栏上会出现重定向页面的URL<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;例:在servlet中重定向<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;public void doPost(HttpServletRequest request,HttpServletResponse response)<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;throws ServletException,IOException<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;{<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;　response.setContentType(&quot;text/html; charset=gb2312&quot;);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;　response.sendRedirect(&quot;/index.jsp&quot;);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;　　由于response是jsp页面中的隐含对象，故在jsp页面中可以用response.sendRedirect()直接实现重定位。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;注意：<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;(1).使用response.sendRedirect时，前面不能有HTML输出<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;这并不是绝对的，不能有HTML输出其实是指不能有HTML被送到了浏览器。事实上现在的server都有cache机制，一般在8K（我是说JSP　SERVER），<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;这就意味着，除非你关闭了cache，或者你使用了out.flush()强制刷新，那么在使用sendRedirect之前，有少量的HTML输出也是允许的。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;(2).response.sendRedirect之后，应该紧跟一句return;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;我们已经知道response.sendRedirect是通过浏览器来做转向的，所以只有在页面处理完成后，才会有实际的动作。既然你已经要做转向了，那么后的输出还有什么意义呢？而且有可能会因为后面的输出导致转向失败。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;比较：<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;共同点：<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;都实现了根据自己的条件实现的页面得跳转。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;(1).Request Dispatcher.forward()是容器中控制权的转向，在客户端浏览器地址栏中不会显示出转向后的地址；<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;(2).response.sendRedirect()则是完全的跳转，浏览器将会得到跳转的地址，并重新发送请求链接。这样，从浏览器的地址栏中可以看到跳转后的链接地址。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;前者更加高效，在前者可以满足需要时，尽量使用RequestDispatcher.forward()方法.<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;注：在有些情况下，比如，需要跳转到一个其它服务器上的资源，则必须使用HttpServletResponse.sendRequest()方法。</p>

<h3>3.jsp:forward page=&quot;&quot;</h3>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 它的底层部分是由RequestDispatcher来实现的，因此它带有RequestDispatcher.forward()方法的印记。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;如果在&lt;jsp:forward&gt;之前有很多输出,前面的输出已使缓冲区满,将自动输出到客户端,那么该语句将不起作用,这一点应该特别注意。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;另外要注意：它不能改变浏览器地址，刷新的话会导致重复提交</p>

<h3>4.修改HTTP header的Location属性来重定向</h3>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 通过设置直接修改地址栏来实现页面的重定向。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;jsp文件代码如下：<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;%<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;response.setStatus(HttpServletResponse.SC_MOVED_PERMANENTLY);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;String newLocn = &quot;/newpath/jsa.jsp&quot;;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;response.setHeader(&quot;Location&quot;,newLocn);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;%&gt;</p>

<h3>5.JSP中实现在某页面停留若干秒后,自动重定向到另一页面</h3>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 在html文件中，下面的代码：<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;meta http-equiv=&quot;refresh&quot; content=&quot;300; url=target.jsp&quot;&gt;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;它的含义：在5分钟之后正在浏览的页面将会自动变为target.html这一页。代码中300为刷新的延迟时间，以秒为单位。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;targer class=&quot;&quot;&gt;&lt;/targer&gt;html为你想转向的目标页,若为本页则为自动刷新本页。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;由上可知，可以通过setHeader来实现某页面停留若干秒后,自动重定向到另一页面。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;关键代码：<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;String content=stayTime+&quot;;URL=&quot;+URL;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;response.setHeader(&quot;REFRESH&quot;,content);</p>

<h2><br />
总结</h2>

<p>----------------------------------------------------------------------------------------------------<br />
|类别&nbsp;&nbsp; &nbsp; |概念 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|共享数据&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;|应用 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|&nbsp;<br />
|--------|----------------------------|---------------------------|--------------------------------|<br />
|Redirect|URL重新定向：可以是任意的URL|不能共享request里面的数据 &nbsp;|一般用于用户注销登录时返回主页面|<br />
| &nbsp; &nbsp; &nbsp; &nbsp;| &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;|和跳转到其它的网站等等 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />
|--------|----------------------------|---------------------------|--------------------------------|<br />
|Forward |页面的转发：只能是同一个Web |转发页面和转发到的页面可以 |一般用于用户登录的时候根据角色 &nbsp;|&nbsp;<br />
| &nbsp; &nbsp; &nbsp; &nbsp;|应用程序的其他Web组件 &nbsp; &nbsp; &nbsp; |共享request里面的数据&nbsp;&nbsp; &nbsp; &nbsp;|转发到相应的模块等等 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|&nbsp;<br />
----------------------------------------------------------------------------------------------------</p>

<p><br />
&nbsp;</p>
