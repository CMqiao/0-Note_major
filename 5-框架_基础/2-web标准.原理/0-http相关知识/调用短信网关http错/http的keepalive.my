<h1>什么是HTTP Keep-Alive呢？</h1>

<p>在通过调试工具查看网络请求的时候，通常在response header能看到类似下面这种：Keep-Alive:&nbsp;timeout=10, max=94 。那么Keep-Alive到底是什么呢？</p>

<h2>HTTP Keep-Alive</h2>

<p>在http早期，每个http请求都要求打开一个tpc socket连接，并且使用一次之后就断开这个tcp连接。</p>

<p>使用keep-alive可以改善这种状态，即在一次TCP连接中可以持续发送多份数据而不会断开连接。通过使用keep-alive机制，可以减少tcp连接建立次数，也意味着可以减少TIME_WAIT状态连接，以此提高性能和提高httpd服务器的吞吐率(更少的tcp连接意味着更少的系统内核调用,socket的accept()和close()调用)。</p>

<p>但是，<a href="http://www.nowamagic.net/academy/tag/keep-alive" target="_blank">keep-alive</a>并不是免费的午餐,长时间的tcp连接容易导致系统资源无效占用。配置不当的keep-alive，有时比重复利用连接带来的损失还更大。所以，正确地设置keep-alive timeout时间非常重要。</p>

<h2>keep alive timeout</h2>

<p>Httpd守护进程，一般都提供了keep-alive timeout时间设置参数。比如nginx的keepalive_timeout，和Apache的KeepAliveTimeout。这个keepalive_timout时间值意味着：一个http产生的tcp连接在传送完最后一个响应后，还需要hold住keepalive_timeout秒后，才开始关闭这个连接。</p>

<p>当httpd守护进程发送完一个响应后，理应马上主动关闭相应的tcp连接，设置 keepalive_timeout后，httpd守护进程会想说：&rdquo;再等等吧，看看浏览器还有没有请求过来&rdquo;，这一等，便是keepalive_timeout时间。如果守护进程在这个等待的时间里，一直没有收到浏览发过来http请求，则关闭这个http连接。</p>

<p>下面写一个脚本，方便测试：</p>

<pre>
1    sleep(60);  //为了便于分析测试，会根据测试进行调整
2    echo &quot;www.example.com&quot;;</pre>

<h3>1. 当keepalive_timeout时间为0时</h3>

<p>即不启用Keep-Alive时，一个tcp连接的生命周期：</p>

<pre>
00    #tcpdump -n host 218.1.57.236 and port 80

01    20:36:50.792731 IP 218.1.57.236.43052 &gt; 222.73.211.215.http: S 1520902589:1520902589(0) win 65535
02    20:36:50.792798 IP 222.73.211.215.http &gt; 218.1.57.236.43052: S 290378256:290378256(0) ack 1520902590 win 5840
03    20:36:50.801629 IP 218.1.57.236.43052 &gt; 222.73.211.215.http: . ack 1 win 32768

04    20:36:50.801838 IP 218.1.57.236.43052 &gt; 222.73.211.215.http: P 1:797(796) ack 1 win 32768
05    20:36:50.801843 IP 222.73.211.215.http &gt; 218.1.57.236.43052: . ack 797 win 59

06    20:37:50.803230 IP 222.73.211.215.http &gt; 218.1.57.236.43052: P 1:287(286) ack 797 win 59
07    20:37:50.803289 IP 222.73.211.215.http &gt; 218.1.57.236.43052: F 287:287(0) ack 797 win 59

08    20:37:50.893396 IP 218.1.57.236.43052 &gt; 222.73.211.215.http: . ack 288 win 32625
09    20:37:50.894249 IP 218.1.57.236.43052 &gt; 222.73.211.215.http: F 797:797(0) ack 288 win 32625
10    20:37:50.894252 IP 222.73.211.215.http &gt; 218.1.57.236.43052: . ack 798 win 59
</pre>

<ul>
	<li>第1~3行建立tcp三次握手，建立连接。用时8898&mu;s</li>
	<li>第4~5行通过建立的连接发送第一个http请求，服务端确认收到请求。用时5&mu;s</li>
	<li>第5~6行，可以知道脚本执行用时60s1387&mu;s,与php脚本相符。</li>
	<li>第6、8行服务端发送http响应。发送响应用时90166&mu;s。</li>
	<li>第7行，表明由服务端守护进程主动关闭连接。结合第6、8行，说明http响应一旦发送完毕，服务端马上关闭这个tcp连接</li>
	<li>第7、9、10说明tcp连接顺序关闭,用时90963&mu;s。需要注意,这里socket资源并没有立即释放，需要等待2MSL时间（60s）后才被真正释放。</li>
</ul>

<p>由此可见，在没有设置 keepalive_timeout 情况下，一个socket资源从建立到真正释放需要经过的时间是:建立tcp连接 + 传送http请求 + php脚本执行 + 传送http响应 + 关闭tcp连接 + 2MSL 。(注:这里的时间只能做参考，具体的时间主要由网络带宽，和响应大小而定)</p>

<h3>2. 当keepalive_timeout时间大于0时</h3>

<p>即启用Keep-Alive时，一个tcp连接的生命周期。为了便于分析，我们将keepalive_timeout设置为300s</p>

<pre>
01    #tcpdump -n host 218.1.57.236 and port 80
02    21:38:05.471129 IP 218.1.57.236.54049 &gt; 222.73.211.215.http: S 1669618600:1669618600(0) win 65535
03    21:38:05.471140 IP 222.73.211.215.http &gt; 218.1.57.236.54049: S 4166993862:4166993862(0) ack 1669618601 win 5840
04    21:38:05.481731 IP 218.1.57.236.54049 &gt; 222.73.211.215.http: . ack 1 win 32768
05    21:38:05.481976 IP 218.1.57.236.54049 &gt; 222.73.211.215.http: P 1:797(796) ack 1 win 32768
06    21:38:05.481985 IP 222.73.211.215.http &gt; 218.1.57.236.54049: . ack 797 win 59
08    21:38:07.483626 IP 222.73.211.215.http &gt; 218.1.57.236.54049: P 1:326(325) ack 797 win 59
09    21:38:07.747614 IP 218.1.57.236.54049 &gt; 222.73.211.215.http: . ack 326 win 32605
10    21:43:07.448454 IP 222.73.211.215.http &gt; 218.1.57.236.54049: F 326:326(0) ack 797 win 59
11    21:43:07.560316 IP 218.1.57.236.54049 &gt; 222.73.211.215.http: . ack 327 win 32605
12    21:43:11.759102 IP 218.1.57.236.54049 &gt; 222.73.211.215.http: F 797:797(0) ack 327 win 32605
13    21:43:11.759111 IP 222.73.211.215.http &gt; 218.1.57.236.54049: . ack 798 win 59
</pre>

<ul>
	<li>我们先看一下，第6~8行，跟上次示例不一样的是，服务端httpd守护进程发完响应后，没有立即主动关闭tcp连接。</li>
	<li>第8行，结合第6行，我们可以看到，5分钟(300s)后，服务端主动关闭这个tcp连接。这个时间，正是我们设置的keepalive_timeout的时间。</li>
	<li>由此可见，设置了keepalive_timout时间情况下，一个socket建立到释放需要的时间是多了keepalive_timeout时间。</li>
</ul>

<h3>3. 当keepalive_timeout时间大于0，并且在同一个tcp连接发送多个http响应。</h3>

<p>这里为了便于分析，我们将keepalive_timeout设置为180s</p>

<p>通过这个测试，我们想弄清楚,keepalive_timeout是从第一个响应结束开启计时，还是最后一个响应结束开启计时。测试结果证实是后者，这里，我们每隔120s发一次请求，通过一个tcp连接发送了3个请求。</p>

<pre>
01    # tcpdump -n host 218.1.57.236 and port 80
02    22:43:57.102448 IP 218.1.57.236.49955 &gt; 222.73.211.215.http: S 4009392741:4009392741(0) win 65535
03    22:43:57.102527 IP 222.73.211.215.http &gt; 218.1.57.236.49955: S 4036426778:4036426778(0) ack 4009392742 win 5840
04    22:43:57.111337 IP 218.1.57.236.49955 &gt; 222.73.211.215.http: . ack 1 win 32768
05     
06    22:43:57.111522 IP 218.1.57.236.49955 &gt; 222.73.211.215.http: P 1:797(796) ack 1 win 32768
07    22:43:57.111530 IP 222.73.211.215.http &gt; 218.1.57.236.49955: . ack 797 win 59
08    22:43:59.114663 IP 222.73.211.215.http &gt; 218.1.57.236.49955: P 1:326(325) ack 797 win 59
09    22:43:59.350143 IP 218.1.57.236.49955 &gt; 222.73.211.215.http: . ack 326 win 32605
10     
11    22:45:59.226102 IP 218.1.57.236.49955 &gt; 222.73.211.215.http: P 1593:2389(796) ack 650 win 32443
12    22:45:59.226109 IP 222.73.211.215.http &gt; 218.1.57.236.49955: . ack 2389 win 83
13    22:46:01.227187 IP 222.73.211.215.http &gt; 218.1.57.236.49955: P 650:974(324) ack 2389 win 83
14    22:46:01.450364 IP 218.1.57.236.49955 &gt; 222.73.211.215.http: . ack 974 win 32281
15     
16    22:47:57.377707 IP 218.1.57.236.49955 &gt; 222.73.211.215.http: P 3185:3981(796) ack 1298 win 32119
17    22:47:57.377714 IP 222.73.211.215.http &gt; 218.1.57.236.49955: . ack 3981 win 108
18    22:47:59.379496 IP 222.73.211.215.http &gt; 218.1.57.236.49955: P 1298:1622(324) ack 3981 win 108
19    22:47:59.628964 IP 218.1.57.236.49955 &gt; 222.73.211.215.http: . ack 1622 win 32768
20     
21    22:50:59.358537 IP 222.73.211.215.http &gt; 218.1.57.236.49955: F 1622:1622(0) ack 3981 win 108
22    22:50:59.367911 IP 218.1.57.236.49955 &gt; 222.73.211.215.http: . ack 1623 win 32768
23    22:50:59.686527 IP 218.1.57.236.49955 &gt; 222.73.211.215.http: F 3981:3981(0) ack 1623 win 32768
24    22:50:59.686531 IP 222.73.211.215.http &gt; 218.1.57.236.49955: . ack 3982 win 108
</pre>

<ul>
	<li>第一组，三个ip包表示tcp三次握手建立连接，由浏览器建立。</li>
	<li>第二组，发送第一次http请求并且得到响应，服务端守护进程输出响应之后，并没马上主动关闭tcp连接。而是启动keepalive_timout计时。</li>
	<li>第三组，2分钟后，发送第二次http请求并且得到响应，同样服务端守护进程也没有马上主动关闭tcp连接，重新启动keepalive_timout计时。</li>
	<li>第四组，又2分钟后，发送了第三次http请求并且得到响应。服务器守护进程依然没有主动关地闭tcp连接（距第一次http响应有4分钟了,大于keepalive_timeout值），而是重新启动了keepalive_timout计时。</li>
	<li>第五组，跟最后一个响应keepalive_timeout(180s)内，守护进程再没有收到请求。计时结束，服务端守护进程主动关闭连接。4次挥手后，服务端进入TIME_WAIT状态。</li>
</ul>

<p>这说明，当设定了keepalive_timeout，一个socket由建立到释放，需要时间是：tcp建立 + (最后一个响应时间 &ndash; 第一个请求时间) + tcp关闭 + 2MSL。红色加粗表示每一次请求发送时间、每一次请求脚本执行时间、每一次响应发送时间，还有两两请求相隔时间。进一步测试，正在关闭或者TIME_WAIT状态的tcp连接，不能传输http请求和响应。即，当一个连接结束keepalive_timeout计时，服务端守护进程发送第一个FIN标志ip包后，该连接不能再使用了。</p>

<h2>http keep-alive与tcp keep-alive</h2>

<p>http keep-alive与tcp keep-alive，不是同一回事，意图不一样。http keep-alive是为了让tcp活得更久一点，以便在同一个连接上传送多个http，提高socket的效率。而tcp keep-alive是TCP的一种检测TCP<a href="http://www.nowamagic.net/academy/tag/%E8%BF%9E%E6%8E%A5" target="_blank">连接</a>状况的保鲜机制。tcp keep-alive保鲜定时器，支持三个系统内核配置参数：</p>

<pre>
1    echo 1800 &gt; /proc/sys/net/ipv4/tcp_keepalive_time
2    echo 15 &gt; /proc/sys/net/ipv4/tcp_keepalive_intvl
3    echo 5 &gt; /proc/sys/net/ipv4/tcp_keepalive_probes
</pre>

<p>keepalive是TCP保鲜定时器，当网络两端建立了TCP连接之后，闲置idle（双方没有任何数据流发送往来）了tcp_keepalive_time后，服务器内核就会尝试向客户端发送侦测包，来判断TCP连接状况(有可能客户端崩溃、强制关闭了应用、主机不可达等等)。如果没有收到对方的回答(ack包)，则会在 tcp_keepalive_intvl后再次尝试发送侦测包，直到收到对对方的ack,如果一直没有收到对方的ack,一共会尝试 tcp_keepalive_probes次，每次的间隔时间在这里分别是15s, 30s, 45s, 60s, 75s。如果尝试tcp_keepalive_probes,依然没有收到对方的ack包，则会丢弃该TCP连接。TCP连接默认闲置时间是2小时，一般设置为30分钟足够了。</p>

<p>也就是说，仅当nginx的keepalive_timeout值设置高于tcp_keepalive_time，并且距此tcp连接传输的最后一个http响应，经过了tcp_keepalive_time时间之后，操作系统才会发送侦测包来决定是否要丢弃这个TCP连接。一般不会出现这种情况，除非你需要这样做。</p>

<h2>keep-alive与TIME_WAIT</h2>

<p>使用http keep-alvie，可以减少服务端TIME_WAIT数量(因为由服务端httpd守护进程主动关闭连接)。道理很简单，相较而言，启用keep-alive，建立的tcp连接更少了，自然要被关闭的tcp连接也相应更少了。</p>

<h2>最后</h2>

<p>我想用一张示意图片来说明使用启用keepalive的不同。另外，http keepalive是客户端浏览器与服务端httpd守护进程协作的结果，所以，我们另外安排篇幅介绍不同浏览器的各种情况对keepalive的利用。</p>

<p><img alt="" src="http://www.nowamagic.net/librarys/images/201312/2013_12_20_02.png" style="width:520px" /></p>

<p>&nbsp;</p>

<p>Keep-Alive模式，客户端如何判断请求所得到的响应数据已经接收完成（或者说如何知道服务器已经发生完了数据）？</p>

<h3>1.使用消息首部字段Conent-Length</h3>

<p>故名思意，Conent-Length表示实体内容长度，客户端（服务器）可以根据这个值来判断数据是否接收完成。但是如果消息中没有Conent-Length，那该如何来判断呢？又在什么情况下会没有Conent-Length呢？请继续往下看&hellip;&hellip;</p>

<h3>2.使用消息首部字段Transfer-Encoding</h3>

<p>当客户端向服务器请求一个静态页面或者一张图片时，服务器可以很清楚的知道内容大小，然后通过Content-length消息首部字段告诉客户端需要接收多少数据。但是如果是动态页面等时，服务器是不可能预先知道内容大小，这时就可以使用Transfer-Encoding：chunk模式来传输数据了。即如果要一边产生数据，一边发给客户端，服务器就需要使用&quot;Transfer-Encoding: chunked&quot;这样的方式来代替Content-Length。</p>

<p>chunk编码将数据分成一块一块的发生。Chunked编码将使用若干个Chunk串连而成，由一个标明<strong>长度为0</strong>的chunk标示结束。每个Chunk分为头部和正文两部分，头部内容指定正文的字符总数（<strong>十六进制的数字</strong>）和数量单位（一般不写），正文部分就是指定长度的实际内容，两部分之间用<strong>回车换行(CRLF)</strong>隔开。在最后一个长度为0的Chunk中的内容是称为footer的内容，是一些附加的Header信息（通常可以直接忽略）。</p>

<blockquote>
<p>Chunk编码的格式如下：</p>

<p>Chunked-Body = *<strong>chunk</strong>&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;0&quot; CRLF&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; footer&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CRLF&nbsp;&nbsp;<br />
chunk&nbsp;= chunk-size [ chunk-ext ] CRLF&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; chunk-data CRLF</p>

<p>hex-no-zero = &lt;HEX excluding &quot;0&quot;&gt;</p>

<p>chunk-size = hex-no-zero *HEX&nbsp;<br />
chunk-ext = *( &quot;;&quot; chunk-ext-name [ &quot;=&quot; chunk-ext-value ] )&nbsp;<br />
chunk-ext-name = token&nbsp;<br />
chunk-ext-val = token | quoted-string&nbsp;<br />
chunk-data = chunk-size(OCTET)</p>

<p>footer = *entity-header</p>

<p>即Chunk编码由四部分组成：1、<strong>0至多个chunk块</strong>，2、<strong>&quot;0&quot; CRLF</strong>，3、<strong>footer</strong>，4、<strong>CRLF</strong><strong>.</strong>而每个chunk块由：chunk-size、chunk-ext（可选）、CRLF、chunk-data、CRLF组成。</p>
</blockquote>
