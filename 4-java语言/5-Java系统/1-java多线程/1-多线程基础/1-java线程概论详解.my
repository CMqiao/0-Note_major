<h1>Java线程详解</h1>

<h2>Java线程：基础</h2>

<h3>Java线程：概念与原理</h3>

<h4>&nbsp; &nbsp; 一、操作系统中线程和进程的概念</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 现在的操作系统是多任务操作系统。多线程是实现多任务的一种方式。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 进程是指一个内存中运行的应用程序，每个进程都有自己独立的一块内存空间，一个进程中可以启动多个线程。比如在Windows系统中，一个运行的exe就是一个进程。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 线程是指进程中的一个执行流程，一个进程中可以运行多个线程。比如java.exe进程中可以运行很多线程。线程总是属于某个进程，进程中的多个线程共享进程的内存。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &ldquo;同时&rdquo;执行是人的感觉，在线程之间实际上轮换执行。</p>

<h4>&nbsp; &nbsp; 二、Java中的线程</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 在Java中，&ldquo;线程&rdquo;指两件不同的事情：<br />
&nbsp; &nbsp; &nbsp; &nbsp; 1、java.lang.Thread类的一个实例；</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 2、线程的执行。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 使用java.lang.Thread类或者java.lang.Runnable接口编写代码来定义、实例化和启动新线程。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 一个Thread类实例只是一个对象，像Java中的任何其他对象一样，具有变量和方法，生死于堆上。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; Java中，每个线程都有一个调用栈，即使不在程序中创建任何新的线程，线程也在后台运行着。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 一个Java应用总是从main()方法开始运行，mian()方法运行在一个线程内，它被称为主线程。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 一旦创建一个新的线程，就产生一个新的调用栈。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 线程总体分两类：用户线程和守候线程。</p>

<p><br />
&nbsp; &nbsp; &nbsp; &nbsp; 当所有用户线程执行完毕的时候，JVM自动关闭。但是守候线程却不独立于JVM，守候线程一般是由操作系统或者用户自己创建的</p>

<h3>java线程：创建与启动</h3>

<h4>&nbsp; &nbsp; 一、定义线程</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 1、扩展java.lang.Thread类。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 此类中有个run()方法，应该注意其用法：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; public void run()</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 如果该线程是使用独立的Runnable运行对象构造的，则调用该Runnable对象的run方法；否则，该方法不执行任何操作并返回。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; Thread的子类应该重写该方法。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 2、实现java.lang.Runnable接口。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; void run()</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 使用实现接口Runnable的对象创建一个线程时，启动该线程将导致在独立执行的线程中调用对象的run方法。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 方法run的常规协定是，它可能执行任何所需的操作。</p>

<h4>&nbsp; &nbsp; 二、实例化线程</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 1、如果是扩展java.lang.Thread类的线程，则直接new即可。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 2、如果是实现了java.lang.Runnable接口的类，则用Thread的构造方法：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; Thread(Runnable target)&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; Thread(Runnable target, String name)&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; Thread(ThreadGroup group, Runnable target)&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; Thread(ThreadGroup group, Runnable target, String name)&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; Thread(ThreadGroup group, Runnable target, String name, long stackSize)</p>

<h4>&nbsp; &nbsp; 三、启动线程</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 在线程的Thread对象上调用start()方法，而不是run()或者别的方法。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 在调用start()方法之前：线程处于新状态中，新状态指有一个Thread对象，但还没有一个真正的线程。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 在调用start()方法之后：发生了一系列复杂的事情</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 启动新的执行线程（具有新的调用栈）；</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 该线程从新状态转移到可运行状态；</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 当该线程获得机会执行时，其目标run()方法将运行。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 注意：对Java来说，run()方法没有任何特别之处。像main()方法一样，它只是新线程知道调用的方法名称(和签名)。因此，在Runnable上或者Thread上调用run方法是合法的。但并不启动新的线程。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>

<h4>&nbsp; &nbsp; 四、例子&nbsp;</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 1、实现Runnable接口的多线程例子</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; * 实现Runnable接口的类<br />
&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; * @author leizhimin 2008-9-13 18:12:10&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; publicclass DoSomething implements Runnable {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private String name;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public DoSomething(String name) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.name = name;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt; 5; i++) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (long k = 0; k &lt; 100000000; k++) ;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(name + &quot;: &quot; + i);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; * 测试Runnable类实现的多线程程序<br />
&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; * @author leizhimin 2008-9-13 18:15:02&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; public class TestRunnable {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public static void main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DoSomething ds1 = new DoSomething(&quot;阿三&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DoSomething ds2 = new DoSomething(&quot;李四&quot;);</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t1 = new Thread(ds1);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t2 = new Thread(ds2);</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t1.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t2.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 执行结果：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 李四: 0<br />
&nbsp; &nbsp; &nbsp; &nbsp; 阿三: 0&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 李四: 1&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 阿三: 1&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 李四: 2&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 李四: 3&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 阿三: 2&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 李四: 4&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 阿三: 3&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 阿三: 4&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 2、扩展Thread类实现的多线程例子</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; * 测试扩展Thread类实现的多线程程序<br />
&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; * @author leizhimin 2008-9-13 18:22:13&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; publicclass TestThreadextends Thread{&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public TestThread(String name) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; super(name);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for(int i = 0;i&lt;5;i++){<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for(long k= 0; k &lt;100000000;k++);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(this.getName()+&quot; :&quot;+i);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t1 = new TestThread(&quot;阿三&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t2 = new TestThread(&quot;李四&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t1.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t2.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 执行结果：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 阿三 :0<br />
&nbsp; &nbsp; &nbsp; &nbsp; 李四 :0&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 阿三 :1&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 李四 :1&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 阿三 :2&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 李四 :2&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 阿三 :3&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 阿三 :4&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 李四 :3&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 李四 :4&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 对于上面的多线程程序代码来说，输出的结果是不确定的。其中的一条语句for(long k= 0; k &lt;100000000;k++);是用来模拟一个非常耗时的操作的。</p>

<h4>&nbsp; &nbsp; 五、一些常见问题&nbsp;</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 1、线程的名字，一个运行中的线程总是有名字的，名字有两个来源，一个是虚拟机自己给的名字，一个是你自己的定的名字。在没有指定线程名字的情况下，虚拟机总会为线程指定名字，并且主线程的名字总是main，非主线程的名字不确定。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 2、线程都可以设置名字，也可以获取线程的名字，连主线程也不例外。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 3、获取当前线程的对象的方法是：Thread.currentThread()；</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 4、在上面的代码中，只能保证：每个线程都将启动，每个线程都将运行直到完成。一系列线程以某种顺序启动并不意味着将按该顺序执行。对于任何一组启动的线程来说，调度程序不能保证其执行次序，持续时间也无法保证。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 5、当线程目标run()方法结束时该线程完成。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 6、一旦线程启动，它就永远不能再重新启动。只有一个新的线程可以被启动，并且只能一次。一个可运行的线程或死线程可以被重新启动。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 7、线程的调度是JVM的一部分，在一个CPU的机器上上，实际上一次只能运行一个线程。一次只有一个线程栈执行。JVM线程调度程序决定实际运行哪个处于可运行状态的线程。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 众多可运行线程中的某一个会被选中做为当前线程。可运行线程被选择运行的顺序是没有保障的。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 8、尽管通常采用队列形式，但这是没有保障的。队列形式是指当一个线程完成&ldquo;一轮&rdquo;时，它移到可运行队列的尾部等待，直到它最终排队到该队列的前端为止，它才能被再次选中。事实上，我们把它称为可运行池而不是一个可运行队列，目的是帮助认识线程并不都是以某种有保障的顺序排列唱呢个一个队列的事实。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 9、尽管我们没有无法控制线程调度程序，但可以通过别的方式来影响线程调度的方式。</p>

<h3>Java线程：线程栈模型与线程的变量</h3>

<p>&nbsp; &nbsp; 要理解线程调度的原理，以及线程执行过程，必须理解线程栈模型。</p>

<p>&nbsp; &nbsp; 线程栈是指某时刻时内存中线程调度的栈信息，当前调用的方法总是位于栈顶。线程栈的内容是随着程序的运行动态变化的，因此研究线程栈必须选择一个运行的时刻（实际上指代码运行到什么地方)。</p>

<p>&nbsp; &nbsp; 下面通过一个示例性的代码说明线程（调用）栈的变化过程。</p>

<p>&nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; 这幅图描述在代码执行到两个不同时刻1、2时候，虚拟机线程调用栈示意图。<br />
&nbsp; &nbsp; &nbsp;</p>

<p>&nbsp; &nbsp; 当程序执行到t.start();时候，程序多出一个分支（增加了一个调用栈B），这样，栈A、栈B并行执行。</p>

<p>&nbsp; &nbsp; 从这里就可以看出方法调用和线程启动的区别了。</p>

<h3>Java线程：线程状态的转换</h3>

<h4>&nbsp; &nbsp; 一、线程状态</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 线程的状态转换是线程控制的基础。线程状态总的可分为五大状态：分别是生、死、可运行、运行、等待/阻塞。用一个图来描述如下：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 1、新状态：线程对象已经创建，还没有在其上调用start()方法。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 2、可运行状态：当线程有资格运行，但调度程序还没有把它选定为运行线程时线程所处的状态。当start()方法调用时，线程首先进入可运行状态。在线程运行之后或者从阻塞、等待或睡眠状态回来后，也返回到可运行状态。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 3、运行状态：线程调度程序从可运行池中选择一个线程作为当前线程时线程所处的状态。这也是线程进入运行状态的唯一一种方式。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 4、等待/阻塞/睡眠状态：这是线程有资格运行时它所处的状态。实际上这个三状态组合为一种，其共同点是：线程仍旧是活的，但是当前没有条件运行。换句话说，它是可运行的，但是如果某件事件出现，他可能返回到可运行状态。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 5、死亡态：当线程的run()方法完成时就认为它死去。这个线程对象也许是活的，但是，它已经不是一个单独执行的线程。线程一旦死亡，就不能复生。如果在一个死去的线程上调用start()方法，会抛出java.lang.IllegalThreadStateException异常。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 有关详细状态转换图可以参看本人的&ldquo;Java多线程编程总结&rdquo;中的图</p>

<h4>&nbsp; &nbsp; 二、阻止线程执行</h4>

<p>&nbsp; &nbsp; 对于线程的阻止，考虑一下三个方面，不考虑IO阻塞的情况：</p>

<p>&nbsp; &nbsp; 睡眠；</p>

<p>&nbsp; &nbsp; 等待；</p>

<p>&nbsp; &nbsp; 因为需要一个对象的锁定而被阻塞。</p>

<h4>&nbsp; &nbsp; 1、睡眠</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; Thread.sleep(long millis)和Thread.sleep(long millis, int nanos)静态方法强制当前正在执行的线程休眠（暂停执行），以&ldquo;减慢线程&rdquo;。当线程睡眠时，它入睡在某个地方，在苏醒之前不会返回到可运行状态。当睡眠时间到期，则返回到可运行状态。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 线程睡眠的原因：线程执行太快，或者需要强制进入下一轮，因为Java规范不保证合理的轮换。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 睡眠的实现：调用静态方法。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread.sleep(123);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace(); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 睡眠的位置：为了让其他线程有机会执行，可以将Thread.sleep()的调用放线程run()之内。这样才能保证该线程执行过程中会睡眠。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 例如，在前面的例子中，将一个耗时的操作改为睡眠，以减慢线程的执行。可以这么写：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public void run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for(int i = 0;i&lt;5;i++){</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; // 很耗时的操作，用来减慢线程的执行<br />
&nbsp; &nbsp; &nbsp; &nbsp; // &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for(long k= 0; k &lt;100000000;k++);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread.sleep(3);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace(); &nbsp;.<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(this.getName()+&quot; :&quot;+i);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 运行结果：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 阿三 :0<br />
&nbsp; &nbsp; &nbsp; &nbsp; 李四 :0&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 阿三 :1&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 阿三 :2&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 阿三 :3&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 李四 :1&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 李四 :2&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 阿三 :4&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 李四 :3&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 李四 :4&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 这样，线程在每次执行过程中，总会睡眠3毫秒，睡眠了，其他的线程就有机会执行了。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 注意：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 1、线程睡眠是帮助所有线程获得运行机会的最好方法。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 2、线程睡眠到期自动苏醒，并返回到可运行状态，不是运行状态。sleep()中指定的时间是线程不会运行的最短时间。因此，sleep()方法不能保证该线程睡眠到期后就开始执行。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 3、sleep()是静态方法，只能控制当前正在运行的线程。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 下面给个例子：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; * 一个计数器，计数到100，在每个数字之间暂停1秒，每隔10个数字输出一个字符串<br />
&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; * @author leizhimin 2008-9-14 9:53:49&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; public class MyThread extends Thread {</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt; 100; i++) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if ((i) % 10 == 0) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;-------&quot; + i);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.print(i);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread.sleep(1);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.print(&quot; &nbsp; &nbsp;线程睡眠1毫秒！\n&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new MyThread().start();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; -------0&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 0 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 1 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 2 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 3 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 4 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 5 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 6 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 7 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 8 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 9 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; -------10&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 10 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 11 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 12 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 13 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 14 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 15 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 16 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 17 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 18 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 19 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; -------20&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 20 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 21 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 22 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 23 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 24 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 25 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 26 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 27 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 28 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 29 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; -------30&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 30 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 31 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 32 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 33 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 34 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 35 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 36 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 37 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 38 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 39 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; -------40&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 40 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 41 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 42 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 43 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 44 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 45 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 46 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 47 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 48 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 49 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; -------50&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 50 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 51 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 52 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 53 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 54 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 55 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 56 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 57 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 58 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 59 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; -------60&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 60 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 61 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 62 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 63 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 64 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 65 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 66 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 67 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 68 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 69 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; -------70&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 70 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 71 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 72 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 73 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 74 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 75 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 76 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 77 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 78 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 79 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; -------80&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 80 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 81 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 82 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 83 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 84 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 85 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 86 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 87 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 88 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 89 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; -------90&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 90 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 91 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 92 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 93 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 94 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 95 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 96 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 97 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 98 &nbsp; &nbsp;线程睡眠1毫秒！<br />
&nbsp; &nbsp; &nbsp; &nbsp; 99 &nbsp; &nbsp;线程睡眠1毫秒！</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; Process finished with exit code 0</p>

<h4>&nbsp; &nbsp; 2、线程的优先级和线程让步yield()</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 线程的让步是通过Thread.yield()来实现的。yield()方法的作用是：暂停当前正在执行的线程对象，并执行其他线程。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 要理解yield()，必须了解线程的优先级的概念。线程总是存在优先级，优先级范围在1~10之间。JVM线程调度程序是基于优先级的抢先调度机制。在大多数情况下，当前运行的线程优先级将大于或等于线程池中任何线程的优先级。但这仅仅是大多数情况。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 注意：当设计多线程应用程序的时候，一定不要依赖于线程的优先级。因为线程调度优先级操作是没有保障的，只能把线程优先级作用作为一种提高程序效率的方法，但是要保证程序不依赖这种操作。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 当线程池中线程都具有相同的优先级，调度程序的JVM实现自由选择它喜欢的线程。这时候调度程序的操作有两种可能：一是选择一个线程运行，直到它阻塞或者运行完成为止。二是时间分片，为池内的每个线程提供均等的运行机会。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 设置线程的优先级：线程默认的优先级是创建它的执行线程的优先级。可以通过setPriority(int newPriority)更改线程的优先级。例如：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t = new MyThread();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t.setPriority(8);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t.start();</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 线程优先级为1~10之间的正整数，JVM从不会改变一个线程的优先级。然而，1~10之间的值是没有保证的。一些JVM可能不能识别10个不同的值，而将这些优先级进行每两个或多个合并，变成少于10个的优先级，则两个或多个优先级的线程可能被映射为一个优先级。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 线程默认优先级是5，Thread类中有三个常量，定义线程优先级范围：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; static int MAX_PRIORITY&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 线程可以具有的最高优先级。<br />
&nbsp; &nbsp; &nbsp; &nbsp; static int MIN_PRIORITY&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 线程可以具有的最低优先级。<br />
&nbsp; &nbsp; &nbsp; &nbsp; static int NORM_PRIORITY&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 分配给线程的默认优先级。</p>

<h4>&nbsp; &nbsp; 3、Thread.yield()方法</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; Thread.yield()方法作用是：暂停当前正在执行的线程对象，并执行其他线程。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; yield()应该做的是让当前运行线程回到可运行状态，以允许具有相同优先级的其他线程获得运行机会。因此，使用yield()的目的是让相同优先级的线程之间能适当的轮转执行。但是，实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 结论：yield()从未导致线程转到等待/睡眠/阻塞状态。在大多数情况下，yield()将导致线程从运行状态转到可运行状态，但有可能没有效果。</p>

<h4>&nbsp; &nbsp; 4、join()方法</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; Thread的非静态方法join()让一个线程B&ldquo;加入&rdquo;到另外一个线程A的尾部。在A执行完毕之前，B不能工作。例如：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t = new MyThread();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t.start();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t.join();</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 另外，join()方法还有带超时限制的重载版本。例如t.join(5000);则让线程等待5000毫秒，如果超过这个时间，则停止等待，变为可运行状态。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 线程的加入join()对线程栈导致的结果是线程栈发生了变化，当然这些变化都是瞬时的。下面给示意图：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 小结</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 到目前位置，介绍了线程离开运行状态的3种方法：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 1、调用Thread.sleep()：使当前线程睡眠至少多少毫秒（尽管它可能在指定的时间之前被中断）。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 2、调用Thread.yield()：不能保障太多事情，尽管通常它会让当前运行线程回到可运行性状态，使得有相同优先级的线程有机会执行。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 3、调用join()方法：保证当前线程停止执行，直到该线程所加入的线程完成为止。然而，如果它加入的线程没有存活，则当前线程不需要停止。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 除了以上三种方式外，还有下面几种特殊情况可能使线程离开运行状态：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 1、线程的run()方法完成。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 2、在对象上调用wait()方法（不是在线程上调用）。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 3、线程不能在对象上获得锁定，它正试图运行该对象的方法代码。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 4、线程调度程序可以决定将当前运行状态移动到可运行状态，以便让另一个线程获得运行机会，而不需要任何理由。</p>

<h2>Java线程：线程的同步</h2>

<h3>Java线程：线程的同步与锁</h3>

<h4>&nbsp; &nbsp; 一、同步问题提出</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 线程的同步是为了防止多个线程访问一个数据对象时，对数据造成的破坏。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 例如：两个线程ThreadA、ThreadB都操作同一个对象Foo对象，并修改Foo对象上的数据。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; publicclass Foo {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateint x = 100;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicint getX() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return x;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicint fix(int y) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x = x - y;&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return x;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; publicclass MyRunnableimplements Runnable {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private Foo foo =new Foo();&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyRunnable r = new MyRunnable();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread ta = new Thread(r,&quot;Thread-A&quot;);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread tb = new Thread(r,&quot;Thread-B&quot;);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ta.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tb.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt; 3; i++) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.fix(30);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread.sleep(1);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(Thread.currentThread().getName() + &quot; :当前foo对象的x值= &quot; + foo.getX());<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicint fix(int y) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return foo.fix(y);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 运行结果：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; Thread-A : 当前foo对象的x值= 40<br />
&nbsp; &nbsp; &nbsp; &nbsp; Thread-B : 当前foo对象的x值= 40<br />
&nbsp; &nbsp; &nbsp; &nbsp; Thread-B : 当前foo对象的x值= -20<br />
&nbsp; &nbsp; &nbsp; &nbsp; Thread-A : 当前foo对象的x值= -50<br />
&nbsp; &nbsp; &nbsp; &nbsp; Thread-A : 当前foo对象的x值= -80<br />
&nbsp; &nbsp; &nbsp; &nbsp; Thread-B : 当前foo对象的x值= -80</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 从结果发现，这样的输出值明显是不合理的。原因是两个线程不加控制的访问Foo对象并修改其数据所致。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 如果要保持结果的合理性，只需要达到一个目的，就是将对Foo的访问加以限制，每次只能有一个线程在访问。这样就能保证Foo对象中数据的合理性了。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 在具体的Java代码中需要完成一下两个操作：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 把竞争访问的资源类Foo变量x标识为private；</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 同步哪些修改变量的代码，使用synchronized关键字同步方法或代码。</p>

<h4>&nbsp; &nbsp; 二、同步和锁定</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 1、锁的原理</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; Java中每个对象都有一个内置锁</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 当程序运行到非静态的synchronized同步方法上时，自动获得与正在执行代码类的当前实例（this实例）有关的锁。获得一个对象的锁也称为获取锁、锁定对象、在对象上锁定或在对象上同步。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 当程序运行到synchronized同步方法或代码块时才该对象锁才起作用。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 一个对象只有一个锁。所以，如果一个线程获得该锁，就没有其他线程可以获得锁，直到第一个线程释放（或返回）锁。这也意味着任何其他线程都不能进入该对象上的synchronized方法或代码块，直到该锁被释放。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 释放锁是指持锁线程退出了synchronized同步方法或代码块。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 关于锁和同步，有一下几个要点：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 1）、只能同步方法，而不能同步变量和类；</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 2）、每个对象只有一个锁；当提到同步时，应该清楚在什么上同步？也就是说，在哪个对象上同步？</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 3）、不必同步类中所有的方法，类可以同时拥有同步和非同步方法。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 4）、如果两个线程要执行一个类中的synchronized方法，并且两个线程使用相同的实例来调用方法，那么一次只能有一个线程能够执行方法，另一个需要等待，直到锁被释放。也就是说：如果一个线程在对象上获得一个锁，就没有任何其他线程可以进入（该对象的）类中的任何一个同步方法。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 5）、如果线程拥有同步和非同步方法，则非同步方法可以被多个线程自由访问而不受锁的限制。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 6）、线程睡眠时，它所持的任何锁都不会释放。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 7）、线程可以获得多个锁。比如，在一个对象的同步方法里面调用另外一个对象的同步方法，则获取了两个对象的同步锁。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 8）、同步损害并发性，应该尽可能缩小同步范围。同步不但可以同步整个方法，还可以同步方法中一部分代码块。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 9）、在使用同步代码块时候，应该指定在哪个对象上同步，也就是说要获取哪个对象的锁。例如：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public int fix(int y) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; synchronized (this) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x = x - y;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return x;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 当然，同步方法也可以改写为非同步方法，但功能完全一样的，例如：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public synchronized int getX() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return x++;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 与</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public int getX() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; synchronized (this) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return x;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 效果是完全一样的。</p>

<h4>&nbsp; &nbsp; 三、静态方法同步</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 要同步静态方法，需要一个用于整个类对象的锁，这个对象是就是这个类（XXX.class)。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 例如：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; public static synchronized int setName(String name){</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Xxx.name = name;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 等价于<br />
&nbsp; &nbsp; &nbsp; &nbsp; public static int setName(String name){<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; synchronized(Xxx.class){<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Xxx.name = name;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />
&nbsp; &nbsp; &nbsp; &nbsp; }</p>

<h4><br />
&nbsp; &nbsp; 四、如果线程不能不能获得锁会怎么样</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 如果线程试图进入同步方法，而其锁已经被占用，则线程在该对象上被阻塞。实质上，线程进入该对象的的一种池中，必须在哪里等待，直到其锁被释放，该线程再次变为可运行或运行为止。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 当考虑阻塞时，一定要注意哪个对象正被用于锁定：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 1、调用同一个对象中非静态同步方法的线程将彼此阻塞。如果是不同对象，则每个线程有自己的对象的锁，线程间彼此互不干预。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 2、调用同一个类中的静态同步方法的线程将彼此阻塞，它们都是锁定在相同的Class对象上。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 3、静态同步方法和非静态同步方法将永远不会彼此阻塞，因为静态方法锁定在Class对象上，非静态方法锁定在该类的对象上。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 4、对于同步代码块，要看清楚什么对象已经用于锁定（synchronized后面括号的内容）。在同一个对象上进行同步的线程将彼此阻塞，在不同对象上锁定的线程将永远不会彼此阻塞。</p>

<h4>&nbsp; &nbsp; 五、何时需要同步</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 在多个线程同时访问互斥（可交换）数据时，应该同步以保护数据，确保两个线程不会同时修改更改它。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 对于非静态字段中可更改的数据，通常使用非静态方法访问。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 对于静态字段中可更改的数据，通常使用静态方法访问。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 如果需要在非静态方法中使用静态字段，或者在静态字段中调用非静态方法，问题将变得非常复杂。已经超出SJCP考试范围了。</p>

<h4>&nbsp; &nbsp; 六、线程安全类</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 当一个类已经很好的同步以保护它的数据时，这个类就称为&ldquo;线程安全的&rdquo;。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 即使是线程安全类，也应该特别小心，因为操作的线程是间仍然不一定安全。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 举个形象的例子，比如一个集合是线程安全的，有两个线程在操作同一个集合对象，当第一个线程查询集合非空后，删除集合中所有元素的时候。第二个线程也来执行与第一个线程相同的操作，也许在第一个线程查询后，第二个线程也查询出集合非空，但是当第一个执行清除后，第二个再执行删除显然是不对的，因为此时集合已经为空了。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 看个代码：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; publicclass NameList {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private List nameList = Collections.synchronizedList(new LinkedList());</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid add(String name) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; nameList.add(name);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public String removeFirst() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (nameList.size() &gt; 0) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return (String) nameList.remove(0);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } else {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; returnnull;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; publicclass Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; final NameList nl =new NameList();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; nl.add(&quot;aaa&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; class NameDropperextends Thread{&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run(){<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; String name = nl.removeFirst();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(name);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t1 = new NameDropper();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t2 = new NameDropper();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t1.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t2.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 虽然集合对象</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private List nameList = Collections.synchronizedList(new LinkedList());<br />
&nbsp; &nbsp; &nbsp; &nbsp; 是同步的，但是程序还不是线程安全的。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 出现这种事件的原因是，上例中一个线程操作列表过程中无法阻止另外一个线程对列表的其他操作。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 解决上面问题的办法是，在操作集合对象的NameList上面做一个同步。改写后的代码如下：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; publicclass NameList {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private List nameList = Collections.synchronizedList(new LinkedList());</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicsynchronizedvoid add(String name) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; nameList.add(name);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicsynchronized String removeFirst() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (nameList.size() &gt; 0) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return (String) nameList.remove(0);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } else {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; returnnull;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 这样，当一个线程访问其中一个同步方法时，其他线程只有等待。</p>

<h4>&nbsp; &nbsp; 七、线程死锁</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 死锁对Java程序来说，是很复杂的，也很难发现问题。当两个线程被阻塞，每个线程在等待另一个线程时就发生死锁。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 还是看一个比较直观的死锁例子：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; publicclass DeadlockRisk {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privatestaticclass Resource {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicint value;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private Resource resourceA =new Resource();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private Resource resourceB =new Resource();&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicint read() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; synchronized (resourceA) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; synchronized (resourceB) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return resourceB.value + resourceA.value;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid write(int a,int b) {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; synchronized (resourceB) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; synchronized (resourceA) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; resourceA.value = a;&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; resourceB.value = b;&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 假设read()方法由一个线程启动，write()方法由另外一个线程启动。读线程将拥有resourceA锁，写线程将拥有resourceB锁，两者都坚持等待的话就出现死锁。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 实际上，上面这个例子发生死锁的概率很小。因为在代码内的某个点，CPU必须从读线程切换到写线程，所以，死锁基本上不能发生。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 但是，无论代码中发生死锁的概率有多小，一旦发生死锁，程序就死掉。有一些设计方法能帮助避免死锁，包括始终按照预定义的顺序获取锁这一策略。已经超出SCJP的考试范围。</p>

<h4>&nbsp; &nbsp; 八、线程同步小结</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 1、线程同步的目的是为了保护多个线程反问一个资源时对资源的破坏。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 2、线程同步方法是通过锁来实现，每个对象都有切仅有一个锁，这个锁与一个特定的对象关联，线程一旦获取了对象锁，其他访问该对象的线程就无法再访问该对象的其他同步方法。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 3、对于静态同步方法，锁是针对这个类的，锁对象是该类的Class对象。静态和非静态方法的锁互不干预。一个线程获得锁，当在一个同步方法中访问另外对象上的同步方法时，会获取这两个对象锁。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 4、对于同步，要时刻清醒在哪个对象上同步，这是关键。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 5、编写线程安全的类，需要时刻注意对多个线程竞争访问资源的逻辑和安全做出正确的判断，对&ldquo;原子&rdquo;操作做出分析，并保证原子操作期间别的线程无法访问竞争资源。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 6、当多个线程等待一个对象锁时，没有获取到锁的线程将发生阻塞。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 7、死锁是线程间相互等待锁锁造成的，在实际中发生的概率非常的小。真让你写个死锁程序，不一定好使，呵呵。但是，一旦程序发生死锁，程序将死掉。</p>

<h3>Java线程：线程的交互</h3>

<p>&nbsp; &nbsp; 线程交互是比较复杂的问题，SCJP要求不很基础：给定一个场景，编写代码来恰当使用等待、通知和通知所有线程。</p>

<p>&nbsp; &nbsp; 一、线程交互的基础知识</p>

<p>&nbsp; &nbsp; SCJP所要求的线程交互知识点需要从java.lang.Object的类的三个方法来学习：</p>

<p>&nbsp; &nbsp; &nbsp;void notify()&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 唤醒在此对象监视器上等待的单个线程。<br />
&nbsp; &nbsp; &nbsp;void notifyAll()&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 唤醒在此对象监视器上等待的所有线程。<br />
&nbsp; &nbsp; &nbsp;void wait()&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 导致当前的线程等待，直到其他线程调用此对象的 notify()方法或 notifyAll()方法。</p>

<p>&nbsp; &nbsp; 当然，wait()还有另外两个重载方法：</p>

<p>&nbsp; &nbsp; &nbsp;void wait(long timeout)&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 导致当前的线程等待，直到其他线程调用此对象的 notify()方法或 notifyAll()方法，或者超过指定的时间量。&nbsp;<br />
&nbsp; &nbsp; &nbsp;void wait(long timeout, int nanos)&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 导致当前的线程等待，直到其他线程调用此对象的 notify()方法或 notifyAll()方法，或者其他某个线程中断当前线程，或者已超过某个实际时间量。</p>

<p>&nbsp; &nbsp; 以上这些方法是帮助线程传递线程关心的时间状态。</p>

<p>&nbsp; &nbsp; 关于等待/通知，要记住的关键点是：</p>

<p>&nbsp; &nbsp; 必须从同步环境内调用wait()、notify()、notifyAll()方法。线程不能调用对象上等待或通知的方法，除非它拥有那个对象的锁。</p>

<p>&nbsp; &nbsp; wait()、notify()、notifyAll()都是Object的实例方法。与每个对象具有锁一样，每个对象可以有一个线程列表，他们等待来自该信号（通知）。线程通过执行对象上的wait()方法获得这个等待列表。从那时候起，它不再执行任何其他指令，直到调用对象的notify()方法为止。如果多个线程在同一个对象上等待，则将只选择一个线程（不保证以何种顺序）继续执行。如果没有线程等待，则不采取任何特殊操作。</p>

<p>&nbsp; &nbsp; 下面看个例子就明白了：</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * 计算输出其他线程锁计算的数据<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author leizhimin 2008-9-15 13:20:38&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass ThreadA {<br />
&nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ThreadB b = new ThreadB();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //启动计算线程<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; b.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //线程A拥有b对象上的锁。线程为了调用wait()或notify()方法，该线程必须是那个对象锁的拥有者<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; synchronized (b) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;等待对象b完成计算。。。&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //当前线程A等待<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; b.wait();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;b对象计算的总和是：&quot; + b.total);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * 计算1+2+3 ... +100的和<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author leizhimin 2008-9-15 13:20:49&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass ThreadBextends Thread {<br />
&nbsp; &nbsp; &nbsp; &nbsp; int total;&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; synchronized (this) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt; 101; i++) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; total += i;&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //（完成计算了）唤醒在此对象监视器上等待的单个线程，在本例中线程A被唤醒<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; notify();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; 等待对象b完成计算。。。<br />
&nbsp; &nbsp; b对象计算的总和是：5050&nbsp;</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 千万注意：</p>

<p>&nbsp; &nbsp; 当在对象上调用wait()方法时，执行该代码的线程立即放弃它在对象上的锁。然而调用notify()时，并不意味着这时线程会放弃其锁。如果线程荣然在完成同步代码，则线程在移出之前不会放弃锁。因此，只要调用notify()并不意味着这时该锁变得可用。</p>

<p>&nbsp; &nbsp; 二、多个线程在等待一个对象锁时候使用notifyAll()</p>

<p>&nbsp; &nbsp; 在多数情况下，最好通知等待某个对象的所有线程。如果这样做，可以在对象上使用notifyAll()让所有在此对象上等待的线程冲出等待区，返回到可运行状态。</p>

<p>&nbsp; &nbsp; 下面给个例子：</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * 计算线程&nbsp;<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author leizhimin 2008-9-20 11:15:46&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass Calculatorextends Thread {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int total;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; synchronized (this) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt; 101; i++) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; total += i;&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //通知所有在此对象上等待的线程<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; notifyAll();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * 获取计算结果并输出&nbsp;<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author leizhimin 2008-9-20 11:15:22&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass ReaderResultextends Thread {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Calculator c;&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public ReaderResult(Calculator c) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.c = c;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; synchronized (c) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(Thread.currentThread() + &quot;等待计算结果。。。&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; c.wait();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(Thread.currentThread() + &quot;计算结果为：&quot; + c.total);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Calculator calculator = new Calculator();</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //启动三个线程，分别获取计算结果<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new ReaderResult(calculator).start();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new ReaderResult(calculator).start();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new ReaderResult(calculator).start();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //启动计算线程<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; calculator.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; 运行结果：</p>

<p>&nbsp; &nbsp; Thread[Thread-1,5,main]等待计算结果。。。<br />
&nbsp; &nbsp; Thread[Thread-2,5,main]等待计算结果。。。<br />
&nbsp; &nbsp; Thread[Thread-3,5,main]等待计算结果。。。<br />
&nbsp; &nbsp; Exception in thread &quot;Thread-0&quot; java.lang.IllegalMonitorStateException: current thread not owner<br />
&nbsp; &nbsp; &nbsp; at java.lang.Object.notifyAll(Native Method)&nbsp;<br />
&nbsp; &nbsp; &nbsp; at threadtest.Calculator.run(Calculator.java:18)&nbsp;<br />
&nbsp; &nbsp; Thread[Thread-1,5,main]计算结果为：5050<br />
&nbsp; &nbsp; Thread[Thread-2,5,main]计算结果为：5050<br />
&nbsp; &nbsp; Thread[Thread-3,5,main]计算结果为：5050</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 运行结果表明，程序中有异常，并且多次运行结果可能有多种输出结果。这就是说明，这个多线程的交互程序还存在问题。究竟是出了什么问题，需要深入的分析和思考，下面将做具体分析。</p>

<p>&nbsp; &nbsp; 实际上，上面这个代码中，我们期望的是读取结果的线程在计算线程调用notifyAll()之前等待即可。但是，如果计算线程先执行，并在读取结果线程等待之前调用了notify()方法，那么又会发生什么呢？这种情况是可能发生的。因为无法保证线程的不同部分将按照什么顺序来执行。幸运的是当读取线程运行时，它只能马上进入等待状态----它没有做任何事情来检查等待的事件是否已经发生。 &nbsp;----因此，如果计算线程已经调用了notifyAll()方法，那么它就不会再次调用notifyAll()，----并且等待的读取线程将永远保持等待。这当然是开发者所不愿意看到的问题。</p>

<p>&nbsp; &nbsp; 因此，当等待的事件发生时，需要能够检查notifyAll()通知事件是否已经发生。</p>

<p>&nbsp; &nbsp; 通常，解决上面问题的最佳方式是将</p>

<h3>Java线程：线程的同步-同步方法</h3>

<p>&nbsp; &nbsp; 线程的同步是保证多线程安全访问竞争资源的一种手段。</p>

<p>&nbsp; &nbsp; 线程的同步是Java多线程编程的难点，往往开发者搞不清楚什么是竞争资源、什么时候需要考虑同步，怎么同步等等问题，当然，这些问题没有很明确的答案，但有些原则问题需要考虑，是否有竞争资源被同时改动的问题？</p>

<p>&nbsp; &nbsp; 在本文之前，请参阅《Java线程：线程的同步与锁》，本文是在此基础上所写的。</p>

<p>&nbsp; &nbsp; 对于同步，在具体的Java代码中需要完成一下两个操作：</p>

<p>&nbsp; &nbsp; 把竞争访问的资源标识为private；</p>

<p>&nbsp; &nbsp; 同步哪些修改变量的代码，使用synchronized关键字同步方法或代码。</p>

<p>&nbsp; &nbsp; 当然这不是唯一控制并发安全的途径。</p>

<p>&nbsp; &nbsp; synchronized关键字使用说明</p>

<p>&nbsp; &nbsp; synchronized只能标记非抽象的方法，不能标识成员变量。</p>

<p>&nbsp; &nbsp; 为了演示同步方法的使用，构建了一个信用卡账户，起初信用额为100w，然后模拟透支、存款等多个操作。显然银行账户User对象是个竞争资源，而多个并发操作的是账户方法oper(int x)，当然应该在此方法上加上同步，并将账户的余额设为私有变量，禁止直接访问。</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * Java线程：线程的同步&nbsp;<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author leizhimin 2009-11-4 11:23:32&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User u = new User(&quot;张三&quot;, 100);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyThread t1 = new MyThread(&quot;线程A&quot;, u, 20);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyThread t2 = new MyThread(&quot;线程B&quot;, u, -60);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyThread t3 = new MyThread(&quot;线程C&quot;, u, -80);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyThread t4 = new MyThread(&quot;线程D&quot;, u, -30);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyThread t5 = new MyThread(&quot;线程E&quot;, u, 32);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyThread t6 = new MyThread(&quot;线程F&quot;, u, 21);</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t1.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t2.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t3.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t4.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t5.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t6.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; class MyThread extends Thread {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private User u;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateint y = 0;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyThread(String name, User u, int y) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; super(name);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.u = u;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.y = y;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; u.oper(y);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; class User {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private String code;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateint cash;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User(String code, int cash) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.code = code;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.cash = cash;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public String getCode() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return code;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid setCode(String code) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.code = code;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* 业务方法<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* @param x 添加x万元<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicsynchronizedvoid oper(int x) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread.sleep(10L);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.cash += x;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(Thread.currentThread().getName() + &quot;运行结束，增加&ldquo;&quot; + x +&quot;&rdquo;，当前用户账户余额为：&quot; + cash);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread.sleep(10L);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @Override&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public String toString() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return&quot;User{&quot; +<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;code=&#39;&quot; + code + &#39;\&#39;&#39; +<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;, cash=&quot; + cash +<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#39;}&#39;;&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; 输出结果：</p>

<p>&nbsp; &nbsp; 线程A运行结束，增加&ldquo;20&rdquo;，当前用户账户余额为：120<br />
&nbsp; &nbsp; 线程F运行结束，增加&ldquo;21&rdquo;，当前用户账户余额为：141<br />
&nbsp; &nbsp; 线程E运行结束，增加&ldquo;32&rdquo;，当前用户账户余额为：173<br />
&nbsp; &nbsp; 线程C运行结束，增加&ldquo;-80&rdquo;，当前用户账户余额为：93<br />
&nbsp; &nbsp; 线程B运行结束，增加&ldquo;-60&rdquo;，当前用户账户余额为：33<br />
&nbsp; &nbsp; 线程D运行结束，增加&ldquo;-30&rdquo;，当前用户账户余额为：3</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 反面教材，不同步的情况，也就是去掉oper(int x)方法的synchronized修饰符，然后运行程序，结果如下：</p>

<p>&nbsp; &nbsp; 线程A运行结束，增加&ldquo;20&rdquo;，当前用户账户余额为：61<br />
&nbsp; &nbsp; 线程D运行结束，增加&ldquo;-30&rdquo;，当前用户账户余额为：63<br />
&nbsp; &nbsp; 线程B运行结束，增加&ldquo;-60&rdquo;，当前用户账户余额为：3<br />
&nbsp; &nbsp; 线程F运行结束，增加&ldquo;21&rdquo;，当前用户账户余额为：61<br />
&nbsp; &nbsp; 线程E运行结束，增加&ldquo;32&rdquo;，当前用户账户余额为：93<br />
&nbsp; &nbsp; 线程C运行结束，增加&ldquo;-80&rdquo;，当前用户账户余额为：61</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 很显然，上面的结果是错误的，导致错误的原因是多个线程并发访问了竞争资源u，并对u的属性做了改动。</p>

<p>&nbsp; &nbsp; 可见同步的重要性。</p>

<p>&nbsp; &nbsp; 注意：</p>

<p>&nbsp; &nbsp; 通过前文可知，线程退出同步方法时将释放掉方法所属对象的锁，但还应该注意的是，同步方法中还可以使用特定的方法对线程进行调度。这些方法来自于java.lang.Object类。</p>

<p>&nbsp; &nbsp; void notify() &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 唤醒在此对象监视器上等待的单个线程。 &nbsp; &nbsp;<br />
&nbsp; &nbsp; void notifyAll() &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 唤醒在此对象监视器上等待的所有线程。 &nbsp; &nbsp;<br />
&nbsp; &nbsp; void wait() &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 导致当前的线程等待，直到其他线程调用此对象的 notify()方法或 notifyAll()方法。 &nbsp; &nbsp;<br />
&nbsp; &nbsp; void wait(long timeout) &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 导致当前的线程等待，直到其他线程调用此对象的 notify()方法或 notifyAll()方法，或者超过指定的时间量。 &nbsp; &nbsp;<br />
&nbsp; &nbsp; void wait(long timeout,int nanos) &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 导致当前的线程等待，直到其他线程调用此对象的 notify()方法或 notifyAll()方法，或者其他某个线程中断当前线程，或者已超过某个实际时间量。</p>

<p>&nbsp; &nbsp; 结合以上方法，处理多线程同步与互斥问题非常重要，著名的生产者-消费者例子就是一个经典的例子，任何语言多线程必学的例子。</p>

<h3>Java线程：线程的同步-同步块</h3>

<p>&nbsp; &nbsp; 对于同步，除了同步方法外，还可以使用同步代码块，有时候同步代码块会带来比同步方法更好的效果。</p>

<p>&nbsp; &nbsp; 追其同步的根本的目的，是控制竞争资源的正确的访问，因此只要在访问竞争资源的时候保证同一时刻只能一个线程访问即可，因此Java引入了同步代码快的策略，以提高性能。</p>

<p>&nbsp; &nbsp; 在上个例子的基础上，对oper方法做了改动，由同步方法改为同步代码块模式，程序的执行逻辑并没有问题。</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * Java线程：线程的同步-同步代码块<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author leizhimin 2009-11-4 11:23:32&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User u = new User(&quot;张三&quot;, 100);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyThread t1 = new MyThread(&quot;线程A&quot;, u, 20);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyThread t2 = new MyThread(&quot;线程B&quot;, u, -60);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyThread t3 = new MyThread(&quot;线程C&quot;, u, -80);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyThread t4 = new MyThread(&quot;线程D&quot;, u, -30);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyThread t5 = new MyThread(&quot;线程E&quot;, u, 32);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyThread t6 = new MyThread(&quot;线程F&quot;, u, 21);</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t1.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t2.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t3.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t4.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t5.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t6.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; class MyThread extends Thread {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private User u;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateint y = 0;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyThread(String name, User u, int y) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; super(name);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.u = u;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.y = y;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; u.oper(y);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; class User {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private String code;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateint cash;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User(String code, int cash) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.code = code;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.cash = cash;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public String getCode() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return code;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid setCode(String code) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.code = code;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* 业务方法<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* @param x 添加x万元<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid oper(int x) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread.sleep(10L);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; synchronized (this) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.cash += x;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(Thread.currentThread().getName() +&quot;运行结束，增加&ldquo;&quot; + x +&quot;&rdquo;，当前用户账户余额为：&quot; + cash);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread.sleep(10L);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @Override&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public String toString() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return&quot;User{&quot; +<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;code=&#39;&quot; + code + &#39;\&#39;&#39; +<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;, cash=&quot; + cash +<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#39;}&#39;;&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; 线程E运行结束，增加&ldquo;32&rdquo;，当前用户账户余额为：132<br />
&nbsp; &nbsp; 线程B运行结束，增加&ldquo;-60&rdquo;，当前用户账户余额为：72<br />
&nbsp; &nbsp; 线程D运行结束，增加&ldquo;-30&rdquo;，当前用户账户余额为：42<br />
&nbsp; &nbsp; 线程F运行结束，增加&ldquo;21&rdquo;，当前用户账户余额为：63<br />
&nbsp; &nbsp; 线程C运行结束，增加&ldquo;-80&rdquo;，当前用户账户余额为：-17<br />
&nbsp; &nbsp; 线程A运行结束，增加&ldquo;20&rdquo;，当前用户账户余额为：3</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 注意：</p>

<p>&nbsp; &nbsp; 在使用synchronized关键字时候，应该尽可能避免在synchronized方法或synchronized块中使用sleep或者yield方法，因为synchronized程序块占有着对象锁，你休息那么其他的线程只能一边等着你醒来执行完了才能执行。不但严重影响效率，也不合逻辑。</p>

<p>&nbsp; &nbsp; 同样，在同步程序块内调用yeild方法让出CPU资源也没有意义，因为你占用着锁，其他互斥线程还是无法访问同步程序块。当然与同步程序块无关的线程可以获得更多的执行时间。</p>

<h3>Java线程：并发协作-生产者消费者模型</h3>

<p>&nbsp; &nbsp; 对于多线程程序来说，不管任何编程语言，生产者和消费者模型都是最经典的。就像学习每一门编程语言一样，Hello World！都是最经典的例子。</p>

<p>&nbsp; &nbsp; 实际上，准确说应该是&ldquo;生产者-消费者-仓储&rdquo;模型，离开了仓储，生产者消费者模型就显得没有说服力了。</p>

<p>&nbsp; &nbsp; 对于此模型，应该明确一下几点：</p>

<p>&nbsp; &nbsp; 1、生产者仅仅在仓储未满时候生产，仓满则停止生产。</p>

<p>&nbsp; &nbsp; 2、消费者仅仅在仓储有产品时候才能消费，仓空则等待。</p>

<p>&nbsp; &nbsp; 3、当消费者发现仓储没产品可消费时候会通知生产者生产。</p>

<p>&nbsp; &nbsp; 4、生产者在生产出可消费产品时候，应该通知等待的消费者去消费。</p>

<p>&nbsp; &nbsp; 此模型将要结合java.lang.Object的wait与notify、notifyAll方法来实现以上的需求。这是非常重要的。</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * Java线程：并发协作-生产者消费者模型<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author leizhimin 2009-11-4 14:54:36&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Godown godown = new Godown(30);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Consumer c1 = new Consumer(50, godown);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Consumer c2 = new Consumer(20, godown);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Consumer c3 = new Consumer(30, godown);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Producer p1 = new Producer(10, godown);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Producer p2 = new Producer(10, godown);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Producer p3 = new Producer(10, godown);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Producer p4 = new Producer(10, godown);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Producer p5 = new Producer(10, godown);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Producer p6 = new Producer(10, godown);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Producer p7 = new Producer(80, godown);</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; c1.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; c2.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; c3.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p1.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p2.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p3.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p4.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p5.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p6.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p7.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * 仓库&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; class Godown {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticfinalint max_size = 100;//最大库存量<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicint curnum; &nbsp; &nbsp;//当前库存量</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Godown() {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Godown(int curnum) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.curnum = curnum;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* 生产指定数量的产品<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* @param neednum&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicsynchronizedvoid produce(int neednum) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //测试是否需要生产<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while (neednum + curnum &gt; max_size) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;要生产的产品数量&quot; + neednum +&quot;超过剩余库存量&quot; + (max_size - curnum) +&quot;，暂时不能执行生产任务!&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //当前的生产线程等待<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; wait();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //满足生产条件，则进行生产，这里简单的更改当前库存量<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; curnum += neednum;&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;已经生产了&quot; + neednum +&quot;个产品，现仓储量为&quot; + curnum);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //唤醒在此对象监视器上等待的所有线程<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; notifyAll();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* 消费指定数量的产品<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* @param neednum&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicsynchronizedvoid consume(int neednum) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //测试是否可消费<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while (curnum &lt; neednum) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //当前的生产线程等待<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; wait();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //满足消费条件，则进行消费，这里简单的更改当前库存量<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; curnum -= neednum;&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;已经消费了&quot; + neednum +&quot;个产品，现仓储量为&quot; + curnum);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //唤醒在此对象监视器上等待的所有线程<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; notifyAll();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * 生产者&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; class Producer extends Thread {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateint neednum; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//生产产品的数量<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private Godown godown; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//仓库</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Producer(int neednum, Godown godown) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.neednum = neednum;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.godown = godown;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //生产指定数量的产品<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; godown.produce(neednum);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * 消费者&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; class Consumer extends Thread {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateint neednum; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//生产产品的数量<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private Godown godown; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//仓库</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Consumer(int neednum, Godown godown) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.neednum = neednum;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.godown = godown;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //消费指定数量的产品<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; godown.consume(neednum);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; 已经生产了10个产品，现仓储量为40<br />
&nbsp; &nbsp; 已经生产了10个产品，现仓储量为50<br />
&nbsp; &nbsp; 已经消费了50个产品，现仓储量为0<br />
&nbsp; &nbsp; 已经生产了80个产品，现仓储量为80<br />
&nbsp; &nbsp; 已经消费了30个产品，现仓储量为50<br />
&nbsp; &nbsp; 已经生产了10个产品，现仓储量为60<br />
&nbsp; &nbsp; 已经消费了20个产品，现仓储量为40<br />
&nbsp; &nbsp; 已经生产了10个产品，现仓储量为50<br />
&nbsp; &nbsp; 已经生产了10个产品，现仓储量为60<br />
&nbsp; &nbsp; 已经生产了10个产品，现仓储量为70</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 说明：</p>

<p>&nbsp; &nbsp; 对于本例，要说明的是当发现不能满足生产或者消费条件的时候，调用对象的wait方法，wait方法的作用是释放当前线程的所获得的锁，并调用对象的notifyAll()方法，通知（唤醒）该对象上其他等待线程，使得其继续执行。这样，整个生产者、消费者线程得以正确的协作执行。</p>

<p>&nbsp; &nbsp; notifyAll() 方法，起到的是一个通知作用，不释放锁，也不获取锁。只是告诉该对象上等待的线程&ldquo;可以竞争执行了，都醒来去执行吧&rdquo;。</p>

<p>&nbsp; &nbsp; 本例仅仅是生产者消费者模型中最简单的一种表示，本例中，如果消费者消费的仓储量达不到满足，而又没有生产者，则程序会一直处于等待状态，这当然是不对的。实际上可以将此例进行修改，修改为，根据消费驱动生产，同时生产兼顾仓库，如果仓不满就生产，并对每次最大消费量做个限制，这样就不存在此问题了，当然这样的例子更复杂，更难以说明这样一个简单模型。</p>

<p>&nbsp; &nbsp; 我喜欢简单的例子。</p>

<h3>Java线程：并发协作-死锁</h3>

<p>&nbsp; &nbsp; 线程发生死锁可能性很小，即使看似可能发生死锁的代码，在运行时发生死锁的可能性也是小之又小。</p>

<p>&nbsp; &nbsp; 发生死锁的原因一般是两个对象的锁相互等待造成的。</p>

<p>&nbsp; &nbsp; 在《Java线程：线程的同步与锁》一文中，简述死锁的概念与简单例子，但是所给的例子是不完整的，这里给出一个完整的例子。</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * Java线程：并发协作-死锁<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author Administrator 2009-11-4 22:06:13&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DeadlockRisk dead = new DeadlockRisk();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyThread t1 = new MyThread(dead, 1, 2);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyThread t2 = new MyThread(dead, 3, 4);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyThread t3 = new MyThread(dead, 5, 6);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyThread t4 = new MyThread(dead, 7, 8);</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t1.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t2.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t3.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t4.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; class MyThread extends Thread {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private DeadlockRisk dead;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateint a, b;</p>

<p><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyThread(DeadlockRisk dead, int a,int b) {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.dead = dead;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.a = a;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.b = b;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @Override&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dead.read();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dead.write(a, b);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; class DeadlockRisk {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privatestaticclass Resource {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicint value;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private Resource resourceA =new Resource();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private Resource resourceB =new Resource();&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicint read() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; synchronized (resourceA) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;read():&quot; + Thread.currentThread().getName() +&quot;获取了resourceA的锁！&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; synchronized (resourceB) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;read():&quot; + Thread.currentThread().getName() +&quot;获取了resourceB的锁！&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return resourceB.value + resourceA.value;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid write(int a,int b) {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; synchronized (resourceB) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;write():&quot; + Thread.currentThread().getName() +&quot;获取了resourceA的锁！&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; synchronized (resourceA) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;write():&quot; + Thread.currentThread().getName() +&quot;获取了resourceB的锁！&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; resourceA.value = a;&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; resourceB.value = b;&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; 下面死锁的情况发生了，真是难得一见啊：</p>

<h3>Java线程：volatile关键字</h3>

<p>&nbsp; &nbsp; Java&trade; 语言包含两种内在的同步机制：同步块（或方法）和 volatile变量。这两种机制的提出都是为了实现代码线程的安全性。其中 Volatile变量的同步性较差（但有时它更简单并且开销更低），而且其使用也更容易出错。</p>

<p>&nbsp; &nbsp; 谈及到volatile关键字，不得不提的一篇文章是：《Java理论与实践:正确使用 Volatile 变量》，这篇文章对volatile关键字的用法做了相当精辟的阐述。</p>

<p>&nbsp; &nbsp; 之所以要单独提出volatile这个不常用的关键字原因是这个关键字在高性能的多线程程序中也有很重要的用途，只是这个关键字用不好会出很多问题。</p>

<p>&nbsp; &nbsp; 首先考虑一个问题，为什么变量需要volatile来修饰呢？</p>

<p>&nbsp; &nbsp; 要搞清楚这个问题，首先应该明白计算机内部都做什么了。比如做了一个i++操作，计算机内部做了三次处理：读取－修改－写入。</p>

<p>&nbsp; &nbsp; 同样，对于一个long型数据，做了个赋值操作，在32系统下需要经过两步才能完成，先修改低32位，然后修改高32位。</p>

<p>&nbsp; &nbsp; 假想一下，当将以上的操作放到一个多线程环境下操作时候，有可能出现的问题，是这些步骤执行了一部分，而另外一个线程就已经引用了变量值，这样就导致了读取脏数据的问题。</p>

<p>&nbsp; &nbsp; 通过这个设想，就不难理解volatile关键字了。</p>

<p>&nbsp; &nbsp; volatile可以用在任何变量前面，但不能用于final变量前面，因为final型的变量是禁止修改的。也不存在线程安全的问题。</p>

<p>&nbsp; &nbsp; 更多的内容，请参看：：《Java理论与实践:正确使用 Volatile 变量》一文，写得很好。</p>

<h2>Java线程：线程的调度</h2>

<h3>Java线程：线程的调度-休眠</h3>

<p>&nbsp; &nbsp; Java线程调度是Java多线程的核心，只有良好的调度，才能充分发挥系统的性能，提高程序的执行效率。</p>

<p>&nbsp; &nbsp; 这里要明确的一点，不管程序员怎么编写调度，只能最大限度的影响线程执行的次序，而不能做到精准控制。</p>

<p>&nbsp; &nbsp; 线程休眠的目的是使线程让出CPU的最简单的做法之一，线程休眠时候，会将CPU资源交给其他线程，以便能轮换执行，当休眠一定时间后，线程会苏醒，进入准备状态等待执行。</p>

<p>&nbsp; &nbsp; 线程休眠的方法是Thread.sleep(long millis)和Thread.sleep(long millis, int nanos)，均为静态方法，那调用sleep休眠的哪个线程呢？简单说，哪个线程调用sleep，就休眠哪个线程。</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * Java线程：线程的调度-休眠<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author leizhimin 2009-11-4 9:02:40&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t1 = new MyThread1();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t2 = new Thread(new MyRunnable());<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t1.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t2.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; class MyThread1 extends Thread {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt; 3; i++) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;线程1第&quot; + i + &quot;次执行！&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread.sleep(50);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; class MyRunnableimplements Runnable {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt; 3; i++) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;线程2第&quot; + i + &quot;次执行！&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread.sleep(50);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; 线程2第0次执行！<br />
&nbsp; &nbsp; 线程1第0次执行！<br />
&nbsp; &nbsp; 线程1第1次执行！<br />
&nbsp; &nbsp; 线程2第1次执行！<br />
&nbsp; &nbsp; 线程1第2次执行！<br />
&nbsp; &nbsp; 线程2第2次执行！</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 从上面的结果输出可以看出，无法精准保证线程执行次序。</p>

<p>Java线程：线程的调度-优先级</p>

<p>&nbsp; &nbsp; 与线程休眠类似，线程的优先级仍然无法保障线程的执行次序。只不过，优先级高的线程获取CPU资源的概率较大，优先级低的并非没机会执行。</p>

<p>&nbsp; &nbsp; 线程的优先级用1-10之间的整数表示，数值越大优先级越高，默认的优先级为5。</p>

<p>&nbsp; &nbsp; 在一个线程中开启另外一个新线程，则新开线程称为该线程的子线程，子线程初始优先级与父线程相同。</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * Java线程：线程的调度-优先级<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author leizhimin 2009-11-4 9:02:40&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t1 = new MyThread1();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t2 = new Thread(new MyRunnable());<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t1.setPriority(10);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t2.setPriority(1);&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t2.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t1.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; class MyThread1 extends Thread {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt; 10; i++) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;线程1第&quot; + i + &quot;次执行！&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread.sleep(100);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; class MyRunnableimplements Runnable {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt; 10; i++) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;线程2第&quot; + i + &quot;次执行！&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread.sleep(100);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; 线程1第0次执行！<br />
&nbsp; &nbsp; 线程2第0次执行！<br />
&nbsp; &nbsp; 线程2第1次执行！<br />
&nbsp; &nbsp; 线程1第1次执行！<br />
&nbsp; &nbsp; 线程2第2次执行！<br />
&nbsp; &nbsp; 线程1第2次执行！<br />
&nbsp; &nbsp; 线程1第3次执行！<br />
&nbsp; &nbsp; 线程2第3次执行！<br />
&nbsp; &nbsp; 线程2第4次执行！<br />
&nbsp; &nbsp; 线程1第4次执行！<br />
&nbsp; &nbsp; 线程1第5次执行！<br />
&nbsp; &nbsp; 线程2第5次执行！<br />
&nbsp; &nbsp; 线程1第6次执行！<br />
&nbsp; &nbsp; 线程2第6次执行！<br />
&nbsp; &nbsp; 线程1第7次执行！<br />
&nbsp; &nbsp; 线程2第7次执行！<br />
&nbsp; &nbsp; 线程1第8次执行！<br />
&nbsp; &nbsp; 线程2第8次执行！<br />
&nbsp; &nbsp; 线程1第9次执行！<br />
&nbsp; &nbsp; 线程2第9次执行！</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<h3>Java线程：线程的调度-让步</h3>

<p>&nbsp; &nbsp; 线程的让步含义就是使当前运行着线程让出CPU资源，但是然给谁不知道，仅仅是让出，线程状态回到可运行状态。</p>

<p>&nbsp; &nbsp; 线程的让步使用Thread.yield()方法，yield()为静态方法，功能是暂停当前正在执行的线程对象，并执行其他线程。</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * Java线程：线程的调度-让步<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author leizhimin 2009-11-4 9:02:40&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t1 = new MyThread1();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t2 = new Thread(new MyRunnable());</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t2.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t1.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; class MyThread1 extends Thread {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt; 10; i++) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;线程1第&quot; + i + &quot;次执行！&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; class MyRunnableimplements Runnable {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt; 10; i++) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;线程2第&quot; + i + &quot;次执行！&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread.yield();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; 线程2第0次执行！<br />
&nbsp; &nbsp; 线程2第1次执行！<br />
&nbsp; &nbsp; 线程2第2次执行！<br />
&nbsp; &nbsp; 线程2第3次执行！<br />
&nbsp; &nbsp; 线程1第0次执行！<br />
&nbsp; &nbsp; 线程1第1次执行！<br />
&nbsp; &nbsp; 线程1第2次执行！<br />
&nbsp; &nbsp; 线程1第3次执行！<br />
&nbsp; &nbsp; 线程1第4次执行！<br />
&nbsp; &nbsp; 线程1第5次执行！<br />
&nbsp; &nbsp; 线程1第6次执行！<br />
&nbsp; &nbsp; 线程1第7次执行！<br />
&nbsp; &nbsp; 线程1第8次执行！<br />
&nbsp; &nbsp; 线程1第9次执行！<br />
&nbsp; &nbsp; 线程2第4次执行！<br />
&nbsp; &nbsp; 线程2第5次执行！<br />
&nbsp; &nbsp; 线程2第6次执行！<br />
&nbsp; &nbsp; 线程2第7次执行！<br />
&nbsp; &nbsp; 线程2第8次执行！<br />
&nbsp; &nbsp; 线程2第9次执行！</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<h3>Java线程：线程的调度-合并</h3>

<p>&nbsp; &nbsp; 线程的合并的含义就是将几个并行线程的线程合并为一个单线程执行，应用场景是当一个线程必须等待另一个线程执行完毕才能执行时可以使用join方法。</p>

<p>&nbsp; &nbsp; join为非静态方法，定义如下：</p>

<p>&nbsp; &nbsp; void join() &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 等待该线程终止。 &nbsp; &nbsp;<br />
&nbsp; &nbsp; void join(long millis) &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 等待该线程终止的时间最长为 millis毫秒。 &nbsp; &nbsp;<br />
&nbsp; &nbsp; void join(long millis,int nanos) &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 等待该线程终止的时间最长为 millis毫秒 + nanos 纳秒。</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * Java线程：线程的调度-合并<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author leizhimin 2009-11-4 9:02:40&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t1 = new MyThread1();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t1.start();&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt; 20; i++) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;主线程第&quot; + i +&quot;次执行！&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (i &gt; 2)try {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //t1线程合并到主线程中，主线程停止执行过程，转而执行t1线程，直到t1执行完毕后继续。<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t1.join();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; class MyThread1 extends Thread {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt; 10; i++) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;线程1第&quot; + i + &quot;次执行！&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; 主线程第0次执行！<br />
&nbsp; &nbsp; 主线程第1次执行！<br />
&nbsp; &nbsp; 主线程第2次执行！<br />
&nbsp; &nbsp; 线程1第0次执行！<br />
&nbsp; &nbsp; 主线程第3次执行！<br />
&nbsp; &nbsp; 线程1第1次执行！<br />
&nbsp; &nbsp; 线程1第2次执行！<br />
&nbsp; &nbsp; 线程1第3次执行！<br />
&nbsp; &nbsp; 线程1第4次执行！<br />
&nbsp; &nbsp; 线程1第5次执行！<br />
&nbsp; &nbsp; 线程1第6次执行！<br />
&nbsp; &nbsp; 线程1第7次执行！<br />
&nbsp; &nbsp; 线程1第8次执行！<br />
&nbsp; &nbsp; 线程1第9次执行！<br />
&nbsp; &nbsp; 主线程第4次执行！<br />
&nbsp; &nbsp; 主线程第5次执行！<br />
&nbsp; &nbsp; 主线程第6次执行！<br />
&nbsp; &nbsp; 主线程第7次执行！<br />
&nbsp; &nbsp; 主线程第8次执行！<br />
&nbsp; &nbsp; 主线程第9次执行！<br />
&nbsp; &nbsp; 主线程第10次执行！<br />
&nbsp; &nbsp; 主线程第11次执行！<br />
&nbsp; &nbsp; 主线程第12次执行！<br />
&nbsp; &nbsp; 主线程第13次执行！<br />
&nbsp; &nbsp; 主线程第14次执行！<br />
&nbsp; &nbsp; 主线程第15次执行！<br />
&nbsp; &nbsp; 主线程第16次执行！<br />
&nbsp; &nbsp; 主线程第17次执行！<br />
&nbsp; &nbsp; 主线程第18次执行！<br />
&nbsp; &nbsp; 主线程第19次执行！</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<h3>Java线程：线程的调度-守护线程</h3>

<p>&nbsp; &nbsp; 守护线程与普通线程写法上基本么啥区别，调用线程对象的方法setDaemon(true)，则可以将其设置为守护线程。</p>

<p>&nbsp; &nbsp; 守护线程使用的情况较少，但并非无用，举例来说，JVM的垃圾回收、内存管理等线程都是守护线程。还有就是在做数据库应用时候，使用的数据库连接池，连接池本身也包含着很多后台线程，监控连接个数、超时时间、状态等等。</p>

<p>&nbsp; &nbsp; setDaemon方法的详细说明：</p>

<p>&nbsp; &nbsp; publicfinalvoid setDaemon(boolean on)将该线程标记为守护线程或用户线程。当正在运行的线程都是守护线程时，Java虚拟机退出。 &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; 该方法必须在启动线程前调用。 &nbsp; &nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; 该方法首先调用该线程的 checkAccess方法，且不带任何参数。这可能抛出 SecurityException（在当前线程中）。 &nbsp; &nbsp;</p>

<p><br />
&nbsp; &nbsp; &nbsp; 参数：<br />
&nbsp; &nbsp; &nbsp; &nbsp; on - 如果为true，则将该线程标记为守护线程。 &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; 抛出： &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; IllegalThreadStateException - 如果该线程处于活动状态。 &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; SecurityException - 如果当前线程无法修改该线程。<br />
&nbsp; &nbsp; &nbsp; 另请参见：<br />
&nbsp; &nbsp; &nbsp; &nbsp; isDaemon(), checkAccess()</p>

<p><br />
&nbsp; &nbsp; &nbsp;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * Java线程：线程的调度-守护线程<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author leizhimin 2009-11-4 9:02:40&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t1 = new MyCommon();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t2 = new Thread(new MyDaemon());<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t2.setDaemon(true); &nbsp; &nbsp; &nbsp; &nbsp;//设置为守护线程</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t2.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t1.start();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; class MyCommon extends Thread {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt; 5; i++) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;线程1第&quot; + i + &quot;次执行！&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread.sleep(7);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; class MyDaemon implements Runnable {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (long i = 0; i &lt; 9999999L; i++) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;后台线程第&quot; + i +&quot;次执行！&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread.sleep(7);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; 后台线程第0次执行！<br />
&nbsp; &nbsp; 线程1第0次执行！<br />
&nbsp; &nbsp; 线程1第1次执行！<br />
&nbsp; &nbsp; 后台线程第1次执行！<br />
&nbsp; &nbsp; 后台线程第2次执行！<br />
&nbsp; &nbsp; 线程1第2次执行！<br />
&nbsp; &nbsp; 线程1第3次执行！<br />
&nbsp; &nbsp; 后台线程第3次执行！<br />
&nbsp; &nbsp; 线程1第4次执行！<br />
&nbsp; &nbsp; 后台线程第4次执行！<br />
&nbsp; &nbsp; 后台线程第5次执行！<br />
&nbsp; &nbsp; 后台线程第6次执行！<br />
&nbsp; &nbsp; 后台线程第7次执行！</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 从上面的执行结果可以看出：</p>

<p>&nbsp; &nbsp; 前台线程是保证执行完毕的，后台线程还没有执行完毕就退出了。</p>

<p>&nbsp; &nbsp; 实际上：JRE判断程序是否执行结束的标准是所有的前台执线程行完毕了，而不管后台线程的状态，因此，在使用后台线程时候一定要注意这个问题。</p>

<h2>Java线程：新特征</h2>

<h3>Java线程：新特征-线程池</h3>

<p>&nbsp; &nbsp; Sun在Java5中，对Java线程的类库做了大量的扩展，其中线程池就是Java5的新特征之一，除了线程池之外，还有很多多线程相关的内容，为多线程的编程带来了极大便利。为了编写高效稳定可靠的多线程程序，线程部分的新增内容显得尤为重要。</p>

<p>&nbsp; &nbsp; 有关Java5线程新特征的内容全部在java.util.concurrent下面，里面包含数目众多的接口和类，熟悉这部分API特征是一项艰难的学习过程。目前有关这方面的资料和书籍都少之又少，大所属介绍线程方面书籍还停留在java5之前的知识层面上。</p>

<p>&nbsp; &nbsp; 当然新特征对做多线程程序没有必须的关系，在java5之前通用可以写出很优秀的多线程程序。只是代价不一样而已。</p>

<p>&nbsp; &nbsp; 线程池的基本思想还是一种对象池的思想，开辟一块内存空间，里面存放了众多（未死亡）的线程，池中线程执行调度由池管理器来处理。当有线程任务时，从池中取一个，执行完成后线程对象归池，这样可以避免反复创建线程对象所带来的性能开销，节省了系统的资源。</p>

<p>&nbsp; &nbsp; 在Java5之前，要实现一个线程池是相当有难度的，现在Java5为我们做好了一切，我们只需要按照提供的API来使用，即可享受线程池带来的极大便利。</p>

<p>&nbsp; &nbsp; Java5的线程池分好多种：固定尺寸的线程池、可变尺寸连接池、。</p>

<p>&nbsp; &nbsp; 在使用线程池之前，必须知道如何去创建一个线程池，在Java5中，需要了解的是java.util.concurrent.Executors类的API，这个类提供大量创建连接池的静态方法，是必须掌握的。</p>

<p>&nbsp; &nbsp; 一、固定大小的线程池</p>

<p>&nbsp; &nbsp; import java.util.concurrent.Executors;<br />
&nbsp; &nbsp; import java.util.concurrent.ExecutorService;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * Java线程：线程池-&nbsp;<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author Administrator 2009-11-4 23:30:44&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建一个可重用固定线程数的线程池<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ExecutorService pool = Executors.newFixedThreadPool(2);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建实现了Runnable接口对象，Thread对象当然也实现了Runnable接口<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t1 = new MyThread();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t2 = new MyThread();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t3 = new MyThread();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t4 = new MyThread();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t5 = new MyThread();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //将线程放入池中进行执行<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t1);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t2);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t3);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t4);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t5);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //关闭线程池<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.shutdown();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; class MyThread extends Thread{&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @Override&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(Thread.currentThread().getName()+&quot;正在执行。。。&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; pool-1-thread-1正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-1正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-1正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-1正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-2正在执行。。。</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 二、单任务线程池</p>

<p>&nbsp; &nbsp; 在上例的基础上改一行创建pool对象的代码为：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建一个使用单个 worker线程的 Executor，以无界队列方式来运行该线程。<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ExecutorService pool = Executors.newSingleThreadExecutor();</p>

<p>&nbsp; &nbsp; 输出结果为：</p>

<p>&nbsp; &nbsp; pool-1-thread-1正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-1正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-1正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-1正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-1正在执行。。。</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 对于以上两种连接池，大小都是固定的，当要加入的池的线程（或者任务）超过池最大尺寸时候，则入此线程池需要排队等待。</p>

<p>&nbsp; &nbsp; 一旦池中有线程完毕，则排队等待的某个线程会入池执行。</p>

<p>&nbsp; &nbsp; 三、可变尺寸的线程池</p>

<p>&nbsp; &nbsp; 与上面的类似，只是改动下pool的创建方式：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建一个可根据需要创建新线程的线程池，但是在以前构造的线程可用时将重用它们。<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ExecutorService pool = Executors.newCachedThreadPool();</p>

<p>&nbsp; &nbsp; pool-1-thread-5正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-1正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-4正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-3正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-2正在执行。。。</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 四、延迟连接池</p>

<p>&nbsp; &nbsp; import java.util.concurrent.Executors;<br />
&nbsp; &nbsp; import java.util.concurrent.ScheduledExecutorService;<br />
&nbsp; &nbsp; import java.util.concurrent.TimeUnit;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * Java线程：线程池-&nbsp;<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author Administrator 2009-11-4 23:30:44&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ScheduledExecutorService pool = Executors.newScheduledThreadPool(2);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建实现了Runnable接口对象，Thread对象当然也实现了Runnable接口<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t1 = new MyThread();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t2 = new MyThread();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t3 = new MyThread();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t4 = new MyThread();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t5 = new MyThread();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //将线程放入池中进行执行<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t1);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t2);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t3);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //使用延迟执行风格的方法<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.schedule(t4, 10, TimeUnit.MILLISECONDS);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.schedule(t5, 10, TimeUnit.MILLISECONDS);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //关闭线程池<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.shutdown();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; class MyThread extends Thread {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @Override&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(Thread.currentThread().getName() + &quot;正在执行。。。&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; pool-1-thread-1正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-2正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-1正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-1正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-2正在执行。。。</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 五、单任务延迟连接池</p>

<p>&nbsp; &nbsp; 在四代码基础上，做改动</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建一个单线程执行程序，它可安排在给定延迟后运行命令或者定期地执行。<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ScheduledExecutorService pool = Executors.newSingleThreadScheduledExecutor();</p>

<p>&nbsp; &nbsp; pool-1-thread-1正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-1正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-1正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-1正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-1正在执行。。。</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 六、自定义线程池</p>

<p>&nbsp; &nbsp; import java.util.concurrent.ArrayBlockingQueue;<br />
&nbsp; &nbsp; import java.util.concurrent.BlockingQueue;<br />
&nbsp; &nbsp; import java.util.concurrent.ThreadPoolExecutor;<br />
&nbsp; &nbsp; import java.util.concurrent.TimeUnit;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * Java线程：线程池-自定义线程池<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author Administrator 2009-11-4 23:30:44&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建等待队列<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BlockingQueue&lt;Runnable&gt; bqueue = new ArrayBlockingQueue&lt;Runnable&gt;(20);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建一个单线程执行程序，它可安排在给定延迟后运行命令或者定期地执行。<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ThreadPoolExecutor pool = new ThreadPoolExecutor(2,3,2,TimeUnit.MILLISECONDS,bqueue);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建实现了Runnable接口对象，Thread对象当然也实现了Runnable接口<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t1 = new MyThread();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t2 = new MyThread();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t3 = new MyThread();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t4 = new MyThread();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t5 = new MyThread();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t6 = new MyThread();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t7 = new MyThread();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //将线程放入池中进行执行<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t1);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t2);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t3);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t4);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t5);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t6);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t7);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //关闭线程池<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.shutdown();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; class MyThread extends Thread {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @Override&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(Thread.currentThread().getName() + &quot;正在执行。。。&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread.sleep(100L);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; pool-1-thread-1正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-2正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-2正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-1正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-2正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-1正在执行。。。<br />
&nbsp; &nbsp; pool-1-thread-2正在执行。。。</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 创建自定义线程池的构造方法很多，本例中参数的含义如下：</p>

<p>&nbsp; &nbsp; ThreadPoolExecutor</p>

<p>&nbsp; &nbsp; public ThreadPoolExecutor(int corePoolSize,</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;int maximumPoolSize,</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;long keepAliveTime,</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TimeUnit unit,</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;BlockingQueue&lt;Runnable&gt; workQueue)</p>

<p>&nbsp; &nbsp; 用给定的初始参数和默认的线程工厂及处理程序创建新的ThreadPoolExecutor。使用Executors工厂方法之一比使用此通用构造方法方便得多。</p>

<p>&nbsp; &nbsp; 参数：</p>

<p>&nbsp; &nbsp; corePoolSize -池中所保存的线程数，包括空闲线程。</p>

<p>&nbsp; &nbsp; maximumPoolSize -池中允许的最大线程数。</p>

<p>&nbsp; &nbsp; keepAliveTime -当线程数大于核心时，此为终止前多余的空闲线程等待新任务的最长时间。</p>

<p>&nbsp; &nbsp; unit - keepAliveTime参数的时间单位。</p>

<p>&nbsp; &nbsp; workQueue -执行前用于保持任务的队列。此队列仅保持由execute方法提交的Runnable任务。</p>

<p>&nbsp; &nbsp; 抛出：</p>

<p>&nbsp; &nbsp; IllegalArgumentException -如果 corePoolSize或 keepAliveTime小于零，或者 maximumPoolSize小于或等于零，或者 corePoolSize大于 maximumPoolSize。</p>

<p>&nbsp; &nbsp; NullPointerException -如果workQueue为 null</p>

<p>&nbsp; &nbsp; 自定义连接池稍微麻烦些，不过通过创建的ThreadPoolExecutor线程池对象，可以获取到当前线程池的尺寸、正在执行任务的线程数、工作队列等等。</p>

<p>&nbsp; &nbsp; 有关Java5线程池的内容到此就没有了，更多的内容还需要研读API来获取。</p>

<h3>Java线程：新特征-有返回值的线程</h3>

<p>&nbsp; &nbsp; 在Java5之前，线程是没有返回值的，常常为了&ldquo;有&rdquo;返回值，破费周折，而且代码很不好写。或者干脆绕过这道坎，走别的路了。</p>

<p>&nbsp; &nbsp; 现在Java终于有可返回值的任务（也可以叫做线程）了。</p>

<p>&nbsp; &nbsp; 可返回值的任务必须实现Callable接口，类似的，无返回值的任务必须Runnable接口。</p>

<p>&nbsp; &nbsp; 执行Callable任务后，可以获取一个Future的对象，在该对象上调用get就可以获取到Callable任务返回的Object了。</p>

<p>&nbsp; &nbsp; 下面是个很简单的例子：</p>

<p>&nbsp; &nbsp; import java.util.concurrent.*;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * Java线程：有返回值的线程<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author Administrator 2009-11-5 0:41:50&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args)throws ExecutionException, InterruptedException {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建一个线程池<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ExecutorService pool = Executors.newFixedThreadPool(2);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建两个有返回值的任务<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Callable c1 = new MyCallable(&quot;A&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Callable c2 = new MyCallable(&quot;B&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //执行任务并获取Future对象<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Future f1 = pool.submit(c1);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Future f2 = pool.submit(c2);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //从Future对象上获取任务的返回值，并输出到控制台<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;&gt;&gt;&gt;&quot;+f1.get().toString());<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;&gt;&gt;&gt;&quot;+f2.get().toString());<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //关闭线程池<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.shutdown();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; class MyCallableimplements Callable{<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private String oid;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyCallable(String oid) {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.oid = oid;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @Override&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public Object call()throws Exception {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return oid+&quot;任务返回的内容&quot;;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; &gt;&gt;&gt;A任务返回的内容<br />
&nbsp; &nbsp; &gt;&gt;&gt;B任务返回的内容&nbsp;</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 非常的简单，要深入了解还需要看Callable和Future接口的API啊。</p>

<h3>Java线程：新特征-锁（上）</h3>

<p>&nbsp; &nbsp; 在Java5中，专门提供了锁对象，利用锁可以方便的实现资源的封锁，用来控制对竞争资源并发访问的控制，这些内容主要集中在java.util.concurrent.locks包下面，里面有三个重要的接口Condition、Lock、ReadWriteLock。</p>

<p>&nbsp; &nbsp; Condition</p>

<p>&nbsp; &nbsp; Condition将Object监视器方法（wait、notify和 notifyAll）分解成截然不同的对象，以便通过将这些对象与任意Lock实现组合使用，为每个对象提供多个等待 set（wait-set）。</p>

<p>&nbsp; &nbsp; Lock</p>

<p>&nbsp; &nbsp; Lock实现提供了比使用synchronized方法和语句可获得的更广泛的锁定操作。</p>

<p>&nbsp; &nbsp; ReadWriteLock</p>

<p>&nbsp; &nbsp; ReadWriteLock维护了一对相关的锁定，一个用于只读操作，另一个用于写入操作。</p>

<p>&nbsp; &nbsp; 有关锁的介绍,API文档解说很多，看得很烦，还是看个例子再看文档比较容易理解。</p>

<p>&nbsp; &nbsp; import java.util.concurrent.ExecutorService;<br />
&nbsp; &nbsp; import java.util.concurrent.Executors;<br />
&nbsp; &nbsp; import java.util.concurrent.locks.Lock;<br />
&nbsp; &nbsp; import java.util.concurrent.locks.ReentrantLock;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * Java线程：锁&nbsp;<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author leizhimin 2009-11-5 10:57:29&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建并发访问的账户<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyCount myCount = new MyCount(&quot;95599200901215522&quot;, 10000);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建一个锁对象<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Lock lock = new ReentrantLock();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建一个线程池<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ExecutorService pool = Executors.newCachedThreadPool();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建一些并发访问用户，一个信用卡，存的存，取的取，好热闹啊<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User u1 = new User(&quot;张三&quot;, myCount, -4000, lock);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User u2 = new User(&quot;张三他爹&quot;, myCount, 6000, lock);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User u3 = new User(&quot;张三他弟&quot;, myCount, -8000, lock);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User u4 = new User(&quot;张三&quot;, myCount, 800, lock);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //在线程池中执行各个用户的操作<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(u1);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(u2);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(u3);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(u4);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //关闭线程池<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.shutdown();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * 信用卡的用户&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; class User implements Runnable {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private String name; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//用户名<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private MyCount myCount; &nbsp; &nbsp; &nbsp; &nbsp;//所要操作的账户<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateint iocash; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//操作的金额，当然有正负之分了<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private Lock myLock; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//执行操作所需的锁对象</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User(String name, MyCount myCount, int iocash, Lock myLock) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.name = name;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.myCount = myCount;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.iocash = iocash;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.myLock = myLock;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //获取锁<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; myLock.lock();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //执行现金业务<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(name + &quot;正在操作&quot; + myCount +&quot;账户，金额为&quot; + iocash +&quot;，当前金额为&quot; + myCount.getCash());<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; myCount.setCash(myCount.getCash() + iocash);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(name + &quot;操作&quot; + myCount +&quot;账户成功，金额为&quot; + iocash +&quot;，当前金额为&quot; + myCount.getCash());<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //释放锁，否则别的线程没有机会执行了<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; myLock.unlock();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * 信用卡账户，可随意透支&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; class MyCount {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private String oid; &nbsp; &nbsp; &nbsp; &nbsp;//账号<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateint cash; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//账户余额</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyCount(String oid, int cash) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.oid = oid;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.cash = cash;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public String getOid() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return oid;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid setOid(String oid) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.oid = oid;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicint getCash() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return cash;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid setCash(int cash) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.cash = cash;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @Override&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public String toString() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return&quot;MyCount{&quot; +<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;oid=&#39;&quot; + oid + &#39;\&#39;&#39; +<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;, cash=&quot; + cash +<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#39;}&#39;;&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; 张三正在操作MyCount{oid=&#39;95599200901215522&#39;, cash=10000}账户，金额为-4000，当前金额为10000<br />
&nbsp; &nbsp; 张三操作MyCount{oid=&#39;95599200901215522&#39;, cash=6000}账户成功，金额为-4000，当前金额为6000<br />
&nbsp; &nbsp; 张三他爹正在操作MyCount{oid=&#39;95599200901215522&#39;, cash=6000}账户，金额为6000，当前金额为6000<br />
&nbsp; &nbsp; 张三他爹操作MyCount{oid=&#39;95599200901215522&#39;, cash=12000}账户成功，金额为6000，当前金额为12000<br />
&nbsp; &nbsp; 张三他弟正在操作MyCount{oid=&#39;95599200901215522&#39;, cash=12000}账户，金额为-8000，当前金额为12000<br />
&nbsp; &nbsp; 张三他弟操作MyCount{oid=&#39;95599200901215522&#39;, cash=4000}账户成功，金额为-8000，当前金额为4000<br />
&nbsp; &nbsp; 张三正在操作MyCount{oid=&#39;95599200901215522&#39;, cash=4000}账户，金额为800，当前金额为4000<br />
&nbsp; &nbsp; 张三操作MyCount{oid=&#39;95599200901215522&#39;, cash=4800}账户成功，金额为800，当前金额为4800</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 从上面的输出可以看到，利用锁对象太方便了，比直接在某个不知情的对象上用锁清晰多了。</p>

<p>&nbsp; &nbsp; 但一定要注意的是，在获取了锁对象后，用完后应该尽快释放锁，以便别的等待该锁的线程有机会去执行。</p>

<h3>Java线程：新特征-锁（下）</h3>

<p>&nbsp; &nbsp; 在上文中提到了Lock接口以及对象，使用它，很优雅的控制了竞争资源的安全访问，但是这种锁不区分读写，称这种锁为普通锁。为了提高性能，Java提供了读写锁，在读的地方使用读锁，在写的地方使用写锁，灵活控制，在一定程度上提高了程序的执行效率。</p>

<p>&nbsp; &nbsp; Java中读写锁有个接口java.util.concurrent.locks.ReadWriteLock，也有具体的实现ReentrantReadWriteLock，详细的API可以查看JavaAPI文档。</p>

<p>&nbsp; &nbsp; 下面这个例子是在文例子的基础上，将普通锁改为读写锁，并添加账户余额查询的功能，代码如下：</p>

<p>&nbsp; &nbsp; import java.util.concurrent.ExecutorService;<br />
&nbsp; &nbsp; import java.util.concurrent.Executors;<br />
&nbsp; &nbsp; import java.util.concurrent.locks.ReadWriteLock;<br />
&nbsp; &nbsp; import java.util.concurrent.locks.ReentrantReadWriteLock;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * Java线程：锁&nbsp;<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author leizhimin 2009-11-5 10:57:29&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建并发访问的账户<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyCount myCount = new MyCount(&quot;95599200901215522&quot;, 10000);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建一个锁对象<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ReadWriteLock lock = new ReentrantReadWriteLock(false);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建一个线程池<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ExecutorService pool = Executors.newFixedThreadPool(2);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建一些并发访问用户，一个信用卡，存的存，取的取，好热闹啊<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User u1 = new User(&quot;张三&quot;, myCount, -4000, lock, false);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User u2 = new User(&quot;张三他爹&quot;, myCount, 6000, lock, false);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User u3 = new User(&quot;张三他弟&quot;, myCount, -8000, lock, false);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User u4 = new User(&quot;张三&quot;, myCount, 800, lock,false);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User u5 = new User(&quot;张三他爹&quot;, myCount, 0, lock,true);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //在线程池中执行各个用户的操作<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(u1);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(u2);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(u3);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(u4);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(u5);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //关闭线程池<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.shutdown();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * 信用卡的用户&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; class User implements Runnable {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private String name; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//用户名<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private MyCount myCount; &nbsp; &nbsp; &nbsp; &nbsp;//所要操作的账户<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateint iocash; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//操作的金额，当然有正负之分了<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private ReadWriteLock myLock; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//执行操作所需的锁对象<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateboolean ischeck; &nbsp; &nbsp; &nbsp; &nbsp;//是否查询</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User(String name, MyCount myCount, int iocash, ReadWriteLock myLock,boolean ischeck) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.name = name;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.myCount = myCount;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.iocash = iocash;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.myLock = myLock;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.ischeck = ischeck;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (ischeck) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //获取读锁<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; myLock.readLock().lock();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;读：&quot; + name +&quot;正在查询&quot; + myCount +&quot;账户，当前金额为&quot; + myCount.getCash());<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //释放读锁<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; myLock.readLock().unlock();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } else {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //获取写锁<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; myLock.writeLock().lock();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //执行现金业务<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;写：&quot; + name +&quot;正在操作&quot; + myCount +&quot;账户，金额为&quot; + iocash +&quot;，当前金额为&quot; + myCount.getCash());<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; myCount.setCash(myCount.getCash() + iocash);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;写：&quot; + name +&quot;操作&quot; + myCount +&quot;账户成功，金额为&quot; + iocash +&quot;，当前金额为&quot; + myCount.getCash());<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //释放写锁<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; myLock.writeLock().unlock();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * 信用卡账户，可随意透支&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; class MyCount {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private String oid; &nbsp; &nbsp; &nbsp; &nbsp;//账号<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateint cash; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//账户余额</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyCount(String oid, int cash) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.oid = oid;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.cash = cash;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public String getOid() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return oid;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid setOid(String oid) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.oid = oid;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicint getCash() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return cash;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid setCash(int cash) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.cash = cash;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @Override&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public String toString() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return&quot;MyCount{&quot; +<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;oid=&#39;&quot; + oid + &#39;\&#39;&#39; +<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;, cash=&quot; + cash +<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#39;}&#39;;&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; 写：张三正在操作MyCount{oid=&#39;95599200901215522&#39;, cash=10000}账户，金额为-4000，当前金额为10000<br />
&nbsp; &nbsp; 写：张三操作MyCount{oid=&#39;95599200901215522&#39;, cash=6000}账户成功，金额为-4000，当前金额为6000<br />
&nbsp; &nbsp; 写：张三他弟正在操作MyCount{oid=&#39;95599200901215522&#39;, cash=6000}账户，金额为-8000，当前金额为6000<br />
&nbsp; &nbsp; 写：张三他弟操作MyCount{oid=&#39;95599200901215522&#39;, cash=-2000}账户成功，金额为-8000，当前金额为-2000<br />
&nbsp; &nbsp; 写：张三正在操作MyCount{oid=&#39;95599200901215522&#39;, cash=-2000}账户，金额为800，当前金额为-2000<br />
&nbsp; &nbsp; 写：张三操作MyCount{oid=&#39;95599200901215522&#39;, cash=-1200}账户成功，金额为800，当前金额为-1200<br />
&nbsp; &nbsp; 读：张三他爹正在查询MyCount{oid=&#39;95599200901215522&#39;, cash=-1200}账户，当前金额为-1200<br />
&nbsp; &nbsp; 写：张三他爹正在操作MyCount{oid=&#39;95599200901215522&#39;, cash=-1200}账户，金额为6000，当前金额为-1200<br />
&nbsp; &nbsp; 写：张三他爹操作MyCount{oid=&#39;95599200901215522&#39;, cash=4800}账户成功，金额为6000，当前金额为4800</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 在实际开发中，最好在能用读写锁的情况下使用读写锁，而不要用普通锁，以求更好的性能。</p>

<h3>Java线程：新特征-阻塞队列</h3>

<p>&nbsp; &nbsp; 阻塞队列是Java5线程新特征中的内容，Java定义了阻塞队列的接口java.util.concurrent.BlockingQueue，阻塞队列的概念是，一个指定长度的队列，如果队列满了，添加新元素的操作会被阻塞等待，直到有空位为止。同样，当队列为空时候，请求队列元素的操作同样会阻塞等待，直到有可用元素为止。</p>

<p>&nbsp; &nbsp; 有了这样的功能，就为多线程的排队等候的模型实现开辟了便捷通道，非常有用。</p>

<p>&nbsp; &nbsp; java.util.concurrent.BlockingQueue继承了java.util.Queue接口，可以参看API文档。</p>

<p>&nbsp; &nbsp; 下面给出一个简单应用的例子：</p>

<p>&nbsp; &nbsp; import java.util.concurrent.BlockingQueue;<br />
&nbsp; &nbsp; import java.util.concurrent.ArrayBlockingQueue;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * Java线程：新特征-阻塞队列<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author leizhimin 2009-11-5 14:59:15&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args)throws InterruptedException {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BlockingQueue bqueue = new ArrayBlockingQueue(20);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt; 30; i++) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //将指定元素添加到此队列中，如果没有可用空间，将一直等待（如果有必要）。<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bqueue.put(i);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;向阻塞队列中添加了元素:&quot; + i);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;程序到此运行结束，即将退出----&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; 输出结果：</p>

<p>&nbsp; &nbsp; 向阻塞队列中添加了元素:0<br />
&nbsp; &nbsp; 向阻塞队列中添加了元素:1&nbsp;<br />
&nbsp; &nbsp; 向阻塞队列中添加了元素:2&nbsp;<br />
&nbsp; &nbsp; 向阻塞队列中添加了元素:3&nbsp;<br />
&nbsp; &nbsp; 向阻塞队列中添加了元素:4&nbsp;<br />
&nbsp; &nbsp; 向阻塞队列中添加了元素:5&nbsp;<br />
&nbsp; &nbsp; 向阻塞队列中添加了元素:6&nbsp;<br />
&nbsp; &nbsp; 向阻塞队列中添加了元素:7&nbsp;<br />
&nbsp; &nbsp; 向阻塞队列中添加了元素:8&nbsp;<br />
&nbsp; &nbsp; 向阻塞队列中添加了元素:9&nbsp;<br />
&nbsp; &nbsp; 向阻塞队列中添加了元素:10&nbsp;<br />
&nbsp; &nbsp; 向阻塞队列中添加了元素:11&nbsp;<br />
&nbsp; &nbsp; 向阻塞队列中添加了元素:12&nbsp;<br />
&nbsp; &nbsp; 向阻塞队列中添加了元素:13&nbsp;<br />
&nbsp; &nbsp; 向阻塞队列中添加了元素:14&nbsp;<br />
&nbsp; &nbsp; 向阻塞队列中添加了元素:15&nbsp;<br />
&nbsp; &nbsp; 向阻塞队列中添加了元素:16&nbsp;<br />
&nbsp; &nbsp; 向阻塞队列中添加了元素:17&nbsp;<br />
&nbsp; &nbsp; 向阻塞队列中添加了元素:18&nbsp;<br />
&nbsp; &nbsp; 向阻塞队列中添加了元素:19</p>

<p>&nbsp; &nbsp; 可以看出，输出到元素19时候，就一直处于等待状态，因为队列满了，程序阻塞了。</p>

<p>&nbsp; &nbsp; 这里没有用多线程来演示，没有这个必要。</p>

<p>&nbsp; &nbsp; 另外，阻塞队列还有更多实现类，用来满足各种复杂的需求：ArrayBlockingQueue, DelayQueue, LinkedBlockingQueue, PriorityBlockingQueue, SynchronousQueue，具体的API差别也很小。</p>

<h3>Java线程：新特征-阻塞栈</h3>

<p>&nbsp; &nbsp; 对于阻塞栈，与阻塞队列相似。不同点在于栈是&ldquo;后入先出&rdquo;的结构，每次操作的是栈顶，而队列是&ldquo;先进先出&rdquo;的结构，每次操作的是队列头。</p>

<p>&nbsp; &nbsp; 这里要特别说明一点的是，阻塞栈是Java6的新特征。、</p>

<p>&nbsp; &nbsp; Java为阻塞栈定义了接口：java.util.concurrent.BlockingDeque，其实现类也比较多，具体可以查看JavaAPI文档。</p>

<p>&nbsp; &nbsp; 下面看一个简单例子：</p>

<p>&nbsp; &nbsp; import java.util.concurrent.BlockingDeque;<br />
&nbsp; &nbsp; import java.util.concurrent.LinkedBlockingDeque;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * Java线程：新特征-阻塞栈<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author leizhimin 2009-11-5 15:34:29&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args)throws InterruptedException {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BlockingDeque bDeque = new LinkedBlockingDeque(20);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt; 30; i++) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //将指定元素添加到此阻塞栈中，如果没有可用空间，将一直等待（如果有必要）。<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bDeque.putFirst(i);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;向阻塞栈中添加了元素:&quot; + i);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;程序到此运行结束，即将退出----&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; 输出结果：</p>

<p>&nbsp; &nbsp; 向阻塞栈中添加了元素:0<br />
&nbsp; &nbsp; 向阻塞栈中添加了元素:1&nbsp;<br />
&nbsp; &nbsp; 向阻塞栈中添加了元素:2&nbsp;<br />
&nbsp; &nbsp; 向阻塞栈中添加了元素:3&nbsp;<br />
&nbsp; &nbsp; 向阻塞栈中添加了元素:4&nbsp;<br />
&nbsp; &nbsp; 向阻塞栈中添加了元素:5&nbsp;<br />
&nbsp; &nbsp; 向阻塞栈中添加了元素:6&nbsp;<br />
&nbsp; &nbsp; 向阻塞栈中添加了元素:7&nbsp;<br />
&nbsp; &nbsp; 向阻塞栈中添加了元素:8&nbsp;<br />
&nbsp; &nbsp; 向阻塞栈中添加了元素:9&nbsp;<br />
&nbsp; &nbsp; 向阻塞栈中添加了元素:10&nbsp;<br />
&nbsp; &nbsp; 向阻塞栈中添加了元素:11&nbsp;<br />
&nbsp; &nbsp; 向阻塞栈中添加了元素:12&nbsp;<br />
&nbsp; &nbsp; 向阻塞栈中添加了元素:13&nbsp;<br />
&nbsp; &nbsp; 向阻塞栈中添加了元素:14&nbsp;<br />
&nbsp; &nbsp; 向阻塞栈中添加了元素:15&nbsp;<br />
&nbsp; &nbsp; 向阻塞栈中添加了元素:16&nbsp;<br />
&nbsp; &nbsp; 向阻塞栈中添加了元素:17&nbsp;<br />
&nbsp; &nbsp; 向阻塞栈中添加了元素:18&nbsp;<br />
&nbsp; &nbsp; 向阻塞栈中添加了元素:19</p>

<p>&nbsp; &nbsp; 从上面结果可以看到，程序并没结束，二是阻塞住了，原因是栈已经满了，后面追加元素的操作都被阻塞了。</p>

<h3>Java线程：新特征-条件变量</h3>

<p>&nbsp; &nbsp; 条件变量是Java5线程中很重要的一个概念，顾名思义，条件变量就是表示条件的一种变量。但是必须说明，这里的条件是没有实际含义的，仅仅是个标记而已，并且条件的含义往往通过代码来赋予其含义。</p>

<p>&nbsp; &nbsp; 这里的条件和普通意义上的条件表达式有着天壤之别。</p>

<p>&nbsp; &nbsp; 条件变量都实现了java.util.concurrent.locks.Condition接口，条件变量的实例化是通过一个Lock对象上调用newCondition()方法来获取的，这样，条件就和一个锁对象绑定起来了。因此，Java中的条件变量只能和锁配合使用，来控制并发程序访问竞争资源的安全。</p>

<p>&nbsp; &nbsp; 条件变量的出现是为了更精细控制线程等待与唤醒，在Java5之前，线程的等待与唤醒依靠的是Object对象的wait()和notify()/notifyAll()方法，这样的处理不够精细。</p>

<p>&nbsp; &nbsp; 而在Java5中，一个锁可以有多个条件，每个条件上可以有多个线程等待，通过调用await()方法，可以让线程在该条件下等待。当调用signalAll()方法，又可以唤醒该条件下的等待的线程。有关Condition接口的API可以具体参考JavaAPI文档。</p>

<p>&nbsp; &nbsp; 条件变量比较抽象，原因是他不是自然语言中的条件概念，而是程序控制的一种手段。</p>

<p>&nbsp; &nbsp; 下面以一个银行存取款的模拟程序为例来揭盖Java多线程条件变量的神秘面纱：</p>

<p>&nbsp; &nbsp; 有一个账户，多个用户（线程）在同时操作这个账户，有的存款有的取款，存款随便存，取款有限制，不能透支，任何试图透支的操作都将等待里面有足够存款才执行操作。</p>

<p>&nbsp; &nbsp; import java.util.concurrent.ExecutorService;<br />
&nbsp; &nbsp; import java.util.concurrent.Executors;<br />
&nbsp; &nbsp; import java.util.concurrent.locks.Condition;<br />
&nbsp; &nbsp; import java.util.concurrent.locks.Lock;<br />
&nbsp; &nbsp; import java.util.concurrent.locks.ReentrantLock;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * Java线程：条件变量&nbsp;<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author leizhimin 2009-11-5 10:57:29&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建并发访问的账户<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyCount myCount = new MyCount(&quot;95599200901215522&quot;, 10000);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建一个线程池<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ExecutorService pool = Executors.newFixedThreadPool(2);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t1 = new SaveThread(&quot;张三&quot;, myCount, 2000);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t2 = new SaveThread(&quot;李四&quot;, myCount, 3600);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t3 = new DrawThread(&quot;王五&quot;, myCount, 2700);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t4 = new SaveThread(&quot;老张&quot;, myCount, 600);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t5 = new DrawThread(&quot;老牛&quot;, myCount, 1300);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t6 = new DrawThread(&quot;胖子&quot;, myCount, 800);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //执行各个线程<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t1);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t2);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t3);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t4);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t5);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t6);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //关闭线程池<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.shutdown();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * 存款线程类&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; class SaveThreadextends Thread {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private String name; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//操作人<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private MyCount myCount; &nbsp; &nbsp; &nbsp; &nbsp;//账户<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateint x; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//存款金额</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SaveThread(String name, MyCount myCount, int x) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.name = name;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.myCount = myCount;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.x = x;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; myCount.saving(x, name);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * 取款线程类&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; class DrawThreadextends Thread {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private String name; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//操作人<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private MyCount myCount; &nbsp; &nbsp; &nbsp; &nbsp;//账户<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateint x; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//存款金额</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DrawThread(String name, MyCount myCount, int x) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.name = name;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.myCount = myCount;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.x = x;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; myCount.drawing(x, name);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p><br />
&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * 普通银行账户，不可透支&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; class MyCount {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private String oid; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//账号<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateint cash; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//账户余额<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private Lock lock =new ReentrantLock(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//账户锁<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private Condition _save = lock.newCondition(); &nbsp; &nbsp;//存款条件<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private Condition _draw = lock.newCondition(); &nbsp; &nbsp;//取款条件</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyCount(String oid, int cash) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.oid = oid;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.cash = cash;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* 存款&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* @param x &nbsp; &nbsp; &nbsp; &nbsp;操作金额<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* @param name 操作人<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid saving(int x, String name) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lock.lock(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//获取锁<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (x &gt; 0) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cash += x; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//存款<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(name + &quot;存款&quot; + x +&quot;，当前余额为&quot; + cash);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _draw.signalAll(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//唤醒所有等待线程。<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lock.unlock(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//释放锁<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* 取款&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* @param x &nbsp; &nbsp; &nbsp; &nbsp;操作金额<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* @param name 操作人<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid drawing(int x, String name) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lock.lock(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //获取锁<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (cash - x &lt; 0) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _draw.await(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //阻塞取款操作<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } else {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cash -= x; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //取款<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(name + &quot;取款&quot; + x +&quot;，当前余额为&quot; + cash);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _save.signalAll(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //唤醒所有存款操作<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } finally {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lock.unlock(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //释放锁<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; 李四存款3600，当前余额为13600<br />
&nbsp; &nbsp; 张三存款2000，当前余额为15600<br />
&nbsp; &nbsp; 老张存款600，当前余额为16200<br />
&nbsp; &nbsp; 老牛取款1300，当前余额为14900<br />
&nbsp; &nbsp; 胖子取款800，当前余额为14100<br />
&nbsp; &nbsp; 王五取款2700，当前余额为11400</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 假如我们不用锁和条件变量，如何实现此功能呢？下面是实现代码：</p>

<p>&nbsp; &nbsp; import java.util.concurrent.ExecutorService;<br />
&nbsp; &nbsp; import java.util.concurrent.Executors;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * Java线程：不用条件变量<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author leizhimin 2009-11-5 10:57:29&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建并发访问的账户<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyCount myCount = new MyCount(&quot;95599200901215522&quot;, 10000);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建一个线程池<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ExecutorService pool = Executors.newFixedThreadPool(2);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t1 = new SaveThread(&quot;张三&quot;, myCount, 2000);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t2 = new SaveThread(&quot;李四&quot;, myCount, 3600);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t3 = new DrawThread(&quot;王五&quot;, myCount, 2700);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t4 = new SaveThread(&quot;老张&quot;, myCount, 600);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t5 = new DrawThread(&quot;老牛&quot;, myCount, 1300);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t6 = new DrawThread(&quot;胖子&quot;, myCount, 800);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //执行各个线程<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t1);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t2);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t3);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t4);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t5);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t6);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //关闭线程池<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.shutdown();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * 存款线程类&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; class SaveThreadextends Thread {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private String name; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//操作人<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private MyCount myCount; &nbsp; &nbsp; &nbsp; &nbsp;//账户<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateint x; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//存款金额</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SaveThread(String name, MyCount myCount, int x) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.name = name;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.myCount = myCount;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.x = x;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; myCount.saving(x, name);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * 取款线程类&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; class DrawThreadextends Thread {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private String name; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//操作人<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private MyCount myCount; &nbsp; &nbsp; &nbsp; &nbsp;//账户<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateint x; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//存款金额</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DrawThread(String name, MyCount myCount, int x) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.name = name;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.myCount = myCount;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.x = x;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; myCount.drawing(x, name);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p><br />
&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * 普通银行账户，不可透支&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; class MyCount {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private String oid; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//账号<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateint cash; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//账户余额</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyCount(String oid, int cash) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.oid = oid;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.cash = cash;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* 存款&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* @param x &nbsp; &nbsp; &nbsp; &nbsp;操作金额<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* @param name 操作人<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicsynchronizedvoid saving(int x, String name) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (x &gt; 0) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cash += x; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//存款<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(name + &quot;存款&quot; + x +&quot;，当前余额为&quot; + cash);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; notifyAll(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//唤醒所有等待线程。<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* 取款&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* @param x &nbsp; &nbsp; &nbsp; &nbsp;操作金额<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* @param name 操作人<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicsynchronizedvoid drawing(int x, String name) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (cash - x &lt; 0) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; wait();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e1) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e1.printStackTrace();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } else {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cash -= x; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //取款<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(name + &quot;取款&quot; + x +&quot;，当前余额为&quot; + cash);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; notifyAll(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //唤醒所有存款操作<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; 输出结果为：</p>

<p>&nbsp; &nbsp; 李四存款3600，当前余额为13600<br />
&nbsp; &nbsp; 王五取款2700，当前余额为10900<br />
&nbsp; &nbsp; 老张存款600，当前余额为11500<br />
&nbsp; &nbsp; 老牛取款1300，当前余额为10200<br />
&nbsp; &nbsp; 胖子取款800，当前余额为9400<br />
&nbsp; &nbsp; 张三存款2000，当前余额为11400</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 结合先前同步代码知识，举一反三，将此例改为同步代码块来实现，代码如下：</p>

<p>&nbsp; &nbsp; import java.util.concurrent.ExecutorService;<br />
&nbsp; &nbsp; import java.util.concurrent.Executors;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * Java线程：改为同步代码块<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author leizhimin 2009-11-5 10:57:29&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建并发访问的账户<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyCount myCount = new MyCount(&quot;95599200901215522&quot;, 10000);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建一个线程池<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ExecutorService pool = Executors.newFixedThreadPool(2);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t1 = new SaveThread(&quot;张三&quot;, myCount, 2000);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t2 = new SaveThread(&quot;李四&quot;, myCount, 3600);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t3 = new DrawThread(&quot;王五&quot;, myCount, 2700);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t4 = new SaveThread(&quot;老张&quot;, myCount, 600);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t5 = new DrawThread(&quot;老牛&quot;, myCount, 1300);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t6 = new DrawThread(&quot;胖子&quot;, myCount, 800);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //执行各个线程<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t1);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t2);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t3);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t4);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t5);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t6);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //关闭线程池<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.shutdown();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * 存款线程类&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; class SaveThreadextends Thread {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private String name; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//操作人<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private MyCount myCount; &nbsp; &nbsp; &nbsp; &nbsp;//账户<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateint x; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//存款金额</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SaveThread(String name, MyCount myCount, int x) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.name = name;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.myCount = myCount;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.x = x;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; myCount.saving(x, name);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * 取款线程类&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; class DrawThreadextends Thread {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private String name; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//操作人<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private MyCount myCount; &nbsp; &nbsp; &nbsp; &nbsp;//账户<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateint x; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//存款金额</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DrawThread(String name, MyCount myCount, int x) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.name = name;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.myCount = myCount;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.x = x;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; myCount.drawing(x, name);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p><br />
&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * 普通银行账户，不可透支&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; class MyCount {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private String oid; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//账号<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateint cash; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//账户余额</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyCount(String oid, int cash) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.oid = oid;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.cash = cash;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* 存款&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* @param x &nbsp; &nbsp; &nbsp; &nbsp;操作金额<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* @param name 操作人<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid saving(int x, String name) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (x &gt; 0) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; synchronized (this) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cash += x; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//存款<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(name + &quot;存款&quot; + x +&quot;，当前余额为&quot; + cash);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; notifyAll(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//唤醒所有等待线程。<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* 取款&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* @param x &nbsp; &nbsp; &nbsp; &nbsp;操作金额<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* @param name 操作人<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicsynchronizedvoid drawing(int x, String name) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; synchronized (this) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (cash - x &lt; 0) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; wait();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e1) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e1.printStackTrace();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } else {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cash -= x; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //取款<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(name + &quot;取款&quot; + x +&quot;，当前余额为&quot; + cash);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; notifyAll(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //唤醒所有存款操作<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; 李四存款3600，当前余额为13600<br />
&nbsp; &nbsp; 王五取款2700，当前余额为10900<br />
&nbsp; &nbsp; 老张存款600，当前余额为11500<br />
&nbsp; &nbsp; 老牛取款1300，当前余额为10200<br />
&nbsp; &nbsp; 胖子取款800，当前余额为9400<br />
&nbsp; &nbsp; 张三存款2000，当前余额为11400</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 对比以上三种方式，从控制角度上讲，第一种最灵活，第二种代码最简单，第三种容易犯错。</p>

<h3>Java线程：新特征-信号量</h3>

<p>&nbsp; &nbsp; Java的信号量实际上是一个功能完毕的计数器，对控制一定资源的消费与回收有着很重要的意义，信号量常常用于多线程的代码中，并能监控有多少数目的线程等待获取资源，并且通过信号量可以得知可用资源的数目等等，这里总是在强调&ldquo;数目&rdquo;二字，但不能指出来有哪些在等待，哪些资源可用。</p>

<p>&nbsp; &nbsp; 因此，本人认为，这个信号量类如果能返回数目，还能知道哪些对象在等待，哪些资源可使用，就非常完美了，仅仅拿到这些概括性的数字，对精确控制意义不是很大。目前还没想到更好的用法。</p>

<p>&nbsp; &nbsp; 下面是一个简单例子：</p>

<p>&nbsp; &nbsp; import java.util.concurrent.ExecutorService;<br />
&nbsp; &nbsp; import java.util.concurrent.Executors;<br />
&nbsp; &nbsp; import java.util.concurrent.Semaphore;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * Java线程：新特征-信号量<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author leizhimin 2009-11-5 13:44:45&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; public class Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public static void main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyPool myPool = new MyPool(20);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建线程池<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ExecutorService threadPool = Executors.newFixedThreadPool(2);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyThread t1 = new MyThread(&quot;任务A&quot;, myPool, 3);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyThread t2 = new MyThread(&quot;任务B&quot;, myPool, 12);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyThread t3 = new MyThread(&quot;任务C&quot;, myPool, 7);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //在线程池中执行任务<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; threadPool.execute(t1);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; threadPool.execute(t2);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; threadPool.execute(t3);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //关闭池<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; threadPool.shutdown();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * 一个池&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; class MyPool {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private Semaphore sp; &nbsp; &nbsp;//池相关的信号量</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* 池的大小，这个大小会传递给信号量<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* @param size 池的大小<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyPool(int size) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.sp =new Semaphore(size);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public Semaphore getSp() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return sp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid setSp(Semaphore sp) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.sp = sp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; class MyThread extends Thread {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private String threadname; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//线程的名称<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private MyPool pool; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//自定义池<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateint x; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//申请信号量的大小</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyThread(String threadname, MyPool pool, int x) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.threadname = threadname;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.pool = pool;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.x = x;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //从此信号量获取给定数目的许可<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.getSp().acquire(x);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //todo：也许这里可以做更复杂的业务<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(threadname + &quot;成功获取了&quot; + x +&quot;个许可！&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } finally {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //释放给定数目的许可，将其返回到信号量。<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.getSp().release(x);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(threadname + &quot;释放了&quot; + x +&quot;个许可！&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; 任务B成功获取了12个许可！<br />
&nbsp; &nbsp; 任务B释放了12个许可！<br />
&nbsp; &nbsp; 任务A成功获取了3个许可！<br />
&nbsp; &nbsp; 任务C成功获取了7个许可！<br />
&nbsp; &nbsp; 任务C释放了7个许可！<br />
&nbsp; &nbsp; 任务A释放了3个许可！</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 从结果可以看出，信号量仅仅是对池资源进行监控，但不保证线程的安全，因此，在使用时候，应该自己控制线程的安全访问池资源。</p>

<h3>Java线程：新特征-原子量</h3>

<p>&nbsp; &nbsp; 所谓的原子量即操作变量的操作是&ldquo;原子的&rdquo;，该操作不可再分，因此是线程安全的。</p>

<p>&nbsp; &nbsp; 为何要使用原子变量呢，原因是多个线程对单个变量操作也会引起一些问题。在Java5之前，可以通过volatile、synchronized关键字来解决并发访问的安全问题，但这样太麻烦。</p>

<p>&nbsp; &nbsp; Java5之后，专门提供了用来进行单变量多线程并发安全访问的工具包java.util.concurrent.atomic，其中的类也很简单。</p>

<p>&nbsp; &nbsp; 下面给出一个反面例子（切勿模仿）：</p>

<p>&nbsp; &nbsp; import java.util.concurrent.ExecutorService;<br />
&nbsp; &nbsp; import java.util.concurrent.Executors;<br />
&nbsp; &nbsp; import java.util.concurrent.atomic.AtomicLong;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * Java线程：新特征-原子量<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author leizhimin 2009-11-6 9:53:11&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; public class Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ExecutorService pool = Executors.newFixedThreadPool(2);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Runnable t1 = new MyRunnable(&quot;张三&quot;, 2000);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Runnable t2 = new MyRunnable(&quot;李四&quot;, 3600);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Runnable t3 = new MyRunnable(&quot;王五&quot;, 2700);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Runnable t4 = new MyRunnable(&quot;老张&quot;, 600);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Runnable t5 = new MyRunnable(&quot;老牛&quot;, 1300);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Runnable t6 = new MyRunnable(&quot;胖子&quot;, 800);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //执行各个线程<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t1);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t2);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t3);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t4);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t5);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t6);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //关闭线程池<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.shutdown();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; class MyRunnableimplements Runnable {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privatestatic AtomicLong aLong =new AtomicLong(10000); &nbsp; &nbsp; &nbsp; &nbsp;//原子量，每个线程都可以自由操作<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private String name; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//操作人<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateint x; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//操作数额</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyRunnable(String name, int x) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.name = name;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.x = x;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(name + &quot;执行了&quot; + x +&quot;，当前余额：&quot; + aLong.addAndGet(x));<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; 运行结果：</p>

<p>&nbsp; &nbsp; 李四执行了3600，当前余额：13600<br />
&nbsp; &nbsp; 王五执行了2700，当前余额：16300<br />
&nbsp; &nbsp; 老张执行了600，当前余额：16900<br />
&nbsp; &nbsp; 老牛执行了1300，当前余额：18200<br />
&nbsp; &nbsp; 胖子执行了800，当前余额：19000<br />
&nbsp; &nbsp; 张三执行了2000，当前余额：21000</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 张三执行了2000，当前余额：12000<br />
&nbsp; &nbsp; 王五执行了2700，当前余额：18300<br />
&nbsp; &nbsp; 老张执行了600，当前余额：18900<br />
&nbsp; &nbsp; 老牛执行了1300，当前余额：20200<br />
&nbsp; &nbsp; 胖子执行了800，当前余额：21000<br />
&nbsp; &nbsp; 李四执行了3600，当前余额：15600</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 张三执行了2000，当前余额：12000<br />
&nbsp; &nbsp; 李四执行了3600，当前余额：15600<br />
&nbsp; &nbsp; 老张执行了600，当前余额：18900<br />
&nbsp; &nbsp; 老牛执行了1300，当前余额：20200<br />
&nbsp; &nbsp; 胖子执行了800，当前余额：21000<br />
&nbsp; &nbsp; 王五执行了2700，当前余额：18300</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 从运行结果可以看出，虽然使用了原子量，但是程序并发访问还是有问题，那究竟问题出在哪里了？</p>

<p>&nbsp; &nbsp; 这里要注意的一点是，原子量虽然可以保证单个变量在某一个操作过程的安全，但无法保证你整个代码块，或者整个程序的安全性。因此，通常还应该使用锁等同步机制来控制整个程序的安全性。</p>

<p>&nbsp; &nbsp; 下面是对这个错误修正：</p>

<p>&nbsp; &nbsp; import java.util.concurrent.ExecutorService;<br />
&nbsp; &nbsp; import java.util.concurrent.Executors;<br />
&nbsp; &nbsp; import java.util.concurrent.locks.Lock;<br />
&nbsp; &nbsp; import java.util.concurrent.locks.ReentrantLock;<br />
&nbsp; &nbsp; import java.util.concurrent.atomic.AtomicLong;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * Java线程：新特征-原子量<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author leizhimin 2009-11-6 9:53:11&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ExecutorService pool = Executors.newFixedThreadPool(2);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Lock lock = new ReentrantLock(false);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Runnable t1 = new MyRunnable(&quot;张三&quot;, 2000,lock);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Runnable t2 = new MyRunnable(&quot;李四&quot;, 3600,lock);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Runnable t3 = new MyRunnable(&quot;王五&quot;, 2700,lock);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Runnable t4 = new MyRunnable(&quot;老张&quot;, 600,lock);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Runnable t5 = new MyRunnable(&quot;老牛&quot;, 1300,lock);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Runnable t6 = new MyRunnable(&quot;胖子&quot;, 800,lock);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //执行各个线程<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t1);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t2);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t3);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t4);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t5);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.execute(t6);&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //关闭线程池<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.shutdown();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; class MyRunnableimplements Runnable {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privatestatic AtomicLong aLong =new AtomicLong(10000); &nbsp; &nbsp; &nbsp; &nbsp;//原子量，每个线程都可以自由操作<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private String name; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//操作人<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; privateint x; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//操作数额<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private Lock lock;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyRunnable(String name, int x,Lock lock) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.name = name;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.x = x;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.lock = lock;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lock.lock();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(name + &quot;执行了&quot; + x +&quot;，当前余额：&quot; + aLong.addAndGet(x));<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lock.unlock();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; 执行结果：</p>

<p>&nbsp; &nbsp; 张三执行了2000，当前余额：12000<br />
&nbsp; &nbsp; 王五执行了2700，当前余额：14700<br />
&nbsp; &nbsp; 老张执行了600，当前余额：15300<br />
&nbsp; &nbsp; 老牛执行了1300，当前余额：16600<br />
&nbsp; &nbsp; 胖子执行了800，当前余额：17400<br />
&nbsp; &nbsp; 李四执行了3600，当前余额：21000</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 这里使用了一个对象锁，来控制对并发代码的访问。不管运行多少次，执行次序如何，最终余额均为21000，这个结果是正确的。</p>

<p>&nbsp; &nbsp; 有关原子量的用法很简单，关键是对原子量的认识，原子仅仅是保证变量操作的原子性，但整个程序还需要考虑线程安全的。</p>

<h3>Java线程：新特征-障碍器</h3>

<p>&nbsp; &nbsp; Java5中，添加了障碍器类，为了适应一种新的设计需求，比如一个大型的任务，常常需要分配好多子任务去执行，只有当所有子任务都执行完成时候，才能执行主任务，这时候，就可以选择障碍器了。</p>

<p>&nbsp; &nbsp; 障碍器是多线程并发控制的一种手段，用法很简单。下面给个例子：</p>

<p>&nbsp; &nbsp; import java.util.concurrent.BrokenBarrierException;<br />
&nbsp; &nbsp; import java.util.concurrent.CyclicBarrier;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * Java线程：新特征-障碍器<br />
&nbsp; &nbsp; *&nbsp;<br />
&nbsp; &nbsp; * @author leizhimin 2009-11-6 10:50:10&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; publicclass Test {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicstaticvoid main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //创建障碍器，并设置MainTask为所有定数量的线程都达到障碍点时候所要执行的任务(Runnable)<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CyclicBarrier cb = new CyclicBarrier(7,new MainTask());<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new SubTask(&quot;A&quot;, cb).start();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new SubTask(&quot;B&quot;, cb).start();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new SubTask(&quot;C&quot;, cb).start();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new SubTask(&quot;D&quot;, cb).start();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new SubTask(&quot;E&quot;, cb).start();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new SubTask(&quot;F&quot;, cb).start();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new SubTask(&quot;G&quot;, cb).start();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * 主任务&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; class MainTask implements Runnable {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;&gt;&gt;&gt;&gt;主任务执行了！&lt;&lt;&lt;&lt;&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; * 子任务&nbsp;<br />
&nbsp; &nbsp; */&nbsp;<br />
&nbsp; &nbsp; class SubTask extends Thread {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private String name;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private CyclicBarrier cb;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SubTask(String name, CyclicBarrier cb) {&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.name = name;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.cb = cb;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; publicvoid run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;[子任务&quot; + name +&quot;]开始执行了！&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt; 999999; i++) ; &nbsp; &nbsp;//模拟耗时的任务<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;[子任务&quot; + name +&quot;]开始执行完成了，并通知障碍器已经完成！&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //通知障碍器已经完成<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cb.await();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (BrokenBarrierException e) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace();&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br />
&nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; 运行结果：</p>

<p>&nbsp; &nbsp; [子任务E]开始执行了！<br />
&nbsp; &nbsp; [子任务E]开始执行完成了，并通知障碍器已经完成！<br />
&nbsp; &nbsp; [子任务F]开始执行了！<br />
&nbsp; &nbsp; [子任务G]开始执行了！<br />
&nbsp; &nbsp; [子任务F]开始执行完成了，并通知障碍器已经完成！<br />
&nbsp; &nbsp; [子任务G]开始执行完成了，并通知障碍器已经完成！<br />
&nbsp; &nbsp; [子任务C]开始执行了！<br />
&nbsp; &nbsp; [子任务B]开始执行了！<br />
&nbsp; &nbsp; [子任务C]开始执行完成了，并通知障碍器已经完成！<br />
&nbsp; &nbsp; [子任务D]开始执行了！<br />
&nbsp; &nbsp; [子任务A]开始执行了！<br />
&nbsp; &nbsp; [子任务D]开始执行完成了，并通知障碍器已经完成！<br />
&nbsp; &nbsp; [子任务B]开始执行完成了，并通知障碍器已经完成！<br />
&nbsp; &nbsp; [子任务A]开始执行完成了，并通知障碍器已经完成！<br />
&nbsp; &nbsp; &gt;&gt;&gt;&gt;主任务执行了！&lt;&lt;&lt;&lt;</p>

<p>&nbsp; &nbsp; Process finished with exit code 0</p>

<p>&nbsp; &nbsp; 从执行结果可以看出，所有子任务完成的时候，主任务执行了，达到了控制的目标。</p>
