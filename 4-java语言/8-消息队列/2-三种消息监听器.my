<h1>Spring整合JMS(二)&mdash;&mdash;三种消息监听器 - 好好学习，天天向上 - ITeye技术网站</h1>

<p>消息监听器MessageListener</p>

<p>在Spring整合JMS的应用中我们在定义消息监听器的时候一共可以定义三种类型的消息监听器，分别是MessageListener、SessionAwareMessageListener和MessageListenerAdapter。下面就分别来介绍一下这几种类型的区别。</p>

<h3>1.3.1&nbsp;&nbsp;MessageListener</h3>

<p>MessageListener是最原始的消息监听器，它是JMS规范中定义的一个接口。其中定义了一个用于处理接收到的消息的onMessage方法，该方法只接收一个Message参数。我们前面在讲配置消费者的时候用的消息监听器就是MessageListener，代码如下：</p>

<p>Java代码 &nbsp;</p>

<ol start="1">
	<li>import&nbsp;javax.jms.JMSException;&nbsp;&nbsp;</li>
	<li>import&nbsp;javax.jms.Message;&nbsp;&nbsp;</li>
	<li>import&nbsp;javax.jms.MessageListener;&nbsp;&nbsp;</li>
	<li>import&nbsp;javax.jms.TextMessage;&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;ConsumerMessageListener&nbsp;implements&nbsp;MessageListener&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;onMessage(Message&nbsp;message)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//这里我们知道生产者发送的就是一个纯文本消息，所以这里可以直接进行强制转换，或者直接把onMessage方法的参数改成Message的子类TextMessage&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TextMessage&nbsp;textMsg&nbsp;=&nbsp;(TextMessage)&nbsp;message;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;接收到一个纯文本消息。&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;消息内容是：&quot;&nbsp;+&nbsp;textMsg.getText());&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(JMSException&nbsp;e)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<h3>1.3.2&nbsp;&nbsp;SessionAwareMessageListener</h3>

<p>SessionAwareMessageListener是Spring为我们提供的，它不是标准的JMS MessageListener。MessageListener的设计只是纯粹用来接收消息的，假如我们在使用MessageListener处理接收到的消息时我们需要发送一个消息通知对方我们已经收到这个消息了，那么这个时候我们就需要在代码里面去重新获取一个Connection或Session。SessionAwareMessageListener的设计就是为了方便我们在接收到消息后发送一个回复的消息，它同样为我们提供了一个处理接收到的消息的onMessage方法，但是这个方法可以同时接收两个参数，一个是表示当前接收到的消息Message，另一个就是可以用来发送消息的Session对象。先来看一段代码：</p>

<p>Java代码 &nbsp;</p>

<ol start="1">
	<li>package&nbsp;com.tiantian.springintejms.listener;&nbsp;&nbsp;</li>
	<li>import&nbsp;javax.jms.Destination;&nbsp;&nbsp;</li>
	<li>import&nbsp;javax.jms.JMSException;&nbsp;&nbsp;</li>
	<li>import&nbsp;javax.jms.Message;&nbsp;&nbsp;</li>
	<li>import&nbsp;javax.jms.MessageProducer;&nbsp;&nbsp;</li>
	<li>import&nbsp;javax.jms.Session;&nbsp;&nbsp;</li>
	<li>import&nbsp;javax.jms.TextMessage;&nbsp;&nbsp;</li>
	<li>import&nbsp;org.springframework.jms.listener.SessionAwareMessageListener;&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;ConsumerSessionAwareMessageListener&nbsp;implements&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SessionAwareMessageListener&lt;TextMessage&gt;&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Destination&nbsp;destination;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;onMessage(TextMessage&nbsp;message,&nbsp;Session&nbsp;session)&nbsp;throws&nbsp;JMSException&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;收到一条消息&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;消息内容是：&quot;&nbsp;+&nbsp;message.getText());&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageProducer&nbsp;producer&nbsp;=&nbsp;session.createProducer(destination);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Message&nbsp;textMessage&nbsp;=&nbsp;session.createTextMessage(&quot;ConsumerSessionAwareMessageListener。。。&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;producer.send(textMessage);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Destination&nbsp;getDestination()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;returndestination;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setDestination(Destination&nbsp;destination)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.destination&nbsp;=&nbsp;destination;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>在上面代码中我们定义了一个SessionAwareMessageListener，在这个Listener中我们在接收到了一个消息之后，利用对应的Session创建了一个到destination的生产者和对应的消息，然后利用创建好的生产者发送对应的消息。</p>

<p>接着我们在Spring的配置文件中配置该消息监听器将处理来自一个叫sessionAwareQueue的目的地的消息，并且往该MessageListener中通过set方法注入其属性destination的值为queueDestination。这样当我们的SessionAwareMessageListener接收到消息之后就会往queueDestination发送一个消息。</p>

<p>Xml代码 &nbsp;</p>

<ol start="1">
	<li>&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;UTF-8&quot;?&gt;&nbsp;&nbsp;</li>
	<li>&lt;beans&nbsp;xmlns=&quot;http://www.springframework.org/schema/beans&quot;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&nbsp;xmlns:context=&quot;http://www.springframework.org/schema/context&quot;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;xmlns:jms=&quot;http://www.springframework.org/schema/jms&quot;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context/spring-context-3.0.xsd&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/beans&nbsp;http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/jms&nbsp;http://www.springframework.org/schema/jms/spring-jms-3.0.xsd&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;context:component-scan&nbsp;base-package=&quot;com.tiantian&quot;&nbsp;/&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;Spring提供的JMS工具类，它可以进行消息发送、接收等&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;jmsTemplate&quot;&nbsp;class=&quot;org.springframework.jms.core.JmsTemplate&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;connectionFactory&quot;&nbsp;ref=&quot;connectionFactory&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;真正可以产生Connection的ConnectionFactory，由对应的&nbsp;JMS服务厂商提供--&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;targetConnectionFactory&quot;&nbsp;class=&quot;org.apache.activemq.ActiveMQConnectionFactory&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;brokerURL&quot;&nbsp;value=&quot;tcp://localhost:61616&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;Spring用于管理真正的ConnectionFactory的ConnectionFactory&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;connectionFactory&quot;&nbsp;class=&quot;org.springframework.jms.connection.SingleConnectionFactory&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;目标ConnectionFactory对应真实的可以产生JMS&nbsp;Connection的ConnectionFactory&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;targetConnectionFactory&quot;&nbsp;ref=&quot;targetConnectionFactory&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--这个是队列目的地--&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;queueDestination&quot;&nbsp;class=&quot;org.apache.activemq.command.ActiveMQQueue&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;constructor-arg&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;queue&lt;/value&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/constructor-arg&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--这个是sessionAwareQueue目的地--&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;sessionAwareQueue&quot;&nbsp;class=&quot;org.apache.activemq.command.ActiveMQQueue&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;constructor-arg&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;sessionAwareQueue&lt;/value&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/constructor-arg&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;消息监听器&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;consumerMessageListener&quot;&nbsp;class=&quot;com.tiantian.springintejms.listener.ConsumerMessageListener&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;可以获取session的MessageListener&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;consumerSessionAwareMessageListener&quot;&nbsp;class=&quot;com.tiantian.springintejms.listener.ConsumerSessionAwareMessageListener&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;destination&quot;&nbsp;ref=&quot;queueDestination&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;消息监听容器&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;jmsContainer&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class=&quot;org.springframework.jms.listener.DefaultMessageListenerContainer&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;connectionFactory&quot;&nbsp;ref=&quot;connectionFactory&quot;&nbsp;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;destination&quot;&nbsp;ref=&quot;queueDestination&quot;&nbsp;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;messageListener&quot;&nbsp;ref=&quot;consumerMessageListener&quot;&nbsp;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;sessionAwareListenerContainer&quot;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class=&quot;org.springframework.jms.listener.DefaultMessageListenerContainer&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;connectionFactory&quot;&nbsp;ref=&quot;connectionFactory&quot;&nbsp;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;destination&quot;&nbsp;ref=&quot;sessionAwareQueue&quot;&nbsp;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;messageListener&quot;&nbsp;ref=&quot;consumerSessionAwareMessageListener&quot;&nbsp;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;&nbsp;&nbsp;</li>
	<li>&lt;/beans&gt;&nbsp;&nbsp;</li>
</ol>

<p>接着我们来做一个测试，测试代码如下：</p>

<p>Java代码 &nbsp;</p>

<ol start="1">
	<li>@RunWith(SpringJUnit4ClassRunner.class)&nbsp;&nbsp;</li>
	<li>@ContextConfiguration(&quot;/applicationContext.xml&quot;)&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;ProducerConsumerTest&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Autowired&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;ProducerService&nbsp;producerService;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Autowired&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Qualifier(&quot;sessionAwareQueue&quot;)&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Destination&nbsp;sessionAwareQueue;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Test&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;testSessionAwareMessageListener()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;producerService.sendMessage(sessionAwareQueue,&nbsp;&quot;测试SessionAwareMessageListener&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>在上述测试代码中，我们通过前面定义好的生产者往我们定义好的SessionAwareMessageListener监听的sessionAwareQueue发送了一个消息。程序运行之后控制台输出如下：</p>

<p><br />
<img alt="" src="http://dl2.iteye.com/upload/attachment/0086/1538/bea547c4-869a-30f0-bef2-aacdcf62d3f3.png" /><br />
&nbsp;</p>

<p>这说明我们已经成功的往sessionAwareQueue发送了一条纯文本消息，消息会被ConsumerSessionAwareMessageListener的onMessage方法进行处理，在onMessage方法中ConsumerSessionAwareMessageListener就是简单的把接收到的纯文本信息的内容打印出来了，之后再往queueDestination发送了一个纯文本消息，消息内容是&ldquo;ConsumerSessionAwareMessageListener&hellip;&rdquo;，该消息随后就被ConsumerMessageListener处理了，根据我们的定义，在ConsumerMessageListener中也只是简单的打印了一下接收到的消息内容。</p>

<h3>1.3.3&nbsp;&nbsp;MessageListenerAdapter</h3>

<p>MessageListenerAdapter类实现了MessageListener接口和SessionAwareMessageListener接口，它的主要作用是将接收到的消息进行类型转换，然后通过反射的形式把它交给一个普通的Java类进行处理。</p>

<p>MessageListenerAdapter会把接收到的消息做如下转换：</p>

<p>TextMessage转换为String对象；</p>

<p>BytesMessage转换为byte数组；</p>

<p>MapMessage转换为Map对象；</p>

<p>ObjectMessage转换为对应的Serializable对象。</p>

<p>既然前面说了MessageListenerAdapter会把接收到的消息做一个类型转换，然后利用反射把它交给真正的目标处理器&mdash;&mdash;一个普通的Java类进行处理（如果真正的目标处理器是一个MessageListener或者是一个SessionAwareMessageListener，那么Spring将直接使用接收到的Message对象作为参数调用它们的onMessage方法，而不会再利用反射去进行调用），那么我们在定义一个MessageListenerAdapter的时候就需要为它指定这样一个目标类。这个目标类我们可以通过MessageListenerAdapter的构造方法参数指定，如：</p>

<p>Xml代码 &nbsp;</p>

<ol start="1">
	<li>&lt;!--&nbsp;消息监听适配器&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;messageListenerAdapter&quot;&nbsp;class=&quot;org.springframework.jms.listener.adapter.MessageListenerAdapter&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;constructor-arg&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;class=&quot;com.tiantian.springintejms.listener.ConsumerListener&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/constructor-arg&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;&nbsp;&nbsp;</li>
</ol>

<p>也可以通过它的delegate属性来指定，如：</p>

<p>Xml代码 &nbsp;</p>

<ol start="1">
	<li>&lt;!--&nbsp;消息监听适配器&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;messageListenerAdapter&quot;&nbsp;class=&quot;org.springframework.jms.listener.adapter.MessageListenerAdapter&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;delegate&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;class=&quot;com.tiantian.springintejms.listener.ConsumerListener&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/property&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;defaultListenerMethod&quot;&nbsp;value=&quot;receiveMessage&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;&nbsp;&nbsp;</li>
</ol>

<p>前面说了如果我们指定的这个目标处理器是一个MessageListener或者是一个SessionAwareMessageListener的时候Spring将直接利用接收到的Message对象作为方法参数调用它们的onMessage方法。但是如果指定的目标处理器是一个普通的Java类时Spring将利用Message进行了类型转换之后的对象作为参数通过反射去调用真正的目标处理器的处理方法，那么Spring是如何知道该调用哪个方法呢？这是通过MessageListenerAdapter的defaultListenerMethod属性来决定的，当我们没有指定该属性时，Spring会默认调用目标处理器的handleMessage方法。</p>

<p>接下来我们来看一个示例，假设我们有一个普通的Java类ConsumerListener，其对应有两个方法，handleMessage和receiveMessage，其代码如下：</p>

<p>Java代码 &nbsp;</p>

<ol start="1">
	<li>package&nbsp;com.tiantian.springintejms.listener;&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;ConsumerListener&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;handleMessage(String&nbsp;message)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;ConsumerListener通过handleMessage接收到一个纯文本消息，消息内容是：&quot;&nbsp;+&nbsp;message);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;receiveMessage(String&nbsp;message)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;ConsumerListener通过receiveMessage接收到一个纯文本消息，消息内容是：&quot;&nbsp;+&nbsp;message);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>假设我们要把它作为一个消息监听器来监听发送到adapterQueue的消息，这个时候我们就可以定义一个对应的MessageListenerAdapter来把它当做一个MessageListener使用。</p>

<p>Xml代码 &nbsp;</p>

<ol start="1">
	<li>&lt;!--&nbsp;消息监听适配器&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&lt;bean&nbsp;id=&quot;messageListenerAdapter&quot;&nbsp;class=&quot;org.springframework.jms.listener.adapter.MessageListenerAdapter&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;delegate&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;class=&quot;com.tiantian.springintejms.listener.ConsumerListener&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/property&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;defaultListenerMethod&quot;&nbsp;value=&quot;receiveMessage&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&lt;/bean&gt;&nbsp;&nbsp;</li>
</ol>

<p>当然，有了MessageListener之后我们还需要配置其对应的MessageListenerContainer，这里配置如下：</p>

<p>Xml代码 &nbsp;</p>

<ol start="1">
	<li>&lt;!--&nbsp;消息监听适配器对应的监听容器&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&lt;bean&nbsp;id=&quot;messageListenerAdapterContainer&quot;&nbsp;class=&quot;org.springframework.jms.listener.DefaultMessageListenerContainer&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;connectionFactory&quot;&nbsp;ref=&quot;connectionFactory&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;destination&quot;&nbsp;ref=&quot;adapterQueue&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;messageListener&quot;&nbsp;ref=&quot;messageListenerAdapter&quot;/&gt;&lt;!--&nbsp;使用MessageListenerAdapter来作为消息监听器&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&lt;/bean&gt;&nbsp;&nbsp;</li>
</ol>

<p>在上面的MessageListenerAdapter中我们指定了其defaultListenerMethod属性的值为receiveMessage，所以当MessageListenerAdapter接收到消息之后会自动的调用我们指定的ConsumerListener的receiveMessage方法。</p>

<p>针对于上述代码我们定义测试代码如下：</p>

<p>Java代码 &nbsp;</p>

<ol start="1">
	<li>package&nbsp;com.tiantian.springintejms.test;&nbsp;&nbsp;</li>
	<li>import&nbsp;javax.jms.Destination;&nbsp;&nbsp;</li>
	<li>import&nbsp;org.junit.Test;&nbsp;&nbsp;</li>
	<li>import&nbsp;org.junit.runner.RunWith;&nbsp;&nbsp;</li>
	<li>import&nbsp;org.springframework.beans.factory.annotation.Autowired;&nbsp;&nbsp;</li>
	<li>import&nbsp;org.springframework.beans.factory.annotation.Qualifier;&nbsp;&nbsp;</li>
	<li>import&nbsp;org.springframework.test.context.ContextConfiguration;&nbsp;&nbsp;</li>
	<li>import&nbsp;org.springframework.test.context.junit4.SpringJUnit4ClassRunner;&nbsp;&nbsp;</li>
	<li>import&nbsp;com.tiantian.springintejms.service.ProducerService;&nbsp;&nbsp;</li>
	<li>@RunWith(SpringJUnit4ClassRunner.class)&nbsp;&nbsp;</li>
	<li>@ContextConfiguration(&quot;/applicationContext.xml&quot;)&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;ProducerConsumerTest&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Autowired&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Qualifier(&quot;adapterQueue&quot;)&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Destination&nbsp;adapterQueue;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Test&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;testMessageListenerAdapter()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;producerService.sendMessage(adapterQueue,&nbsp;&quot;测试MessageListenerAdapter&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>这时候我们会看到控制台输出如下：</p>

<p><br />
<img alt="" src="http://dl2.iteye.com/upload/attachment/0086/1540/ed428c5f-4b65-31fa-bc6c-6b5940df5b99.png" /><br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果我们不指定MessageListenerAdapter的defaultListenerMethod属性，那么在运行上述代码时控制台会输出如下结果：</p>

<p><br />
<img alt="" src="http://dl2.iteye.com/upload/attachment/0086/1542/d0270ffa-b3e3-3405-8181-83e9cd80574b.png" /><br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageListenerAdapter除了会自动的把一个普通Java类当做MessageListener来处理接收到的消息之外，<strong>其另外一个主要的功能是可以自动的发送返回消息</strong>。</p>

<p>当我们用于处理接收到的消息的方法的返回值不为空的时候，Spring会自动将它封装为一个JMS Message，然后自动进行回复。那么这个时候这个回复消息将发送到哪里呢？这主要有两种方式可以指定。<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一，可以通过发送的Message的setJMSReplyTo方法指定该消息对应的回复消息的目的地。这里我们把我们的生产者发送消息的代码做一下修改，在发送消息之前先指定该消息对应的回复目的地为一个叫responseQueue的队列目的地，具体代码如下所示：</p>

<p>Java代码 &nbsp;</p>

<ol start="1">
	<li>package&nbsp;com.tiantian.springintejms.service.impl;&nbsp;&nbsp;</li>
	<li>import&nbsp;javax.jms.Destination;&nbsp;&nbsp;</li>
	<li>import&nbsp;javax.jms.JMSException;&nbsp;&nbsp;</li>
	<li>import&nbsp;javax.jms.Message;&nbsp;&nbsp;</li>
	<li>import&nbsp;javax.jms.Session;&nbsp;&nbsp;</li>
	<li>import&nbsp;javax.jms.TextMessage;&nbsp;&nbsp;</li>
	<li>import&nbsp;org.springframework.beans.factory.annotation.Autowired;&nbsp;&nbsp;</li>
	<li>import&nbsp;org.springframework.beans.factory.annotation.Qualifier;&nbsp;&nbsp;</li>
	<li>import&nbsp;org.springframework.jms.core.JmsTemplate;&nbsp;&nbsp;</li>
	<li>import&nbsp;org.springframework.jms.core.MessageCreator;&nbsp;&nbsp;</li>
	<li>import&nbsp;org.springframework.stereotype.Component;&nbsp;&nbsp;</li>
	<li>import&nbsp;com.tiantian.springintejms.service.ProducerService;&nbsp;&nbsp;</li>
	<li>@Component&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;ProducerServiceImpl&nbsp;implements&nbsp;ProducerService&nbsp;{&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Autowired&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;JmsTemplate&nbsp;jmsTemplate;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Autowired&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Qualifier(&quot;responseQueue&quot;)&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Destination&nbsp;responseDestination;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;sendMessage(Destination&nbsp;destination,&nbsp;final&nbsp;String&nbsp;message)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;---------------生产者发送消息-----------------&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;---------------生产者发了一个消息：&quot;&nbsp;+&nbsp;message);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jmsTemplate.send(destination,&nbsp;new&nbsp;MessageCreator()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Message&nbsp;createMessage(Session&nbsp;session)&nbsp;throws&nbsp;JMSException&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TextMessage&nbsp;textMessage&nbsp;=&nbsp;session.createTextMessage(message);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textMessage.setJMSReplyTo(responseDestination);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;textMessage;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>接着定义一个叫responseQueue的队列目的地及其对应的消息监听器和监听容器。</p>

<p>Xml代码 &nbsp;</p>

<ol start="1">
	<li>&lt;!--&nbsp;用于测试消息回复的&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&lt;bean&nbsp;id=&quot;responseQueue&quot;&nbsp;class=&quot;org.apache.activemq.command.ActiveMQQueue&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;constructor-arg&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;responseQueue&lt;/value&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/constructor-arg&gt;&nbsp;&nbsp;</li>
	<li>&lt;/bean&gt;&nbsp;&nbsp;</li>
	<li>&lt;!--&nbsp;responseQueue对应的监听器&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&lt;bean&nbsp;id=&quot;responseQueueListener&quot;&nbsp;class=&quot;com.tiantian.springintejms.listener.ResponseQueueListener&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&lt;!--&nbsp;responseQueue对应的监听容器&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&lt;bean&nbsp;id=&quot;responseQueueMessageListenerContainer&quot;&nbsp;class=&quot;org.springframework.jms.listener.DefaultMessageListenerContainer&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;connectionFactory&quot;&nbsp;ref=&quot;connectionFactory&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;destination&quot;&nbsp;ref=&quot;responseQueue&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;messageListener&quot;&nbsp;ref=&quot;responseQueueListener&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&lt;/bean&gt;&nbsp;&nbsp;</li>
</ol>

<p>ResponseQueueListener的定义如下所示：</p>

<p>Java代码 &nbsp;</p>

<ol start="1">
	<li>public&nbsp;class&nbsp;ResponseQueueListener&nbsp;implements&nbsp;MessageListener&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;onMessage(Message&nbsp;message)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(message&nbsp;instanceof&nbsp;TextMessage)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TextMessage&nbsp;textMessage&nbsp;=&nbsp;(TextMessage)&nbsp;message;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;接收到发送到responseQueue的一个文本消息，内容是：&quot;&nbsp;+&nbsp;textMessage.getText());&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(JMSException&nbsp;e)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>接着把我们接收消息的ConsumerListener的receiveMessage方法改为如下：</p>

<p>Java代码 &nbsp;</p>

<ol start="1">
	<li>/**&nbsp;</li>
	<li>&nbsp;*&nbsp;当返回类型是非null时MessageListenerAdapter会自动把返回值封装成一个Message，然后进行回复&nbsp;</li>
	<li>&nbsp;*&nbsp;@param&nbsp;message&nbsp;</li>
	<li>&nbsp;*&nbsp;@return&nbsp;</li>
	<li>&nbsp;*/&nbsp;&nbsp;</li>
	<li>public&nbsp;String&nbsp;receiveMessage(String&nbsp;message)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;ConsumerListener通过receiveMessage接收到一个纯文本消息，消息内容是：&quot;&nbsp;+&nbsp;message);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;这是ConsumerListener对象的receiveMessage方法的返回值。&quot;;&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>我们可以看到在上述负责接收消息的receiveMessage方法有一个非空的返回值。</p>

<p>接着我们运行我们的测试代码，利用生产者往我们定义好的MessageListenerAdapter负责处理的adapterQueue目的地发送一个消息。测试代码如下所示：</p>

<p>Java代码 &nbsp;</p>

<ol start="1">
	<li>@RunWith(SpringJUnit4ClassRunner.class)&nbsp;&nbsp;</li>
	<li>@ContextConfiguration(&quot;/applicationContext.xml&quot;)&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;ProducerConsumerTest&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Autowired&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;ProducerService&nbsp;producerService;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Qualifier(&quot;adapterQueue&quot;)&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Autowired&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Destination&nbsp;adapterQueue;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Test&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;testMessageListenerAdapter()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;producerService.sendMessage(adapterQueue,&nbsp;&quot;测试MessageListenerAdapter&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>运行上述测试代码之后，控制台输出如下：</p>

<p><br />
<img alt="" src="http://dl2.iteye.com/upload/attachment/0086/1544/0f9140c6-5670-3aad-9cda-8d98b890bafa.png" /><br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这说明我们的生产者发送消息被MessageListenerAdapter处理之后，MessageListenerAdapter确实把监听器的返回内容封装成一个Message往原Message通过setJMSReplyTo方法指定的回复目的地发送了一个消息。对于MessageListenerAdapter对应的监听器处理方法返回的是一个null值或者返回类型是void的情况，MessageListenerAdapter是不会自动进行消息的回复的，有兴趣的网友可以自己测试一下。</p>

<p>第二，通过MessageListenerAdapter的defaultResponseDestination属性来指定。这里我们也来做一个测试，首先维持生产者发送消息的代码不变，即发送消息前不通过Message的setJMSReplyTo方法指定消息的回复目的地；接着我们在定义MessageListenerAdapter的时候通过其defaultResponseDestination属性指定其默认的回复目的地是&ldquo;defaultResponseQueue&rdquo;，并定义defaultResponseQueue对应的消息监听器和消息监听容器。</p>

<p>Xml代码 &nbsp;</p>

<ol start="1">
	<li>&lt;!--&nbsp;消息监听适配器&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&lt;bean&nbsp;id=&quot;messageListenerAdapter&quot;&nbsp;class=&quot;org.springframework.jms.listener.adapter.MessageListenerAdapter&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;&lt;constructor-arg&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;class=&quot;com.tiantian.springintejms.listener.ConsumerListener&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/constructor-arg&gt;&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;delegate&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;class=&quot;com.tiantian.springintejms.listener.ConsumerListener&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/property&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;defaultListenerMethod&quot;&nbsp;value=&quot;receiveMessage&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;defaultResponseDestination&quot;&nbsp;ref=&quot;defaultResponseQueue&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&lt;/bean&gt;&nbsp;&nbsp;</li>
	<li>&lt;!--&nbsp;消息监听适配器对应的监听容器&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&lt;bean&nbsp;id=&quot;messageListenerAdapterContainer&quot;&nbsp;class=&quot;org.springframework.jms.listener.DefaultMessageListenerContainer&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;connectionFactory&quot;&nbsp;ref=&quot;connectionFactory&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;destination&quot;&nbsp;ref=&quot;adapterQueue&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;messageListener&quot;&nbsp;ref=&quot;messageListenerAdapter&quot;/&gt;&lt;!--&nbsp;使用MessageListenerAdapter来作为消息监听器&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&lt;/bean&gt;&nbsp;&nbsp;</li>
	<li>!--&nbsp;默认的消息回复队列&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&lt;bean&nbsp;id=&quot;defaultResponseQueue&quot;&nbsp;class=&quot;org.apache.activemq.command.ActiveMQQueue&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;constructor-arg&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;defaultResponseQueue&lt;/value&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/constructor-arg&gt;&nbsp;&nbsp;</li>
	<li>&lt;/bean&gt;&nbsp;&nbsp;</li>
	<li>&lt;!--&nbsp;defaultResponseQueue对应的监听器&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&lt;bean&nbsp;id=&quot;defaultResponseQueueListener&quot;&nbsp;class=&quot;com.tiantian.springintejms.listener.DefaultResponseQueueListener&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&lt;!--&nbsp;defaultResponseQueue对应的监听容器&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&lt;bean&nbsp;id=&quot;defaultResponseQueueMessageListenerContainer&quot;&nbsp;class=&quot;org.springframework.jms.listener.DefaultMessageListenerContainer&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;connectionFactory&quot;&nbsp;ref=&quot;connectionFactory&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;destination&quot;&nbsp;ref=&quot;defaultResponseQueue&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;messageListener&quot;&nbsp;ref=&quot;defaultResponseQueueListener&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&lt;/bean&gt;&nbsp;&nbsp;</li>
</ol>

<p>DefaultResponseQueueListener的代码如下所示：</p>

<p>Java代码 &nbsp;</p>

<ol start="1">
	<li>package&nbsp;com.tiantian.springintejms.listener;&nbsp;&nbsp;</li>
	<li>import&nbsp;javax.jms.JMSException;&nbsp;&nbsp;</li>
	<li>import&nbsp;javax.jms.Message;&nbsp;&nbsp;</li>
	<li>import&nbsp;javax.jms.MessageListener;&nbsp;&nbsp;</li>
	<li>import&nbsp;javax.jms.TextMessage;&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;DefaultResponseQueueListener&nbsp;implements&nbsp;MessageListener&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;onMessage(Message&nbsp;message)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(message&nbsp;instanceof&nbsp;TextMessage)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TextMessage&nbsp;textMessage&nbsp;=&nbsp;(TextMessage)&nbsp;message;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;DefaultResponseQueueListener接收到发送到defaultResponseQueue的一个文本消息，内容是：&quot;&nbsp;+&nbsp;textMessage.getText());&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(JMSException&nbsp;e)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>这时候运行如下测试代码：</p>

<p>Java代码 &nbsp;</p>

<ol start="1">
	<li>@Test&nbsp;&nbsp;</li>
	<li>public&nbsp;void&nbsp;testMessageListenerAdapter()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;producerService.sendMessage(adapterQueue,&nbsp;&quot;测试MessageListenerAdapter&quot;);&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>控制台将输出如下内容：</p>

<p><br />
<img alt="" src="http://dl2.iteye.com/upload/attachment/0086/1546/d5f016aa-a09b-302a-8eb9-c688027662dd.png" style="height:54px; width:700px" title="点击查看原始大小图片" /><br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这说明MessageListenerAdapter会自动把真正的消息处理器返回的非空内容封装成一个Message发送回复消息到通过defaultResponseDestination属性指定的默认消息回复目的地。</p>

<p>既然我们可以通过两种方式来指定MessageListenerAdapter自动发送回复消息的目的地，那么当我们两种方式都指定了而且它们的目的地还不一样的时候会怎么发送呢？是两个都发还是只发其中的一个呢？关于这部分的测试我这里就不赘述了，有兴趣的网友可以自己进行。这里我可以直接的告诉大家，当两种方式都指定了消息的回复目的地的时候使用发送消息的setJMSReplyTo方法指定的目的地将具有较高的优先级，MessageListenerAdapter将只往该方法指定的消息回复目的地发送回复消息。</p>
