<h1>image镜像操作</h1>

<p>&nbsp;</p>

<h2>删除image</h2>

<p>在使用Docker的时候遇到删不掉image的情况，如下：</p>

<p><code>root@ubuntu:</code><code>/opt/docker</code><code># docker images</code></p>

<p><code>REPOSITORY&nbsp;&nbsp;&nbsp;&nbsp; TAG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IMAGE ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CREATED&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SIZE</code></p>

<p><code>door</code><code>/ubuntu-nginx</code>&nbsp; <code>v2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5e4f2da203e2&nbsp;&nbsp;&nbsp; 5 minutes ago&nbsp;&nbsp;&nbsp; 283.3 MB</code></p>

<p><code>&lt;none&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;none&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>46987ed2da40&nbsp;&nbsp;&nbsp; </strong>33 minutes ago&nbsp;&nbsp; 129 MB</code></p>

<p><code>&lt;none&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;none&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>20248c31e1a2&nbsp;&nbsp;&nbsp; </strong>45 minutes ago&nbsp;&nbsp; 129 MB</code></p>

<p><code>door</code><code>/ubuntu-nginx</code>&nbsp; <code>v1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0e35a55569f5&nbsp;&nbsp;&nbsp; About an hour ago&nbsp; 280.8 MB</code></p>

<p><code>ubuntu&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; latest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 104bec311bcd&nbsp;&nbsp;&nbsp; 2 weeks ago&nbsp;&nbsp;&nbsp;&nbsp; 129 MB</code></p>

<p><code>hello-world&nbsp;&nbsp;&nbsp;&nbsp; latest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c54a2cc56cbb&nbsp;&nbsp;&nbsp; 6 months ago&nbsp;&nbsp;&nbsp; 1.848 kB</code></p>

<p><code>root@ubuntu:</code><code>/opt/docker</code><code># docker rmi 5e4f2da203e2</code></p>

<p><code>Error response from daemon: conflict: unable to delete 5e4f2da203e2 (must be forced) - image is being used by stopped container 06622513ce3c</code></p>

<p>&nbsp;</p>

<p><strong>解决方法：</strong></p>

<p>1.先查询记录&nbsp;</p>

<p><code>docker ps -a</code></p>

<p>2.把该镜像的记录全部删除掉，如果删除所有镜像的记录，可以使用:</p>

<p>docker rm ( container id )</p>

<p>docker ps -a|awk &#39;{print $1}&#39;|xargs docker rm</p>

<p>3.<code>docker rmi 5e4f2da203e2</code>就可以了</p>

<p>网上还有网友使用service docker restrat 之后再删，本人试了一下不管用，可能是因为环境不一样，哈哈！</p>

<p>以上所述是小编给大家介绍的docker image删不掉的解决办法，希望对大家有所帮助，如果大家有任何疑问请给我留言，小编会及时回复大家的。在此也非常感谢大家对脚本之家网站的支持！</p>

<p>&nbsp;</p>

<h2>docker容器的迁移</h2>

<p>docker的备份方式有export和save两种。</p>

<p>export是当前的状态，针对的是容器，docker save 是针对镜像images。</p>

<p><strong>export</strong></p>

<p>找出要备份容器的ID</p>

<pre>
[root@wls12c ~]$ docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                   NAMES
037b847bf093        centos              &quot;/bin/bash&quot;         3 minutes ago       Exited (0) 2 minute      naughty_davinci     
</pre>

<p>备份</p>

<pre>
[root@wls12c ~]$ docker export 037b847bf093 &gt;centos_demo.tar
[root@wls12c ~]$ du -sh centos_demo.tar 
195M    centos_demo.tar</pre>

<p>export是把容器打成一个tar包。</p>

<p>恢复</p>

<p>把刚才备份的centos_demo.tar打包到目标服务器</p>

<pre>
[root@11g ~]$ cat centos_demo.tar |docker import - centos:demo
8962416d1362f289ceb9848e21a95f03dc34eb6f234c8f98f1a6e1ec7fe34a67
查看新生成的镜像</pre>

<pre>
[root@11g ~]$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
centos              demo                8962416d1362        24 seconds ago      196.7 MB
</pre>

<p><strong>save</strong></p>

<p>得到镜像名称</p>

<pre>
[root@wls12c ~]$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
centos              latest              d83a55af4e75        3 weeks ago         196.7 MB
</pre>

<p>备份镜像</p>

<pre>
[root@wls12c ~]$ docker save centos &gt;centos_save.tar
</pre>

<p>恢复镜像</p>

<pre>
[root@11g ~]$ docker load &lt;centos_save.tar 
</pre>

<p>查看恢复的镜像</p>

<pre>
[root@wls12c ~]$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             
centos              latest              d83a55af4e75        3 weeks ago         196.7 MB
</pre>

<p>两者的区别：</p>

<p>导出后再导入(exported-imported)的镜像会丢失所有的历史，而保存后再加载（saveed-loaded）的镜像没有丢失历史和层 (layer)。这意味着使用导出后再导入的方式，你将无法回滚到之前的层(layer)，同时，使用保存后再加载的方式持久化整个镜像，就可以做到层回 滚（可以执行docker tag &lt;LAYER ID&gt; &lt;IMAGE NAME&gt;来回滚之前的层）。</p>
