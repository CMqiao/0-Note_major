<h1>15 Executor接口</h1>

<h2>Executor类图</h2>

<p>Executor框架集对线程调度进行了封装，将任务提交和任务执行解耦。</p>

<p>它提供了线程生命周期调度的所有方法，大大简化了线程调度和同步的门槛。</p>

<p>Executor框架集的核心类图如下：</p>

<p><img alt="" src="http://images2015.cnblogs.com/blog/529953/201511/529953-20151109224037806-1652476988.png" /></p>

<h1>16. 执行器服务 ExecutorService</h1>

<p>java.util.concurrent.ExecutorService 接口表示一个异步执行机制，使我们能够在后台执行任务。因此一个 ExecutorService 很类似于一个线程池。实际上，存在于 java.util.concurrent 包里的 ExecutorService 实现就是一个线程池实现。</p>

<h2>ExecutorService 例子</h2>

<p>以下是一个简单的 ExecutorService 例子：</p>

<p><strong>ExecutorService&nbsp;executorService&nbsp;=&nbsp;Executors.newFixedThreadPool(10);&nbsp;&nbsp;</strong><br />
&nbsp;&nbsp;<br />
executorService.execute(new&nbsp;Runnable()&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;run()&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Asynchronous&nbsp;task&quot;);&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
});&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
executorService.shutdown();&nbsp;&nbsp;</p>

<p><br />
首先使用 newFixedThreadPool() 工厂方法创建一个 ExecutorService。这里创建了一个十个线程执行任务的线程池。<br />
然后，将一个 Runnable 接口的匿名实现类传递给 execute() 方法。这将导致 ExecutorService 中的某个线程执行该 Runnable。</p>

<h2>任务委派</h2>

<p>下图说明了一个线程是如何将一个任务委托给一个 ExecutorService 去异步执行的：<br />
<br />
<img alt="executor-service" src="http://img.blog.csdn.net/20150303091835179?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGVmb25kcw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /><br />
<strong>一个线程将一个任务委派给一个 ExecutorService 去异步执行。</strong><br />
一旦该线程将任务委派给 ExecutorService，该线程将继续它自己的执行，独立于该任务的执行。</p>

<h2>ExecutorService 实现</h2>

<p>既然 ExecutorService 是个接口，如果你想用它的话就得去使用它的实现类之一。java.util.concurrent 包提供了 ExecutorService 接口的以下实现类：</p>

<ul>
	<li>ThreadPoolExecutor</li>
	<li>ScheduledThreadPoolExecutor</li>
</ul>

<h2>创建一个 ExecutorService</h2>

<p>ExecutorService 的创建依赖于你使用的具体实现。但是你也可以使用 Executors 工厂类来创建 ExecutorService 实例。以下是几个创建 ExecutorService 实例的例子：</p>

<ol start="1">
	<li>ExecutorService&nbsp;executorService1&nbsp;=&nbsp;Executors.newSingleThreadExecutor();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>ExecutorService&nbsp;executorService2&nbsp;=&nbsp;Executors.newFixedThreadPool(10);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>ExecutorService&nbsp;executorService3&nbsp;=&nbsp;Executors.newScheduledThreadPool(10);&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<h2>ExecutorService 使用</h2>

<p>有几种不同的方式来将任务委托给 ExecutorService 去执行：</p>

<ul>
	<li>execute(Runnable)</li>
	<li>submit(Runnable)</li>
	<li>submit(Callable)</li>
	<li>invokeAny(...)</li>
	<li>invokeAll(...)</li>
</ul>

<p>接下来我们挨个看一下这些方法。</p>

<h2>execute(Runnable)</h2>

<p>execute(Runnable) 方法要求一个 java.lang.Runnable 对象，然后对它进行异步执行。以下是使用 ExecutorService 执行一个 Runnable 的示例：</p>

<ol start="1">
	<li>ExecutorService&nbsp;executorService&nbsp;=&nbsp;Executors.newSingleThreadExecutor();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>executorService.execute(new&nbsp;Runnable()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;run()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Asynchronous&nbsp;task&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>});&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>executorService.shutdown();&nbsp;&nbsp;</li>
</ol>

<p><br />
没有办法得知被执行的 Runnable 的执行结果。如果有需要的话你得使用一个 Callable(以下将做介绍)。</p>

<h2>submit(Runnable)</h2>

<p>submit(Runnable) 方法也要求一个 Runnable 实现类，但它返回一个 Future 对象。这个 Future 对象可以用来检查 Runnable 是否已经执行完毕。<br />
以下是 ExecutorService submit() 示例：</p>

<ol start="1">
	<li>Future&nbsp;future&nbsp;=&nbsp;executorService.submit(new&nbsp;Runnable()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;run()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Asynchronous&nbsp;task&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>});&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>future.get();&nbsp;&nbsp;//returns&nbsp;null&nbsp;if&nbsp;the&nbsp;task&nbsp;has&nbsp;finished&nbsp;correctly.&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<h2>submit(Callable)</h2>

<p>submit(Callable) 方法类似于 submit(Runnable) 方法，除了它所要求的参数类型之外。Callable 实例除了它的 call() 方法能够返回一个结果之外和一个 Runnable 很相像。Runnable.run() 不能够返回一个结果。<br />
Callable 的结果可以通过 submit(Callable) 方法返回的 Future 对象进行获取。以下是一个 ExecutorService Callable 示例：</p>

<p>Future&nbsp;future&nbsp;=&nbsp;executorService.submit(new&nbsp;Callable(){&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Object&nbsp;call()&nbsp;throws&nbsp;Exception&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Asynchronous&nbsp;Callable&quot;);&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;Callable&nbsp;Result&quot;;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
});&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
System.out.println(&quot;future.get()&nbsp;=&nbsp;&quot;&nbsp;+&nbsp;future.get());&nbsp;&nbsp;</p>

<p><br />
以上代码输出：<br />
Asynchronous Callable<br />
future.get() = Callable Result</p>

<h2>invokeAny()</h2>

<p>invokeAny() 方法要求一系列的 Callable 或者其子接口的实例对象。调用这个方法并不会返回一个 Future，但它返回其中一个 Callable 对象的结果。无法保证返回的是哪个 Callable 的结果 - 只能表明其中一个已执行结束。<br />
如果其中一个任务执行结束(或者抛了一个异常)，其他 Callable 将被取消。<br />
以下是示例代码：</p>

<p>ExecutorService&nbsp;executorService&nbsp;=&nbsp;Executors.newSingleThreadExecutor();&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
Set&lt;Callable&lt;String&gt;&gt;&nbsp;callables&nbsp;=&nbsp;new&nbsp;HashSet&lt;Callable&lt;String&gt;&gt;();&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
callables.add(new&nbsp;Callable&lt;String&gt;()&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;call()&nbsp;throws&nbsp;Exception&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;Task&nbsp;1&quot;;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
});&nbsp;&nbsp;<br />
callables.add(new&nbsp;Callable&lt;String&gt;()&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;call()&nbsp;throws&nbsp;Exception&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;Task&nbsp;2&quot;;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
});&nbsp;&nbsp;<br />
callables.add(new&nbsp;Callable&lt;String&gt;()&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;call()&nbsp;throws&nbsp;Exception&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;Task&nbsp;3&quot;;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
});&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
String&nbsp;result&nbsp;=&nbsp;executorService.invokeAny(callables);&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
System.out.println(&quot;result&nbsp;=&nbsp;&quot;&nbsp;+&nbsp;result);&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
executorService.shutdown();&nbsp;&nbsp;</p>

<p><br />
上述代码将会打印出给定 Callable 集合中的一个的执行结果。我自己试着执行了它几次，结果始终在变。有时是 &quot;Task 1&quot;，有时是 &quot;Task 2&quot; 等等。</p>

<h2>invokeAll()</h2>

<p>invokeAll() 方法将调用你在集合中传给 ExecutorService 的所有 Callable 对象。invokeAll() 返回一系列的 Future 对象，通过它们你可以获取每个 Callable 的执行结果。<br />
记住，一个任务可能会由于一个异常而结束，因此它可能没有 &quot;成功&quot;。无法通过一个 Future 对象来告知我们是两种结束中的哪一种。<br />
以下是一个代码示例：</p>

<p>ExecutorService&nbsp;executorService&nbsp;=&nbsp;Executors.newSingleThreadExecutor();&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
Set&lt;Callable&lt;String&gt;&gt;&nbsp;callables&nbsp;=&nbsp;new&nbsp;HashSet&lt;Callable&lt;String&gt;&gt;();&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
callables.add(new&nbsp;Callable&lt;String&gt;()&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;call()&nbsp;throws&nbsp;Exception&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;Task&nbsp;1&quot;;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
});&nbsp;&nbsp;<br />
callables.add(new&nbsp;Callable&lt;String&gt;()&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;call()&nbsp;throws&nbsp;Exception&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;Task&nbsp;2&quot;;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
});&nbsp;&nbsp;<br />
callables.add(new&nbsp;Callable&lt;String&gt;()&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;call()&nbsp;throws&nbsp;Exception&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;Task&nbsp;3&quot;;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
});&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
List&lt;Future&lt;String&gt;&gt;&nbsp;futures&nbsp;=&nbsp;executorService.invokeAll(callables);&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
for(Future&lt;String&gt;&nbsp;future&nbsp;:&nbsp;futures){&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;future.get&nbsp;=&nbsp;&quot;&nbsp;+&nbsp;future.get());&nbsp;&nbsp;<br />
}&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
executorService.shutdown();&nbsp;&nbsp;</p>

<p>&nbsp;</p>

<h2>ExecutorService 关闭</h2>

<p>使用完 ExecutorService 之后你应该将其关闭，以使其中的线程不再运行。<br />
比如，如果你的应用是通过一个 main() 方法启动的，之后 main 方法退出了你的应用，如果你的应用有一个活动的 ExexutorService 它将还会保持运行。ExecutorService 里的活动线程阻止了 JVM 的关闭。<br />
要终止 ExecutorService 里的线程你需要调用 ExecutorService 的 shutdown() 方法。ExecutorService 并不会立即关闭，但它将不再接受新的任务，而且一旦所有线程都完成了当前任务的时候，ExecutorService 将会关闭。在 shutdown() 被调用之前所有提交给 ExecutorService 的任务都被执行。</p>

<p>如果你想要立即关闭 ExecutorService，你可以调用 shutdownNow() 方法。这样会立即尝试停止所有执行中的任务，并忽略掉那些已提交但尚未开始处理的任务。无法担保执行任务的正确执行。可能它们被停止了，也可能已经执行结束。</p>

<h1>17. &nbsp;定时执行者服务 ScheduledExecutorService (ExecutorService子接口)</h1>

<p><u><strong>ScheduledExecutorService&nbsp;</strong>scheduledExecutorService&nbsp;=&nbsp;<strong>Executors.newScheduledThreadPool(5)</strong>;</u></p>

<p><u><strong>ScheduledFuture&nbsp;</strong>scheduledFuture&nbsp;=&nbsp;&nbsp;&nbsp;scheduledExecutorService.<strong>schedule(Callable,int,seconds);</strong></u></p>

<p>java.util.concurrent.ScheduledExecutorService 是一个 ExecutorService， 它能够将任务延后执行，或者间隔固定时间多次执行。 任务由一个工作者线程异步执行，而不是由提交任务给 ScheduledExecutorService 的那个线程执行。</p>

<h2>ScheduledExecutorService 例子</h2>

<p>以下是一个简单的 ScheduledExecutorService 示例：</p>

<p>ScheduledExecutorService&nbsp;scheduledExecutorService&nbsp;=&nbsp;Executors.newScheduledThreadPool(5);<br />
ScheduledFuture&nbsp;scheduledFuture&nbsp;=&nbsp;&nbsp;scheduledExecutorService.schedule(<br />
new&nbsp;Callable()&nbsp;{&nbsp; public&nbsp;Object&nbsp;call()&nbsp;throws&nbsp;Exception&nbsp;{&nbsp;System.out.println(&quot;Executed!&quot;);&nbsp;&nbsp;&nbsp;return&nbsp;&quot;Called!&quot;;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;},&nbsp;&nbsp;<br />
5,&nbsp;&nbsp;<br />
TimeUnit.SECONDS);&nbsp;&nbsp;</p>

<p>首先一个内置 5 个线程的 ScheduledExecutorService 被创建。之后一个 Callable 接口的匿名类示例被创建然后传递给 schedule() 方法。后边的俩参数定义了 Callable 将在 5 秒钟之后被执行。</p>

<h2>ScheduledExecutorService 实现</h2>

<p>既然 ScheduledExecutorService 是一个接口，你要用它的话就得使用 java.util.concurrent 包里对它的某个实现类。ScheduledExecutorService 具有以下实现类：</p>

<ul>
	<li>ScheduledThreadPoolExecutor</li>
</ul>

<h2>创建一个 ScheduledExecutorService</h2>

<p>如何创建一个 ScheduledExecutorService 取决于你采用的它的实现类。但是你也可以使用 Executors 工厂类来创建一个 ScheduledExecutorService 实例。比如：</p>

<p>ScheduledExecutorService&nbsp;scheduledExecutorService&nbsp;=&nbsp;&nbsp;Executors.newScheduledThreadPool(5);&nbsp;&nbsp;</p>

<p>&nbsp;</p>

<h2>ScheduledExecutorService 使用</h2>

<p>一旦你创建了一个 ScheduledExecutorService，你可以通过调用它的以下方法：</p>

<ul>
	<li>schedule (Callable task, long delay, TimeUnit timeunit)</li>
	<li>schedule (Runnable task, long delay, TimeUnit timeunit)</li>
	<li>scheduleAtFixedRate (Runnable, long initialDelay, long period, TimeUnit timeunit)</li>
	<li>scheduleWithFixedDelay (Runnable, long initialDelay, long period, TimeUnit timeunit)</li>
</ul>

<p>下面我们就简单看一下这些方法。</p>

<h2>schedule (Callable task, long delay, TimeUnit timeunit)</h2>

<p>这个方法计划指定的 Callable 在给定的延迟之后执行。<br />
这个方法返回一个 ScheduledFuture，通过它你可以在它被执行之前对它进行取消，或者在它执行之后获取结果。<br />
以下是一个示例：</p>

<p>ScheduledExecutorService&nbsp;scheduledExecutorService&nbsp;=&nbsp;Executors.newScheduledThreadPool(5);&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
ScheduledFuture&nbsp;scheduledFuture&nbsp;=&nbsp;scheduledExecutorService.schedule(<br />
new&nbsp;Callable()&nbsp;{public&nbsp;Object&nbsp;call()&nbsp;throws&nbsp;Exception&nbsp;{&nbsp;System.out.println(&quot;Executed!&quot;);&nbsp;return&nbsp;&quot;Called!&quot;;&nbsp;}&nbsp;&nbsp;},&nbsp;&nbsp;<br />
5,&nbsp;&nbsp;<br />
TimeUnit.SECONDS);&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
System.out.println(&quot;result&nbsp;=&nbsp;&quot;&nbsp;+&nbsp;scheduledFuture.get());&nbsp;&nbsp;<br />
scheduledExecutorService.shutdown();&nbsp;&nbsp;</p>

<p><br />
示例输出结果：<br />
Executed!<br />
result = Called!</p>

<h2>schedule (Runnable task, long delay, TimeUnit timeunit)</h2>

<p>除了 Runnable 无法返回一个结果之外，这一方法工作起来就像以一个 Callable 作为一个参数的那个版本的方法一样，因此 ScheduledFuture.get() 在任务执行结束之后返回 null。</p>

<h2>scheduleAtFixedRate (Runnable, long initialDelay, long period, TimeUnit timeunit)</h2>

<p>这一方法规划一个任务将被定期执行。该任务将会在首个 initialDelay 之后得到执行，然后每个 period 时间之后重复执行。<br />
如果给定任务的执行抛出了异常，该任务将不再执行。如果没有任何异常的话，这个任务将会持续循环执行到 ScheduledExecutorService 被关闭。<br />
如果一个任务占用了比计划的时间间隔更长的时候，下一次执行将在当前执行结束执行才开始。计划任务在同一时间不会有多个线程同时执行。</p>

<h2>scheduleWithFixedDelay (Runnable, long initialDelay, long period, TimeUnit timeunit)</h2>

<p>除了 period 有不同的解释之外这个方法和 scheduleAtFixedRate() 非常像。<br />
scheduleAtFixedRate() 方法中，period 被解释为前一个执行的开始和下一个执行的开始之间的间隔时间。<br />
而在本方法中，period 则被解释为前一个执行的结束和下一个执行的结束之间的间隔。因此这个延迟是执行结束之间的间隔，而不是执行开始之间的间隔。</p>

<h2>ScheduledExecutorService 关闭</h2>

<p>正如 ExecutorService，在你使用结束之后你需要把 ScheduledExecutorService 关闭掉。否则他将导致 JVM 继续运行，即使所有其他线程已经全被关闭。</p>

<p>你可以使用从 ExecutorService 接口继承来的 shutdown() 或 shutdownNow() 方法将 ScheduledExecutorService 关闭。参见 ExecutorService 关闭部分以获取更多信息。</p>

<p>&nbsp;</p>

<h1>18. 线程池执行者 ThreadPoolExecutor</h1>

<p>ThreadPoolExecutor 是ExecutorService的实现类</p>

<p>java.util.concurrent.ThreadPoolExecutor 是 ExecutorService 接口的一个实现。ThreadPoolExecutor 使用其内部池中的线程执行给定任务(Callable 或者 Runnable)。<br />
ThreadPoolExecutor 包含的线程池能够包含不同数量的线程。池中线程的数量由以下变量决定：</p>

<ul>
	<li>corePoolSize</li>
	<li>maximumPoolSize</li>
</ul>

<p>当一个任务委托给线程池时，如果池中线程数量低于 corePoolSize，一个新的线程将被创建，即使池中可能尚有空闲线程。<br />
如果内部任务队列已满，而且有至少 corePoolSize 正在运行，但是运行线程的数量低于 maximumPoolSize，一个新的线程将被创建去执行该任务。<br />
ThreadPoolExecutor 图解：<br />
<br />
<img alt="thread-pool-executor" src="http://img.blog.csdn.net/20150303092125396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGVmb25kcw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /><br />
<strong>一个 ThreadPoolExecutor</strong></p>

<h2>创建一个 ThreadPoolExecutor</h2>

<p>ThreadPoolExecutor 有若干个可用构造子。比如：</p>

<p>int&nbsp;&nbsp;corePoolSize&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;5;&nbsp;&nbsp;int&nbsp;&nbsp;maxPoolSize&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;10;&nbsp;&nbsp;long&nbsp;keepAliveTime&nbsp;=&nbsp;5000;&nbsp;&nbsp;</p>

<p>ExecutorService&nbsp;threadPoolExecutor&nbsp;=<strong>new&nbsp;ThreadPoolExecutor(corePoolSize,&nbsp;&nbsp;maxPoolSize,&nbsp;&nbsp;keepAliveTime,&nbsp;&nbsp;TimeUnit.MILLISECONDS,&nbsp;&nbsp;new&nbsp;LinkedBlockingQueue&lt;Runnable&gt;());&nbsp;&nbsp;</strong></p>

<p>但是，除非你确实需要显式为 ThreadPoolExecutor 定义所有参数，使用 java.util.concurrent.Executors 类中的工厂方法之一会更加方便，正如 &nbsp;<a href="http://blog.csdn.net/defonds/article/details/44021605#t41" target="_blank">ExecutorService</a>&nbsp;小节所述。&nbsp;</p>

<p>&nbsp;</p>

<h1>19. 线程池执行者 ScheduledThreadPoolExecutor</h1>

<p>ScheduledThreadPoolExecutor是ThreadPoolExecutor的子类；</p>

<p><a href="http://blog.csdn.net/java/util/concurrent/ThreadPoolExecutor.html" target="_blank" title="java.util.concurrent 中的类"><code>ThreadPoolExecutor</code></a>，它可另行安排在给定的延迟后运行命令，或者定期执行命令。需要多个辅助线程时，或者要求&nbsp;<a href="http://blog.csdn.net/java/util/concurrent/ThreadPoolExecutor.html" target="_blank" title="java.util.concurrent 中的类"><code>ThreadPoolExecutor</code></a>&nbsp;具有额外的灵活性或功能时，此类要优于&nbsp;<a href="http://blog.csdn.net/java/util/Timer.html" target="_blank" title="java.util 中的类"><code>Timer</code></a>。</p>

<p>一旦启用已延迟的任务就执行它，但是有关何时启用，启用后何时执行则没有任何实时保证。按照提交的先进先出 (FIFO) 顺序来启用那些被安排在同一执行时间的任务。</p>

<p>平时我们在执行一个定时任务时，会采用Time,和TimeTask来组合处理；</p>

<h2>但是Timer和TimerTask存在一些缺陷：</h2>

<p>1：Timer只创建了一个线程。当你的任务执行的时间超过设置的延时时间将会产生一些问题。</p>

<p>2：Timer创建的线程没有处理异常，因此一旦抛出非受检异常，该线程会立即终止。</p>

<p>JDK 5.0以后推荐使用ScheduledThreadPoolExecutor。该类属于Executor Framework，它除了能处理异常外，还可以创建多个线程解决上面的问题。</p>

<h2>以下为<a href="http://lib.csdn.net/base/softwaretest" target="_blank" title="软件测试知识库">测试</a>代码：</h2>

<p>public&nbsp;class&nbsp;TaskTest&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;static&nbsp;ScheduledThreadPoolExecutor&nbsp;stpe&nbsp;=&nbsp;null;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;static&nbsp;int&nbsp;index;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;args&nbsp;the&nbsp;command&nbsp;line&nbsp;arguments&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;code&nbsp;application&nbsp;logic&nbsp;here&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//构造一个ScheduledThreadPoolExecutor对象，并且设置它的容量为5个&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stpe&nbsp;=&nbsp;new&nbsp;<strong>ScheduledThreadPoolExecutor</strong>(5);&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyTask&nbsp;task&nbsp;=&nbsp;new&nbsp;MyTask();&nbsp;&nbsp;<br />
//隔2秒后开始执行任务，并且在上一次任务开始后隔一秒再执行一次；&nbsp;&nbsp;<br />
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stpe.scheduleWithFixedDelay(task,&nbsp;2,&nbsp;1,&nbsp;TimeUnit.SECONDS);&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//隔6秒后执行一次，但只会执行一次。&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stpe.schedule(task,&nbsp;6,&nbsp;TimeUnit.SECONDS);&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;String&nbsp;getTimes()&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SimpleDateFormat&nbsp;format&nbsp;=&nbsp;new&nbsp;SimpleDateFormat(&quot;yyyy-MM-dd&nbsp;HH:mm:ss&nbsp;E&quot;);&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Date&nbsp;date&nbsp;=&nbsp;new&nbsp;Date();&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;date.setTime(System.currentTimeMillis());&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;format.format(date);&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;class&nbsp;MyTask&nbsp;implements&nbsp;Runnable&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;run()&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index++;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;2=&nbsp;&quot;&nbsp;+&nbsp;getTimes()+&quot;&nbsp;&quot;&nbsp;&nbsp;+index);&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(index&nbsp;&gt;=10){&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stpe.shutdown();&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(stpe.isShutdown()){&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;停止了？？？？&quot;);&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
}&nbsp;&nbsp;</p>

<p>&nbsp;</p>

<h1>20. 使用 ForkJoinPool 进行分叉和合并</h1>

<p>ForkJoinPool 在 Java 7 中被引入。它和&nbsp;<a href="http://blog.csdn.net/defonds/article/details/44021605#t41" target="_blank">ExecutorService</a>&nbsp;很相似，除了一点不同。ForkJoinPool 让我们可以很方便地把任务分裂成几个更小的任务，这些分裂出来的任务也将会提交给 ForkJoinPool。任务可以继续分割成更小的子任务，只要它还能分割。可能听起来有些抽象，因此本节中我们将会解释 ForkJoinPool 是如何工作的，还有任务分割是如何进行的。</p>

<h2>分叉和合并解释</h2>

<p>在我们开始看 ForkJoinPool 之前我们先来简要解释一下分叉和合并的原理。<br />
分叉和合并原理包含两个递归进行的步骤。两个步骤分别是分叉步骤和合并步骤。</p>

<h2>分叉</h2>

<p>一个使用了分叉和合并原理的任务可以将自己分叉(分割)为更小的子任务，这些子任务可以被并发执行。如下图所示：<br />
<img alt="java-fork-and-join-1" src="http://img.blog.csdn.net/20150303092525410?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGVmb25kcw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /><br />
通过把自己分割成多个子任务，每个子任务可以由不同的 CPU 并行执行，或者被同一个 CPU 上的不同线程执行。<br />
只有当给的任务过大，把它分割成几个子任务才有意义。把任务分割成子任务有一定开销，因此对于小型任务，这个分割的消耗可能比每个子任务并发执行的消耗还要大。<br />
什么时候把一个任务分割成子任务是有意义的，这个界限也称作一个阀值。这要看每个任务对有意义阀值的决定。很大程度上取决于它要做的工作的种类。</p>

<h2>合并</h2>

<p>当一个任务将自己分割成若干子任务之后，该任务将进入等待所有子任务的结束之中。<br />
一旦子任务执行结束，该任务可以把所有结果合并到同一个结果。图示如下：<br />
<img alt="java-fork-and-join-2" src="http://img.blog.csdn.net/20150303092548236?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGVmb25kcw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /><br />
当然，并非所有类型的任务都会返回一个结果。如果这个任务并不返回一个结果，它只需等待所有子任务执行完毕。也就不需要结果的合并啦。</p>

<h2>ForkJoinPool</h2>

<p>ForkJoinPool 是一个特殊的线程池，它的设计是为了更好的配合 分叉-和-合并 任务分割的工作。ForkJoinPool 也在 java.util.concurrent 包中，其完整类名为 java.util.concurrent.ForkJoinPool。</p>

<h2>创建一个 ForkJoinPool</h2>

<p>你可以通过其构造子创建一个 ForkJoinPool。作为传递给 ForkJoinPool 构造子的一个参数，你可以定义你期望的并行级别。并行级别表示你想要传递给 ForkJoinPool 的任务所需的线程或 CPU 数量。以下是一个 ForkJoinPool 示例：</p>

<ol start="1">
	<li>ForkJoinPool&nbsp;forkJoinPool&nbsp;=&nbsp;new&nbsp;ForkJoinPool(4);&nbsp;&nbsp;</li>
</ol>

<p><br />
这个示例创建了一个并行级别为 4 的 ForkJoinPool。</p>

<h2>提交任务到 ForkJoinPool</h2>

<p>就像提交任务到 ExecutorService 那样，把任务提交到 ForkJoinPool。你可以提交两种类型的任务。一种是没有任何返回值的(一个 &quot;行动&quot;)，另一种是有返回值的(一个&quot;任务&quot;)。这两种类型分别由 RecursiveAction 和 RecursiveTask 表示。接下来介绍如何使用这两种类型的任务，以及如何对它们进行提交。</p>

<h2>RecursiveAction</h2>

<p>RecursiveAction 是一种没有任何返回值的任务。它只是做一些工作，比如写数据到磁盘，然后就退出了。<br />
一个 RecursiveAction 可以把自己的工作分割成更小的几块，这样它们可以由独立的线程或者 CPU 执行。<br />
你可以通过继承来实现一个 RecursiveAction。示例如下：</p>

<p>import&nbsp;java.util.ArrayList;&nbsp;&nbsp;<br />
import&nbsp;java.util.List;&nbsp;&nbsp;<br />
import&nbsp;java.util.concurrent.RecursiveAction;&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
public&nbsp;class&nbsp;MyRecursiveAction&nbsp;extends&nbsp;RecursiveAction&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;long&nbsp;workLoad&nbsp;=&nbsp;0;&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;MyRecursiveAction(long&nbsp;workLoad)&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.workLoad&nbsp;=&nbsp;workLoad;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;void&nbsp;compute()&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//if&nbsp;work&nbsp;is&nbsp;above&nbsp;threshold,&nbsp;break&nbsp;tasks&nbsp;up&nbsp;into&nbsp;smaller&nbsp;tasks&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(this.workLoad&nbsp;&gt;&nbsp;16)&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Splitting&nbsp;workLoad&nbsp;:&nbsp;&quot;&nbsp;+&nbsp;this.workLoad);&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;MyRecursiveAction&gt;&nbsp;subtasks&nbsp;=&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;ArrayList&lt;MyRecursiveAction&gt;();&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subtasks.addAll(createSubtasks());&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(RecursiveAction&nbsp;subtask&nbsp;:&nbsp;subtasks){&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subtask.fork();&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Doing&nbsp;workLoad&nbsp;myself:&nbsp;&quot;&nbsp;+&nbsp;this.workLoad);&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;List&lt;MyRecursiveAction&gt;&nbsp;createSubtasks()&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;MyRecursiveAction&gt;&nbsp;subtasks&nbsp;=&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;ArrayList&lt;MyRecursiveAction&gt;();&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyRecursiveAction&nbsp;subtask1&nbsp;=&nbsp;new&nbsp;MyRecursiveAction(this.workLoad&nbsp;/&nbsp;2);&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyRecursiveAction&nbsp;subtask2&nbsp;=&nbsp;new&nbsp;MyRecursiveAction(this.workLoad&nbsp;/&nbsp;2);&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subtasks.add(subtask1);&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subtasks.add(subtask2);&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;subtasks;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
}&nbsp;&nbsp;</p>

<p><br />
例子很简单。MyRecursiveAction 将一个虚构的 workLoad 作为参数传给自己的构造子。如果 workLoad 高于一个特定阀值，该工作将被分割为几个子工作，子工作继续分割。如果 workLoad 低于特定阀值，该工作将由 MyRecursiveAction 自己执行。<br />
你可以这样规划一个 MyRecursiveAction &nbsp;的执行：</p>

<p>MyRecursiveAction&nbsp;myRecursiveAction&nbsp;=&nbsp;new&nbsp;MyRecursiveAction(24);&nbsp;&nbsp;<br />
forkJoinPool.invoke(myRecursiveAction);&nbsp;&nbsp;</p>

<h2>RecursiveTask</h2>

<p>RecursiveTask 是一种会返回结果的任务。它可以将自己的工作分割为若干更小任务，并将这些子任务的执行结果合并到一个集体结果。可以有几个水平的分割和合并。以下是一个 RecursiveTask 示例：</p>

<p>import&nbsp;java.util.ArrayList;&nbsp;&nbsp;<br />
import&nbsp;java.util.List;&nbsp;&nbsp;<br />
import&nbsp;java.util.concurrent.RecursiveTask;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
public&nbsp;class&nbsp;MyRecursiveTask&nbsp;extends&nbsp;RecursiveTask&lt;Long&gt;&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;long&nbsp;workLoad&nbsp;=&nbsp;0;&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;MyRecursiveTask(long&nbsp;workLoad)&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.workLoad&nbsp;=&nbsp;workLoad;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;Long&nbsp;compute()&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//if&nbsp;work&nbsp;is&nbsp;above&nbsp;threshold,&nbsp;break&nbsp;tasks&nbsp;up&nbsp;into&nbsp;smaller&nbsp;tasks&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(this.workLoad&nbsp;&gt;&nbsp;16)&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Splitting&nbsp;workLoad&nbsp;:&nbsp;&quot;&nbsp;+&nbsp;this.workLoad);&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;MyRecursiveTask&gt;&nbsp;subtasks&nbsp;=&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;ArrayList&lt;MyRecursiveTask&gt;();&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subtasks.addAll(createSubtasks());&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(MyRecursiveTask&nbsp;subtask&nbsp;:&nbsp;subtasks){&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subtask.fork();&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;long&nbsp;result&nbsp;=&nbsp;0;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(MyRecursiveTask&nbsp;subtask&nbsp;:&nbsp;subtasks)&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;+=&nbsp;subtask.join();&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result;&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Doing&nbsp;workLoad&nbsp;myself:&nbsp;&quot;&nbsp;+&nbsp;this.workLoad);&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;workLoad&nbsp;*&nbsp;3;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;List&lt;MyRecursiveTask&gt;&nbsp;createSubtasks()&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;MyRecursiveTask&gt;&nbsp;subtasks&nbsp;=&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;ArrayList&lt;MyRecursiveTask&gt;();&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyRecursiveTask&nbsp;subtask1&nbsp;=&nbsp;new&nbsp;MyRecursiveTask(this.workLoad&nbsp;/&nbsp;2);&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyRecursiveTask&nbsp;subtask2&nbsp;=&nbsp;new&nbsp;MyRecursiveTask(this.workLoad&nbsp;/&nbsp;2);&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subtasks.add(subtask1);&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subtasks.add(subtask2);&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;subtasks;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
}&nbsp;&nbsp;</p>

<p><br />
除了有一个结果返回之外，这个示例和 RecursiveAction &nbsp;的例子很像。MyRecursiveTask 类继承自 RecursiveTask&lt;Long&gt;，这也就意味着它将返回一个 Long 类型的结果。<br />
MyRecursiveTask 示例也会将工作分割为子任务，并通过 fork() 方法对这些子任务计划执行。<br />
此外，本示例还通过调用每个子任务的 join() 方法收集它们返回的结果。子任务的结果随后被合并到一个更大的结果，并最终将其返回。对于不同级别的递归，这种子任务的结果合并可能会发生递归。<br />
你可以这样规划一个 RecursiveTask：</p>

<ol start="1">
	<li>MyRecursiveTask&nbsp;myRecursiveTask&nbsp;=&nbsp;new&nbsp;MyRecursiveTask(128);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>long&nbsp;mergedResult&nbsp;=&nbsp;forkJoinPool.invoke(myRecursiveTask);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>System.out.println(&quot;mergedResult&nbsp;=&nbsp;&quot;&nbsp;+&nbsp;mergedResult);&nbsp;&nbsp;&nbsp;</li>
</ol>

<p><br />
注意是如何通过 ForkJoinPool.invoke() 方法的调用来获取最终执行结果的。</p>

<h2>ForkJoinPool 评论</h2>

<p>貌似并非每个人都对 Java 7 里的 ForkJoinPool 满意：《<a href="http://coopsoft.com/ar/CalamityArticle.html" target="_blank">一个 Java 分叉-合并 带来的灾祸</a>》。</p>

<p>在你计划在自己的项目里使用 ForkJoinPool 之前最好读一下该篇文章。</p>
