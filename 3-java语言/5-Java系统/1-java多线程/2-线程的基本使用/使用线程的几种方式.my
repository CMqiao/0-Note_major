<h1>JAVA多线程实现的四种方式</h1>

<p><a href="http://lib.csdn.net/base/javaee" target="_blank" title="Java EE知识库">Java</a>多线程实现方式主要有四种：继承Thread类、实现Runnable接口、实现Callable接口通过FutureTask包装器来创建Thread线程、使用ExecutorService、Callable、Future实现有返回结果的多线程。</p>

<p>其中前两种方式线程执行完后都没有返回值，后两种是带返回值的。</p>

<h2><strong>1、继承Thread类<strong>创建线程</strong></strong></h2>

<p>Thread类本质上是实现了Runnable接口的一个实例，代表一个线程的实例。启动线程的唯一方法就是通过Thread类的start()实例方法。start()方法是一个native方法，它将启动一个新线程，并执行run()方法。这种方式实现多线程很简单，通过自己的类直接extend Thread，并复写run()方法，就可以启动新线程并执行自己定义的run()方法。例如：</p>

<pre>
public class MyThread extends Thread {  
　　public void run() {  
　　 System.out.println(&quot;MyThread.run()&quot;);  
　　}  
}  
 
MyThread myThread1 = new MyThread();  
MyThread myThread2 = new MyThread();  
myThread1.start();  
myThread2.start();  
</pre>

<h2><strong>2、实现Runnable接口创建线程</strong></h2>

<p>如果自己的类已经extends另一个类，就无法直接extends Thread，此时，可以实现一个Runnable接口，如下：</p>

<p>为了启动MyThread，需要首先实例化一个Thread，并传入自己的MyThread实例：</p>

<p>事实上，当传入一个Runnable target参数给Thread后，Thread的run()方法就会调用target.run()，参考JDK源代码：</p>

<h2><strong>3、实现Callable接口通过FutureTask包装器来创建Thread线程</strong></h2>

<p><strong>说到底还是new Thread。Thread thread = new Thread(new FutureTask(new CallableImple));</strong></p>

<p>Callable接口（也只有一个方法）定义如下： &nbsp;&nbsp;</p>

<pre>
public interface Callable&lt;V&gt; { V call（） throws Exception;   } 
</pre>

<pre>
public class SomeCallable&lt;V&gt; extends OtherClass implements Callable&lt;V&gt; {
   <strong> @Override
    public V call() </strong>throws Exception {
        // TODO Auto-generated method stub
        return null;
    }
}
</pre>

<pre>
<strong>Callable&lt;V&gt; oneCallable = new SomeCallable&lt;V&gt;();   </strong>
//由Callable&lt;Integer&gt;创建一个FutureTask&lt;Integer&gt;对象：   
<strong>FutureTask&lt;V&gt; oneTask = new FutureTask&lt;V&gt;(oneCallable);   </strong>
//注释：FutureTask&lt;Integer&gt;是一个包装器，它通过接受Callable&lt;Integer&gt;来创建，它同时实现了Future和Runnable接口。 
  //由FutureTask&lt;Integer&gt;创建一个Thread对象：   
<strong>Thread oneThread = new Thread(oneTask);   </strong>
oneThread.start();   
//至此，一个线程就创建完成了。
</pre>

<h2><strong>4、使用ExecutorService、Callable、Future实现有返回结果的线程</strong></h2>

<p><strong>ExecutorService pool = Executors.newFixedThreadPool(taskSize); </strong></p>

<p><strong>Future result = pool.submit(new CallableImple);</strong></p>

<p>ExecutorService、Callable、Future三个接口实际上<strong>都是属于Executor框架</strong>。返<strong>回结果的线程是在JDK1.5中引入的新特征，有了这种特征就不需要再为了得到返回值而大费周折了。而且自己实现了也可能漏洞百出</strong>。</p>

<p><strong>可返回值的任务必须实现Callable接口。类似的，无返回值的任务必须实现Runnable接口。</strong></p>

<p><strong>执行Callable任务后，可以获取一个Future的对象，在该对象上调用get就可以获取到Callable任务返回的Object了。</strong></p>

<p>注意：<strong>get方法是阻塞的，即：线程无返回结果，get方法会一直等待。</strong></p>

<p>再结合线程池接口ExecutorService就可以实现传说中有返回结果的多线程了。</p>

<p>下面提供了一个完整的有返回结果的多线程测试例子，在JDK1.5下验证过没问题可以直接使用。代码如下：</p>

<pre>
import java.util.concurrent.*;  
import java.util.Date;  
import java.util.List;  
import java.util.ArrayList;  
  
/** 
* 有返回值的线程 
*/  
@SuppressWarnings(&quot;unchecked&quot;)  
public class Test {  
public static void main(String[] args) throws ExecutionException,  
    InterruptedException {  
   System.out.println(&quot;----程序开始运行----&quot;);  
   Date date1 = new Date();  
  
   int taskSize = 5;  
   // 创建一个线程池  
   ExecutorService pool = Executors.newFixedThreadPool(taskSize);  
   // 创建多个有返回值的任务  
   List&lt;Future&gt; list = new ArrayList&lt;Future&gt;();  
   for (int i = 0; i &lt; taskSize; i++) {  
    Callable c = new MyCallable(i + &quot; &quot;);  
    // 执行任务并获取Future对象  
    Future f = pool.submit(c);  
    // System.out.println(&quot;&gt;&gt;&gt;&quot; + f.get().toString());  
    list.add(f);  //list存放的是返回的结构，Future类型的集合。
   }  
   // 关闭线程池  
   pool.shutdown();  
  
   // 获取所有并发任务的运行结果  
   for (Future f : list) {  
    // 从Future对象上获取任务的返回值，并输出到控制台  
    System.out.println(&quot;&gt;&gt;&gt;&quot; + f.get().toString());  
   }  
  
   Date date2 = new Date();  
   System.out.println(&quot;----程序结束运行----，程序运行时间【&quot;  
     + (date2.getTime() - date1.getTime()) + &quot;毫秒】&quot;);  
}  
}  
  
class MyCallable implements Callable&lt;Object&gt; {  
private String taskNum;  
  
MyCallable(String taskNum) {  
   this.taskNum = taskNum;  
}  
  
public Object call() throws Exception {  
   System.out.println(&quot;&gt;&gt;&gt;&quot; + taskNum + &quot;任务启动&quot;);  
   Date dateTmp1 = new Date();  
   Thread.sleep(1000);  
   Date dateTmp2 = new Date();  
   long time = dateTmp2.getTime() - dateTmp1.getTime();  
   System.out.println(&quot;&gt;&gt;&gt;&quot; + taskNum + &quot;任务终止&quot;);  
   return taskNum + &quot;任务返回运行结果,当前任务时间【&quot; + time + &quot;毫秒】&quot;;  
}  
}  
</pre>

<p>&nbsp;</p>

<p>代码说明：<br />
上述代码中Executors类，提供了一系列工厂方法用于创建线程池，返回的线程池都实现了ExecutorService接口。<br />
public static ExecutorService newFixedThreadPool(int nThreads)&nbsp;<br />
创建固定数目线程的线程池。<br />
public static ExecutorService newCachedThreadPool()&nbsp;<br />
创建一个可缓存的线程池，调用execute 将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。<br />
public static ExecutorService newSingleThreadExecutor()&nbsp;<br />
创建一个单线程化的Executor。<br />
public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)&nbsp;<br />
创建一个支持定时及周期性的任务执行的线程池，多数情况下可用来替代Timer类。<br />
ExecutoreService提供了submit()方法，传递一个Callable，或Runnable，返回Future。如果Executor后台线程池还没有完成Callable的计算，这调用返回Future对象的get()方法，会阻塞直到计算完成。</p>

<p>软件-注重思想、逻辑</p>
