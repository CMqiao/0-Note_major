<h1><strong>并发集合类概要</strong></h1>

<h3><a href="http://www.cnblogs.com/skywang12345/p/3498454.html#a1">Java集合包</a><br />
<a href="http://www.cnblogs.com/skywang12345/p/3498454.html#a2">JUC中的集合类</a></h3>

<p>转载请注明出处：<a href="http://www.cnblogs.com/skywang12345/p/3498454.html">http://www.cnblogs.com/skywang12345/p/3498454.html</a></p>

<h2><strong>Java集合包</strong></h2>

<p>在&ldquo;<a href="http://www.cnblogs.com/skywang12345/p/3308498.html">Java 集合系列01之 总体框架</a>&rdquo;中，介绍java集合的架构。主体内容包括Collection集合和Map类；而Collection集合又可以划分为List(队列)和Set(集合)。</p>

<h3><strong>1. List的实现类主要有: LinkedList, ArrayList, Vector, Stack。</strong></h3>

<p>(01)&nbsp;<a href="http://www.cnblogs.com/skywang12345/p/3308807.html">LinkedList</a>是双向链表实现的双端队列；它不是线程安全的，只适用于单线程。<br />
(02)&nbsp;<a href="http://www.cnblogs.com/skywang12345/p/3308556.html">ArrayList</a>是数组实现的队列，它是一个动态数组；它也不是线程安全的，只适用于单线程。<br />
(03)&nbsp;<a href="http://www.cnblogs.com/skywang12345/p/3308833.html">Vector</a>是数组实现的矢量队列，它也一个动态数组；不过和ArrayList不同的是，Vector是线程安全的，它支持并发。<br />
(04)&nbsp;<a href="http://www.cnblogs.com/skywang12345/p/3308852.html">Stack</a>是Vector实现的栈；和Vector一样，它也是线程安全的。</p>

<p>&nbsp;</p>

<h3><strong>2. Set的实现类主要有: HastSet和TreeSet。</strong></h3>

<p>(01)&nbsp;<a href="http://www.cnblogs.com/skywang12345/p/3311252.html">HashSet</a>是一个没有重复元素的集合，它通过HashMap实现的；HashSet不是线程安全的，只适用于单线程。<br />
(02)&nbsp;<a href="http://www.cnblogs.com/skywang12345/p/3311268.html">TreeSet</a>也是一个没有重复元素的集合，不过和HashSet不同的是，TreeSet中的元素是有序的；它是通过TreeMap实现的；TreeSet也不是线程安全的，只适用于单线程。</p>

<p>&nbsp;</p>

<h3><strong>3. Map的实现类主要有: HashMap，WeakHashMap, Hashtable和TreeMap。</strong></h3>

<p>(01)&nbsp;<a href="http://www.cnblogs.com/skywang12345/p/3310835.html">HashMap</a>是存储&ldquo;键-值对&rdquo;的哈希表；它不是线程安全的，只适用于单线程。<br />
(02)&nbsp;<a href="http://www.cnblogs.com/skywang12345/p/3311092.html">WeakHashMap</a>是也是哈希表；和HashMap不同的是，HashMap的&ldquo;键&rdquo;是强引用类型，而WeakHashMap的&ldquo;键&rdquo;是弱引用类型，也就是说当WeakHashMap 中的某个键不再正常使用时，会被从WeakHashMap中被自动移除。WeakHashMap也不是线程安全的，只适用于单线程。<br />
(03)&nbsp;<a href="http://www.cnblogs.com/skywang12345/p/3310887.html">Hashtable</a>也是哈希表；和HashMap不同的是，Hashtable是线程安全的，支持并发。<br />
(04)&nbsp;<a href="http://www.cnblogs.com/skywang12345/p/3310928.html">TreeMap</a>也是哈希表，不过TreeMap中的&ldquo;键-值对&rdquo;是有序的，它是通过R-B Tree(红黑树)实现的；TreeMap不是线程安全的，只适用于单线程。<br />
更多关于这些集合类的介绍，可以参考&ldquo;Java 集合系列目录(Category)&rdquo;。</p>

<p>&nbsp;</p>

<p>&nbsp; &nbsp; 为了方便，我们将前面介绍集合类统称为&rdquo;<strong>java集合包</strong>&ldquo;。java集合包大多是&ldquo;非线程安全的&rdquo;，虽然可以通过Collections工具类中的方法获取java集合包对应的同步类，但是这些同步类的并发效率并不是很高。为了更好的支持高并发任务，并发大师Doug Lea在JUC(java.util.concurrent)包中添加了java集合包中单线程类的对应的支持高并发的类。<em>例如，ArrayList对应的高并发类是CopyOnWriteArrayList，HashMap对应的高并发类是ConcurrentHashMap，等等。</em></p>

<p>&nbsp; &nbsp; JUC包在添加&rdquo;java集合包&ldquo;对应的高并发类时，为了保持API接口的一致性，使用了&rdquo;Java集合包&ldquo;中的框架。<em>例如，CopyOnWriteArrayList实现了&ldquo;Java集合包&rdquo;中的List接口，HashMap继承了&ldquo;java集合包&rdquo;中的AbstractMap类，等等。</em>得益于&ldquo;JUC包使用了Java集合包中的类&rdquo;，如果我们了解了Java集合包中的类的思想之后，理解JUC包中的类也相对容易；理解时，最大的难点是，对JUC包是如何添加对&ldquo;高并发&rdquo;的支持的！</p>

<p>&nbsp;</p>

<h2><strong>JUC中的集合类</strong></h2>

<p>&nbsp; &nbsp; 下面，我们先了解JUC包中集合类的框架；为了方便讲诉，我将JUC包中的集合类划分为3部分来进行说明。在简单的了解JUC包中集合类的框架之后，后面的章节再逐步对各个类进行介绍。</p>

<h3><strong>1. List和Set</strong></h3>

<p>JUC集合包中的List和Set实现类包括:&nbsp;CopyOnWriteArrayList,&nbsp;CopyOnWriteArraySet和ConcurrentSkipListSet。ConcurrentSkipListSet稍后在说明Map时再说明，CopyOnWriteArrayList 和 CopyOnWriteArraySet的框架如下图所示：</p>

<p><a href="http://images.cnitblog.com/blog/497634/201401/03183243-4e08a58a34e940b08bdb330206cd5545.jpg"><img alt="" src="http://images.cnitblog.com/blog/497634/201401/03183243-4e08a58a34e940b08bdb330206cd5545.jpg" style="height:274px; width:500px" /></a></p>

<p>(01)&nbsp;CopyOnWriteArrayList相当于线程安全的ArrayList，它实现了List接口。CopyOnWriteArrayList是支持高并发的。<br />
(02)&nbsp;CopyOnWriteArraySet相当于线程安全的HashSet，它继承于AbstractSet类。CopyOnWriteArraySet内部包含一个CopyOnWriteArrayList对象，它是通过CopyOnWriteArrayList实现的。</p>

<h3><strong>2. Map</strong></h3>

<p>JUC集合包中Map的实现类包括:&nbsp;ConcurrentHashMap和ConcurrentSkipListMap。它们的框架如下图所示：</p>

<p><img alt="" src="http://images.cnitblog.com/blog/497634/201401/03183307-35a8caaf56014c9ab176a2b2636c70b8.jpg" style="height:493px; width:600px" /></p>

<p>(01)&nbsp;ConcurrentHashMap是线程安全的哈希表(相当于线程安全的HashMap)；它继承于AbstractMap类，并且实现ConcurrentMap接口。ConcurrentHashMap是通过&ldquo;锁分段&rdquo;来实现的，它支持并发。<br />
(02)&nbsp;ConcurrentSkipListMap是线程安全的有序的哈希表(相当于线程安全的TreeMap); 它继承于AbstractMap类，并且实现ConcurrentNavigableMap接口。ConcurrentSkipListMap是通过&ldquo;跳表&rdquo;来实现的，它支持并发。<br />
(03)&nbsp;ConcurrentSkipListSet是线程安全的有序的集合(相当于线程安全的TreeSet)；它继承于AbstractSet，并实现了NavigableSet接口。ConcurrentSkipListSet是通过ConcurrentSkipListMap实现的，它也支持并发。</p>

<p>&nbsp;</p>

<h3><strong>3. Queue</strong></h3>

<p>JUC集合包中Queue的实现类包括:&nbsp;ArrayBlockingQueue,&nbsp;LinkedBlockingQueue,&nbsp;LinkedBlockingDeque,&nbsp;ConcurrentLinkedQueue和ConcurrentLinkedDeque。它们的框架如下图所示：</p>

<p><a href="http://images.cnitblog.com/blog/497634/201401/03183545-ab9686b3fe5944509de9a87b08498ee5.jpg"><img alt="" src="http://images.cnitblog.com/blog/497634/201401/03183545-ab9686b3fe5944509de9a87b08498ee5.jpg" style="height:432px; width:600px" /></a></p>

<p>(01)&nbsp;ArrayBlockingQueue是数组实现的线程安全的有界的阻塞队列。<br />
(02)&nbsp;LinkedBlockingQueue是单向链表实现的(指定大小)阻塞队列，该队列按 FIFO（先进先出）排序元素。<br />
(03)&nbsp;LinkedBlockingDeque是双向链表实现的(指定大小)双向并发阻塞队列，该阻塞队列同时支持FIFO和FILO两种操作方式。<br />
(04)&nbsp;ConcurrentLinkedQueue是单向链表实现的无界队列，该队列按 FIFO（先进先出）排序元素。<br />
(05)&nbsp;ConcurrentLinkedDeque是双向链表实现的无界队列，该队列同时支持FIFO和FILO两种操作方式。</p>

<p><br />
接下来，将逐个对JUC包中的集合类进行学习。</p>
