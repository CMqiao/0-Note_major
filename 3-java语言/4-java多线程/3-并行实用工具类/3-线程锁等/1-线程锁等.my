<h1>20. 锁 Lock</h1>

<p>java.util.concurrent.locks.Lock 是一个类似于 synchronized 块的线程同步机制。但是 Lock 比 synchronized 块更加灵活、精细。<br />
顺便说一下，在我的《<a href="http://tutorials.jenkov.com/java-concurrency/index.html" target="_blank">Java 并发指南</a>》中我对如何实现你自己的锁进行了描述。</p>

<h2>Java Lock 例子</h2>

<p>既然 Lock 是一个接口，在你的程序里需要使用它的实现类之一来使用它。以下是一个简单示例：</p>

<ol start="1">
	<li>Lock&nbsp;lock&nbsp;=&nbsp;new&nbsp;ReentrantLock();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>lock.lock();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>//critical&nbsp;section&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>lock.unlock();&nbsp;&nbsp;</li>
</ol>

<p><br />
首先创建了一个 Lock 对象。之后调用了它的 lock() 方法。这时候这个 lock 实例就被锁住啦。任何其他再过来调用 lock() 方法的线程将会被阻塞住，直到锁定 lock 实例的线程调用了 unlock() 方法。最后 unlock() 被调用了，lock 对象解锁了，其他线程可以对它进行锁定了。</p>

<h2>Java Lock 实现</h2>

<p>java.util.concurrent.locks 包提供了以下对 Lock 接口的实现类：</p>

<ul>
	<li>ReentrantLock</li>
</ul>

<h2>Lock 和 synchronized 代码块的主要不同点</h2>

<p>一个 Lock 对象和一个 synchronized 代码块之间的主要不同点是：</p>

<ul>
	<li>synchronized 代码块不能够保证进入访问等待的线程的先后顺序。</li>
	<li>你不能够传递任何参数给一个 synchronized 代码块的入口。因此，对于 synchronized 代码块的访问等待设置超时时间是不可能的事情。</li>
	<li>synchronized 块必须被完整地包含在单个方法里。而一个 Lock 对象可以把它的 lock() 和 unlock() 方法的调用放在不同的方法里。</li>
</ul>

<h2>Lock 的方法</h2>

<p>Lock 接口具有以下主要方法：</p>

<ul>
	<li>lock()</li>
	<li>lockInterruptibly()</li>
	<li>tryLock()</li>
	<li>tryLock(long timeout, TimeUnit timeUnit)</li>
	<li>unlock()</li>
</ul>

<p>lock() 将 Lock 实例锁定。如果该 Lock 实例已被锁定，调用 lock() 方法的线程将会阻塞，直到 Lock 实例解锁。<br />
lockInterruptibly() 方法将会被调用线程锁定，除非该线程被打断。此外，如果一个线程在通过这个方法来锁定 Lock 对象时进入阻塞等待，而它被打断了的话，该线程将会退出这个方法调用。<br />
tryLock() 方法试图立即锁定 Lock 实例。如果锁定成功，它将返回 true，如果 Lock 实例已被锁定该方法返回 false。这一方法永不阻塞。<br />
tryLock(long timeout, TimeUnit timeUnit) 的工作类似于 tryLock() 方法，除了它在放弃锁定 Lock 之前等待一个给定的超时时间之外。</p>

<p>unlock() 方法对 Lock 实例解锁。一个 Lock 实现将只允许锁定了该对象的线程来调用此方法。其他(没有锁定该 Lock 对象的线程)线程对 unlock() 方法的调用将会抛一个未检查异常(RuntimeException)。</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h1>21. 读写锁 ReadWriteLock</h1>

<p>java.util.concurrent.locks.ReadWriteLock 读写锁是一种先进的线程锁机制。它能够允许多个线程在同一时间对某特定资源进行读取，但同一时间内只能有一个线程对其进行写入。<br />
读写锁的理念在于多个线程能够对一个共享资源进行读取，而不会导致并发问题。并发问题的发生场景在于对一个共享资源的读和写操作的同时进行，或者多个写操作并发进行。<br />
本节只讨论 Java 内置 ReadWriteLock。如果你想了解 ReadWriteLock 背后的实现原理，请参考我的《Java 并发指南》主题中的《<a href="http://tutorials.jenkov.com/java-concurrency/read-write-locks.html" target="_blank">读写锁</a>》小节。</p>

<h2>ReadWriteLock 锁规则</h2>

<p>一个线程在对受保护资源在读或者写之前对 ReadWriteLock 锁定的规则如下：</p>

<ul>
	<li><strong>读锁</strong>：如果没有任何写操作线程锁定 ReadWriteLock，并且没有任何写操作线程要求一个写锁(但还没有获得该锁)。因此，可以有多个读操作线程对该锁进行锁定。</li>
	<li><strong>写锁</strong>：如果没有任何读操作或者写操作。因此，在写操作的时候，只能有一个线程对该锁进行锁定。</li>
</ul>

<h2>ReadWriteLock 实现</h2>

<p>ReadWriteLock 是个接口，如果你想用它的话就得去使用它的实现类之一。java.util.concurrent.locks 包提供了 ReadWriteLock 接口的以下实现类：</p>

<ul>
	<li>ReentrantReadWriteLock</li>
</ul>

<h2>ReadWriteLock 代码示例</h2>

<p>以下是 ReadWriteLock 的创建以及如何使用它进行读、写锁定的简单示例代码：</p>

<ol start="1">
	<li>ReadWriteLock&nbsp;readWriteLock&nbsp;=&nbsp;new&nbsp;ReentrantReadWriteLock();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>readWriteLock.readLock().lock();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;multiple&nbsp;readers&nbsp;can&nbsp;enter&nbsp;this&nbsp;section&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;if&nbsp;not&nbsp;locked&nbsp;for&nbsp;writing,&nbsp;and&nbsp;not&nbsp;writers&nbsp;waiting&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;to&nbsp;lock&nbsp;for&nbsp;writing.&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>readWriteLock.readLock().unlock();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>readWriteLock.writeLock().lock();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;only&nbsp;one&nbsp;writer&nbsp;can&nbsp;enter&nbsp;this&nbsp;section,&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;and&nbsp;only&nbsp;if&nbsp;no&nbsp;threads&nbsp;are&nbsp;currently&nbsp;reading.&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>readWriteLock.writeLock().unlock();&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<p>注意如何使用 ReadWriteLock 对两种锁实例的持有。一个对读访问进行保护，一个队写访问进行保护。</p>

<p>&nbsp;</p>

<h1>12. 闭锁 CountDownLatch</h1>

<p>有时候会有这样的需求，多个线程同时工作，然后其中几个可以随意并发执行，但有一个线程需要等其他线程工作结束后，才能开始。举个例子，开启多个线程分块下载一个大文件，每个线程只下载固定的一截，最后由另外一个线程来拼接所有的分段，那么这时候我们可以考虑使用CountDownLatch来控制并发。</p>

<p>&nbsp;CountDownLatch是JAVA提供在java.util.concurrent包下的一个辅助类，可以把它看成是一个计数器，其内部维护着一个count计数，只不过对这个计数器的操作都是原子操作，同时只能有一个线程去操作这个计数器，CountDownLatch通过构造函数传入一个初始计数值，调用者可以通过调用CounDownLatch对象的cutDown()方法，来使计数减1；如果调用对象上的await()方法，那么调用者就会一直阻塞在这里，直到别人通过cutDown方法，将计数减到0，才可以继续执行。</p>

<h1>示例</h1>

<pre>
import java.util.concurrent.CountDownLatch;

public class Sample {
&nbsp; &nbsp; /**
&nbsp; &nbsp; &nbsp;* 计数器，用来控制线程
&nbsp; &nbsp; &nbsp;* 传入参数2，表示计数器计数为2
&nbsp; &nbsp; &nbsp;*/
&nbsp; &nbsp; private final static CountDownLatch mCountDownLatch = new CountDownLatch(2);

&nbsp; &nbsp; /**
&nbsp; &nbsp; &nbsp;* 示例工作线程类
&nbsp; &nbsp; &nbsp;*/
&nbsp; &nbsp; private static class WorkingThread extends Thread {
&nbsp; &nbsp; &nbsp; &nbsp; private final String mThreadName;
&nbsp; &nbsp; &nbsp; &nbsp; private final int mSleepTime;
&nbsp; &nbsp; &nbsp; &nbsp; public WorkingThread(String name, int sleepTime) {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mThreadName = name;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mSleepTime = sleepTime;
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; @Override
&nbsp; &nbsp; &nbsp; &nbsp; public void run() {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;[&quot; + mThreadName + &quot;] started!&quot;);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try { &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread.sleep(mSleepTime); &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e) { &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace(); &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mCountDownLatch.countDown();
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;[&quot; + mThreadName + &quot;] end!&quot;);&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; }
&nbsp; &nbsp;&nbsp;
&nbsp; &nbsp; /**
&nbsp; &nbsp; &nbsp;* 示例线程类
&nbsp; &nbsp; &nbsp;*/
&nbsp; &nbsp; private static class SampleThread extends Thread {
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; @Override
&nbsp; &nbsp; &nbsp; &nbsp; public void run() {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;[SampleThread] started!&quot;);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 会阻塞在这里等待 mCountDownLatch 里的count变为0；
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 也就是等待另外的WorkingThread调用countDown()
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mCountDownLatch.await();
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e) {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;[SampleThread] end!&quot;);
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; }
&nbsp; &nbsp;&nbsp;
&nbsp; &nbsp; public static void main(String[] args) throws Exception {
&nbsp; &nbsp; &nbsp; &nbsp; // 最先run SampleThread
&nbsp; &nbsp; &nbsp; &nbsp; new SampleThread().start();
&nbsp; &nbsp; &nbsp; &nbsp; // 运行两个工作线程
&nbsp; &nbsp; &nbsp; &nbsp; // 工作线程1运行5秒
&nbsp; &nbsp; &nbsp; &nbsp; new WorkingThread(&quot;WorkingThread1&quot;, 5000).start();
&nbsp; &nbsp; &nbsp; &nbsp; // 工作线程2运行2秒
&nbsp; &nbsp; &nbsp; &nbsp; new WorkingThread(&quot;WorkingThread2&quot;, 2000).start();
&nbsp; &nbsp; }
}
</pre>

<p>&nbsp;</p>

<h1>运行结果：</h1>

<p>[SampleThread] started!<br />
[WorkingThread1] started!<br />
[WorkingThread2] started!<br />
[WorkingThread2] end!<br />
[WorkingThread1] end!<br />
[SampleThread] end!</p>

<p>达到了目的。当然还有其他方式可以做到这样的效果，本文仅仅是介绍了一种使用CountDownLatch的方式。</p>

<p>&nbsp;</p>

<h1>13. 障碍器 CyclicBarrier</h1>

<p>java.util.concurrent.CyclicBarrier 类是一种同步机制，它能够对处理一些算法的线程实现同步。换句话讲，它就是一个所有线程必须等待的一个栅栏，直到所有线程都到达这里，然后所有线程才可以继续做其他事情。图示如下：<br />
<br />
<img alt="cyclic-barrier" src="http://img.blog.csdn.net/20150303091044331?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGVmb25kcw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /><br />
<strong>两个线程在栅栏旁等待对方。</strong><br />
通过调用 CyclicBarrier 对象的 await() 方法，两个线程可以实现互相等待。一旦 N 个线程在等待 CyclicBarrier 达成，所有线程将被释放掉去继续运行。</p>

<h2>创建一个 CyclicBarrier</h2>

<p>在创建一个 CyclicBarrier 的时候你需要定义有多少线程在被释放之前等待栅栏。创建 CyclicBarrier 示例：</p>

<ol start="1">
	<li>CyclicBarrier&nbsp;barrier&nbsp;=&nbsp;new&nbsp;CyclicBarrier(2);&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<h2>等待一个 CyclicBarrier</h2>

<p>以下演示了如何让一个线程等待一个 CyclicBarrier：</p>

<ol start="1">
	<li>barrier.await();&nbsp;&nbsp;</li>
</ol>

<p><br />
当然，你也可以为等待线程设定一个超时时间。等待超过了超时时间之后，即便还没有达成 N 个线程等待 CyclicBarrier 的条件，该线程也会被释放出来。以下是定义超时时间示例：</p>

<ol start="1">
	<li>barrier.await(10,&nbsp;TimeUnit.SECONDS);&nbsp;&nbsp;</li>
</ol>

<p><br />
满足以下任何条件都可以让等待 CyclicBarrier 的线程释放：</p>

<ul>
	<li>最后一个线程也到达 CyclicBarrier(调用 await())</li>
	<li>当前线程被其他线程打断(其他线程调用了这个线程的 interrupt() 方法)</li>
	<li>其他等待栅栏的线程被打断</li>
	<li>其他等待栅栏的线程因超时而被释放</li>
	<li>外部线程调用了栅栏的 CyclicBarrier.reset() 方法</li>
</ul>

<h2>CyclicBarrier 行动</h2>

<p>CyclicBarrier 支持一个栅栏行动，栅栏行动是一个 Runnable 实例，一旦最后等待栅栏的线程抵达，该实例将被执行。你可以在 CyclicBarrier 的构造方法中将 Runnable 栅栏行动传给它：</p>

<ol start="1">
	<li>Runnable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;barrierAction&nbsp;=&nbsp;...&nbsp;;&nbsp;&nbsp;</li>
	<li>CyclicBarrier&nbsp;barrier&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;new&nbsp;CyclicBarrier(2,&nbsp;barrierAction);&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<h2>CyclicBarrier 示例</h2>

<p>以下代码演示了如何使用 CyclicBarrier：</p>

<ol start="1">
	<li>Runnable&nbsp;barrier1Action&nbsp;=&nbsp;new&nbsp;Runnable()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;run()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;BarrierAction&nbsp;1&nbsp;executed&nbsp;&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>};&nbsp;&nbsp;</li>
	<li>Runnable&nbsp;barrier2Action&nbsp;=&nbsp;new&nbsp;Runnable()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;run()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;BarrierAction&nbsp;2&nbsp;executed&nbsp;&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>};&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>CyclicBarrier&nbsp;barrier1&nbsp;=&nbsp;new&nbsp;CyclicBarrier(2,&nbsp;barrier1Action);&nbsp;&nbsp;</li>
	<li>CyclicBarrier&nbsp;barrier2&nbsp;=&nbsp;new&nbsp;CyclicBarrier(2,&nbsp;barrier2Action);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>CyclicBarrierRunnable&nbsp;barrierRunnable1&nbsp;=&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;CyclicBarrierRunnable(barrier1,&nbsp;barrier2);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>CyclicBarrierRunnable&nbsp;barrierRunnable2&nbsp;=&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;CyclicBarrierRunnable(barrier1,&nbsp;barrier2);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>new&nbsp;Thread(barrierRunnable1).start();&nbsp;&nbsp;</li>
	<li>new&nbsp;Thread(barrierRunnable2).start();&nbsp;&nbsp;</li>
</ol>

<p><br />
CyclicBarrierRunnable 类：</p>

<ol start="1">
	<li>public&nbsp;class&nbsp;CyclicBarrierRunnable&nbsp;implements&nbsp;Runnable{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;CyclicBarrier&nbsp;barrier1&nbsp;=&nbsp;null;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;CyclicBarrier&nbsp;barrier2&nbsp;=&nbsp;null;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;CyclicBarrierRunnable(&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CyclicBarrier&nbsp;barrier1,&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CyclicBarrier&nbsp;barrier2)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.barrier1&nbsp;=&nbsp;barrier1;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.barrier2&nbsp;=&nbsp;barrier2;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;run()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.sleep(1000);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(Thread.currentThread().getName()&nbsp;+&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&nbsp;waiting&nbsp;at&nbsp;barrier&nbsp;1&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.barrier1.await();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.sleep(1000);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(Thread.currentThread().getName()&nbsp;+&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&nbsp;waiting&nbsp;at&nbsp;barrier&nbsp;2&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.barrier2.await();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(Thread.currentThread().getName()&nbsp;+&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&nbsp;done!&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(InterruptedException&nbsp;e)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(BrokenBarrierException&nbsp;e)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p><br />
以上代码控制台输出如下。注意每个线程写入控制台的时序可能会跟你实际执行不一样。比如有时 Thread-0 先打印，有时 Thread-1 先打印。<br />
Thread-0 waiting at barrier 1<br />
Thread-1 waiting at barrier 1<br />
BarrierAction 1 executed<br />
Thread-1 waiting at barrier 2<br />
Thread-0 waiting at barrier 2<br />
BarrierAction 2 executed<br />
Thread-0 done!</p>

<p>Thread-1 done!</p>

<h2>浅谈Java中CyclicBarrier的用法</h2>

<p>CyclicBarrier和CountDownLatch一样，都是关于线程的计数器。</p>

<p>用法略有不同，测试代码如下：</p>

<p>复制代码<br />
public class TestCyclicBarrier {</p>

<p>&nbsp; &nbsp; private static final int THREAD_NUM = 5;<br />
&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; public static class WorkerThread implements Runnable{</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; CyclicBarrier barrier;<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; public WorkerThread(CyclicBarrier b){<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.barrier = b;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; @Override<br />
&nbsp; &nbsp; &nbsp; &nbsp; public void run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // TODO Auto-generated method stub<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try{<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;Worker&#39;s waiting&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //线程在这里等待，直到所有线程都到达barrier。<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; barrier.await();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;ID:&quot;+Thread.currentThread().getId()+&quot; Working&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }catch(Exception e){<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; }<br />
&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; /**<br />
&nbsp; &nbsp; &nbsp;* @param args<br />
&nbsp; &nbsp; &nbsp;*/<br />
&nbsp; &nbsp; public static void main(String[] args) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // TODO Auto-generated method stub<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CyclicBarrier cb = new CyclicBarrier(THREAD_NUM, new Runnable() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //当所有线程到达barrier时执行<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @Override<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public void run() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // TODO Auto-generated method stub<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;Inside Barrier&quot;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />
&nbsp; &nbsp; &nbsp; &nbsp; });<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; for(int i=0;i&lt;THREAD_NUM;i++){<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new Thread(new WorkerThread(cb)).start();<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
&nbsp; &nbsp; }</p>

<p>}</p>

<p>&nbsp;</p>

<ol start="1">
	<li>&nbsp;CyclicBarrier初始化时规定一个数目，然后计算调用了CyclicBarrier.await()进入等待的线程数。当线程数达到了这个数目时，所有进入等待状态的线程被唤醒并继续。&nbsp;</li>
	<li>&nbsp;CyclicBarrier就象它名字的意思一样，可看成是个障碍，&nbsp;所有的线程必须到齐后才能一起通过这个障碍。&nbsp;</li>
	<li>&nbsp;CyclicBarrier初始时还可带一个Runnable的参数，&nbsp;此Runnable任务在CyclicBarrier的数目达到后，所有其它线程被唤醒前被执行。</li>
</ol>
