<h1>JS 事件绑定、事件监听、事件委托详细介绍</h1>

<p>在JavaScript的学习中，我们经常会遇到JavaScript的事件机制，例如，事件绑定、事件监听、事件委托（事件代理）等。这些名词是什么意思呢，有什么作用呢？</p>

<h2>事件绑定</h2>

<p>要想让 JavaScript 对用户的操作作出响应，首先要对 DOM 元素绑定事件处理函数。所谓事件处理函数，就是处理用户操作的函数，不同的操作对应不同的名称。</p>

<p>在JavaScript中，有三种常用的绑定事件的方法：</p>

<p>在DOM元素中直接绑定；<br />
在JavaScript代码中绑定；<br />
绑定事件监听函数。</p>

<h3>在DOM中直接绑定事件</h3>

<p>我们可以在DOM元素上绑定onclick、onmouseover、onmouseout、onmousedown、onmouseup、ondblclick、onkeydown、onkeypress、onkeyup等。好多不一一列出了。如果想知道更多事件类型请查看， DOM事件 。</p>

<p><br />
&lt;input type=&quot;button&quot; value=&quot;click me&quot; onclick=&quot;hello()&quot;&gt;</p>

<p>&lt;script&gt;</p>

<p>function hello(){</p>

<p>&nbsp;alert(&quot;hello world!&quot;);</p>

<p>}</p>

<p>&lt;/script&gt;</p>

<p>在JavaScript代码中绑定事件</p>

<p>在JavaScript代码中（即 script 标签内）绑定事件可以使JavaScript代码与HTML标签分离，文档结构清晰，便于管理和开发。</p>

<p>&lt;input type=&quot;button&quot; value=&quot;click me&quot; id=&quot;btn&quot;&gt;</p>

<p>&lt;script&gt;</p>

<p>document.getElementById(&quot;btn&quot;).onclick = function(){</p>

<p>&nbsp;alert(&quot;hello world!&quot;);</p>

<p>}</p>

<p>&lt;/script&gt;</p>

<p>使用事件监听绑定事件</p>

<p>绑定事件的另一种方法是用 addEventListener() 或 attachEvent() 来绑定事件监听函数。下面详细介绍，事件监听。</p>

<h2>事件监听</h2>

<p>关于事件监听，W3C规范中定义了3个事件阶段，依次是捕获阶段、目标阶段、冒泡阶段。</p>

<p>起初Netscape制定了JavaScript的一套事件驱动机制（即事件捕获）。随即IE也推出了自己的一套事件驱动机制（即事件冒泡）。最后W3C规范了两种事件机制，分为捕获阶段、目标阶段、冒泡阶段。IE8以前IE一直坚持自己的事件机制（前端人员一直头痛的兼容性问题），IE9以后IE也支持了W3C规范。</p>

<p>W3C规范</p>

<p>语法：</p>

<p>element.addEventListener(event, function, useCapture)</p>

<p>event : （必需）事件名，支持所有 DOM事件 。</p>

<p>function：（必需）指定要事件触发时执行的函数。</p>

<p>useCapture：（可选）指定事件是否在捕获或冒泡阶段执行。true，捕获。false，冒泡。默认false。</p>

<p>注：IE8以下不支持。</p>

<p><br />
&lt;input type=&quot;button&quot; value=&quot;click me&quot; id=&quot;btn1&quot;&gt;</p>

<p>&lt;script&gt;</p>

<p>document.getElementById(&quot;btn1&quot;).addEventListener(&quot;click&quot;,hello);</p>

<p>function hello(){</p>

<p>&nbsp;alert(&quot;hello world!&quot;);</p>

<p>}</p>

<p>&lt;/script&gt;</p>

<p>IE标准</p>

<p>语法：</p>

<p>element.attachEvent(event, function)</p>

<p>event：（必需）事件类型。需加&ldquo;on&ldquo;，例如：onclick。</p>

<p>function：（必需）指定要事件触发时执行的函数。</p>

<p>&lt;input type=&quot;button&quot; value=&quot;click me&quot; id=&quot;btn2&quot;&gt;</p>

<p>&lt;script&gt;</p>

<p>document.getElementById(&quot;btn2&quot;).attachEvent(&quot;onclick&quot;,hello);</p>

<p>function hello(){</p>

<p>&nbsp;alert(&quot;hello world!&quot;);</p>

<p>}</p>

<p>&lt;/script&gt;</p>

<p>事件监听的优点</p>

<p>1、可以绑定多个事件。</p>

<p>&lt;input type=&quot;button&quot; value=&quot;click me&quot; id=&quot;btn3&quot;&gt;</p>

<p>&lt;script&gt;</p>

<p>var btn3 = document.getElementById(&quot;btn3&quot;);</p>

<p>btn3.onclick = function(){</p>

<p>&nbsp;alert(&quot;hello 1&quot;); //不执行</p>

<p>}</p>

<p>btn3.onclick = function(){</p>

<p>&nbsp;alert(&quot;hello 2&quot;); //执行</p>

<p>}</p>

<p>&lt;/script&gt;</p>

<p>常规的事件绑定只执行最后绑定的事件。</p>

<p><br />
&lt;input type=&quot;button&quot; value=&quot;click me&quot; id=&quot;btn4&quot;&gt;</p>

<p>&lt;script&gt;</p>

<p>var btn4 = document.getElementById(&quot;btn4&quot;);</p>

<p>btn4.addEventListener(&quot;click&quot;,hello1);</p>

<p>btn4.addEventListener(&quot;click&quot;,hello2);</p>

<p>function hello1(){</p>

<p>&nbsp;alert(&quot;hello 1&quot;);</p>

<p>}</p>

<p>function hello2(){</p>

<p>&nbsp;alert(&quot;hello 2&quot;);</p>

<p>}</p>

<p>&lt;/script&gt;</p>

<p>两个事件都执行了。</p>

<p>2、可以解除相应的绑定</p>

<p>&lt;input type=&quot;button&quot; value=&quot;click me&quot; id=&quot;btn5&quot;&gt;</p>

<p>&lt;script&gt;</p>

<p>var btn5 = document.getElementById(&quot;btn5&quot;);</p>

<p>btn5.addEventListener(&quot;click&quot;,hello1);//执行了</p>

<p>btn5.addEventListener(&quot;click&quot;,hello2);//不执行</p>

<p>btn5.removeEventListener(&quot;click&quot;,hello2);</p>

<p>function hello1(){</p>

<p>&nbsp;alert(&quot;hello 1&quot;);</p>

<p>}</p>

<p>function hello2(){</p>

<p>&nbsp;alert(&quot;hello 2&quot;);</p>

<p>}</p>

<p>&lt;/script&gt;</p>

<h3>封装事件监听</h3>

<p>&lt;input type=&quot;button&quot; value=&quot;click me&quot; id=&quot;btn5&quot;&gt;</p>

<p>//绑定监听事件</p>

<p>function addEventHandler(target,type,fn){</p>

<p>&nbsp;if(target.addEventListener){</p>

<p>&nbsp;target.addEventListener(type,fn);</p>

<p>&nbsp;}else{</p>

<p>&nbsp;target.attachEvent(&quot;on&quot;+type,fn);</p>

<p>&nbsp;}</p>

<p>}</p>

<p>//移除监听事件</p>

<p>function removeEventHandler(target,type,fn){</p>

<p>&nbsp;if(target.removeEventListener){</p>

<p>&nbsp;target.removeEventListener(type,fn);</p>

<p>&nbsp;}else{</p>

<p>&nbsp;target.detachEvent(&quot;on&quot;+type,fn);</p>

<p>&nbsp;}</p>

<p>}</p>

<p>//测试</p>

<p>var btn5 = document.getElementById(&quot;btn5&quot;);</p>

<p>addEventHandler(btn5,&quot;click&quot;,hello1);//添加事件hello1</p>

<p>addEventHandler(btn5,&quot;click&quot;,hello2);//添加事件hello2</p>

<p>removeEventHandler(btn5,&quot;click&quot;,hello1);//移除事件hello1</p>

<h2>事件委托</h2>

<p>事件委托就是利用冒泡的原理，把事件加到父元素或祖先元素上，触发执行效果。</p>

<p><br />
&lt;input type=&quot;button&quot; value=&quot;click me&quot; id=&quot;btn6&quot;&gt;</p>

<p>var btn6 = document.getElementById(&quot;btn6&quot;);</p>

<p>document.onclick = function(event){</p>

<p>&nbsp;event = event || window.event;</p>

<p>&nbsp;var target = event.target || event.srcElement;</p>

<p>&nbsp;if(target == btn6){</p>

<p>&nbsp;alert(btn5.value);</p>

<p>&nbsp;}</p>

<p>}</p>

<p>上面只是个例子，代码尽可能的简化了。在实际的代码中 我们可能用到jQuery的live()、delegate()、bind()、on()等。</p>

<p>事件委托优点</p>

<p>1、提高JavaScript性能。事件委托可以显著的提高事件的处理速度，减少内存的占用。 实例分析JavaScript中的事件委托和事件绑定 ，这篇文章写得还不错。</p>

<p>传统写法</p>

<p>&lt;ul id=&quot;list&quot;&gt;</p>

<p>&nbsp;&lt;li id=&quot;item1&quot; &gt;item1&lt;/li&gt;</p>

<p>&nbsp;&lt;li id=&quot;item2&quot; &gt;item2&lt;/li&gt;</p>

<p>&nbsp;&lt;li id=&quot;item3&quot; &gt;item3&lt;/li&gt;</p>

<p>&lt;/ul&gt;</p>

<p>&lt;script&gt;</p>

<p>var item1 = document.getElementById(&quot;item1&quot;);</p>

<p>var item2 = document.getElementById(&quot;item2&quot;);</p>

<p>var item3 = document.getElementById(&quot;item3&quot;);</p>

<p>item1.onclick = function(){</p>

<p>&nbsp;alert(&quot;hello item1&quot;);</p>

<p>}</p>

<p>item2.onclick = function(){</p>

<p>&nbsp;alert(&quot;hello item2&quot;);</p>

<p>}</p>

<p>item3.onclick = function(){</p>

<p>&nbsp;alert(&quot;hello item3&quot;);</p>

<p>}</p>

<p>&lt;/script&gt;</p>

<p>事件委托</p>

<p>&lt;ul id=&quot;list&quot;&gt;</p>

<p>&nbsp;&lt;li id=&quot;item1&quot; &gt;item1&lt;/li&gt;</p>

<p>&nbsp;&lt;li id=&quot;item2&quot; &gt;item2&lt;/li&gt;</p>

<p>&nbsp;&lt;li id=&quot;item3&quot; &gt;item3&lt;/li&gt;</p>

<p>&lt;/ul&gt;</p>

<p>&lt;script&gt;</p>

<p>var item1 = document.getElementById(&quot;item1&quot;);</p>

<p>var item2 = document.getElementById(&quot;item2&quot;);</p>

<p>var item3 = document.getElementById(&quot;item3&quot;);</p>

<p>document.addEventListener(&quot;click&quot;,function(event){</p>

<p>&nbsp;var target = event.target;</p>

<p>&nbsp;if(target == item1){</p>

<p>&nbsp;alert(&quot;hello item1&quot;);</p>

<p>&nbsp;}else if(target == item2){</p>

<p>&nbsp;alert(&quot;hello item2&quot;);</p>

<p>&nbsp;}else if(target == item3){</p>

<p>&nbsp;alert(&quot;hello item3&quot;);</p>

<p>&nbsp;}</p>

<p>})</p>

<p>&lt;/script&gt;</p>

<p>2、动态的添加DOM元素，不需要因为元素的改动而修改事件绑定。</p>

<p>传统写法</p>

<p>&lt;ul id=&quot;list&quot;&gt;</p>

<p>&nbsp;&lt;li id=&quot;item1&quot; &gt;item1&lt;/li&gt;</p>

<p>&nbsp;&lt;li id=&quot;item2&quot; &gt;item2&lt;/li&gt;</p>

<p>&nbsp;&lt;li id=&quot;item3&quot; &gt;item3&lt;/li&gt;</p>

<p>&lt;/ul&gt;</p>

<p>&lt;script&gt;</p>

<p>var list = document.getElementById(&quot;list&quot;);</p>

<p>var item = list.getElementsByTagName(&quot;li&quot;);</p>

<p>for(var i=0;i&lt;item.length;i++){</p>

<p>&nbsp;(function(i){</p>

<p>&nbsp;item[i].onclick = function(){</p>

<p>&nbsp;alert(item[i].innerHTML);</p>

<p>&nbsp;}</p>

<p>&nbsp;})(i)</p>

<p>}</p>

<p>var node=document.createElement(&quot;li&quot;);</p>

<p>var textnode=document.createTextNode(&quot;item4&quot;);</p>

<p>node.appendChild(textnode);</p>

<p>list.appendChild(node);</p>

<p>&lt;/script&gt;</p>

<p>点击item1到item3都有事件响应，但是点击item4时，没有事件响应。说明传统的事件绑定无法对动态添加的元素而动态的添加事件。</p>

<p>事件委托</p>

<p>&lt;ul id=&quot;list&quot;&gt;</p>

<p>&nbsp;&lt;li id=&quot;item1&quot; &gt;item1&lt;/li&gt;</p>

<p>&nbsp;&lt;li id=&quot;item2&quot; &gt;item2&lt;/li&gt;</p>

<p>&nbsp;&lt;li id=&quot;item3&quot; &gt;item3&lt;/li&gt;</p>

<p>&lt;/ul&gt;</p>

<p>&lt;script&gt;</p>

<p>var list = document.getElementById(&quot;list&quot;);</p>

<p>document.addEventListener(&quot;click&quot;,function(event){</p>

<p>&nbsp;var target = event.target;</p>

<p>&nbsp;if(target.nodeName == &quot;LI&quot;){</p>

<p>&nbsp;alert(target.innerHTML);</p>

<p>&nbsp;}</p>

<p>})</p>

<p>var node=document.createElement(&quot;li&quot;);</p>

<p>var textnode=document.createTextNode(&quot;item4&quot;);</p>

<p>node.appendChild(textnode);</p>

<p>list.appendChild(node);</p>

<p>&lt;/script&gt;</p>

<p>当点击item4时，item4有事件响应。说明事件委托可以为新添加的DOM元素动态的添加事件。</p>
