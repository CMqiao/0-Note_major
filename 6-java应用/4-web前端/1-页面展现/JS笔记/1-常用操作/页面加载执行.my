<h1>js常用操作</h1>

<h2>js加载页面的方法(页面加载完成就执行)</h2>

<h3>js方法：&nbsp;</h3>

<p>window.onload = function(){&nbsp;<br />
　　$(&quot;#a&quot;).click(function(){&nbsp;<br />
　　　　//adding your code here&nbsp;<br />
　　});&nbsp;<br />
}&nbsp;</p>

<h3>jQuery方法：</h3>

<p>需要引用jQuery文件。&nbsp;</p>

<p>$(document).ready(function(){&nbsp;<br />
　　$(&quot;#a&quot;).click(function(){&nbsp;<br />
　　　　//adding your code here　　&nbsp;<br />
　　});&nbsp;<br />
});&nbsp;</p>

<p>或者其简写&nbsp;</p>

<p>$(function(){&nbsp;<br />
　　$(&quot;#a&quot;).click(function(){&nbsp;<br />
　　　　//adding your code here&nbsp;<br />
　　});&nbsp;<br />
});&nbsp;</p>

<p>当dom加载完就可以执行（比window.onload更早）。在同一个页面里可以多次出现.ready()&nbsp;</p>

<h3>PS：两者的主要区别&nbsp;</h3>

<p>window.onload：&nbsp;<br />
<br />
当一个文档完全下载到浏览器中时，才会触发window.onload事件。这意味着页面上的全部元素对js而言都是可以操作的，也就是说页面上的所有元素加载完毕才会执行。这种情况对编写功能性代码非常有利，因为无需考虑加载的次序。、&nbsp;<br />
<br />
$(document).ready{ }：&nbsp;<br />
<br />
会在DOM完全就绪并可以使用时调用。虽然这也意味着所有元素对脚本而言都是可以访问的，但是，并不意味着所有关联的文件都已经下载完毕。换句话说，当HMTL下载完成并解析为DOM树之后，代码就会执行。&nbsp;<br />
<br />
举一个例子：&nbsp;<br />
<br />
假设有一个表现图库的页面，这种页面中可能会包含许多大型图像，我们可以通过jQuery隐藏、显示或以其他方式操作这些图像。如果我们通过onload页面设置界面，那么用户在能够使用这个页面之前，必须要等到每一幅图像都下载完成。更糟糕的是，如果行为稍微添加给哪些具有默认行为的元素(比如链接)，那么用户的交互可能会导致意想不到的结果。然而当我们试用$(document).ready(){ }进行设置时，这个界面就会更早地准备好可用的正确行为。&nbsp;<br />
<br />
使用$(document).ready(){ }一般来说都要优于试用onload事件处理程序，但必须要明确一点的是，因为支持文件可能还没有家在完成，所以类似图像的高度和宽度这样的属性此时不一定有效。&nbsp;</p>

<p>&nbsp;</p>

<h2>其他方式</h2>

<p>IE执行有效，chrome中执行无效：</p>

<pre>
if(document.readyState==&quot;complete&quot;){
    alert(&quot;page is ready!&quot;);
}</pre>

<p>&nbsp;</p>

<p>javascript 当页面dom模型加载完成后才执行javascript<br />
<strong>不能使用&lt;body onload=&quot;&quot;&gt; W3C说只有IE支持，但试了下，chrome也执行了...</strong><br />
加上 defer 等于在页面完全在入后再执行，相当于 window.onload ，但应用上比 window.onload 更灵活</p>

<p>&lt;body&gt;<br />
&lt;script &nbsp;defer=&quot;defer&quot;&gt;<br />
alert(&quot;页面加载完我才执行的&quot;)<br />
&lt;/script&gt;<br />
先看到这段话 &nbsp;然后再执行上面的 JS &nbsp;如果去掉上面的 defer=&quot;defer&quot; 那么会先执行JS &nbsp;在看到这段话<br />
&lt;/body&gt;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2>$(document).ready、body.Onload()和 $(window).load的区别</h2>

<h3>JavaScript文档加载完成事件</h3>

<p>window.load(function(){...})和body.onload()都存在同样一个问题，那都是在页面所有元素(包括html标签以及引用到得所有图片,Flash等媒体)加载完毕后执行的,这是它们的共同点.$(document).ready()是文档结构已经加载完成（不包含图片等非文字媒体文件），不必等到所有的加载完毕。</p>

<p>原理是：</p>

<p>$(document).ready(function (){ alert(&#39;use in page script tag&#39;) });<br />
在jquery脚本加载的时候,会设置一个isReady的标记,监听DOMContentLoaded事件(这个不是什么浏览器都有的,不同浏览器,jquery运作方式不一样).当然遇到调用ready函数的时候,如果isReady未被设置,那就是说页面未加载完,就会把要执行的函数用一个数组缓存起来,当页面加载完后,再把缓存的函数一一执行.<br />
<strong>另外补充：</strong><br />
jquery ready可以写好几个，每个都执行&nbsp;<br />
onload只能写一个，你写好几个，也只执行一个，好像是执行最后一个，而$(window).load()可以加载多个函数</p>

<p>&nbsp;</p>

<h3><strong>用$(window).load(function(){...})而不用body.onload()的几个理由</strong></h3>

<p>不用body.Onload()理由1：</p>

<p>如果我们想同时加载多个函数,我们必须这样写</p>

<p>&lt;body onload=&quot;fn1(),fn2()&quot;&gt;&lt;/body&gt;看起来极其丑陋,如果用$(window).load()我们可以这样加载多个函数</p>

<p>&nbsp;$(window).load(function() {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert(&quot;hello,我是jQuery!&quot;);<br />
&nbsp;&nbsp;});<br />
&nbsp;$(window).load(function() {<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;alert(&quot;hello,我也是jQuery&quot;);<br />
&nbsp;});</p>

<p>这样写它会从上往下执行这两个函数,并且看起来漂亮多了.</p>

<p>不用body.Onload()理由2：</p>

<p>用body.Onload()不能够做到js和html完全分离,这是一个很严重的问题.</p>

<p>另外用$(window).load(function(){...})和body.onload()都存在同样一个问题,因为开始也说到了,它们都需要等到页面的所有内容</p>

<p>加载完毕才执行,但是如果当网速比较慢的时候,加载一个页面往往需要较长的时间(几秒到十几秒不等,甚至更长...),所以我们经常</p>

<p>会遇到页面还没有完全加载完毕而用户已经在操作页面了这种情况,这样页面表现出来的效果就跟我们预期的效果不一样了,</p>

<p>所以在这里我推荐使用$(document).ready(function(){}),或简写为$(function(){})，因为他会在页面的dom元素加载完毕后就执行,</p>

<p>而无需等到图片或其他媒体下载完毕.</p>

<p>但是有时候确实我们有需要等到页面的所有东西都加载完后再执行我们想执行的函数,所以是该使用$(window).load(function(){...})还是</p>

<p>该使用$(function(){})往往需要结合具体需要而作不同的选择.</p>

<p>最后附上一段在所有DOM元素加载之前执行的jQuery代码</p>

<p>&lt;script type=&quot;text/javascript&quot;&gt;</p>

<p>(function() {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert(&quot;DOM还没加载哦!&quot;);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })(jQuery)</p>

<p>&lt;/script&gt;</p>

<h3><em>补充1：刷新也只执行一次</em></h3>

<p>刷新后只让$(window).load(function(){...})和body.onload()都执行一次的方法，cookie中实现（以body.onload()举例，$(window).load也可以照样该）</p>

<p>function loadpopup(){&nbsp;<br />
if (get_cookie(&#39;popped&#39;)==&#39;&#39;){&nbsp;<br />
//这里放要执行的代码，这样就现实了只执行一次的</p>

<p>document.cookie=&quot;popped=yes&quot; ;<br />
}<br />
}&nbsp;<br />
&lt;/script&gt;<br />
&lt;/head&gt;&nbsp;<br />
&lt;body onload=&quot;loadpopup()&quot;&gt;</p>

<h3><em><em>补充2：</em>调试技巧</em></h3>

<p>为了调试方便，有时候在所有的DOM加载之前调用JS代码，这个方法是我在调试的时候最喜欢的，有时候开发的时候也用这种方法<br />
&lt;body&gt;<br />
&nbsp;&nbsp;&nbsp; &lt;script type=&quot;text/javascript&quot;&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (function() {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert(&quot;hi&quot;);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })(jQuery)<br />
&nbsp;&nbsp;&nbsp; &lt;/script&gt;<br />
&lt;/body&gt;<br />
对，就是利用js闭包的形式将js代码嵌入body，这段代码会自动执行，当然也可以直接嵌入js代码,这种方式要注意顺序问题，如下：<br />
&lt;body&gt;<br />
&lt;div id=&quot;test&quot;&gt;this is the content&lt;/div&gt;<br />
&nbsp;&nbsp;&nbsp; &lt;script type=&quot;text/javascript&quot;&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert($(&quot;#test&quot;).html());//I Can display the content<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/script&gt;<br />
&lt;/body&gt;<br />
&lt;body&gt;<br />
&nbsp;&nbsp; &lt;script type=&quot;text/javascript&quot;&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert($(&quot;#test&quot;).html());//I Can&#39;t display the content<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/script&gt;<br />
&nbsp;&nbsp;&nbsp; &lt;div id=&quot;test&quot;&gt;this is the content&lt;/div&gt;<br />
&lt;/body&gt;<br />
上面两段代码,第二段代码当中因为只能解释到当前代码之前的DOM,而test并不存在于已经解析的DOM中.所以第二段代码无法正确显示</p>

<h3><em><strong>补充3：非jquery中无$(document).ready方法</strong></em></h3>

<p>在 W3C 中有个叫 DOMContentLoaded 的事件, 故名思意, 它会在 DOM (文档对象模型) 被加载完成的时候触发. 那么我们就可以通过下面的方法调用初始化脚本的方法了.</p>

<p>但很遗憾, 现在很多浏览器并不玩 W3C 这一套, 支持 DOMContentLoaded 事件的只有 Firefox, Opera 9 等一些 &quot;现代&quot; 浏览器, 而被集成到两大商业桌面系统的 IE 和 Safari 都不支持. 尽管如此, 我们可以用别的一些方法进行处理.</p>

<p>方案一：</p>

<ol start="1">
	<li>if&nbsp;(document.addEventListener){&nbsp;&nbsp;&nbsp;//非ie浏览器&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.addEventListener(&quot;DOMContentLoaded&quot;,&nbsp;init,&nbsp;false);&nbsp;&nbsp;</li>
	<li>}&nbsp;else&nbsp;if&nbsp;(document.attachEvent){&nbsp;&nbsp;&nbsp;//ie浏览器&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.onreadystatechange=function(){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(this.readyState&nbsp;==&nbsp;&#39;complete&#39;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}}&nbsp;&nbsp;</li>
</ol>

<p>方案二：</p>

<ol start="1">
	<li>//&nbsp;如果支持&nbsp;W3C&nbsp;DOM2,&nbsp;则使用&nbsp;W3C&nbsp;方法&nbsp;&nbsp;</li>
	<li>if&nbsp;(document.addEventListener)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;document.addEventListener(&quot;DOMContentLoaded&quot;,&nbsp;init,&nbsp;false);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;</li>
	<li>//&nbsp;如果是&nbsp;IE&nbsp;浏览器&nbsp;&nbsp;</li>
	<li>}&nbsp;else&nbsp;if&nbsp;(/MSIE/i.test(navigator.userAgent))&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;创建一个&nbsp;script&nbsp;标签,&nbsp;该标签有&nbsp;defer&nbsp;属性,&nbsp;当&nbsp;document&nbsp;加载完毕时才会被载入&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;document.write(&#39;&lt;script&nbsp;id=&quot;__ie_onload&quot;&nbsp;defer&nbsp;src=&quot;javascript:void(0)&quot;&gt;&lt;/script&gt;&#39;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;script&nbsp;=&nbsp;document.getElementById(&quot;__ie_onload&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;如果文档确实装载完毕,&nbsp;调用初始化方法&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;script.onreadystatechange&nbsp;=&nbsp;function()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(this.readyState&nbsp;==&nbsp;&#39;complete&#39;)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;</li>
	<li>//&nbsp;如果是&nbsp;Safari&nbsp;浏览器&nbsp;&nbsp;</li>
	<li>}&nbsp;else&nbsp;if&nbsp;(/WebKit/i.test(navigator.userAgent))&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;创建定时器,&nbsp;每&nbsp;0.01&nbsp;秒检验一次,&nbsp;如果文档装载完毕则调用初始化方法&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;_timer&nbsp;=&nbsp;setInterval(&nbsp;function()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(/loaded|complete/.test(document.readyState))&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearInterval(_timer);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;10);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;</li>
	<li>//&nbsp;如果以上皆不是,&nbsp;使用最坏的方法&nbsp;(本例中,&nbsp;Opera&nbsp;7&nbsp;将会跑到这里来)&nbsp;&nbsp;</li>
	<li>}&nbsp;else&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;window.onload&nbsp;=&nbsp;function(e)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p><br />
<strong>补充4：有window.onload，但是没有document.onload</strong></p>

<ol start="1">
	<li>&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;&nbsp;&nbsp;</li>
	<li>&lt;!--&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>function&nbsp;$(id)&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>{&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;document.getElementById(id);&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>function&nbsp;show()&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>{&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;alert($(&quot;btn&quot;).value);&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;if(document.attachEvent)&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;alert(&quot;load&quot;);&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;&nbsp;</li>
	<li>document.attachEvent(&quot;onload&quot;,show);&nbsp;&nbsp;&nbsp;</li>
	<li>//window.attachEvent(&quot;onload&quot;,show);&nbsp;&nbsp;</li>
	<li>//window.onload=show;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>//document.onload=show();&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&lt;/script&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&lt;body&nbsp;&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&lt;input&nbsp;type=&quot;button&quot;&nbsp;value=&quot;button&quot;&nbsp;id=&quot;btn&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&lt;hr&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&lt;/body&gt;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>
