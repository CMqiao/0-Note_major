<h1><a href="http://www.cnblogs.com/hapjin/p/5492880.html" id="cb_post_title_url">JAVA多线程之volatile 与 synchronized 的比较</a></h1>

<h2><strong>一，volatile关键字的可见性</strong></h2>

<p>要想理解volatile关键字，得先了解下JAVA的内存模型，Java内存模型的抽象示意图如下：</p>

<p>从图中可以看出：</p>

<p>①每个线程都有一个自己的本地内存空间--线程栈空间???线程执行时，先把变量从主内存读取到线程自己的本地内存空间，然后再对该变量进行操作</p>

<p>②对该变量操作完后，在某个时间再把变量刷新回主内存</p>

<p>关于JAVA内存模型，更详细的可参考：&nbsp;<a href="http://ifeve.com/java-memory-model-1/" target="_blank">深入理解Java内存模型（一）&mdash;&mdash;基础</a></p>

<p>因此，就存在内存可见性问题，看一个示例程序：（摘自书上）</p>

<p>&nbsp;</p>

<pre>
 1 public class RunThread extends Thread {
 2 
 3     private boolean isRunning = true;
 4 
 5     public boolean isRunning() {
 6         return isRunning;
 7     }
 8 
 9     public void setRunning(boolean isRunning) {
10         this.isRunning = isRunning;
11     }
12 
13     @Override
14     public void run() {
15         System.out.println(&quot;进入到run方法中了&quot;);
16         while (isRunning == true) {
17         }
18         System.out.println(&quot;线程执行完成了&quot;);
19     }
20 }
21 
22 public class Run {
23     public static void main(String[] args) {
24         try {
25             RunThread thread = new RunThread();
26             thread.start();
27             Thread.sleep(1000);
28             thread.setRunning(false);
29         } catch (InterruptedException e) {
30             e.printStackTrace();
31         }
32     }
33 }</pre>

<p>&nbsp;</p>

<p>Run.java 第28行，main线程 将启动的线程RunThread中的共享变量设置为false，从而想让RunThread.java 第14行中的while循环结束。</p>

<p>如果，我们使用JVM -server参数执行该程序时，RunThread线程并不会终止！从而出现了死循环！！</p>

<p><strong>原因分析：</strong></p>

<p>现在有两个线程，一个是main线程，另一个是RunThread。它们都试图修改 第三行的 isRunning变量。按照JVM内存模型，main线程将isRunning读取到本地线程内存空间，修改后，再刷新回主内存。</p>

<p>而在JVM 设置成 -server模式运行程序时，线程会一直在私有堆栈中读取isRunning变量。因此，RunThread线程无法读到main线程改变的isRunning变量</p>

<p>从而出现了死循环，导致RunThread无法终止。<strong>这种情形，在《Effective JAVA》中，将之称为&ldquo;活性失败&rdquo;</strong></p>

<p>解决方法，在第三行代码处用 volatile 关键字修饰即可。这里，它强制线程从主内存中取 volatile修饰的变量。</p>

<pre>
    volatile private boolean isRunning = true;</pre>

<p>&nbsp;</p>

<p>扩展一下，当多个线程之间需要根据某个条件确定 哪个线程可以执行时，要确保这个条件在 线程 之间是可见的。因此，可以用volatile修饰。</p>

<p><strong>综上，volatile关键字的作用是：使变量在多个线程间可见（可见性）</strong></p>

<p>&nbsp;</p>

<h2><strong>二，volatile关键字的非原子性</strong></h2>

<p>所谓原子性，就是某系列的操作步骤要么全部执行，要么都不执行。</p>

<p>比如，变量的自增操作 i++，分三个步骤：</p>

<p>①从内存中读取出变量 i 的值</p>

<p>②将 i 的值加1</p>

<p>③将 加1 后的值写回内存</p>

<p>这说明 i++ 并不是一个原子操作。因为，它分成了三步，有可能当某个线程执行到了第②时被中断了，那么就意味着只执行了其中的两个步骤，没有全部执行。</p>

<p>关于volatile的非原子性，看个示例：</p>

<p>&nbsp;</p>

<pre>
 1 public class MyThread extends Thread {
 2     public volatile static int count;
 3 
 4     private static void addCount() {
 5         for (int i = 0; i &lt; 100; i++) {
 6             count++;
 7         }
 8         System.out.println(&quot;count=&quot; + count);
 9     }
10 
11     @Override
12     public void run() {
13         addCount();
14     }
15 }
16 
17 public class Run {
18     public static void main(String[] args) {
19         MyThread[] mythreadArray = new MyThread[100];
20         for (int i = 0; i &lt; 100; i++) {
21             mythreadArray[i] = new MyThread();
22         }
23 
24         for (int i = 0; i &lt; 100; i++) {
25             mythreadArray[i].start();
26         }
27     }
28 }</pre>

<p>&nbsp;</p>

<p>MyThread类第2行，count变量使用volatile修饰</p>

<p>Run.java 第20行 for循环中创建了100个线程，第25行将这100个线程启动去执行 addCount()，每个线程执行100次加1</p>

<p>期望的正确的结果应该是 100*100=10000，但是，实际上count并没有达到10000</p>

<p>原因是：volatile修饰的变量并不保证对它的操作（自增）具有原子性。（对于自增操作，可以使用JAVA的原子类AutoicInteger类保证原子自增）</p>

<p>比如，假设 i 自增到 5，线程A从主内存中读取i，值为5，将它存储到自己的线程空间中，执行加1操作，值为6。此时，CPU切换到线程B执行，从主从内存中读取变量i的值。由于线程A还没有来得及将加1后的结果写回到主内存，线程B就已经从主内存中读取了i，因此，线程B读到的变量 i 值还是5</p>

<p>相当于线程B读取的是已经过时的数据了，从而导致线程不安全性。<strong>这种情形在《Effective JAVA》中称之为&ldquo;安全性失败&rdquo;</strong></p>

<p><strong>综上，仅靠volatile不能保证线程的安全性。（原子性）</strong></p>

<p>&nbsp;</p>

<p>此外，<strong>volatile关键字修饰的变量不会被指令重排序优化。</strong>这里以《深入理解JAVA虚拟机》中一个例子来说明下自己的理解：</p>

<p>线程A执行的操作如下：</p>

<p>&nbsp;</p>

<pre>
Map configOptions ;
char[] configText;

volatile boolean initialized = false;

//线程A首先从文件中读取配置信息,调用process...处理配置信息,处理完成了将initialized 设置为true
configOptions = new HashMap();
configText = readConfigFile(fileName);
processConfig(configText, configOptions);//负责将配置信息configOptions 成功初始化
initialized = true;</pre>

<p>&nbsp;</p>

<p>线程B等待线程A把配置信息初始化成功后，使用配置信息去干活.....线程B执行的操作如下：</p>

<pre>
while(!initialized)
{
    sleep();
}

//使用配置信息干活
doSomethingWithConfig();
</pre>

<p>如果initialized变量不用 volatile 修饰，在线程A执行的代码中就有可能指令重排序。</p>

<p>即：线程A执行的代码中的最后一行：initialized = true 重排序到了&nbsp;processConfig方法调用的前面执行了，这就意味着：配置信息还未成功初始化，但是initialized变量已经被设置成true了。那么就导致 线程B的while循环&ldquo;提前&rdquo;跳出，拿着一个还未成功初始化的配置信息去干活(doSomethingWithConfig方法)。。。。</p>

<p>因此，initialized&nbsp;变量就必须得用 volatile修饰。这样，就不会发生指令重排序，也即：只有当配置信息被线程A成功初始化之后，initialized&nbsp;变量才会初始化为true。<strong>综上，volatile 修饰的变量会禁止指令重排序（有序性）</strong></p>

<p>&nbsp;</p>

<h2><strong>三，volatile 与 synchronized 的比较</strong></h2>

<p>volatile主要用在多个线程感知实例变量被更改了场合，从而使得各个线程获得最新的值。它强制线程每次从主内存中讲到变量，而不是从线程的私有内存中读取变量，从而保证了数据的可见性。</p>

<p>先看看下面的例子：</p>

<pre>
public class ThreadTest {

    public static void main(String[] args) {
        final Counter counter = new Counter();
        for (int i = 0; i &lt; 1000; i++) {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    counter.inc();
                }
            }).start();
        }
        System.out.println(counter);
    }

}</pre>

<p>public class Counter { private volatile int count = 0; public void inc() { try { Thread.sleep(3); } catch (InterruptedException e) { e.printStackTrace(); } count++; } @Override public String toString() { return &quot;[count=&quot; + count + &quot;]&quot;; } }</p>

<p>上面的例子是使用了volatile关键字修饰一个count变量，运行程序，结果会是神马？</p>

<p>结果不会是1000，或者说不等于1000.</p>

<p>下面是程序运行了3次的结果：</p>

<p>[count=971]</p>

<p>[count=968]</p>

<p>[count=972]</p>

<p>可以看出，程序运行的结果是不确定的，这说明了count++并不是原子级别的操作。</p>

<p><strong><ins>原因是声明为volatile的变量若与自身相关，如以下的声明方式：n=n+1,n++等，那么声明为volatile的变量就不起作用，也就是说关键字volatile无效。</ins></strong></p>

<p>分析：</p>

<p>在 java 的内存模型中每一个线程运行时都有一个线程栈，线程栈保存了线程运行时候变量值信息。当线程访问<br />
某一个对象时候值的时候，首先通过对象的引用找到对应在堆内存的变量的值，然后把堆内存变量的具体值load到线<br />
程本地内存中，建立一个变量副本，之后线程就不再和对象在堆内存变量值有任何关系，而是直接修改副本变量的值，<br />
在修改完之后的某一个时刻（线程退出之前），自动把线程变量副本的值回写到对象在堆中变量。这样在堆中的对象<br />
的值就产生变化了。<br />
也就是说上面主函数中开启了1000 个子线程，每个线程都有一个变量副本，每个线程修改变量只是临时修改了<br />
自己的副本，当线程结束时再将修改的值写入在主内存中，这样就出现了线程安全问题。因此结果就不可能等于1000<br />
了，一般都会小于1000。</p>

<p>若想将count的操作变为原子级别，可以使用关键字synchronized，即可将类Counter修改为：</p>

<pre>
public class Counter {

    public static int count = 0;

    public synchronized void inc() {
        count++;
    }

    public void run() {
        for (int i = 0; i &lt; 10; i++) {
            try {
                inc();// n=count+1改成了inc()
                Thread.sleep(3);// 为了使运行结果更随即，延迟3毫秒
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    @Override
    public String toString() {
        return &quot;[count=&quot; + count + &quot;]&quot;;
    }
}
</pre>

<p>程序运行3次的结果：</p>

<p>[count=1000]</p>

<p>[count=1000]</p>

<p>[count=1000]</p>

<p>&nbsp;</p>

<p>synchronized和volatile的区别：</p>

<p>一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了两层语义：<br />
1）保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是<br />
&nbsp;&nbsp;&nbsp; 立即可见的。<br />
2）禁止进行指令重排序。<br />
&nbsp;&nbsp; volatile本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取；<br />
&nbsp;&nbsp; synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。</p>

<p><br />
1.volatile仅能使用在变量级别；<br />
&nbsp;synchronized则可以使用在变量、方法、和类级别的</p>

<p><br />
2.volatile仅能实现变量的修改可见性，并不能保证原子性；<br />
&nbsp;synchronized则可以保证变量的修改可见性和原子性</p>

<p><br />
3.volatile不会造成线程的阻塞；<br />
&nbsp;synchronized可能会造成线程的阻塞。</p>

<p><br />
4.volatile标记的变量不会被编译器优化；<br />
&nbsp;synchronized标记的变量可以被编译器优化</p>

<p>&nbsp;</p>

<h2><strong>四，线程安全性</strong></h2>

<p>线程安全性包括两个方面，①可见性。②原子性。</p>

<p>从上面自增的例子中可以看出：仅仅使用volatile并不能保证线程安全性。而synchronized则可实现线程的安全性。</p>
