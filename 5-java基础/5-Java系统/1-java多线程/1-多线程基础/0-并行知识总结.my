<h1>java并行知识整理</h1>

<h2>并行的基本概念</h2>

<h3>Java线程：概念与原理</h3>

<h4>&nbsp; &nbsp; 一、操作系统中线程和进程的概念</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 现在的操作系统是多任务操作系统。多线程是实现多任务的一种方式。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 进程是指一个内存中运行的应用程序，每个进程都有自己独立的一块内存空间，一个进程中可以启动多个线程。比如在Windows系统中，一个运行的exe就是一个进程。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 线程是指进程中的一个执行流程，一个进程中可以运行多个线程。比如java.exe进程中可以运行很多线程。线程总是属于某个进程，进程中的多个线程共享进程的内存。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &ldquo;同时&rdquo;执行是人的感觉，在线程之间实际上轮换执行。</p>

<h4>&nbsp; &nbsp; 二、Java中的线程</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 在Java中，&ldquo;线程&rdquo;指两件不同的事情：<br />
&nbsp; &nbsp; &nbsp; &nbsp; 1、java.lang.Thread类的一个实例；</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 2、线程的执行。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 使用java.lang.Thread类或者java.lang.Runnable接口编写代码来定义、实例化和启动新线程。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 一个Thread类实例只是一个对象，像Java中的任何其他对象一样，具有变量和方法，生死于堆上。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; Java中，每个线程都有一个调用栈，即使不在程序中创建任何新的线程，线程也在后台运行着。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 一个Java应用总是从main()方法开始运行，mian()方法运行在一个线程内，它被称为主线程。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 一旦创建一个新的线程，就产生一个新的调用栈。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 线程总体分两类：用户线程和守候线程。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 当所有用户线程执行完毕的时候，JVM自动关闭。但是守候线程却不独立于JVM，守候线程一般是由操作系统或者用户自己创建的</p>

<h3>java线程：创建与启动</h3>

<h4>&nbsp; &nbsp; 一、定义线程</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 1、扩展java.lang.Thread类。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 2、实现java.lang.Runnable接口。</p>

<h4>&nbsp; &nbsp; 二、实例化线程</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 1、如果是扩展java.lang.Thread类的线程，则直接new即可。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 2、如果是实现了java.lang.Runnable接口的类，则用Thread的构造方法：</p>

<h4>&nbsp; &nbsp; 三、启动线程</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 在线程的Thread对象上调用start()方法，而不是run()或者别的方法。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 在调用start()方法之前：线程处于新状态中，新状态指有一个Thread对象，但还没有一个真正的线程。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 在调用start()方法之后：发生了一系列复杂的事情</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 启动新的执行线程（具有新的调用栈）；</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 该线程从新状态转移到可运行状态；</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 当该线程获得机会执行时，其目标run()方法将运行。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 注意：对Java来说，run()方法没有任何特别之处。像main()方法一样，它只是新线程知道调用的方法名称(和签名)。因此，在Runnable上或者Thread上调用run方法是合法的。但并不启动新的线程。</p>

<h3>Java线程：线程状态的转换</h3>

<h4>&nbsp; &nbsp; 一、线程状态</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 线程的状态转换是线程控制的基础。线程状态总的可分为五大状态：分别是生、死、可运行、运行、等待/阻塞。用一个图来描述如下：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 1、新状态：线程对象已经创建，还没有在其上调用start()方法。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 2、可运行状态：当线程有资格运行，但调度程序还没有把它选定为运行线程时线程所处的状态。当start()方法调用时，线程首先进入可运行状态。在线程运行之后或者从阻塞、等待或睡眠状态回来后，也返回到可运行状态。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 3、运行状态：线程调度程序从可运行池中选择一个线程作为当前线程时线程所处的状态。这也是线程进入运行状态的唯一一种方式。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 4、等待/阻塞/睡眠状态：这是线程有资格运行时它所处的状态。实际上这个三状态组合为一种，其共同点是：线程仍旧是活的，但是当前没有条件运行。换句话说，它是可运行的，但是如果某件事件出现，他可能返回到可运行状态。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 5、死亡态：当线程的run()方法完成时就认为它死去。这个线程对象也许是活的，但是，它已经不是一个单独执行的线程。线程一旦死亡，就不能复生。如果在一个死去的线程上调用start()方法，会抛出java.lang.IllegalThreadStateException异常。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 有关详细状态转换图可以参看本人的&ldquo;Java多线程编程总结&rdquo;中的图</p>

<h3>Java线程：线程的优先级</h3>

<p>&nbsp; &nbsp; &nbsp; &nbsp; java 中的线程优先级的范围是1～10，默认的优先级是5。&ldquo;高优先级线程&rdquo;会优先于&ldquo;低优先级线程&rdquo;执行。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; java 中有两种线程：<strong>用户线程</strong>和<strong>守护线程</strong>。可以通过isDaemon()方法来区别它们：如果返回false，则说明该线程是&ldquo;用户线程&rdquo;；否则就是&ldquo;守护线程&rdquo;。<br />
&nbsp; &nbsp; &nbsp; &nbsp; 用户线程一般用户执行用户级任务，而守护线程也就是&ldquo;后台线程&rdquo;，一般用来执行后台任务。需要注意的是：Java虚拟机在&ldquo;用户线程&rdquo;都结束后会后退出。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; JDK 中关于线程优先级和守护线程的介绍如下：</p>

<p>&nbsp;</p>

<h2>并行开发基础</h2>

<h3><strong><span style="font-size:16px">1、java虚拟机的支持</span></strong></h3>

<h4>监视器</h4>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java中的监视器支持两种线稈：互斥和协作。Java虚拟机通过对象锁来实现互斥，允许多个</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;线程在同一个共享数据上独立而互不干扰地工作t协作则是通过Object类的wait方法和notify方</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;法来实现，允许多个线程为了冋一个目标而共同工作:：</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们可以将监视器比作一个违筑，它有一个很特别的房间，房间里有一些数据，而且在同</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一时间只能被一个线程占据。一个线程从进人这个房间到它离开前，它可以独占地访问房间屮</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;的全部数据。我们用一些术语来定义这&bull;系列动作，进人这个建筑叫做&ldquo;进人监视器&#39;进行建</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;筑中的那个特别的房间叫作&ldquo;获得监视器&#39;占据房间叫做&ldquo;持打监视器&#39;离开房间叫做&ldquo;释</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;放监视器&#39;离丌建筑叫做&ldquo;退出监视器&#39;</p>

<h4>对象锁</h4>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在前面的章节中提到过，Java虚拟机的一些运彳r时数据区会被所存的线稈共享，其他的数据</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;是各个线程私有的d因为堆和方法区是被所有线程共亨的，Java程汴需要为两种多线程访问数据</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;迸行协调：</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&bull;保存在堆中的实例变童。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&bull;保存在方法区中的类变</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;程序不需要协调保存在Java栈中的词部变量，因为』狀3栈中的数据是属于拥有该栈的线程私有的。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Jwa虚拟机中，每个对象和类在逻辑上都是和-个监视器相戈联的。对于对象来说，相关联的监视器保护对象的实例变量3对于类来说，监视器保护类的类变蜇。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;如果一个对象没有实例变量，或者一个类没有类变量+相关联的监视器就什么都不监视。<br />
&nbsp;</p>

<h3><strong><span style="font-size:16px">2、java提供的并行关键字支持</span></strong></h3>

<h4>Java线程：volatile关键字</h4>

<p>&nbsp; &nbsp; Java&trade; 语言包含两种内在的同步机制：同步块（或方法）和 volatile变量。这两种机制的提出都是为了实现代码线程的安全性。其中 Volatile变量的同步性较差（但有时它更简单并且开销更低），而且其使用也更容易出错。</p>

<p>&nbsp; &nbsp; 谈及到volatile关键字，不得不提的一篇文章是：《Java理论与实践:正确使用 Volatile 变量》，这篇文章对volatile关键字的用法做了相当精辟的阐述。</p>

<p>&nbsp; &nbsp; 之所以要单独提出volatile这个不常用的关键字原因是这个关键字在高性能的多线程程序中也有很重要的用途，只是这个关键字用不好会出很多问题。</p>

<p>&nbsp; &nbsp; 首先考虑一个问题，为什么变量需要volatile来修饰呢？</p>

<p>&nbsp; &nbsp; 要搞清楚这个问题，首先应该明白计算机内部都做什么了。比如做了一个i++操作，计算机内部做了三次处理：读取－修改－写入。</p>

<p>&nbsp; &nbsp; 同样，对于一个long型数据，做了个赋值操作，在32系统下需要经过两步才能完成，先修改低32位，然后修改高32位。</p>

<p>&nbsp; &nbsp; 假想一下，当将以上的操作放到一个多线程环境下操作时候，有可能出现的问题，是这些步骤执行了一部分，而另外一个线程就已经引用了变量值，这样就导致了读取脏数据的问题。</p>

<p>&nbsp; &nbsp; 通过这个设想，就不难理解volatile关键字了。</p>

<p>&nbsp; &nbsp; volatile可以用在任何变量前面，但不能用于final变量前面，因为final型的变量是禁止修改的。也不存在线程安全的问题。</p>

<p>&nbsp; &nbsp; 更多的内容，请参看：：《Java理论与实践:正确使用 Volatile 变量》一文，写得很好。</p>

<h4>Java线程：synchronized关键字</h4>

<h5>1.synchronized原理</h5>

<p>&nbsp;&nbsp;&nbsp;&nbsp;在java中，每一个对象有且仅有一个同步锁。这也意味着，同步锁是依赖于对象而存在。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;当我们调用某对象的synchronized方法时，就获取了该对象的同步锁。例如，synchronized(obj)就获取了&ldquo;obj这个对象&rdquo;的同步锁。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;不同线程对同步锁的访问是互斥的。也就是说，某时间点，对象的同步锁只能被一个线程获取到！通过同步锁，我们就能在多线程中，实现对&ldquo;对象/方法&rdquo;的互斥访问。 &nbsp;&nbsp;&nbsp;&nbsp;例如，现在有两个线程A和线程B，它们都会访问&ldquo;对象obj的同步锁&rdquo;。假设，在某一时刻，线程A获取到&ldquo;obj的同步锁&rdquo;并在执行一些操作；而此时，线程B也企图获取&ldquo;obj的同步锁&rdquo; &mdash;&mdash; &nbsp;&nbsp;&nbsp;&nbsp;线程B会获取失败，它必须等待，直到线程A释放了&ldquo;该对象的同步锁&rdquo;之后线程B才能获取到&ldquo;obj的同步锁&rdquo;从而才可以运行。<br />
&nbsp;&nbsp;&nbsp;&nbsp;</p>

<h5>2.synchronized基本规则</h5>

<p>&nbsp; &nbsp; 我们将synchronized的基本规则总结为下面3条，并通过实例对它们进行说明。</p>

<p>&nbsp; &nbsp; 第一条: 当一个线程访问&ldquo;某对象&rdquo;的&ldquo;synchronized方法&rdquo;或者&ldquo;synchronized代码块&rdquo;时，其他线程对<strong>&ldquo;该对象&rdquo;的该&ldquo;synchronized方法&rdquo;或者&ldquo;synchronized代码块&rdquo;的访问将被阻塞</strong>。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;第二条: 当一个线程访问&ldquo;某对象&rdquo;的&ldquo;synchronized方法&rdquo;或者&ldquo;synchronized代码块&rdquo;时，其他线程<strong>仍然可以访问&ldquo;该对象&rdquo;的非同步代码块</strong>。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;第三条: 当一个线程访问&ldquo;某对象&rdquo;的&ldquo;synchronized方法&rdquo;或者&ldquo;synchronized代码块&rdquo;时，其他线程对<strong>&ldquo;该对象&rdquo;的<em>其他的</em>&ldquo;synchronized方法&rdquo;或者&ldquo;synchronized代码块&rdquo;的访问将被阻塞</strong>。</p>

<p>&nbsp;</p>

<h3><span style="font-size:16px"><strong>3、object 类提供的并行支持</strong></span></h3>

<h4>1、<strong>wait(), notify(), notifyAll()等方法</strong></h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 在Object.java中，定义了wait(), notify()和notifyAll()等接口。wait()的作用是让当前线程进入等待状态，同时，wait()也会让当前线程释放它所持有的锁。而notify()和notifyAll()&nbsp;&nbsp;&nbsp;&nbsp;的作用，则是唤醒当前对象上的等待线程；notify()是唤醒单个线程，而notifyAll()是唤醒所有的线程。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; Object类中关于等待/唤醒的API详细信息如下：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; notify() &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-- 唤醒在此对象监视器上等待的单个线程。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; notifyAll()&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- 唤醒在此对象监视器上等待的所有线程。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;wait() &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-- 让当前线程处于&ldquo;等待(阻塞)状态&rdquo;，&ldquo;直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法&rdquo;，当前线程被唤醒(进入&ldquo;就绪状态&rdquo;)。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;wait(long timeout) &nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-- 让当前线程处于&ldquo;等待(阻塞)状态&rdquo;，&ldquo;直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者超过指定的时间量&rdquo;，当前线程被唤醒(进入&ldquo;就绪状态&rdquo;)。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; wait(long timeout, int nanos) &nbsp;-- 让当前线程处于&ldquo;等待(阻塞)状态&rdquo;，&ldquo;直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者其他某个线程中断当前线程，或者已超过某个实际时间量&rdquo;，当前线程被唤醒(进入&ldquo;就绪状态&rdquo;)。</p>

<h3><strong><span style="font-size:16px">4、thread 类提供的并行支持</span></strong></h3>

<h4>1、sleep()方法</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; Thread.sleep(long millis)和Thread.sleep(long millis, int nanos)静态方法强制当前正在执行的线程休眠（暂停执行），以&ldquo;减慢线程&rdquo;。当线程睡眠时，它入睡在某个地方，在苏醒之前不会返回到可运行状态。当睡眠时间到期，则返回到可运行状态。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 线程睡眠的原因：线程执行太快，或者需要强制进入下一轮，因为Java规范不保证合理的轮换。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 睡眠的实现：调用静态方法。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread.sleep(123);<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (InterruptedException e) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace(); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 睡眠的位置：为了让其他线程有机会执行，可以将Thread.sleep()的调用放线程run()之内。这样才能保证该线程执行过程中会睡眠。</p>

<p>&nbsp; &nbsp; &nbsp; 注意：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 1、线程睡眠是帮助所有线程获得运行机会的最好方法。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 2、线程睡眠到期自动苏醒，并返回到可运行状态，不是运行状态。sleep()中指定的时间是线程不会运行的最短时间。因此，sleep()方法不能保证该线程睡眠到期后就开始执行。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 3、sleep()是静态方法，只能控制当前正在运行的线程。&nbsp; &nbsp;</p>

<h4>2、join()方法</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; Thread的非静态方法join()让一个线程B&ldquo;加入&rdquo;到另外一个线程A的尾部。在A执行完毕之前，B不能工作。例如：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread t = new MyThread();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t.start();<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t.join();</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 另外，join()方法还有带超时限制的重载版本。例如t.join(5000);则让线程等待5000毫秒，如果超过这个时间，则停止等待，变为可运行状态。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 线程的加入join()对线程栈导致的结果是线程栈发生了变化，当然这些变化都是瞬时的。下面给示意图：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; 小结</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 到目前位置，介绍了线程离开运行状态的3种方法：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 1、调用Thread.sleep()：使当前线程睡眠至少多少毫秒（尽管它可能在指定的时间之前被中断）。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 2、调用Thread.yield()：不能保障太多事情，尽管通常它会让当前运行线程回到可运行性状态，使得有相同优先级的线程有机会执行。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 3、调用join()方法：保证当前线程停止执行，直到该线程所加入的线程完成为止。然而，如果它加入的线程没有存活，则当前线程不需要停止。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 除了以上三种方式外，还有下面几种特殊情况可能使线程离开运行状态：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 1、线程的run()方法完成。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 2、在对象上调用wait()方法（不是在线程上调用）。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 3、线程不能在对象上获得锁定，它正试图运行该对象的方法代码。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 4、线程调度程序可以决定将当前运行状态移动到可运行状态，以便让另一个线程获得运行机会，而不需要任何理由。</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>
