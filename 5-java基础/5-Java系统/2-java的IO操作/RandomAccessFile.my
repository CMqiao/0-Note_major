<h1>Java RandomAccessFile用法</h1>

<p>RandomAccessFile</p>

<p>RandomAccessFile是用来访问那些保存数据记录的文件的，你就可以用seek( )方法来访问记录，并进行读写了。这些记录的大小不必相同；但是其大小和位置必须是可知的。但是该类仅限于操作文件。<br />
<br />
RandomAccessFile不属于InputStream和OutputStream类系的。实际上，除了实现DataInput和DataOutput接口之外(DataInputStream和DataOutputStream也实现了这两个接口)，它和这两个类系毫不相干，甚至不使用InputStream和OutputStream类中已经存在的任何功能；它是一个完全独立的类，所有方法(绝大多数都只属于它自己)都是从零开始写的。这可能是因为RandomAccessFile能在文件里面前后移动，所以它的行为与其它的I/O类有些根本性的不同。总而言之，它是一个直接继承Object的，独立的类。<br />
<br />
基本上，RandomAccessFile的工作方式是，把DataInputStream和DataOutputStream结合起来，再加上它自己的一些方法，比如定位用的getFilePointer( )，在文件里移动用的seek( )，以及判断文件大小的length( )、skipBytes()跳过多少字节数。此外，它的构造函数还要一个表示以只读方式(&quot;r&quot;)，还是以读写方式(&quot;rw&quot;)打开文件的参数 (和C的fopen( )一模一样)。它不支持只写文件。<br />
<br />
只有RandomAccessFile才有seek搜寻方法，而这个方法也只适用于文件。BufferedInputStream有一个mark( )方法，你可以用它来设定标记(把结果保存在一个内部变量里)，然后再调用reset( )返回这个位置，但是它的功能太弱了，而且也不怎么实用。<br />
<br />
RandomAccessFile的绝大多数功能，但不是全部，已经被JDK 1.4的nio的&quot;内存映射文件(memory-mapped files)&quot;给取代了，你该考虑一下是不是用&quot;内存映射文件&quot;来代替RandomAccessFile了。</p>

<p><strong>[java]</strong>&nbsp;<a href="http://blog.csdn.net/akon_vm/article/details/7429245#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;" target="_blank" title="view plain">view plain</a>&nbsp;<a href="http://blog.csdn.net/akon_vm/article/details/7429245#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;" target="_blank" title="copy">copy</a></p>

<p><embed allowscriptaccess="always" bgcolor="#ffffff" height="18" pluginspage="http://www.macromedia.com/go/getflashplayer" quality="best" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" type="application/x-shockwave-flash" width="18" wmode="transparent"></embed></p>

<ol start="1">
	<li>import&nbsp;java.io.IOException;&nbsp;&nbsp;</li>
	<li>import&nbsp;java.io.RandomAccessFile;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;TestRandomAccessFile&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;throws&nbsp;IOException&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomAccessFile&nbsp;rf&nbsp;=&nbsp;new&nbsp;RandomAccessFile(&quot;rtest.dat&quot;,&nbsp;&quot;rw&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;10;&nbsp;i++)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//写入基本类型double数据&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rf.writeDouble(i&nbsp;*&nbsp;1.414);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rf.close();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rf&nbsp;=&nbsp;new&nbsp;RandomAccessFile(&quot;rtest.dat&quot;,&nbsp;&quot;rw&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//直接将文件指针移到第5个double数据后面&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rf.seek(5&nbsp;*&nbsp;8);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//覆盖第6个double数据&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rf.writeDouble(47.0001);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rf.close();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rf&nbsp;=&nbsp;new&nbsp;RandomAccessFile(&quot;rtest.dat&quot;,&nbsp;&quot;r&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;10;&nbsp;i++)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Value&nbsp;&quot;&nbsp;+&nbsp;i&nbsp;+&nbsp;&quot;:&nbsp;&quot;&nbsp;+&nbsp;rf.readDouble());&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rf.close();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;&nbsp;</li>
</ol>

<p><br />
&nbsp;</p>

<h2><a name="t1"></a>内存映射文件</h2>

<p>内存映射文件能让你创建和修改那些因为太大而无法放入内存的文件。有了内存映射文件，你就可以认为文件已经全部读进了内存，然后把它当成一个非常大的数组来访问。这种解决办法能大大简化修改文件的代码。<br />
fileChannel.map(FileChannel.MapMode mode, long position, long size)将此通道的文件区域直接映射到内存中。注意，你必须指明，它是从文件的哪个位置开始映射的，映射的范围又有多大；也就是说，它还可以映射一个大文件的某个小片断。</p>

<p><br />
MappedByteBuffer是ByteBuffer的子类，因此它具备了ByteBuffer的所有方法，但新添了force()将缓冲区的内容强制刷新到存储设备中去、load()将存储设备中的数据加载到内存中、isLoaded()位置内存中的数据是否与存储设置上同步。这里只简单地演示了一下put()和get()方法，除此之外，你还可以使用asCharBuffer( )之类的方法得到相应基本类型数据的缓冲视图后，可以方便的读写基本类型数据。</p>

<p><strong>[java]</strong>&nbsp;<a href="http://blog.csdn.net/akon_vm/article/details/7429245#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;" target="_blank" title="view plain">view plain</a>&nbsp;<a href="http://blog.csdn.net/akon_vm/article/details/7429245#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;" target="_blank" title="copy">copy</a></p>

<p><embed allowscriptaccess="always" bgcolor="#ffffff" height="18" pluginspage="http://www.macromedia.com/go/getflashplayer" quality="best" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" type="application/x-shockwave-flash" width="18" wmode="transparent"></embed></p>

<ol start="1">
	<li>import&nbsp;java.io.RandomAccessFile;&nbsp;&nbsp;</li>
	<li>import&nbsp;java.nio.MappedByteBuffer;&nbsp;&nbsp;</li>
	<li>import&nbsp;java.nio.channels.FileChannel;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;LargeMappedFiles&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;int&nbsp;length&nbsp;=&nbsp;0x8000000;&nbsp;//&nbsp;128&nbsp;Mb&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;throws&nbsp;Exception&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;为了以可读可写的方式打开文件，这里使用RandomAccessFile来创建文件。&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileChannel&nbsp;fc&nbsp;=&nbsp;new&nbsp;RandomAccessFile(&quot;test.dat&quot;,&nbsp;&quot;rw&quot;).getChannel();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//注意，文件通道的可读可写要建立在文件流本身可读写的基础之上&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MappedByteBuffer&nbsp;out&nbsp;=&nbsp;fc.map(FileChannel.MapMode.READ_WRITE,&nbsp;0,&nbsp;length);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//写128M的内容&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;length;&nbsp;i++)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.put((byte)&nbsp;&#39;x&#39;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Finished&nbsp;writing&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//读取文件中间6个字节内容&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;length&nbsp;/&nbsp;2;&nbsp;i&nbsp;&lt;&nbsp;length&nbsp;/&nbsp;2&nbsp;+&nbsp;6;&nbsp;i++)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print((char)&nbsp;out.get(i));&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fc.close();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p><br />
&nbsp;</p>

<p>尽管映射写似乎要用到FileOutputStream，但是映射文件中的所有<strong>输出</strong>&nbsp;必须使用RandomAccessFile，但如果只需要读时可以使用FileInputStream，写映射文件时一定要使用随机访问文件，可能写时要读的原因吧。</p>

<p>&nbsp;</p>

<p>该程序创建了一个128Mb的文件，如果一次性读到内存可能导致内存溢出，但这里访问好像只是一瞬间的事，这是因为，真正调入内存的只是其中的一小部分，其余部分则被放在交换文件上。这样你就可以很方便地修改超大型的文件了(最大可以到2 GB)。注意，Java是调用操作系统的&quot;文件映射机制&quot;来提升性能的。</p>

<p>&nbsp;</p>

<p>RandomAccessFile类的应用：</p>

<p><strong>[java]</strong>&nbsp;<a href="http://blog.csdn.net/akon_vm/article/details/7429245#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;" target="_blank" title="view plain">view plain</a>&nbsp;<a href="http://blog.csdn.net/akon_vm/article/details/7429245#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;" target="_blank" title="copy">copy</a></p>

<p><embed allowscriptaccess="always" bgcolor="#ffffff" height="18" pluginspage="http://www.macromedia.com/go/getflashplayer" quality="best" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" type="application/x-shockwave-flash" width="18" wmode="transparent"></embed></p>

<ol start="1">
	<li>/*&nbsp;</li>
	<li>&nbsp;*&nbsp;程序功能：演示了RandomAccessFile类的操作，同时实现了一个文件复制操作。&nbsp;</li>
	<li>&nbsp;*/&nbsp;&nbsp;</li>
	<li>package&nbsp;com.lwj.demo;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>import&nbsp;java.io.*;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;RandomAccessFileDemo&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;throws&nbsp;Exception&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;RandomAccessFile&nbsp;file&nbsp;=&nbsp;new&nbsp;RandomAccessFile(&quot;file&quot;,&nbsp;&quot;rw&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;//&nbsp;以下向file文件中写数据&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;file.writeInt(20);//&nbsp;占4个字节&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;file.writeDouble(8.236598);//&nbsp;占8个字节&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;file.writeUTF(&quot;这是一个UTF字符串&quot;);//&nbsp;这个长度写在当前文件指针的前两个字节处，可用readShort()读取&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;file.writeBoolean(true);//&nbsp;占1个字节&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;file.writeShort(395);//&nbsp;占2个字节&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;file.writeLong(2325451l);//&nbsp;占8个字节&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;file.writeUTF(&quot;又是一个UTF字符串&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;file.writeFloat(35.5f);//&nbsp;占4个字节&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;file.writeChar(&#39;a&#39;);//&nbsp;占2个字节&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;file.seek(0);//&nbsp;把文件指针位置设置到文件起始处&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;//&nbsp;以下从file文件中读数据，要注意文件指针的位置&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;System.out.println(&quot;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;从file文件指定位置读数据&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;System.out.println(file.readInt());&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;System.out.println(file.readDouble());&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;System.out.println(file.readUTF());&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;file.skipBytes(3);//&nbsp;将文件指针跳过3个字节，本例中即跳过了一个boolean值和short值。&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;System.out.println(file.readLong());&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;file.skipBytes(file.readShort());&nbsp;//&nbsp;跳过文件中&ldquo;又是一个UTF字符串&rdquo;所占字节，注意readShort()方法会移动文件指针，所以不用加2。&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;System.out.println(file.readFloat());&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;//以下演示文件复制操作&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;System.out.println(&quot;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;文件复制（从file到fileCopy）&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;file.seek(0);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;RandomAccessFile&nbsp;fileCopy=new&nbsp;RandomAccessFile(&quot;fileCopy&quot;,&quot;rw&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;int&nbsp;len=(int)file.length();//取得文件长度（字节数）&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;byte[]&nbsp;b=new&nbsp;byte[len];&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;file.readFully(b);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;fileCopy.write(b);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;System.out.println(&quot;复制完成！&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p><br />
RandomAccessFile 插入写示例：</p>

<p><strong>[java]</strong>&nbsp;<a href="http://blog.csdn.net/akon_vm/article/details/7429245#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;" target="_blank" title="view plain">view plain</a>&nbsp;<a href="http://blog.csdn.net/akon_vm/article/details/7429245#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;" target="_blank" title="copy">copy</a></p>

<p><embed allowscriptaccess="always" bgcolor="#ffffff" height="18" pluginspage="http://www.macromedia.com/go/getflashplayer" quality="best" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" type="application/x-shockwave-flash" width="18" wmode="transparent"></embed></p>

<ol start="1">
	<li>/**&nbsp;</li>
	<li>&nbsp;*&nbsp;&nbsp;</li>
	<li>&nbsp;*&nbsp;@param&nbsp;skip&nbsp;跳过多少过字节进行插入数据&nbsp;</li>
	<li>&nbsp;*&nbsp;@param&nbsp;str&nbsp;要插入的字符串&nbsp;</li>
	<li>&nbsp;*&nbsp;@param&nbsp;fileName&nbsp;文件路径&nbsp;</li>
	<li>&nbsp;*/&nbsp;&nbsp;</li>
	<li>public&nbsp;static&nbsp;void&nbsp;beiju(long&nbsp;skip,&nbsp;String&nbsp;str,&nbsp;String&nbsp;fileName){&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomAccessFile&nbsp;raf&nbsp;=&nbsp;new&nbsp;RandomAccessFile(fileName,&quot;rw&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(skip&nbsp;&lt;&nbsp;&nbsp;0&nbsp;||&nbsp;skip&nbsp;&gt;&nbsp;raf.length()){&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;跳过字节数无效&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte[]&nbsp;b&nbsp;=&nbsp;str.getBytes();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raf.setLength(raf.length()&nbsp;+&nbsp;b.length);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(long&nbsp;i&nbsp;=&nbsp;raf.length()&nbsp;-&nbsp;1;&nbsp;i&nbsp;&gt;&nbsp;b.length&nbsp;+&nbsp;skip&nbsp;-&nbsp;1;&nbsp;i--){&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raf.seek(i&nbsp;-&nbsp;b.length);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte&nbsp;temp&nbsp;=&nbsp;raf.readByte();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raf.seek(i);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raf.writeByte(temp);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raf.seek(skip);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raf.write(b);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raf.close();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(Exception&nbsp;e)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p><br />
&nbsp;</p>

<p>利用RandomAccessFile实现文件的多线程下载，即多线程下载一个文件时，将文件分成几块，每块用不同的线程进行下载。下面是一个利用多线程在写文件时的例子，其中预先分配文件所需要的空间，然后在所分配的空间中进行分块，然后写入：</p>

<p><strong>[java]</strong>&nbsp;<a href="http://blog.csdn.net/akon_vm/article/details/7429245#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;" target="_blank" title="view plain">view plain</a>&nbsp;<a href="http://blog.csdn.net/akon_vm/article/details/7429245#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;" target="_blank" title="copy">copy</a></p>

<p><embed allowscriptaccess="always" bgcolor="#ffffff" height="18" pluginspage="http://www.macromedia.com/go/getflashplayer" quality="best" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" type="application/x-shockwave-flash" width="18" wmode="transparent"></embed></p>

<ol start="1">
	<li>import&nbsp;java.io.FileNotFoundException;&nbsp;&nbsp;</li>
	<li>import&nbsp;java.io.IOException;&nbsp;&nbsp;</li>
	<li>import&nbsp;java.io.RandomAccessFile;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>/**&nbsp;</li>
	<li>&nbsp;*&nbsp;测试利用多线程进行文件的写操作&nbsp;</li>
	<li>&nbsp;*/&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;Test&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;throws&nbsp;Exception&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;预分配文件所占的磁盘空间，磁盘中会创建一个指定大小的文件&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomAccessFile&nbsp;raf&nbsp;=&nbsp;new&nbsp;RandomAccessFile(&quot;D://abc.txt&quot;,&nbsp;&quot;rw&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raf.setLength(1024*1024);&nbsp;//&nbsp;预分配&nbsp;1M&nbsp;的文件空间&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raf.close();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;所要写入的文件内容&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;s1&nbsp;=&nbsp;&quot;第一个字符串&quot;;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;s2&nbsp;=&nbsp;&quot;第二个字符串&quot;;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;s3&nbsp;=&nbsp;&quot;第三个字符串&quot;;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;s4&nbsp;=&nbsp;&quot;第四个字符串&quot;;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;s5&nbsp;=&nbsp;&quot;第五个字符串&quot;;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;利用多线程同时写入一个文件&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;FileWriteThread(1024*1,s1.getBytes()).start();&nbsp;//&nbsp;从文件的1024字节之后开始写入数据&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;FileWriteThread(1024*2,s2.getBytes()).start();&nbsp;//&nbsp;从文件的2048字节之后开始写入数据&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;FileWriteThread(1024*3,s3.getBytes()).start();&nbsp;//&nbsp;从文件的3072字节之后开始写入数据&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;FileWriteThread(1024*4,s4.getBytes()).start();&nbsp;//&nbsp;从文件的4096字节之后开始写入数据&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;FileWriteThread(1024*5,s5.getBytes()).start();&nbsp;//&nbsp;从文件的5120字节之后开始写入数据&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;利用线程在文件的指定位置写入指定数据&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;class&nbsp;FileWriteThread&nbsp;extends&nbsp;Thread{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;int&nbsp;skip;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;byte[]&nbsp;content;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;FileWriteThread(int&nbsp;skip,byte[]&nbsp;content){&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.skip&nbsp;=&nbsp;skip;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.content&nbsp;=&nbsp;content;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;run(){&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomAccessFile&nbsp;raf&nbsp;=&nbsp;null;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raf&nbsp;=&nbsp;new&nbsp;RandomAccessFile(&quot;D://abc.txt&quot;,&nbsp;&quot;rw&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raf.seek(skip);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raf.write(content);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(FileNotFoundException&nbsp;e)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;Auto-generated&nbsp;catch&nbsp;block&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;finally&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raf.close();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(Exception&nbsp;e)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>
