<h1>如何分析JAVA字节码--Oolong反编译</h1>

<p>处于C和机器语言之间有一种叫汇编语言，它很接近机器语言，却又可以使人可以看得懂这些指令，C语言的编译器会先将代码翻译成汇编，然后再翻译成机器语言。</p>

<blockquote>
<p><strong>C语言&nbsp;</strong>-&gt;&nbsp;<strong>汇编语言&nbsp;</strong>-&gt;&nbsp;<strong>机器语言</strong></p>
</blockquote>

<p>其实对于java，刚开始接触也有些迷惑，就以为它是一个很NB的语言，可以一次编译随处执行。但其实很久之前就有人跟我说过，&ldquo;java的跨平台是依赖编译器自身的&rdquo;，当时还不是很理解这句话的含义，如今看来，所谓&ldquo;跨平台&rdquo;的特性，基本都要归功于java虚拟机。换句话说，某平台下没有java虚拟机，java就无所谓跨平台。</p>

<p>很容易理解，语言无法做到跨平台因为编译器就依赖平台，在不同的环境上，对编译器而言他会将代码翻译成不同的目标语句，使得该二进制码可以在该平台上被正常执行。同样可以想到，如果要做到&ldquo;一定程度的&rdquo;跨平台，就必须要有一个中间翻译器，这就是JVM。首先jvm接受统一格式的java字节码，同时适配各种操作系统，能够将该java字节码翻译成该平台下的目标代码，使得该代码能够被系统执行。</p>

<p>java字节码就是JVM世界里的机器语言，而JVM如何运行这些字节码的呢？<strong>是否与机器语言一样有一些类似汇编的指令集呢？答案是肯定的。</strong></p>

<p>JVM有一套自己的指令集，当然该指令集不随系统、CPU等改变而改变，该指令集是帮助JVM识别一个java字节码的。现在介绍一种是用Oolong工具将java字节码翻译为类汇编语言Oolong的方法。</p>

<blockquote>
<p><strong>Java语言&nbsp;&nbsp;</strong>-&gt;【<span style="font-family:Comic Sans MS,cursive">汇编语言(Oolong语言</span>)】&nbsp; -&gt;&nbsp;<strong>字节码</strong>(JVM的机器语言)</p>
</blockquote>

<p>首先需要下载Oolong，当然这个挺麻烦的，如果有需要可以到我的github上下载源码。https://github.com/jpbirdy/programming-for-the-jvm</p>

<p>当然，实际只需要一个编译好的jar包就可以了，这里可以下载到http://pan.baidu.com/s/1i39UgV7，下载后将Oolong.jar放到jdk的lib目录下，同时添加环境变量的CLASSPATH，添加一条Oolong.jar的路径地址。</p>

<p>然后就可以使用Oolong进行class的反编译了。过程如下</p>

<p>假设存在一个HelloWorld.class文件，在class目录中执行：</p>

<blockquote>java&nbsp;COM.sootNsmoke.oolong.Gnoloo&nbsp;HelloWorld.class&nbsp;&nbsp;</blockquote>

<p><br />
在该目录下会产生一个HelloWorld.j文件，用文本编辑器打开该文件可以看到如下内容：</p>

<blockquote>
<p>.source&nbsp;HelloWorld.java&nbsp;&nbsp;<br />
.class&nbsp;public&nbsp;super&nbsp;jpbirdy/HelloWorld&nbsp;&nbsp;<br />
.super&nbsp;java/lang/Object&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
.method&nbsp;public&nbsp;&lt;init&gt;&nbsp;()V&nbsp;&nbsp;<br />
.limit&nbsp;stack&nbsp;1&nbsp;&nbsp;<br />
.limit&nbsp;locals&nbsp;1&nbsp;&nbsp;<br />
.var&nbsp;0&nbsp;is&nbsp;this&nbsp;Ljpbirdy/HelloWorld;&nbsp;from&nbsp;l0&nbsp;to&nbsp;l5&nbsp;&nbsp;<br />
.line&nbsp;6&nbsp;&nbsp;<br />
l0:&nbsp;&nbsp;&nbsp;&nbsp;aload_0&nbsp;&nbsp;<br />
l1:&nbsp;&nbsp;&nbsp;&nbsp;invokespecial&nbsp;java/lang/Object/&lt;init&gt;&nbsp;()V&nbsp;&nbsp;<br />
l4:&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
.end&nbsp;method&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
.method&nbsp;public&nbsp;static&nbsp;main&nbsp;([Ljava/lang/String;)V&nbsp;&nbsp;<br />
.limit&nbsp;stack&nbsp;2&nbsp;&nbsp;<br />
.limit&nbsp;locals&nbsp;1&nbsp;&nbsp;<br />
.var&nbsp;0&nbsp;is&nbsp;args&nbsp;[Ljava/lang/String;&nbsp;from&nbsp;l0&nbsp;to&nbsp;l9&nbsp;&nbsp;<br />
.line&nbsp;10&nbsp;&nbsp;<br />
l0:&nbsp;&nbsp;&nbsp;&nbsp;getstatic&nbsp;java/lang/System/out&nbsp;Ljava/io/PrintStream;&nbsp;&nbsp;<br />
l3:&nbsp;&nbsp;&nbsp;&nbsp;ldc&nbsp;&quot;Hello&nbsp;World!&quot;&nbsp;&nbsp;<br />
l5:&nbsp;&nbsp;&nbsp;&nbsp;invokevirtual&nbsp;java/io/PrintStream/println&nbsp;(Ljava/lang/String;)V&nbsp;&nbsp;<br />
.line&nbsp;11&nbsp;&nbsp;<br />
l8:&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
.end&nbsp;method&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
b&nbsp;&nbsp;</p>
</blockquote>

<p>以上就是一个简单的System.out.println(&quot;HelloWorld&quot;)的汇编代码。</p>

<p>介绍该工具主要可以通过将java代码转变为类汇编代码，去解释一些JVM级别控制的一些问题，例如i++是否线程安全等等。</p>
