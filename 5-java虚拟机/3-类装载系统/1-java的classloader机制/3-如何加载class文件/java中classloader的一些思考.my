<h1><a href="http://www.cnblogs.com/softidea/p/4819872.html" id="cb_post_title_url">对java中classloader使用的一点理解</a></h1>

<p>　　先简单介绍下java的classloader,网上资料很多，就说点关键的。</p>

<p>　　Java 中的类加载器大致可以分成两类，一类是系统提供的，另外一类则是由 Java 应用开发人员编写的。系统提供的类加载器主要有下面三个：</p>

<p>　　引导类加载器（bootstrap class loader）：它用来加载 Java 的核心库，是用原生代码来实现的，并不继承自 java.lang.ClassLoader。</p>

<p>　　扩展类加载器（extensions class loader）：它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。</p>

<p>　　系统类加载器（system class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader() 来获取它。</p>

<p>　　除了系统提供的类加载器以外，开发人员可以通过继承 java.lang.ClassLoader 类的方式实现自己的类加载器，以满足一些特殊的需求。</p>

<p>　　除了引导类加载器之外，所有的类加载器都有一个父类加载器。类加载采用委托模式，先一层一层交给父类加载，父加载不成功再一层一层转给子加载。</p>

<p>　　要点1：为什么采用这种委托方式，是为了安全，比如用户自定义了个java.lang.String,那么如果不交给引导类加载器去加载的话，内存中就会有不止一个String的类实例。而且一个限定包内访问权限的内容，黑客也可以用这种方式获取（要点2再继续说明）。采用了这种方式的话，引导类加载器只会加载一次类，看见用户自定义的String来了，就去看自己有没有加载，结果是系统一启动就加载了java.lang.String类，就不会再去加载了。</p>

<p>　　要点2：判断一个类是否相等不仅要看类是否名字一样，而且要看是否有同一个类初始化加载器。所以如果黑客要自己搞一个java.lang.Hack类来加载，由委托模式开始，引导类加载器加载这个类失败，那就只能交给用户自定义的类加载起来加载。所以这个类和系统的那个lang包里的类不在一个初始化加载器里，就算包名都一样，还是不能访问那些包内可见的内容的。</p>

<p>------------------------------------------------------</p>

<p>进一步说明</p>

<p>一，有两个术语，一个叫&ldquo;定义类加载器&rdquo;，一个叫&ldquo;初始类加载器&rdquo;。<br />
比如有如下的类加载器结构：<br />
bootstrap<br />
&nbsp;&nbsp;ExtClassloader<br />
&nbsp;&nbsp;&nbsp;&nbsp;AppClassloader<br />
&nbsp;&nbsp;&nbsp;&nbsp;-自定义clsloadr1<br />
&nbsp;&nbsp;&nbsp;&nbsp;-自定义clsloadr2&nbsp;<br />
如果用&ldquo;自定义clsloadr1&rdquo;加载java.lang.String类，那么根据双亲委派最终bootstrap会加载此类，那么bootstrap类就叫做该类的&ldquo;定义类加载器&rdquo;，而包括bootstrap的所有得到该类class实例的类加载器都叫做&ldquo;初始类加载器&rdquo;。<br />
<br />
二，所说的&ldquo;命名空间&rdquo;，是指jvm为每个类加载器维护的一个&ldquo;表&rdquo;,这个表记录了所有以此类加载器为&ldquo;初始类加载器&rdquo;（而不是定义类加载器，所以一个类可以存在于很多的命名空间中）加载的类的列表，所以，题目中的问题就可以解释了：<br />
CLTest是AppClassloader加载的，String是通过加载CLTest的类加载器也就是AppClassloader进行加载，但最终委派到bootstrap加载的（当然，String类其实早已经被加载过了，这里只是举个例子）。所以，对于String类来说，bootstrap是&ldquo;定义类加载器&rdquo;，AppClassloader是&ldquo;初始类加载器&rdquo;。根据刚才所说，String类在AppClassloader的命名空间中（同时也在bootstrap，ExtClassloader的命名空间中，因为bootstrap，ExtClassloader也是String的初始类加载器），所以CLTest可以随便访问String类。这样就可以解释&ldquo;处在不同命名空间的类，不能直接互相访问&rdquo;这句话了。<br />
<br />
三，一个类，由不同的类加载器实例加载的话，会在方法区产生两个不同的类，彼此不可见，并且在堆中生成不同Class实例。<br />
<br />
四，那么由不同类加载器实例（比如-自定义clsloadr1，-自定义clsloadr2）所加载的classpath下和ext下的类，也就是由我们自定义的类加载器委派给AppClassloader和ExtClassloader加载的类，在内存中是同一个类吗？<br />
所有继承ClassLoader并且没有重写getSystemClassLoader方法的类加载器，通过getSystemClassLoader方法得到的AppClassloader都是同一个AppClassloader实例，类似单例模式。<br />
在ClassLoader类中getSystemClassLoader方法调用私有的initSystemClassLoader方法获得AppClassloader实例，在initSystemClassLoader中：<br />
sun.misc.Launcher&nbsp;l&nbsp;=&nbsp;sun.misc.Launcher.getLauncher();<br />
。。。<br />
scl&nbsp;=&nbsp;l.getClassLoader();<br />
AppClassloader是sun.misc.Launcher类的内部类，Launcher类在new自己的时候生成AppClassloader实例并且放在自己的私有变量loader里：<br />
loader&nbsp;=&nbsp;AppClassLoader.getAppClassLoader(extclassloader);<br />
值得一提的是sun.misc.Launcher类使用了一种类似单例模式的方法，即既提供了单例模式的接口getLauncher()又把构造函数设成了public的。但是在ClassLoader中是通过单件模式取得的Launcher&nbsp;实例的，所以我们写的每个类加载器得到的AppClassloader都是同一个AppClassloader类实例。<br />
这样的话得到一个结论，就是所有通过正常双亲委派模式的类加载器加载的classpath下的和ext下的所有类在方法区都是同一个类，堆中的Class实例也是同一个。</p>

<p>----------------------------------------</p>

<p>ContextClassLoader</p>

<p>每个线程持有一个ContextClassLoader，可以用get,set方法获取或定义。如果不加指定，就是启动线程那么类自己的类加载器。如果不是main线程，new出来的线程的话，就是父线程的类加载器。</p>

<p>　　为什么要有这么一个东西呢，查了一些资料说是，因为为了安全ClassLoader的委托机制不能满足一些特定需要,这个时候就要用这种方式走后门。比如jdbc,jndi,tomcat等:</p>

<p>　　<em>Java 提供了很多服务提供者接口（Service Provider Interface，SPI），允许第三方为这些接口提供实现。常见的 SPI 有 JDBC、JCE、JNDI、JAXP 和 JBI 等。这些 SPI 的接口由 Java 核心库来提供，如 JAXP 的 SPI 接口定义包含在 javax.xml.parsers 包中。这些 SPI 的实现代码很可能是作为 Java 应用所依赖的 jar 包被包含进来，可以通过类路径（CLASSPATH）来找到。而问题在于，SPI 的接口是 Java 核心库的一部分，是由引导类加载器来加载的；SPI 实现的 Java 类一般是由系统类加载器来加载的。引导类加载器是无法找到 SPI 的实现类的，因为它只加载 Java 的核心库。它也不能代理给系统类加载器，因为它是系统类加载器的祖先类加载器。也就是说，类加载器的代理模式无法解决这个问题。</em></p>

<p><em>　　线程上下文类加载器正好解决了这个问题。在 SPI 接口的代码中使用线程上下文类加载器，就可以成功的加载到 SPI 实现的类。线程上下文类加载器在很多 SPI 的实现中都会用到。</em></p>
