<h1>ClassLoader源码分析</h1>

<h2>层次结构和类图</h2>

<p><strong>ClassLoader层次结构：</strong></p>

<p><br />
&nbsp;<img alt="" src="http://img.blog.csdn.net/20131206102104703?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdmtpbmdfd2FuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" /></p>

<p><strong>UML类图：</strong></p>

<p><img alt="" src="http://img.blog.csdn.net/20131206102134359?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdmtpbmdfd2FuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" /><br />
&nbsp;</p>

<ul>
	<li>sun.misc.Launcher.ExtClassLoader</li>
	<li>sun.misc.Launcher.AppClassLoader</li>
</ul>

<p>&nbsp;</p>

<h1>显式加载类</h1>

<p>在代码中显式加载某个类，有三种方法：</p>

<ol>
	<li>this.getClass().getClassLoader().loadClass()</li>
	<li>Class.forName()</li>
	<li>MyClassLoader.findClass()</li>
</ol>

<h1>ClassLoader.loadClass()</h1>

<p>ClassLoader.loadClass()的加载步骤为：</p>

<ol>
	<li>调用&nbsp;<a href="http://blog.csdn.net/vking_wang/article/details/17162327" target="_blank"><code>findLoadedClass(String)</code></a>&nbsp;来检查是否已经加载类。</li>
	<li>在父类加载器上调用&nbsp;<a href="http://blog.csdn.net/vking_wang/article/details/17162327" target="_blank"><code><tt>loadClass</tt></code></a>&nbsp;方法。如果父类加载器为&nbsp;<tt>null</tt>，则使用虚拟机的内置类加载器。</li>
	<li>调用&nbsp;<a href="http://blog.csdn.net/vking_wang/article/details/17162327" target="_blank"><code>findClass(String)</code></a>&nbsp;方法查找类。</li>
</ol>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Class&lt;?&gt;&nbsp;loadClass(String&nbsp;name)&nbsp;throws&nbsp;ClassNotFoundException&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;loadClass(name,&nbsp;false);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;/**</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Loads&nbsp;the&nbsp;class&nbsp;with&nbsp;the&nbsp;specified&nbsp;&lt;a&nbsp;href=&quot;#name&quot;&gt;binary&nbsp;name&lt;/a&gt;.&nbsp;&nbsp;The</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;default&nbsp;implementation&nbsp;of&nbsp;this&nbsp;method&nbsp;searches&nbsp;for&nbsp;classes&nbsp;in&nbsp;the</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;following&nbsp;order:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&lt;p&gt;&lt;ol&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;p&gt;&nbsp;Invoke&nbsp;{@link&nbsp;#findLoadedClass(String)}&nbsp;to&nbsp;check&nbsp;if&nbsp;the&nbsp;class</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;has&nbsp;already&nbsp;been&nbsp;loaded.&nbsp;&nbsp;&lt;/p&gt;&lt;/li&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;p&gt;&nbsp;Invoke&nbsp;the&nbsp;{@link&nbsp;#loadClass(String)&nbsp;&lt;tt&gt;loadClass&lt;/tt&gt;}&nbsp;method</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;on&nbsp;the&nbsp;parent&nbsp;class&nbsp;loader.&nbsp;&nbsp;If&nbsp;the&nbsp;parent&nbsp;is&nbsp;&lt;tt&gt;null&lt;/tt&gt;&nbsp;the&nbsp;class</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;loader&nbsp;built-in&nbsp;to&nbsp;the&nbsp;virtual&nbsp;machine&nbsp;is&nbsp;used,&nbsp;instead.&nbsp;&nbsp;&lt;/p&gt;&lt;/li&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;p&gt;&nbsp;Invoke&nbsp;the&nbsp;{@link&nbsp;#findClass(String)}&nbsp;method&nbsp;to&nbsp;find&nbsp;the</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;class.&nbsp;&nbsp;&lt;/p&gt;&lt;/li&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&lt;/ol&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&lt;p&gt;&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;synchronized&nbsp;Class&lt;?&gt;&nbsp;loadClass(String&nbsp;name,&nbsp;boolean&nbsp;resolve)</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;throws&nbsp;ClassNotFoundException</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;First,&nbsp;check&nbsp;if&nbsp;the&nbsp;class&nbsp;has&nbsp;already&nbsp;been&nbsp;loaded</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Class&nbsp;c&nbsp;=&nbsp;findLoadedClass(name);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(c&nbsp;==&nbsp;null)&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(parent&nbsp;!=&nbsp;null)&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c&nbsp;=&nbsp;parent.loadClass(name,&nbsp;false);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c&nbsp;=&nbsp;findBootstrapClassOrNull(name);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(ClassNotFoundException&nbsp;e)&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;ClassNotFoundException&nbsp;thrown&nbsp;if&nbsp;class&nbsp;not&nbsp;found</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;from&nbsp;the&nbsp;non-null&nbsp;parent&nbsp;class&nbsp;loader</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(c&nbsp;==&nbsp;null)&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;If&nbsp;still&nbsp;not&nbsp;found,&nbsp;then&nbsp;invoke&nbsp;findClass&nbsp;in&nbsp;order</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;to&nbsp;find&nbsp;the&nbsp;class.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c&nbsp;=&nbsp;findClass(name);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(resolve)&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<u>resolveClass</u>(c);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;c;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h1>URLClassLoader.findClass()</h1>

<p>&nbsp;</p>

<p>ClassLoader.loadClass()的最后一步是调用findClass()，这个方法在ClassLoader中并未实现，由其子类负责实现。</p>

<p>findClass()的功能是找到class文件并把字节码加载到内存中。</p>

<p>自定义的ClassLoader一般覆盖这个方法。&mdash;&mdash;以便使用不同的<strong>加载路径</strong>。</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;The&nbsp;search&nbsp;path&nbsp;for&nbsp;classes&nbsp;and&nbsp;resources&nbsp;*/</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;URLClassPath&nbsp;ucp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;The&nbsp;context&nbsp;to&nbsp;be&nbsp;used&nbsp;when&nbsp;loading&nbsp;classes&nbsp;and&nbsp;resources&nbsp;*/</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;AccessControlContext&nbsp;acc;</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;/**</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Finds&nbsp;and&nbsp;loads&nbsp;the&nbsp;class&nbsp;with&nbsp;the&nbsp;specified&nbsp;name&nbsp;from&nbsp;the&nbsp;URL&nbsp;search</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;path.&nbsp;Any&nbsp;URLs&nbsp;referring&nbsp;to&nbsp;JAR&nbsp;files&nbsp;are&nbsp;loaded&nbsp;and&nbsp;opened&nbsp;as&nbsp;needed</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;until&nbsp;the&nbsp;class&nbsp;is&nbsp;found.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;name&nbsp;the&nbsp;name&nbsp;of&nbsp;the&nbsp;class</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return&nbsp;the&nbsp;resulting&nbsp;class</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@exception&nbsp;ClassNotFoundException&nbsp;if&nbsp;the&nbsp;class&nbsp;could&nbsp;not&nbsp;be&nbsp;found</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;Class&lt;?&gt;&nbsp;findClass(final&nbsp;String&nbsp;name)</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throws&nbsp;ClassNotFoundException</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(Class)</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AccessController.doPrivileged(new&nbsp;PrivilegedExceptionAction()&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Object&nbsp;run()&nbsp;throws&nbsp;ClassNotFoundException&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;path&nbsp;=&nbsp;name.replace(&#39;.&#39;,&nbsp;&#39;/&#39;).concat(&quot;.class&quot;);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 1. URLClassPath ucp，帮助获取class文件字节流</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp; URLClassPath会用FileLoader或者JarLoader去加载字节码&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Resource&nbsp;res&nbsp;=&nbsp;ucp.getResource(path,&nbsp;false);&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(res&nbsp;!=&nbsp;null)&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 2. defineClass，创建类对象，将字节流解析成JVM能够识别的Class对象。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;defineClass(name,&nbsp;res,&nbsp;true);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ClassNotFoundException(name,&nbsp;e);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ClassNotFoundException(name);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;acc);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(java.security.PrivilegedActionException&nbsp;pae)&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;(ClassNotFoundException)&nbsp;pae.getException();</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;</p>

<h1>ClassLoader.resolveClass()</h1>

<p>加载完字节码后，会根据需要进行验证、解析。</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;/**</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Links&nbsp;the&nbsp;specified&nbsp;class.&nbsp;&nbsp;This&nbsp;(misleadingly&nbsp;named)&nbsp;method&nbsp;may&nbsp;be</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;used&nbsp;by&nbsp;a&nbsp;class&nbsp;loader&nbsp;to&nbsp;link&nbsp;a&nbsp;class.&nbsp;&nbsp;If&nbsp;the&nbsp;class&nbsp;&lt;tt&gt;c&lt;/tt&gt;&nbsp;has</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;already&nbsp;been&nbsp;linked,&nbsp;then&nbsp;this&nbsp;method&nbsp;simply&nbsp;returns.&nbsp;Otherwise,&nbsp;the</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;class&nbsp;is&nbsp;linked&nbsp;as&nbsp;described&nbsp;in&nbsp;the&nbsp;&quot;Execution&quot;&nbsp;chapter&nbsp;of&nbsp;the&nbsp;&lt;a</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;href=&quot;http://java.sun.com/docs/books/jls/&quot;&gt;Java&nbsp;Language&nbsp;Specification&lt;/a&gt;.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&lt;/p&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;&nbsp;c</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;class&nbsp;to&nbsp;link</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@throws&nbsp;&nbsp;NullPointerException</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If&nbsp;&lt;tt&gt;c&lt;/tt&gt;&nbsp;is&nbsp;&lt;tt&gt;null&lt;/tt&gt;.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@see&nbsp;&nbsp;#defineClass(String,&nbsp;byte[],&nbsp;int,&nbsp;int)</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;final&nbsp;void&nbsp;resolveClass(Class&lt;?&gt;&nbsp;c)&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;resolveClass0(c);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;native&nbsp;void&nbsp;resolveClass0(Class&nbsp;c);</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h1>自定义加载器</h1>

<ul>
	<li>
	<h2>findClass()定义加载路径</h2>
	</li>
</ul>

<p>findClass()的功能是找到class文件并把字节码加载到内存中。</p>

<p>自定义的ClassLoader一般覆盖这个方法。&mdash;&mdash;以便使用不同的<strong>加载路径</strong>。</p>

<p>在其中调用<em>defineClass</em>()解析字节码。</p>

<ul>
	<li>
	<h2>loadClass()定义加载机制</h2>
	</li>
</ul>

<p>自定义的加载器可以覆盖该方法loadClass()，以便定义不同的<strong>加载机制</strong>。</p>

<p>例如Servlet中的WebappClassLoader覆盖了该方法，在WEB-INFO/classes目录下查找类文件；在加载时，如果成功，则缓存到ResourceEntry对象。&mdash;&mdash;不同的加载机制。</p>

<p>&nbsp;</p>

<p>AppClassLoader覆盖了loadClass()方法。</p>

<p>如果自定义的加载器仅覆盖了findClass，而未覆盖loadClass（<u>即加载规则一样，但加载路径不同</u>）；则调用getClass().getClassLoader()返回的仍然是AppClassLoader！因为真正load类的，还是AppClassLoader。</p>

<ul>
	<li>
	<h2>实现类的热部署</h2>
	</li>
</ul>

<p>JVM默认不能热部署类，因为加载类时会去调用findLoadedClass()，如果类已被加载，就不会再次加载。</p>

<p>JVM判断类是否被加载有两个条件：完整类名是否一样、ClassLoader是否是同一个。</p>

<p>所以要实现热部署的话，只需要使用ClassLoader的不同实例来加载。</p>

<p><br />
MyClassLoader cl1&nbsp;=&nbsp;<strong>new</strong>&nbsp;MyClassLoader();<br />
Class c1&nbsp;=&nbsp;cl1.findClass(&quot;Test.class&quot;);</p>

<p>c1.newInstance();<br />
<br />
MyClassLoader cl2&nbsp;=&nbsp;<strong>new</strong>&nbsp;MyClassLoader();<br />
Class c2&nbsp;=&nbsp;cl2.findClass(&quot;Test.class&quot;);</p>

<p>c2.newInstance();</p>

<p>上例中的c1和c2就是两个不同的实例。</p>

<p>如果用同一个ClassLoader实例来加载，则会抛LinkageError。</p>

<p>&nbsp;</p>

<ul>
	<li>
	<h2>不可覆盖的final方法</h2>
	</li>
</ul>

<h3>defineClass</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;/**</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;<strong>Converts&nbsp;an&nbsp;array&nbsp;of&nbsp;bytes&nbsp;into&nbsp;an&nbsp;instance&nbsp;of&nbsp;class&nbsp;&lt;tt&gt;Class&lt;/tt&gt;.</strong></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Before&nbsp;the&nbsp;&lt;tt&gt;Class&lt;/tt&gt;&nbsp;can&nbsp;be&nbsp;used&nbsp;it&nbsp;must&nbsp;be&nbsp;resolved.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</p>

<p>protected&nbsp;final&nbsp;Class&lt;?&gt;&nbsp;defineClass(String&nbsp;name,&nbsp;byte[]&nbsp;b,&nbsp;int&nbsp;off,&nbsp;int&nbsp;len)</p>

<p>&nbsp;</p>

<h3>findLoadedClass</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;/**</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Returns&nbsp;the&nbsp;class&nbsp;with&nbsp;the&nbsp;given&nbsp;&lt;a&nbsp;href=&quot;#name&quot;&gt;binary&nbsp;name&lt;/a&gt;&nbsp;if&nbsp;this</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;loader&nbsp;has&nbsp;been&nbsp;recorded&nbsp;by&nbsp;the&nbsp;Java&nbsp;virtual&nbsp;machine&nbsp;as&nbsp;an&nbsp;initiating</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;loader&nbsp;of&nbsp;a&nbsp;class&nbsp;with&nbsp;that&nbsp;&lt;a&nbsp;href=&quot;#name&quot;&gt;binary&nbsp;name&lt;/a&gt;.&nbsp;&nbsp;Otherwise</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&lt;tt&gt;null&lt;/tt&gt;&nbsp;is&nbsp;returned.&nbsp;&nbsp;&lt;/p&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</p>

<p>protected&nbsp;final&nbsp;Class&lt;?&gt;&nbsp;findLoadedClass(String&nbsp;name)&nbsp;</p>

<p>&nbsp;</p>

<h3>findSystemClass</h3>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;/**</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Finds&nbsp;a&nbsp;class&nbsp;with&nbsp;the&nbsp;specified&nbsp;&lt;a&nbsp;href=&quot;#name&quot;&gt;binary&nbsp;name&lt;/a&gt;,</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;loading&nbsp;it&nbsp;if&nbsp;necessary.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&lt;p&gt;&nbsp;<strong>This&nbsp;method&nbsp;loads&nbsp;the&nbsp;class&nbsp;through&nbsp;the&nbsp;system&nbsp;class&nbsp;loader</strong>&nbsp;(see</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;{@link&nbsp;#getSystemClassLoader()}).&nbsp;&nbsp;The&nbsp;&lt;tt&gt;Class&lt;/tt&gt;&nbsp;object&nbsp;returned</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;might&nbsp;have&nbsp;more&nbsp;than&nbsp;one&nbsp;&lt;tt&gt;ClassLoader&lt;/tt&gt;&nbsp;associated&nbsp;with&nbsp;it.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Subclasses&nbsp;of&nbsp;&lt;tt&gt;ClassLoader&lt;/tt&gt;&nbsp;need&nbsp;not&nbsp;usually&nbsp;invoke&nbsp;this&nbsp;method,</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;because&nbsp;most&nbsp;class&nbsp;loaders&nbsp;need&nbsp;to&nbsp;override&nbsp;just&nbsp;{@link&nbsp;#findClass(String)}.&nbsp;&nbsp;&lt;/p&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</p>

<p>protected&nbsp;final&nbsp;Class&lt;?&gt;&nbsp;findSystemClass(String&nbsp;name)</p>

<p>&nbsp;</p>

<h3>getParent</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;/**</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;<strong>Returns&nbsp;the&nbsp;parent&nbsp;class&nbsp;loader&nbsp;for&nbsp;delegation</strong>.&nbsp;Some&nbsp;implementations&nbsp;may</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;use&nbsp;&lt;tt&gt;null&lt;/tt&gt;&nbsp;to&nbsp;represent&nbsp;the&nbsp;bootstrap&nbsp;class&nbsp;loader.&nbsp;This&nbsp;method</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;will&nbsp;return&nbsp;&lt;tt&gt;null&lt;/tt&gt;&nbsp;in&nbsp;such&nbsp;implementations&nbsp;if&nbsp;this&nbsp;class&nbsp;loader&#39;s</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;parent&nbsp;is&nbsp;the&nbsp;bootstrap&nbsp;class&nbsp;loader.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</p>

<p>public&nbsp;final&nbsp;ClassLoader&nbsp;getParent()</p>

<p>&nbsp;</p>

<h3>resolveClass</h3>

<p>&nbsp;/**</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>*&nbsp;Links&nbsp;the&nbsp;specified&nbsp;class.</strong>&nbsp;&nbsp;This&nbsp;(misleadingly&nbsp;named)&nbsp;method&nbsp;may&nbsp;be</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;used&nbsp;by&nbsp;a&nbsp;class&nbsp;loader&nbsp;to&nbsp;link&nbsp;a&nbsp;class.&nbsp;&nbsp;If&nbsp;the&nbsp;class&nbsp;&lt;tt&gt;c&lt;/tt&gt;&nbsp;has</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;already&nbsp;been&nbsp;linked,&nbsp;then&nbsp;this&nbsp;method&nbsp;simply&nbsp;returns.&nbsp;Otherwise,&nbsp;the</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;class&nbsp;is&nbsp;linked&nbsp;as&nbsp;described&nbsp;in&nbsp;the&nbsp;&quot;Execution&quot;&nbsp;chapter&nbsp;of&nbsp;the&nbsp;&lt;a</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;href=&quot;http://java.sun.com/docs/books/jls/&quot;&gt;Java&nbsp;Language&nbsp;Specification&lt;/a&gt;.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</p>

<p>protected&nbsp;final&nbsp;void&nbsp;resolveClass(Class&lt;?&gt;&nbsp;c)&nbsp;</p>
