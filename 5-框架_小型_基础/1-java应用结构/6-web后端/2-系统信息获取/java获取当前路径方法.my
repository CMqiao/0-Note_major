<h1>java获取当前路径的几种方法</h1>

<h2>1、利用System.getProperty()函数获取当前路径：&nbsp;</h2>

<p>System.out.println(System.getProperty(&quot;user.dir&quot;));//user.dir指定了当前的路径&nbsp;</p>

<h2>2、使用File提供的函数获取当前路径：&nbsp;</h2>

<p>File directory = new File(&quot;&quot;);//设定为当前文件夹&nbsp;<br />
try{&nbsp;<br />
&nbsp; &nbsp; System.out.println(directory.getCanonicalPath());//获取标准的路径&nbsp;<br />
&nbsp; &nbsp; System.out.println(directory.getAbsolutePath());//获取绝对路径&nbsp;<br />
}catch(Exceptin e){}&nbsp;</p>

<p>File.getCanonicalPath()和File.getAbsolutePath()大约只是对于new File(&quot;.&quot;)和new File(&quot;..&quot;)两种路径有所区别。&nbsp;</p>

<p># 对于getCanonicalPath()函数，&ldquo;.&quot;就表示当前的文件夹，而&rdquo;..&ldquo;则表示当前文件夹的上一级文件夹&nbsp;<br />
# 对于getAbsolutePath()函数，则不管&rdquo;.&rdquo;、&ldquo;..&rdquo;，返回当前的路径加上你在new File()时设定的路径&nbsp;<br />
# 至于getPath()函数，得到的只是你在new File()时设定的路径&nbsp;</p>

<p>比如当前的路径为 C:/test ：&nbsp;<br />
File directory = new File(&quot;abc&quot;);&nbsp;<br />
directory.getCanonicalPath(); //得到的是C:/test/abc&nbsp;<br />
directory.getAbsolutePath(); &nbsp; &nbsp;//得到的是C:/test/abc&nbsp;<br />
direcotry.getPath(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//得到的是abc&nbsp;</p>

<p>File directory = new File(&quot;.&quot;);&nbsp;<br />
directory.getCanonicalPath(); //得到的是C:/test&nbsp;<br />
directory.getAbsolutePath(); &nbsp; &nbsp;//得到的是C:/test/.&nbsp;<br />
direcotry.getPath(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//得到的是.&nbsp;</p>

<p>File directory = new File(&quot;..&quot;);&nbsp;<br />
directory.getCanonicalPath(); //得到的是C:/&nbsp;<br />
directory.getAbsolutePath(); &nbsp; &nbsp;//得到的是C:/test/..&nbsp;<br />
direcotry.getPath(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//得到的是..&nbsp;</p>

<p><br />
另外：System.getProperty()中的字符串参数如下：&nbsp;<br />
System.getProperty()参数大全&nbsp;<br />
# java.version &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Java Runtime Environment version &nbsp;<br />
# java.vendor &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Java Runtime Environment vendor &nbsp;<br />
# java.vendor.url &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Java vendor URL &nbsp;<br />
# java.home &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Java installation directory &nbsp;<br />
# java.vm.specification.version &nbsp; Java Virtual Machine specification version &nbsp;<br />
# java.vm.specification.vendor &nbsp; &nbsp;Java Virtual Machine specification vendor &nbsp;<br />
# java.vm.specification.name &nbsp; &nbsp; &nbsp;Java Virtual Machine specification name &nbsp;<br />
# java.vm.version &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Java Virtual Machine implementation version &nbsp;<br />
# java.vm.vendor &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Java Virtual Machine implementation vendor &nbsp;<br />
# java.vm.name &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Java Virtual Machine implementation name &nbsp;<br />
# java.specification.version &nbsp; &nbsp; &nbsp; &nbsp;Java Runtime Environment specification version &nbsp;<br />
# java.specification.vendor &nbsp; &nbsp; &nbsp; &nbsp; Java Runtime Environment specification vendor &nbsp;<br />
# java.specification.name &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Java Runtime Environment specification name &nbsp;<br />
# java.class.version &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Java class format version number &nbsp;<br />
# java.class.path &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Java class path &nbsp;<br />
# java.library.path &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; List of paths to search when loading libraries &nbsp;<br />
# java.io.tmpdir &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Default temp file path &nbsp;<br />
# java.compiler &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Name of JIT compiler to use &nbsp;<br />
# java.ext.dirs &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Path of extension directory or directories &nbsp;<br />
# os.name &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Operating system name &nbsp;<br />
# os.arch &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Operating system architecture &nbsp;<br />
# os.version &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Operating system version &nbsp;<br />
# file.separator &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; File separator (&quot;/&quot; on UNIX) &nbsp;<br />
# path.separator &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Path separator (&quot;:&quot; on UNIX) &nbsp;<br />
# line.separator &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Line separator (&quot;/n&quot; on UNIX) &nbsp;<br />
# user.name &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;User&rsquo;s account name &nbsp;<br />
# user.home &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;User&rsquo;s home directory &nbsp;<br />
# user.dir &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User&rsquo;s current working directory<br />
JAVA中获取路径<br />
关键字: java中获取路径<br />
JAVA中获取路径:&nbsp;</p>

<h2><br />
1.jsp中取得路径：&nbsp;</h2>

<p>以工程名为TEST为例：&nbsp;</p>

<p>(1)得到包含工程名的当前页面全路径：request.getRequestURI()&nbsp;<br />
结果：/TEST/test.jsp&nbsp;<br />
(2)得到工程名：request.getContextPath()&nbsp;<br />
结果：/TEST&nbsp;<br />
(3)得到当前页面所在目录下全名称：request.getServletPath()&nbsp;<br />
结果：如果页面在jsp目录下 /TEST/jsp/test.jsp&nbsp;<br />
(4)得到页面所在服务器的全路径：application.getRealPath(&quot;页面.jsp&quot;)&nbsp;<br />
结果：D:/resin/webapps/TEST/test.jsp&nbsp;<br />
(5)得到页面所在服务器的绝对路径：<br />
String basePath =request.getSession().getServletContext().getRealPath(&quot;/&quot;);basePath = basePath.replace(&quot;\\&quot;, &quot;\\\\&quot;);//项目中使用可以的。<br />
absPath=new java.io.File(application.getRealPath(request.getRequestURI())).getParent(); //有点问题。多了一个目录名。<br />
结果：D:/resin/webapps/TEST&nbsp;<br />
(6)得到页面的完整网络地址：String urlPath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;;</p>

<h2>2.在类中取得路径：&nbsp;</h2>

<p>(1)类的绝对路径：Class.class.getClass().getResource(&quot;/&quot;).getPath()&nbsp;<br />
结果：/D:/TEST/WebRoot/WEB-INF/classes/pack/&nbsp;<br />
(2)得到工程的路径：System.getProperty(&quot;user.dir&quot;)&nbsp;<br />
结果：D:/TEST&nbsp;</p>

<h2>3.在Servlet中取得路径：&nbsp;</h2>

<p>(1)得到工程目录：request.getSession().getServletContext().getRealPath(&quot;&quot;) 参数可具体到包名。&nbsp;<br />
结果：E:/Tomcat/webapps/TEST&nbsp;<br />
(2)得到IE地址栏地址：request.getRequestURL()&nbsp;<br />
结果：http://localhost:8080/TEST/test&nbsp;<br />
(3)得到相对地址：request.getRequestURI()&nbsp;<br />
结果：/TEST/test&nbsp;</p>

<p>jsp中获取工程的绝对路径。<br />
&lt;%<br />
//这里获取指南在服务器上的保存目录，文件名在body中(隐藏)，通过上页传值过来的值优先。<br />
//basePath获取的是服务器工程路径。<br />
String basePath = request.getSession().getServletContext().getRealPath(&quot;/&quot;);<br />
basePath = basePath.replace(&quot;\\&quot;, &quot;\\\\&quot;);<br />
%&gt;</p>
