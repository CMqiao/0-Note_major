<h1>Servlet的过滤器内容</h1>

<h2>过滤器的创建和销毁</h2>

<p>　　<strong>Filter的创建：</strong></p>

<p>　　　　Filter的创建和销毁由<strong>WEB服务器负责</strong>。 web 应用程序<strong>启动时</strong>，web 服务器将<strong>创建Filter 的实例对象</strong>，并调用其init方法，完成对象的初始化功能，从而为后续的用户请求作好拦截的准备工作<strong>，</strong><strong>filter对象只会创建一次，init方法也只会执行一次</strong>。通过init方法的参数，可获得代表当前filter配置信息的FilterConfig对象。</p>

<p>　　<strong>Filter的销毁：</strong></p>

<p>　　　　Web容器调用destroy方法销毁Filter。destroy方法在Filter的生命周期中仅执行一次。在destroy方法中，可以释放过滤器使用的资源。</p>

<p>　　<strong>FilterConfig接口：</strong></p>

<p>　　　　用户在配置filter时，可以使用&lt;init-param&gt;为filter配置一些初始化参数，当web容器实例化Filter对象，调用其init方法时，会把封装了filter初始化参数的filterConfig对象传递进来。因此开发人员在编写filter时，通过filterConfig对象的方法，就可获得：<br />
　　String getFilterName()：得到filter的名称。<br />
　　String getInitParameter(String name)： 返回在部署描述中指定名称的初始化参数的值。如果不存在返回null.<br />
　　Enumeration getInitParameterNames()：返回过滤器的所有初始化参数的名字的枚举集合。<br />
　　public ServletContext getServletContext()：返回Servlet上下文对象的引用。</p>

<h2>Filter过滤链</h2>

<p>filter链的形成：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;当请求一个资源时，服务器会查询web.xml中所有对此资源路径进行过滤的filter，并根据在web.xml中的先后顺序形成一个filter链（filterchain）</p>

<p>　　在一个web应用中，可以开发编写多个Filter，这些Filter组合起来称之为一个Filter链。<br />
　　web服务器根据Filter在web.xml文件中的注册顺序，决定先调用哪个Filter，当第一个Filter的doFilter方法被调用时，web服务器会创建一个代表Filter链的FilterChain对象传递给该方法。在doFilter方法中，开发人员如果调用了FilterChain对象的doFilter方法，则web服务器会检查FilterChain对象中是否还有filter，如果有，则调用第2个filter，如果没有，则调用目标资源。</p>

<h2>过滤器常用知识</h2>

<h3>一、Servlet过滤器的概念：</h3>

<p>***************************************************************************************<br />
Servlet过滤器是在Java Servlet规范2.3中定义的，它能够对Servlet容器的请求和响应对象进行检查和修改。　　　<br />
Servlet过滤器本身并不产生请求和响应对象，它只能提供过滤作用。Servlet过期能够在Servlet被调用之前检查Request对象，修改Request Header和Request内容；在Servlet被调用之后检查Response对象，修改Response Header和Response内容。<br />
Servlet过期负责过滤的Web组件可以是Servlet、JSP或者HTML文件。　<br />
***************************************************************************************</p>

<h3>二、Servlet过滤器的特点：</h3>

<p>***************************************************************************************<br />
A．Servlet过滤器可以检查和修改ServletRequest和ServletResponse对象<br />
B．Servlet过滤器可以被指定和特定的URL关联，只有当客户请求访问该URL时，才会触发过滤器<br />
C．Servlet过滤器可以被串联在一起，形成管道效应，协同修改请求和响应对象<br />
***************************************************************************************</p>

<h3>三、Servlet过滤器的作用：</h3>

<p>***************************************************************************************<br />
A．查询请求并作出相应的行动。<br />
B．阻塞请求-响应对，使其不能进一步传递。<br />
C．修改请求的头部和数据。用户可以提供自定义的请求。<br />
D．修改响应的头部和数据。用户可以通过提供定制的响应版本实现。<br />
E．与外部资源进行交互。<br />
***************************************************************************************</p>

<h3>四、Servlet过滤器的适用场合：</h3>

<p>***************************************************************************************<br />
A．认证过滤<br />
B．登录和审核过滤<br />
C．图像转换过滤&nbsp;<br />
D．数据压缩过滤&nbsp;<br />
E．加密过滤&nbsp;<br />
F．令牌过滤&nbsp;<br />
G．资源访问触发事件过滤&nbsp;<br />
H．XSL/T过滤&nbsp;<br />
I．Mime-type过滤<br />
***************************************************************************************</p>

<h3>五、Servlet过滤器接口的构成：</h3>

<p>***************************************************************************************<br />
所有的Servlet过滤器类都必须实现javax.servlet.Filter接口。这个接口含有3个过滤器类必须实现的方法：<br />
A.init(FilterConfig)：<br />
这是Servlet过滤器的初始化方法，Servlet容器创建Servlet过滤器实例后将调用这个方法。在这个方法中可以读取web.xml文件中Servlet过滤器的初始化参数<br />
B.doFilter(ServletRequest,ServletResponse,FilterChain)：<br />
这个方法完成实际的过滤操作，当客户请求访问于过滤器关联的URL时，Servlet容器将先调用过滤器的doFilter方法。FilterChain参数用于访问后续过滤器<br />
C.destroy()：<br />
Servlet容器在销毁过滤器实例前调用该方法，这个方法中可以释放Servlet过滤器占用的资源<br />
***************************************************************************************</p>

<h3>六、Servlet过滤器的创建步骤：</h3>

<p>***************************************************************************************<br />
A．实现javax.servlet.Filter接口<br />
B．实现init方法，读取过滤器的初始化函数<br />
C．实现doFilter方法，完成对请求或过滤的响应<br />
D．调用FilterChain接口对象的doFilter方法，向后续的过滤器传递请求或响应<br />
E．销毁过滤器<br />
***************************************************************************************</p>

<h3>七、Servlet过滤器对请求的过滤：</h3>

<p>***************************************************************************************<br />
A．Servlet容器创建一个过滤器实例<br />
B．过滤器实例调用init方法，读取过滤器的初始化参数<br />
C．过滤器实例调用doFilter方法，根据初始化参数的值判断该请求是否合法<br />
D．如果该请求不合法则阻塞该请求<br />
E．如果该请求合法则调用chain.doFilter方法将该请求向后续传递<br />
***************************************************************************************</p>

<h3>八、Servlet过滤器对响应的过滤：</h3>

<p>***************************************************************************************<br />
A．过滤器截获客户端的请求<br />
B．重新封装ServletResponse，在封装后的ServletResponse中提供用户自定义的输出流<br />
C．将请求向后续传递<br />
D．Web组件产生响应<br />
E．从封装后的ServletResponse中获取用户自定义的输出流<br />
F．将响应内容通过用户自定义的输出流写入到缓冲流中<br />
G．在缓冲流中修改响应的内容后清空缓冲流，输出响应内容<br />
***************************************************************************************</p>

<h3>九、Servlet过滤器的发布：</h3>

<p>***************************************************************************************<br />
A．发布Servlet过滤器时，必须在web.xml文件中加入&lt;filter&gt;元素和&lt;filter-mapping&gt;元素。<br />
B．&lt;filter&gt;元素用来定义一个过滤器：<br />
属性 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 含义<br />
filter-name &nbsp; &nbsp;指定过滤器的名字<br />
filter-class &nbsp; &nbsp;指定过滤器的类名<br />
init-param &nbsp; &nbsp;为过滤器实例提供初始化参数，可以有多个<br />
C．&lt;filter-mapping&gt;元素用于将过滤器和URL关联：<br />
属性 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 含义<br />
filter-name &nbsp; &nbsp;指定过滤器的名字<br />
url-pattern &nbsp; &nbsp;指定和过滤器关联的URL，为&rdquo;/*&rdquo;表示所有URL<br />
***************************************************************************************</p>

<h3>十、Servlet过滤器使用的注意事项</h3>

<p>***************************************************************************************<br />
A．由于Filter、FilterConfig、FilterChain都是位于javax.servlet包下，并非HTTP包所特有的，所以其中所用到的请求、响应对象ServletRequest、ServletResponse在使用前都必须先转换成HttpServletRequest、HttpServletResponse再进行下一步操作。<br />
B．<strong>在web.xml中配置Servlet和Servlet过滤器，应该先声明过滤器元素，再声明Servlet元素</strong><br />
C．如果要在Servlet中观察过滤器生成的日志，应该确保在server.xml的localhost对应的&lt;host&gt;元素中配置如下&lt;logger&gt;元素：<br />
&lt;Logger className = &ldquo;org.apache.catalina.logger.FileLogger&rdquo;<br />
directory = &ldquo;logs&rdquo;prefix = &ldquo;localhost_log.&rdquo;suffix=&rdquo;.txt&rdquo;<br />
timestamp = &ldquo;true&rdquo;/&gt;<br />
***************************************************************************************</p>

<h2>Filter过滤器实例</h2>

<h3>首先来看一下web.xml的配置：</h3>

<p>&lt;!-- 请求url日志记录过滤器 --&gt; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &lt;filter&gt; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &lt;filter-name&gt;logfilter&lt;/filter-name&gt; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &lt;filter-class&gt;com.weijia.filterservlet.LogFilter&lt;/filter-class&gt; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &lt;/filter&gt; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &lt;filter-mapping&gt; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &lt;filter-name&gt;logfilter&lt;/filter-name&gt; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &lt;/filter-mapping&gt; &nbsp;<br />
&nbsp; &nbsp; &nbsp;&nbsp;<br />
&lt;!-- 编码过滤器 --&gt; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &lt;filter&gt; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &lt;filter-name&gt;setCharacterEncoding&lt;/filter-name&gt; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &lt;filter-class&gt;com.weijia.filterservlet.EncodingFilter&lt;/filter-class&gt; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &lt;init-param&gt; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;param-name&gt;encoding&lt;/param-name&gt; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;param-value&gt;utf-8&lt;/param-value&gt; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &lt;/init-param&gt; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &lt;/filter&gt; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &lt;filter-mapping&gt; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &lt;filter-name&gt;setCharacterEncoding&lt;/filter-name&gt; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &lt;/filter-mapping&gt; &nbsp; &nbsp;</p>

<h3>然后看一下编码过滤器：</h3>

<p>package com.weijia.filterservlet; &nbsp;<br />
&nbsp;&nbsp;<br />
import java.io.IOException; &nbsp;<br />
import java.util.Enumeration; &nbsp;<br />
import java.util.HashMap; &nbsp;<br />
&nbsp;&nbsp;<br />
import javax.servlet.Filter; &nbsp;<br />
import javax.servlet.FilterChain; &nbsp;<br />
import javax.servlet.FilterConfig; &nbsp;<br />
import javax.servlet.ServletException; &nbsp;<br />
import javax.servlet.ServletRequest; &nbsp;<br />
import javax.servlet.ServletResponse; &nbsp;<br />
&nbsp;&nbsp;<br />
public class EncodingFilter implements Filter { &nbsp; &nbsp;<br />
&nbsp; &nbsp; private String encoding; &nbsp; &nbsp;<br />
&nbsp; &nbsp; private HashMap&lt;String,String&gt; params = new HashMap&lt;String,String&gt;(); &nbsp; &nbsp;<br />
&nbsp; &nbsp; // 项目结束时就已经进行销毁 &nbsp; &nbsp;<br />
&nbsp; &nbsp; public void destroy() { &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;end do the encoding filter!&quot;); &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; params=null; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; encoding=null; &nbsp; &nbsp;<br />
&nbsp; &nbsp; } &nbsp; &nbsp;<br />
&nbsp; &nbsp; public void doFilter(ServletRequest req, ServletResponse resp,FilterChain chain) throws IOException, ServletException { &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;before encoding &quot; + encoding + &quot; filter！&quot;); &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; req.setCharacterEncoding(encoding); &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; chain.doFilter(req, resp); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;after encoding &quot; + encoding + &quot; filter！&quot;); &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.err.println(&quot;----------------------------------------&quot;); &nbsp; &nbsp;<br />
&nbsp; &nbsp; } &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; // 项目启动时就已经进行读取 &nbsp; &nbsp;<br />
&nbsp; &nbsp; public void init(FilterConfig config) throws ServletException { &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;begin do the encoding filter!&quot;); &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; encoding = config.getInitParameter(&quot;encoding&quot;); &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; for (Enumeration&lt;?&gt; e = config.getInitParameterNames(); e.hasMoreElements();) { &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; String name = (String) e.nextElement(); &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; String value = config.getInitParameter(name); &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; params.put(name, value); &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp;<br />
&nbsp; &nbsp; } &nbsp; &nbsp;<br />
&nbsp;} &nbsp; &nbsp;</p>

<h3>日志过滤器：</h3>

<p>[java] view plain copy<br />
package com.weijia.filterservlet; &nbsp;<br />
&nbsp;&nbsp;<br />
import java.io.IOException; &nbsp;<br />
&nbsp;&nbsp;<br />
import javax.servlet.Filter; &nbsp;<br />
import javax.servlet.FilterChain; &nbsp;<br />
import javax.servlet.FilterConfig; &nbsp;<br />
import javax.servlet.ServletException; &nbsp;<br />
import javax.servlet.ServletRequest; &nbsp;<br />
import javax.servlet.ServletResponse; &nbsp;<br />
import javax.servlet.http.HttpServletRequest; &nbsp;<br />
&nbsp;&nbsp;<br />
public class LogFilter implements Filter { &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; public FilterConfig config; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; public void destroy() { &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; this.config = null; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;end do the logging filter!&quot;); &nbsp;<br />
&nbsp; &nbsp; } &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException { &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;before the log filter!&quot;); &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; // 将请求转换成HttpServletRequest 请求 &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; HttpServletRequest hreq = (HttpServletRequest) req; &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; // 记录日志 &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;Log Filter已经截获到用户的请求的地址:&quot;+hreq.getServletPath() );<br />
&nbsp; &nbsp; &nbsp; &nbsp; context.log(&quot;Filter已经截获到用户的请求的地址: &quot;&nbsp;+ hrequest.getServletPath());&nbsp;&nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; try { &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Filter 只是链式处理，请求依然转发到目的地址。 &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; chain.doFilter(req, res); &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; } catch (Exception e) { &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace(); &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;after the log filter!&quot;); &nbsp; &nbsp;<br />
&nbsp; &nbsp; } &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; public void init(FilterConfig config) throws ServletException { &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;begin do the log filter!&quot;); &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; this.config = config; &nbsp; &nbsp;<br />
&nbsp; &nbsp; } &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp;<br />
&nbsp;} &nbsp; &nbsp;</p>

<h3>测试Servlet:</h3>

<p>package com.weijia.filterservlet; &nbsp;<br />
&nbsp;&nbsp;<br />
import java.io.IOException; &nbsp;<br />
&nbsp;&nbsp;<br />
import javax.servlet.ServletException; &nbsp;<br />
import javax.servlet.http.HttpServlet; &nbsp;<br />
import javax.servlet.http.HttpServletRequest; &nbsp;<br />
import javax.servlet.http.HttpServletResponse; &nbsp;<br />
&nbsp;&nbsp;<br />
public class FilterServlet extends HttpServlet { &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; private static final long serialVersionUID = 1L; &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; public void doGet(HttpServletRequest request, HttpServletResponse response) &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; throws ServletException, IOException { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; response.setDateHeader(&quot;expires&quot;, -1); &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; public void doPost(HttpServletRequest request, HttpServletResponse response) &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; throws ServletException, IOException { &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp;&nbsp;<br />
} &nbsp;</p>

<h3>访问FilterServlet</h3>

<p>运行结果：<br />
before the log filter!<br />
Log Filter已经截获到用户的请求的地址:/FilterServlet<br />
before encoding utf-8 filter！<br />
after encoding utf-8 filter！<br />
----------------------------------------<br />
after the log filter!</p>

<p>我们从运行结果可以看到这个过滤器的调用关系：</p>

<p>类似于C++中的构造函数和析构函数的调用顺序，<br />
这里我们在web.xml中注册的是先注册日志过滤器的，然后再注册</p>

<p>当我们重新部署应用的时候发现：</p>

<p>会先销毁上次的过滤器，然后再重新注册一下</p>

<p>下面在来看一下Servlet的监听器</p>

<p>Servlet监听器用于监听一些重要事件的发生，监听器对象可以在事情发生前、发生后可以做一些必要的处理。下面将介绍几种常用的监听器，以及它们都适合运用于那些环境。&nbsp;</p>

<p>分类及介绍：<br />
1． &nbsp;ServletContextListener：用于监听WEB 应用启动和销毁的事件，监听器类需要实现javax.servlet.ServletContextListener 接口。&nbsp;<br />
Java代码 &nbsp;收藏代码<br />
public class QuartzListener implements ServletContextListener { &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; private Logger logger = LoggerFactory.getLogger(QuartzListener.class); &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; public void contextInitialized(ServletContextEvent sce) { &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; &nbsp;*在服务器停止运行的时候停止所有的定时任务&nbsp;<br />
&nbsp; &nbsp; &nbsp;*/ &nbsp;<br />
&nbsp; &nbsp; @SuppressWarnings(&quot;unchecked&quot;) &nbsp;<br />
&nbsp; &nbsp; public void contextDestroyed(ServletContextEvent arg0) { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; try { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler(); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; List&lt;JobExecutionContext&gt; jobList = scheduler.getCurrentlyExecutingJobs(); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (JobExecutionContext jobContext : jobList) { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Job job = jobContext.getJobInstance(); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (job instanceof InterruptableJob) { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ((InterruptableJob) job).interrupt(); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; scheduler.shutdown(); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; } catch (SchedulerException e) { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; logger.error(&quot;shut down scheduler happened error&quot;, e); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; } &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
} &nbsp;<br />
&nbsp;<br />
&nbsp;<br />
2． &nbsp;ServletContextAttributeListener：用于监听WEB应用属性改变的事件，包括：增加属性、删除属性、修改属性，监听器类需要实现javax.servlet.ServletContextAttributeListener接口。&nbsp;</p>

<p>3． &nbsp;HttpSessionListener：用于监听Session对象的创建和销毁，监听器类需要实现javax.servlet.http.HttpSessionListener接口或者javax.servlet.http.HttpSessionActivationListener接口，或者两个都实现。<br />
Java代码 &nbsp;收藏代码<br />
/**&nbsp;<br />
&nbsp;* &nbsp;<br />
&nbsp;* 会话监听器&nbsp;<br />
&nbsp;* &lt;p /&gt;&nbsp;<br />
&nbsp;*&nbsp;<br />
&nbsp;*/ &nbsp;<br />
public class SessionListener implements HttpSessionListener { &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; @Override &nbsp;<br />
&nbsp; &nbsp; public void sessionCreated(HttpSessionEvent arg0) { &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; @Override &nbsp;<br />
&nbsp; &nbsp; public void sessionDestroyed(HttpSessionEvent event) { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; HttpSession session = event.getSession(); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; User user = (BrsSession) session.getAttribute(&quot;currUser&quot;); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; if (user != null) { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //TODO something &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; } &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp;&nbsp;<br />
} &nbsp;<br />
&nbsp;<br />
4． &nbsp;HttpSessionActivationListener：用于监听Session对象的钝化/活化事件，监听器类需要实现javax.servlet.http.HttpSessionListener接口或者javax.servlet.http.HttpSessionActivationListener接口，或者两个都实现。&nbsp;</p>

<p>5． &nbsp;HttpSessionAttributeListener：用于监听Session对象属性的改变事件，监听器类需要实现javax.servlet.http.HttpSessionAttributeListener接口。&nbsp;</p>

<p>部署：&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp;监听器的部署在web.xml文件中配置，在配置文件中，它的位置应该在过滤器的后面Servlet的前面<br />
&nbsp;<br />
web.xml配置文件：<br />
&nbsp;<br />
Java代码 &nbsp;收藏代码<br />
&lt;!-- Quartz监听器 --&gt; &nbsp;<br />
&lt;listener&gt; &nbsp;<br />
&nbsp; &nbsp; &lt;listener-class&gt; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; com.flyer.lisenter.QuartzListener &nbsp;<br />
&nbsp; &nbsp; &lt;/listener-class&gt; &nbsp;<br />
&lt;/listener&gt; &nbsp;<br />
&nbsp;</p>

<ol start="1">
	<li>&nbsp;</li>
</ol>
