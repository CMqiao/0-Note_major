<h1>jsp内置对象</h1>

<p>&nbsp; &nbsp; 可以不加声明和创建就可以在JSP页面脚本（Java程序片和Java表达式）中使用的成员变量<br />
&nbsp;&nbsp; &nbsp;内置组件<br />
&nbsp;&nbsp; &nbsp;JSP共有以下9种基本内置组件（可与ASP的6种内部组件相对应）：</p>

<h2>pageContext对象</h2>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;pageContext对象提供了对JSP页面内所有的对象及名字空间的访问，也就是说他可以访问到本页所在的SESSION，也可以取本页面所在的application的某一属性值，他相当于页面中所有功能的集大成者，它的本类名也叫pageContext。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;序号 方 法 说 明<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;1 JspWriter getOut() 返回当前客户端响应被使用的JspWriter流(out)<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;2 HttpSession getSession() 返回当前页中的HttpSession对象(session)<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;3 Object getPage() 返回当前页的Object对象(page)<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;4 ServletRequest getRequest() 返回当前页的ServletRequest对象(request)<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;5 ServletResponse getResponse() 返回当前页的ServletResponse对象(response)<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;6 Exception getException() 返回当前页的Exception对象(exception)<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;7 ServletConfig getServletConfig() 返回当前页的ServletConfig对象(config)<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;8 ServletContext getServletContext() 返回当前页的ServletContext对象(application)<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;9 void setAttribute(String name,Object attribute) 设置属性及属性值<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;10 void setAttribute(String name,Object obj,int scope) 在指定范围内设置属性及属性值<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;11 public Object getAttribute(String name) 取属性的值<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;12 Object getAttribute(String name,int scope) 在指定范围内取属性的值<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;13 public Object findAttribute(String name) 寻找一属性,返回起属性值或NULL<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;14 void removeAttribute(String name) 删除某属性<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;15 void removeAttribute(String name,int scope) 在指定范围删除某属性<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;16 int getAttributeScope(String name) 返回某属性的作用范围<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;17 Enumeration getAttributeNamesInScope(int scope) 返回指定范围内可用的属性名枚举<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;18 void release() 释放pageContext所占用的资源<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;19 void forward(String relativeUrlPath) 使当前页面重导到另一页面<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;20 void include(String relativeUrlPath) 在当前位置包含另一文件</p>

<h2>request对象</h2>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;客户端的请求信息被封装在request对象中，通过它才能了解到客户的需求，然后做出响应。它是HttpServletRequest类的实例。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;request对象具有请求域,即完成客户端的请求之前,该对象一直有效。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;序号 方 法 说 明<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;1 object getAttribute(String name) 返回指定属性的属性值<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;2 Enumeration getAttributeNames() 返回所有可用属性名的枚举<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;3 String getParameter(String name) 返回name指定参数的参数值<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;4 Enumeration getParameterNames() 返回可用参数名的枚举</p>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;5 String getCharacterEncoding() 返回字符编码方式<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;6 int getContentLength() 返回请求体的长度（以字节数）<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;7 String getContentType() 得到请求体的MIME类型<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;8 ServletInputStream getInputStream() 得到请求体中一行的二进制流<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;9 String[] getParameterValues(String name) 返回包含参数name的所有值的数组<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;10 String getProtocol() 返回请求用的协议类型及版本号<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;11 String getScheme() 返回请求用的计划名,如:http.https及ftp等<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;12 String getServerName() 返回接受请求的服务器主机名<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;13 int getServerPort() 返回服务器接受此请求所用的端口号<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;14 BufferedReader getReader() 返回解码过了的请求体<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;15 String getRemoteAddr() 返回发送此请求的客户端IP地址<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;16 String getRemoteHost() 返回发送此请求的客户端主机名<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;17 void setAttribute(String key,Object obj) 设置属性的属性值<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;18 StringgetRealPath(String path) 返回一虚拟路径的真实路径<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;19 String request.getContextPath() 返回上下文路径</p>

<h2>response对象</h2>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;response对象包含了响应客户请求的有关信息，但在JSP中很少直接用到它。它是HttpServletResponse类的实例。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;response对象具有页面作用域，即访问一个页面时，该页面内的response对象只能对这次访问有效，其它页面的response对象对当前页面无效。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;序号 方 法 说 明<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;1 String getCharacterEncoding() 返回响应用的是何种字符编码<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;2 ServletOutputStream getOutputStream() 返回响应的一个二进制输出流<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;3 PrintWriter getWriter() 返回可以向客户端输出字符的一个对象<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;4 void setContentLength(int len) 设置响应头长度<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;5 void setContentType(String type) 设置响应的MIME类型<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;6 sendRedirect(java.lang.String location) 重新定向客户端的请求</p>

<h2>application对象</h2>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;application对象实现了用户间数据的共享，可存放全局变量。它开始于服务器的启动，直到服务器的关闭，在此期间，此对象将一直存在；这样在用户的前后连接或不同用户之间的连接中，可以对此对象的同一属性进行操作；在任何地方对此对象属性的操作，都将影响到其他用户对此的访问。服务器的启动和关闭决定了application对象的生命。它是ServletContext类的实例。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;序号 方 法 说 明<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;1 Object getAttribute(String name) 返回给定名的属性值<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;2 Enumeration getAttributeNames() 返回所有可用属性名的枚举<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;3 void setAttribute(String name,Object obj) 设定属性的属性值<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;4 void removeAttribute(String name) 删除一属性及其属性值<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;5 String getServerInfo() 返回JSP(SERVLET)引擎名及版本号<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;6 String getRealPath(String path) 返回一虚拟路径的真实路径<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;7 ServletContext getContext(String uripath) 返回指定WebApplication的application对象<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;8 int getMajorVersion() 返回服务器支持的Servlet API的最大版本号<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;9 int getMinorVersion() 返回服务器支持的Servlet API的最小版本号<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;10 String getMimeType(String file) 返回指定文件的MIME类型<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;11 URL getResource(String path) 返回指定资源(文件及目录)的URL路径<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;12 InputStream getResourceAsStream(String path) 返回指定资源的输入流<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;13 RequestDispatcher getRequestDispatcher(String uripath) 返回指定资源的RequestDispatcher对象<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;14 Servlet getServlet(String name) 返回指定名的Servlet<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;15 Enumeration getServlets() 返回所有Servlet的枚举<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;16 Enumeration getServletNames() 返回所有Servlet名的枚举<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;17 void log(String msg) 把指定消息写入Servlet的日志文件<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;18 void log(Exception exception,String msg) 把指定异常的栈轨迹及错误消息写入Servlet的日志文件<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;19 void log(String msg,Throwable throwable) 把栈轨迹及给出的Throwable异常的说明信息 写入Servlet的日志文件</p>

<h2>session对象</h2>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;session对象指的是客户端与服务器的一次会话，从客户端连到服务器的一个WebApplication开始，直到客户端与服务器断开连接为止。它是HttpSession类的实例。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Session对象是一个JSP内置对象，它在第一个JSP页面被装载时自动创建，完成会话期管理。从一个客户打开浏览器并连接到服务器开始，到客户关闭浏览器离开这个服务器结束，被称为一个会话。当一个客户访问一个服务器时，可能会在这个服务器的几个页面之间切换，服务器应当通过某种办法知道这是一个客户，就需要Session对象。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;session对象具有会话作用域。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;1 long getCreationTime() 返回SESSION创建时间<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;2 public String getId() 返回SESSION创建时JSP引擎为它设的唯一ID号<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;3 long getLastAccessedTime() 返回此SESSION里客户端最近一次请求时间<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;4 int getMaxInactiveInterval() 返回两次请求间隔多长时间此SESSION被取消(ms)<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;5 String[] getValueNames() 返回一个包含此SESSION中所有可用属性的数组<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;6 void invalidate() 取消SESSION，使SESSION不可用<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;7 boolean isNew() 返回服务器创建的一个SESSION,客户端是否已经加入<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;8 void removeValue(String name) 删除SESSION中指定的属性<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;9 void setMaxInactiveInterval() 设置两次请求间隔多长时间此SESSION被取消(ms)<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;软道语录<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;jsp内置对象<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;jsp内置对象就是在jsp页面中可以使用的java类对象。</p>

<h2>Cookie对象</h2>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Cookie最根本的用途是能够帮助网站保存有关访问者的信息。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;1. &nbsp;cookie对象的属性<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Name:获取或设置Cookie的名称<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Value: 获取或设置Cookie的值<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Expires: 获取或设置Cookie的过期日期和时间<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Version:获取或设置此Cookie符合的HTTP状态维护版本<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Comment:获取或设置服务器可添加到Cookie中的属性&nbsp;&nbsp; &nbsp;&nbsp;</p>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;2. &nbsp;cookie对象的方法<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Add:新增一个Cookie变量<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Clear:清除Cookie结合内的变量<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Get:通过变量名或索引得到Cookie的变量值<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;GetKey:以索引来获取Cookie的变量名称<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Remove:通过Cookie变量名来删除Cookie变量</p>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;3. &nbsp;cookie对象的使用<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Cookie可以定义为服务器存储在浏览器上的少量信息，它的主要用途是在客户中保留客户的个人信息，而Cookie又分为两类<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;(1)会话Cookie的创建方式<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;.创建和读取会话Cookie<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;可以使用Response类的Cookies属性来创建会话Cookie，使用Request对象读取。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; 创建语法：<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HttpCookie myCookie = new&nbsp;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HttpCookie(&quot;UserSettings&quot;,&rdquo;hello&rdquo;);<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Response.Cookies.Add(myCookie<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;读取语法：<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Request.Cookies[&ldquo;Cookie名&ldquo;].Value)<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;说明：Cookie只能包含字符串值。 如果想在Cookie中存数值，比如用户ID，那么<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 需要将此值转换为字符串<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; (2)还有一种Cookie称为持久性Cookie，它是有一定的生命周期的，用户可以自定义这个生命周期，这种持久性的Cookie会以特殊文件的形式保存在客户端，当用户再次访问这个网站时，服务器会自动取出该用户的相关信息<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;持久性Cookie类似于会话Cookie，区别在于持久性Cookie具有确定的过期日期。当浏览器请求一个创建持久性Cookie的页面时，浏览器将Cookie保存到硬盘。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;持久性Cookie在用户的计算机上以纯文本方式存储。因此，不应该在持久性Cookie中存储敏感信息，比如口令和信用卡号。持久Cookie与会话Cookie之间的差别在于增加了过期信息。</p>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;4. Cookie的限制<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;（1）单个Cookie包含的信息量不能多于4KB。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;（2）只能在Cookie中存储字符串内容，<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;（3）依赖于浏览</p>

<h2>page对象</h2>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;page对象就是指向当前JSP页面本身，有点象类中的this指针，它是java.lang.Object类的实例</p>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;1 class getClass 返回此Object的类<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;2 int hashCode() 返回此Object的hash码<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;3 boolean equals(Object obj) 判断此Object是否与指定的Object对象相等<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;4 void copy(Object obj) 把此Object拷贝到指定的Object对象中<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;5 Object clone() 克隆此Object对象<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;6 String toString() 把此Object对象转换成String类的对象<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;7 void notify() 唤醒一个等待的线程<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;8 void notifyAll() 唤醒所有等待的线程<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;9 void wait(int timeout) 使一个线程处于等待直到timeout结束或被唤醒<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;10 void wait() 使一个线程处于等待直到被唤醒<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;11 void enterMonitor() 对Object加锁<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;12 void exitMonitor() 对Object开锁</p>

<h2>config对象</h2>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;config对象是在一个Servlet初始化时，JSP引擎向它传递信息用的，此信息包括Servlet初始化时所要用到的参数（通过属性名和属性值构成）以及服务器的有关信息（通过传递一个ServletContext对象）</p>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;1 ServletContext getServletContext() 返回含有服务器相关信息的ServletContext对象<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;2 String getInitParameter(String name) 返回初始化参数的值<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;3 Enumeration getInitParameterNames() 返回Servlet初始化所需所有参数的枚举<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;内置对象产生的时机编辑<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;一个JSP页面对应一个Servlet类，每个Servlet类有三个方法：<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;　　init方法：初始化JSP/Servlet的方法。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;　　destory方法：销毁JSP/Servlet的方法。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;　　service方法：对用户请求产生响应的方法。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;　　request对象和response对象是service方法的形参，application对象，page对象，out对象，pageContext对象，session对象都是service的方法中生成的实例。</p>

<p>&nbsp;&nbsp; &nbsp;其他对象</p>

<h2>out对象</h2>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;out对象是JspWriter类的实例,是向客户端输出内容常用的对象<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;序号 方 法 说 明<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;1 void clear() 清除缓冲区的内容<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;2 void clearBuffer() 清除缓冲区的当前内容<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;3 void flush() 清空流<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;4 int getBufferSize() 返回缓冲区以字节数的大小，如不设缓冲区则为0<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;5 int getRemaining() 返回缓冲区还剩余多少可用<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;6 boolean isAutoFlush() 返回缓冲区满时，是自动清空还是抛出异常<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;7 void close() 关闭输出流</p>

<h2>exception对象</h2>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;exception对象是一个例外对象，当一个页面在运行过程中发生了例外，就产生这个对象。如果一个JSP页面要应用此对象，就必须把isErrorPage设为true，否则无法编译。他实际上是java.lang.Throwable的对象<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;序号 方 法 说 明<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;1 String getMessage() 返回描述异常的消息<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;2 String toString() 返回关于异常的简短描述消息<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;3 void printStackTrace() 显示异常及其栈轨迹<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;4 Throwable FillInStackTrace() 重写异常的执行栈轨迹</p>
