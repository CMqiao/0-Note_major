<h1>log4j级别知识</h1>

<h2>log4j中级别的选择</h2>

<p>&nbsp;&nbsp; &nbsp;log4j中输入信息的级别有debug,info,warn,error,fatal&nbsp;5个级别</p>

<p>&nbsp;&nbsp; &nbsp;他们对应的是输出信息的级别,级别越低信息输入越详细.使用debug级别的时候,info中的信息也能输出<br />
&nbsp;&nbsp; &nbsp;使用info的时候,debug对应的信息显示不出来</p>

<p>&nbsp;&nbsp; &nbsp;一般在开发的时候使用debug,&nbsp;开发完成后使用error。在实际应用中有很多库的信息都是由debug打印出来，所以如果你打开debug模式的话会看到很多你用不上的信息。另外打印过多的信息会降低系统速度，所以在实际发布的时候，一定要确定log4j.rootLogger的设置不是debug</p>

<p>&nbsp;&nbsp; &nbsp;灵活的运用各种模式有时候非常方便。比如说在开发过程中，你自己的习惯可能会打印出一些对调试有意义，但系统实际运行不需要的信息，这些都应该放在debug里，当系统真正发布的时候，把log4j等级设置为info就可以避免打印这些东西。而当系统出现问题的时候，你只需要修改log4j.properties里的打印等级就可以看到那些调试信息了。</p>

<p>&nbsp;&nbsp; &nbsp;log4j支持单一文件的logging，你可以指定需要打印debug的class，这样就可以最低限度的获取系统调试信息，而不需要在浩如烟海的框架或是别的库文件默认的debug信息里找你需要的那么几条东西了。</p>

<h2>具体每个级别的介绍：</h2>

<h3>&nbsp;&nbsp; &nbsp;DEBUG:&nbsp;</h3>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 这个级别最低的东东，一般的来说，在系统实际运行过程中，一般都是不输出的。因此这个级别的信息，可以随意的使用，任何觉得有利于在调试时更详细的了解系统运行状态的东东，比如变量的值等等，都输出来看看也无妨。</p>

<h3>&nbsp;&nbsp; &nbsp;INFO：&nbsp;</h3>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 这个应该用来反馈系统的当前状态给最终用户的，所以，在这里输出的信息，应该对最终用户具有实际意义，也就是最终用户要能够看得明白是什么意思才行。从某种角度上说，Info 输出的信息可以看作是软件产品的一部分（就像那些交互界面上的文字一样），所以需要谨慎对待，不可随便。</p>

<h3>&nbsp;&nbsp; &nbsp;WARN、ERROR和FATAL：</h3>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 警告、错误、严重错误，这三者应该都在系统运行时检测到了一个不正常的状态，他们之间的区别，要区分还真不是那么简单的事情。我大致是这样区分的：</p>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WARN：所谓警告，应该是这个时候进行一些修复性的工作，应该还可以把系统恢复到正常状态中来，系统应该可以继续运行下去。</p>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERROR:所谓错误，就是说可以进行一些修复性的工作，但无法确定系统会正常的工作下去，系统在以后的某个阶段，很可能会因为当前的这个问题，导致一个无法修复的错误（例如宕机），但也可能一直工作到停止也不出现严重问题。<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fatal:所谓Fatal，那就是相当严重的了，可以肯定这种错误已经无法修复，并且如果系统继续运行下去的话，可以肯定必然会越来越乱。这时候采取的最好的措施不是试图将系统状态恢复到正常，而是尽可能地保留系统有效数据并停止运行。</p>

<p>&nbsp;&nbsp; &nbsp;也就是说，选择 Warn、Error、Fatal 中的具体哪一个，是根据当前的这个问题对以后可能产生的影响而定的，如果对以后基本没什么影响，则警告之，如果肯定是以后要出严重问题的了，则Fatal之，拿不准会怎么样，则 Error 之。</p>
