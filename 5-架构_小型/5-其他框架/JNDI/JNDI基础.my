<h1>JNDI</h1>

<p>JNDI(Java Naming and Directory Interface,Java命名和目录接口)是<a href="http://baike.baidu.com/view/53317.htm" target="_blank">SUN公司</a>提供的一种标准的Java命名系统接口，JNDI提供统一的<a href="http://baike.baidu.com/view/930.htm" target="_blank">客户端</a>API，通过不同的访问提供者接口JNDI服务供应接口(SPI)的实现，由管理者将JNDI API映射为特定的命名服务和目录系统，使得Java<a href="http://baike.baidu.com/view/330120.htm" target="_blank">应用程序</a>可以和这些命名服务和<a href="http://baike.baidu.com/view/1351410.htm" target="_blank">目录服务</a>之间进行交互。<a href="http://baike.baidu.com/view/1351410.htm" target="_blank">目录服务</a>是命名服务的一种自然扩展。两者之间的关键差别是目录服务中<a href="http://baike.baidu.com/view/2387.htm" target="_blank">对象</a>不但可以有名称还可以有属性（例如，用户有email地址），而命名服务中<a href="http://baike.baidu.com/view/2387.htm" target="_blank">对象</a>没有属性<sup>[1]</sup>。</p>

<p>集群JNDI实现了高可靠性JNDI，通过服务器的集群，保证了JNDI的负载平衡和错误恢复。在全局共享的方式下，集群中的一个<a href="http://baike.baidu.com/view/995472.htm" target="_blank">应用服务器</a>保证本地JNDI树的独立性，并拥有全局的JNDI树。每个<a href="http://baike.baidu.com/view/995472.htm" target="_blank">应用服务器</a>在把部署的服务<a href="http://baike.baidu.com/view/2387.htm" target="_blank">对象</a>绑定到自己本地的JNDI树的同时，还绑定到一个共享的全局JNDI树，实现全局JNDI和自身JNDI的联系。</p>

<p>JNDI(Java Naming and Directory Interface)是一个<a href="http://baike.baidu.com/view/330120.htm" target="_blank">应用程序</a>设计的API，为开发人员提供了查找和访问各种命名和<a href="http://baike.baidu.com/view/1351410.htm" target="_blank">目录服务</a>的通用、统一的接口，类似JDBC都是构建在抽象层上。现在JNDI已经成为J2EE的标准之一，所有的J2EE容器都必须提供一个JNDI的服务。</p>

<p>JNDI可访问的现有的目录及服务有：</p>

<p>DNS、XNam 、Novell<a href="http://baike.baidu.com/view/1351410.htm" target="_blank">目录服务</a>、LDAP(Lightweight Directory Access Protocol<a href="http://baike.baidu.com/view/1358510.htm" target="_blank">轻型目录访问协议</a>)、 CORBA<a href="http://baike.baidu.com/view/2387.htm" target="_blank">对象</a>服务、文件系统、Windows XP/2000/NT/Me/9x的<a href="http://baike.baidu.com/view/979.htm" target="_blank">注册表</a>、RMI、DSML v1&amp;v2、NIS。</p>

<p>软件名称</p>

<p>Java命名和目录接口</p>

<p>开发商&nbsp;<a href="http://baike.baidu.com/view/24856.htm" target="_blank">SUN</a>&nbsp; 软件语言 Java &nbsp;属性 API</p>

<h2>优点</h2>

<p>包含了大量的命名和<a href="http://baike.baidu.com/view/1351410.htm" target="_blank">目录服务</a>，使用通用接口来访问不同种类的服务；</p>

<p>可以同时连接到多个命名或<a href="http://baike.baidu.com/view/1351410.htm" target="_blank">目录服务</a>上；</p>

<p>建立起逻辑关联，允许把名称同Java<a href="http://baike.baidu.com/view/2387.htm" target="_blank">对象</a>或资源关联起来，而不必知道对象或资源的物理ID。</p>

<p>JNDI程序包：</p>

<p><a href="http://baike.baidu.com/view/1018040.htm" target="_blank">javax.naming</a>：命名操作；</p>

<p><a href="http://baike.baidu.com/view/1018041.htm" target="_blank">javax.naming.directory</a>：目录操作；</p>

<p><a href="http://baike.baidu.com/view/1021143.htm" target="_blank">javax.naming.event</a>：在命名<a href="http://baike.baidu.com/view/2000147.htm" target="_blank">目录服务器</a>中请求事件通知；</p>

<p><a href="http://baike.baidu.com/view/1021145.htm" target="_blank">javax.naming.ldap</a>：提供LDAP支持；</p>

<p><a href="http://baike.baidu.com/view/1021147.htm" target="_blank">javax.naming.spi</a>：允许动态插入不同实现。</p>

<p>利用JNDI的命名与服务功能来满足企业级API对命名与服务的访问，诸如EJB、JMS、JDBC 2.0以及IIOP上的RMI通过JNDI来使用CORBA的命名服务。</p>

<h2>架构</h2>

<p>JNDI架构提供了一组标准的独立于命名系统的<a href="http://baike.baidu.com/view/16068.htm" target="_blank">API</a>，这些API构建在与命名系统有关的驱动之上。这一层有助于将应用与实际数据源分离，因此不管应用访问的是<a href="http://baike.baidu.com/view/159263.htm" target="_blank">LDAP</a>、<a href="http://baike.baidu.com/view/99017.htm" target="_blank">RMI</a>、<a href="http://baike.baidu.com/view/22276.htm" target="_blank">DNS</a>、还是其他的<a href="http://baike.baidu.com/view/1351410.htm" target="_blank">目录服务</a>。换句话说，JNDI独立于<a href="http://baike.baidu.com/view/1351410.htm" target="_blank">目录服务</a>的具体实现，只要有目录的服务提供接口（或驱动），就可以使用目录。</p>

<p>关于JNDI要注意的重要一点是，它提供了应用<a href="http://baike.baidu.com/view/897136.htm" target="_blank">编程接口</a>(application programming interface，API)和服务提供者接口(service provider interface，SPI)。这一点的真正含义是，要让应用与命名服务或<a href="http://baike.baidu.com/view/1351410.htm" target="_blank">目录服务</a>交互，必须有这个服务的JNDI服务提供者，这正是JNDI SPI发挥作用的地方。服务提供者基本上是一组类，这些类为各种具体的命名和<a href="http://baike.baidu.com/view/1351410.htm" target="_blank">目录服务</a>实现了JNDI接口&mdash;很像JDBC驱动为各种具体的<a href="http://baike.baidu.com/view/3080937.htm" target="_blank">数据库系统实现</a>了JDBC接口一样。作为一个应用开发者，我们不必操心JNDI SPI的具体实现。只需要确认要使用的每一个命名或<a href="http://baike.baidu.com/view/1351410.htm" target="_blank">目录服务</a>都有服务提供者。</p>

<h2>组件</h2>

<p>1、Javax.naming：包含了访问命名服务的类和接口。例如，它定义了Context接口，这是命名服务执行查询的入口。</p>

<p>2、Javax.naming.directory：对命名包的扩充，提供了访问<a href="http://baike.baidu.com/view/1351410.htm" target="_blank">目录服务</a>的类和接口。例如，它为属性增加了新的类，提供了表示目录上下文的DirContext接口，定义了检查和更新目录<a href="http://baike.baidu.com/view/2387.htm" target="_blank">对象</a>的属性的方法。</p>

<p>3、Javax.naming.event：提供了对访问命名和<a href="http://baike.baidu.com/view/1351410.htm" target="_blank">目录服务</a>时的事件通知的支持。例如，定义了NamingEvent类，这个类用来表示命名/<a href="http://baike.baidu.com/view/1351410.htm" target="_blank">目录服务</a>产生的事件，定义了侦听NamingEvents的NamingListener接口。</p>

<p>4、Javax.naming.<a href="http://baike.baidu.com/view/159263.htm" target="_blank">ldap</a>：这个包提供了对LDAP 版本3扩充的操作和控制的支持，通用包<a href="http://baike.baidu.com/view/1018041.htm" target="_blank">javax.naming.directory</a>没有包含这些操作和控制。</p>

<p>5、Javax.naming.spi：这个包提供了一个方法，通过<a href="http://baike.baidu.com/view/1018040.htm" target="_blank">javax.naming</a>和有关包动态增加对访问命名和<a href="http://baike.baidu.com/view/1351410.htm" target="_blank">目录服务</a>的支持。这个包是为有兴趣创建服务提供者的开发者提供的。</p>

<h2>用途</h2>

<p>命名或<a href="http://baike.baidu.com/view/1351410.htm" target="_blank">目录服务</a>使用户可以<a href="http://baike.baidu.com/view/495699.htm" target="_blank">集中存储</a>共有信息，这一点在网络应用中是重要的，因为这使得这样的应用更协调、更容易管理。例如，可以将打印机设置存储在<a href="http://baike.baidu.com/view/1351410.htm" target="_blank">目录服务</a>中，以便被与打印机有关的应用使用。</p>

<p>我们大家每天都不知不觉地使用了命名服务。命名系统中的<a href="http://baike.baidu.com/view/2387.htm" target="_blank">对象</a>可以是<a href="http://baike.baidu.com/view/22276.htm" target="_blank">DNS</a>记录中的名称、<a href="http://baike.baidu.com/view/995472.htm" target="_blank">应用服务器</a>中的EJB组件(Enterprise JavaBeans Component)、<a href="http://baike.baidu.com/view/159263.htm" target="_blank">LDAP</a>(Lightweight Directory Access Protocol)中的用户Profile。</p>

<p><a href="http://baike.baidu.com/view/1351410.htm" target="_blank">目录服务</a>是命名服务的自然扩展。两者之间的关键差别是<a href="http://baike.baidu.com/view/1351410.htm" target="_blank">目录服务</a>中<a href="http://baike.baidu.com/view/2387.htm" target="_blank">对象</a>可以有属性（例如，用户有email地址），而命名服务中对象没有属性。因此，在<a href="http://baike.baidu.com/view/1351410.htm" target="_blank">目录服务</a>中，你可以根据属性搜索<a href="http://baike.baidu.com/view/2387.htm" target="_blank">对象</a>。JNDI允许你访问文件系统中的文件，定位远程RMI注册的<a href="http://baike.baidu.com/view/2387.htm" target="_blank">对象</a>，访问像LDAP这样的<a href="http://baike.baidu.com/view/1351410.htm" target="_blank">目录服务</a>，定位网络上的EJB组件。</p>

<p>对于象LDAP<a href="http://baike.baidu.com/view/930.htm" target="_blank">客户端</a>、应用<a href="http://baike.baidu.com/view/1588715.htm" target="_blank">launcher</a>、类浏览器、网络管理实用程序，甚至地址薄这样的应用来说，JNDI是一个很好的选择。</p>

<h2>组成部分</h2>

<p>JNDI提供了一种统一的方式，可以用在网络上查找和访问服务。通过指定一个资源名称，该名称对应于<a href="http://baike.baidu.com/view/1088.htm" target="_blank">数据库</a>或命名服务中的一个记录，同时返回数据库连接建立所必须的信息。</p>

<p>JNDI主要有两部分组成：<a href="http://baike.baidu.com/view/185287.htm" target="_blank">应用程序编程接口</a>和服务供应商接口。<a href="http://baike.baidu.com/view/185287.htm" target="_blank">应用程序编程接口</a>提供了Java应用程序访问各种命名和<a href="http://baike.baidu.com/view/1351410.htm" target="_blank">目录服务</a>的功能，服务供应商接口提供了任意一种服务的供应商使用的功能。</p>

<p>代码示例：</p>

<p>try{</p>

<p>Context cntxt = new InitialContext();</p>

<p>DataSource ds = (DataSource) cntxt.lookup(&quot;jdbc/dpt&quot;);</p>

<p>}</p>

<p>catch(NamingException ne){</p>

<p>...</p>

<p>}</p>

<h2>技术应用</h2>

<p>消息通信是<a href="http://baike.baidu.com/view/551014.htm" target="_blank">软件组件</a>或<a href="http://baike.baidu.com/view/330120.htm" target="_blank">应用程序</a>用来通信的一种方法。JMS就是一种允许<a href="http://baike.baidu.com/view/330120.htm" target="_blank">应用程序</a>创建、发送、接收、和读取消息的<a href="http://baike.baidu.com/view/29.htm" target="_blank">JAVA</a>技术。</p>

<p>代码示例：</p>

<p>try{</p>

<p>Properties env = new Properties();</p>

<p>InitialContext inictxt = new InitialContext(env);</p>

<p>TopicConnectionFactory connFactory = (TopicConnectionFactory) inictxt.lookup(&quot;TTopicConnectionFactory&quot;);</p>

<p>...</p>

<p>}</p>

<p>catch(NamingException ne){</p>

<p>...</p>

<p>}</p>

<p>访问特定目录：举个例子，人是个<a href="http://baike.baidu.com/view/2387.htm" target="_blank">对象</a>，他有好几个属性，诸如这个人的姓名、电话号码、<a href="http://baike.baidu.com/view/126647.htm" target="_blank">电子邮件地址</a>、邮政编码等属性。通过getAttributes()方法</p>

<p>Attribute attr = directory.getAttributes(personName).get(&quot;email&quot;);</p>

<p>String email = (String)attr.get();</p>

<p>通过使用JNDI让客户使用<a href="http://baike.baidu.com/view/2387.htm" target="_blank">对象</a>的名称或属性来查找对象：</p>

<p>foxes = directory.search(&quot;o=Wiz,c=US&quot;, &quot;sn=Fox&quot;, controls);</p>

<p>通过使用JNDI来查找诸如打印机、<a href="http://baike.baidu.com/view/1088.htm" target="_blank">数据库</a>这样的<a href="http://baike.baidu.com/view/2387.htm" target="_blank">对象</a>，查找打印机的例子：</p>

<p>Printer printer = (Printer)namespace.lookup(printerName);</p>

<p>printer.print(document);</p>

<p>浏览命名空间：</p>

<p>NamingEnumeration list = namespace.list(&quot;o=Widget, c=US&quot;);</p>

<p>while (list.hasMore()) {</p>

<p>NameClassPair entry = (NameClassPair)list.next();</p>

<p>display(entry.getName(), entry.getClassName());</p>

<p>}</p>

<h2>常用操作</h2>

<p>void bind(String sName,Object object);――绑定：把名称同<a href="http://baike.baidu.com/view/2387.htm" target="_blank">对象</a>关联的过程</p>

<p>void rebind(String sName,Object object);――重新绑定：用来把<a href="http://baike.baidu.com/view/2387.htm" target="_blank">对象</a>同一个已经存在的名称重新绑定</p>

<p>void unbind(String sName);――释放：用来把<a href="http://baike.baidu.com/view/2387.htm" target="_blank">对象</a>从目录中释放出来</p>

<p>Object lookup(String sName);――查找：返回目录中的一个<a href="http://baike.baidu.com/view/2387.htm" target="_blank">对象</a></p>

<p>void rename(String sOldName,String sNewName);――<a href="http://baike.baidu.com/view/1175233.htm" target="_blank">重命名</a>：用来修改<a href="http://baike.baidu.com/view/2387.htm" target="_blank">对象</a>名称绑定的名称</p>

<p>NamingEnumeration listBinding(String sName);――清单：返回绑定在特定上下文中<a href="http://baike.baidu.com/view/2387.htm" target="_blank">对象</a>的清单列表</p>

<p>NamingEnumeration list(String sName);</p>

<p>代码示例：重新得到了名称、类名和绑定<a href="http://baike.baidu.com/view/2387.htm" target="_blank">对象</a>。</p>

<p>NamingEnumeration namEnumList = ctxt.listBinding(&quot;cntxtName&quot;);</p>

<p>...</p>

<p>while ( namEnumList.hasMore() ) {</p>

<p>Binding bnd = (Binding) namEnumList.next();</p>

<p>String sObjName = bnd.getName();</p>

<p>String sClassName = bnd.getClassName();</p>

<p>SomeObject objLocal = (SomeObject) bnd.getObject();</p>

<p>}</p>

<p>参考资料</p>
