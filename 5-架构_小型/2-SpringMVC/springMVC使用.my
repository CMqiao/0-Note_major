<h1><strong>SpringMVC学习笔记----</strong></h1>

<h2><strong>一、SpringMVC基础入门，创建一个HelloWorld程序</strong></h2>

<p>1.首先，导入SpringMVC需要的jar包。</p>

<p><img alt="" src="file:///C:/Users/Jay%20Jay/AppData/Roaming/Tencent/Users/449387122/QQ/WinTemp/RichOle/80HS[GZ02HK7R]0OPKUVZ%7DN.png" /><img alt="" src="http://images0.cnblogs.com/blog2015/694841/201506/032131066955378.png" /></p>

<p>2.添加Web.xml配置文件中关于SpringMVC的配置</p>

<pre>
  &lt;!--configure the setting of springmvcDispatcherServlet and configure the mapping--&gt;
  &lt;servlet&gt;
      &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;
      &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
      &lt;init-param&gt;
            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
            &lt;param-value&gt;classpath:springmvc-servlet.xml&lt;/param-value&gt;
        &lt;/init-param&gt;
        &lt;!-- &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; --&gt;
  &lt;/servlet&gt;

  &lt;servlet-mapping&gt;
      &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;
      &lt;url-pattern&gt;/&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
</pre>

<p>3.在src下添加springmvc-servlet.xml配置文件</p>

<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
    xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd&quot;&gt;                    

    &lt;!-- scan the package and the sub package --&gt;
    &lt;context:component-scan base-package=&quot;test.SpringMVC&quot;/&gt;

    &lt;!-- don&#39;t handle the static resource --&gt;
    &lt;mvc:default-servlet-handler /&gt;

    &lt;!-- if you use annotation you must configure following setting --&gt;
    &lt;mvc:annotation-driven /&gt;
    
    &lt;!-- configure the InternalResourceViewResolver --&gt;
    &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot; 
            id=&quot;internalResourceViewResolver&quot;&gt;
        &lt;!-- 前缀 --&gt;
        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt;
        &lt;!-- 后缀 --&gt;
        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</pre>

<p>4.在WEB-INF文件夹下创建名为jsp的文件夹，用来存放jsp视图。创建一个hello.jsp，在body中添加&ldquo;Hello World&rdquo;。</p>

<p>5.建立包及Controller，如下所示</p>

<p><img alt="" src="http://images0.cnblogs.com/blog2015/694841/201506/032227247897004.png" /></p>

<p>6.编写Controller代码</p>

<pre>
@Controller
@RequestMapping(&quot;/mvc&quot;)
public class mvcController {

    @RequestMapping(&quot;/hello&quot;)
    public String hello(){        
        return &quot;hello&quot;;
    }
}
</pre>

<p>7.启动服务器，键入&nbsp;http://localhost:8080/项目名/mvc/hello</p>

<h2>二、配置解析</h2>

<p>1.Dispatcherservlet</p>

<p>　　DispatcherServlet是前置控制器，配置在web.xml文件中的。拦截匹配的请求，Servlet拦截匹配规则要自已定义，把拦截下来的请求，依据相应的规则分发到目标Controller来处理，是配置spring MVC的第一步。</p>

<p>2.InternalResourceViewResolver</p>

<p>　　视图名称解析器</p>

<p>3.以上出现的注解</p>

<p>@Controller&nbsp;负责注册一个bean 到spring 上下文中</p>

<p>@RequestMapping&nbsp;注解为控制器指定可以处理哪些 URL 请求</p>

<h2>三、SpringMVC常用注解</h2>

<p>@Controller</p>

<p>　　负责注册一个bean 到spring 上下文中<br />
@RequestMapping</p>

<p>　　注解为控制器指定可以处理哪些 URL 请求<br />
@RequestBody</p>

<p>　　该注解用于读取Request请求的body部分数据，使用系统默认配置的HttpMessageConverter进行解析，然后把相应的数据绑定到要返回的对象上&nbsp;,再把HttpMessageConverter返回的对象数据绑定到 controller中方法的参数上</p>

<p>@ResponseBody</p>

<p>　　&nbsp;该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区</p>

<p>@ModelAttribute&nbsp;　　　</p>

<p>　　在方法定义上使用 @ModelAttribute 注解：Spring MVC 在调用目标处理方法前，会先逐个调用在方法级上标注了@ModelAttribute 的方法</p>

<p>　　在方法的入参前使用 @ModelAttribute 注解：可以从隐含对象中获取隐含的模型数据中获取对象，再将请求参数 &ndash;绑定到对象中，再传入入参将方法入参对象添加到模型中&nbsp;</p>

<p>@RequestParam　</p>

<p>　　在处理方法入参处使用 @RequestParam 可以把请求参 数传递给请求方法</p>

<p>@PathVariable</p>

<p>　　绑定 URL 占位符到入参<br />
@ExceptionHandler</p>

<p>　　注解到方法上，出现异常时会执行该方法<br />
@ControllerAdvice</p>

<p>　　使一个Contoller成为全局的异常处理类，类中用@ExceptionHandler方法注解的方法可以处理所有Controller发生的异常</p>

<h2>四、自动匹配参数</h2>

<pre>
    //match automatically
    @RequestMapping(&quot;/person&quot;)
    public String toPerson(String name,double age){
        System.out.println(name+&quot; &quot;+age);
        return &quot;hello&quot;;
    }
</pre>

<h2>五、自动装箱</h2>

<p>1.编写一个Person实体类</p>

<pre>
package test.SpringMVC.model;

public class Person {
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public int getAge() {
        return age;
    }
    public void setAge(int age) {
        this.age = age;
    }
    private String name;
    private int age;
    
}</pre>

<p>&nbsp;</p>

<p>2.在Controller里编写方法</p>

<pre>
    //boxing automatically
    @RequestMapping(&quot;/person1&quot;)
    public String toPerson(Person p){
        System.out.println(p.getName()+&quot; &quot;+p.getAge());
        return &quot;hello&quot;;
    }</pre>

<p>&nbsp;</p>

<h2>六、使用InitBinder来处理Date类型的参数</h2>

<p>&nbsp;</p>

<pre>
    //the parameter was converted in initBinder
    @RequestMapping(&quot;/date&quot;)
    public String date(Date date){
        System.out.println(date);
        return &quot;hello&quot;;
    }
    
    //At the time of initialization,convert the type &quot;String&quot; to type &quot;date&quot;
    @InitBinder
    public void initBinder(ServletRequestDataBinder binder){
        binder.registerCustomEditor(Date.class, new CustomDateEditor(new SimpleDateFormat(&quot;yyyy-MM-dd&quot;),
                true));
    }
</pre>

<h2>七、向前台传递参数</h2>

<pre>
    //pass the parameters to front-end
    @RequestMapping(&quot;/show&quot;)
    public String showPerson(Map&lt;String,Object&gt; map){
        Person p =new Person();
        map.put(&quot;p&quot;, p);
        p.setAge(20);
        p.setName(&quot;jayjay&quot;);
        return &quot;show&quot;;
    }
</pre>

<p>前台可在Request域中取到&quot;p&quot;</p>

<h2>八、使用Ajax调用</h2>

<pre>
    //pass the parameters to front-end using ajax
    @RequestMapping(&quot;/getPerson&quot;)
    public void getPerson(String name,PrintWriter pw){
        pw.write(&quot;hello,&quot;+name);        
    }
    @RequestMapping(&quot;/name&quot;)
    public String sayHello(){
        return &quot;name&quot;;
    }
</pre>

<p>前台用下面的Jquery代码调用</p>

<pre>
          $(function(){
              $(&quot;#btn&quot;).click(function(){
                  $.post(&quot;mvc/getPerson&quot;,{name:$(&quot;#name&quot;).val()},function(data){
                      alert(data);
                  });
              });
          });
</pre>

<h2>九、在Controller中使用redirect方式处理请求</h2>

<pre>
    //redirect 
    @RequestMapping(&quot;/redirect&quot;)
    public String redirect(){
        return &quot;redirect:hello&quot;;
    }</pre>

<h2>十、文件上传</h2>

<p>1.需要导入两个jar包</p>

<p><img alt="" src="http://images0.cnblogs.com/blog2015/694841/201506/052005184887879.png" /></p>

<p>2.在SpringMVC配置文件中加入</p>

<pre>
    &lt;!-- upload settings --&gt;
    &lt;bean id=&quot;multipartResolver&quot;  class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;
        &lt;property name=&quot;maxUploadSize&quot; value=&quot;102400000&quot;&gt;&lt;/property&gt;
    &lt;/bean&gt;</pre>

<p>3.方法代码</p>

<pre>
    @RequestMapping(value=&quot;/upload&quot;,method=RequestMethod.POST)
    public String upload(HttpServletRequest req) throws Exception{
        MultipartHttpServletRequest mreq = (MultipartHttpServletRequest)req;
        MultipartFile file = mreq.getFile(&quot;file&quot;);
        String fileName = file.getOriginalFilename();
        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);        
        FileOutputStream fos = new FileOutputStream(req.getSession().getServletContext().getRealPath(&quot;/&quot;)+
                &quot;upload/&quot;+sdf.format(new Date())+fileName.substring(fileName.lastIndexOf(&#39;.&#39;)));
        fos.write(file.getBytes());
        fos.flush();
        fos.close();
        
        return &quot;hello&quot;;
    }
</pre>

<p>4.前台form表单</p>

<pre>
      &lt;form action=&quot;mvc/upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;
          &lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;&lt;br&gt;
          &lt;input type=&quot;submit&quot; value=&quot;submit&quot;&gt;
      &lt;/form&gt;</pre>

<h2>十一、使用@RequestParam注解指定参数的name</h2>

<pre>
@Controller
@RequestMapping(&quot;/test&quot;)
public class mvcController1 {
    @RequestMapping(value=&quot;/param&quot;)
    public String testRequestParam(@RequestParam(value=&quot;id&quot;) Integer id,
            @RequestParam(value=&quot;name&quot;)String name){
        System.out.println(id+&quot; &quot;+name);
        return &quot;/hello&quot;;
    }    
}
</pre>

<h2>十二、RESTFul风格的SringMVC</h2>

<p>1.RestController</p>

<pre>
@Controller
@RequestMapping(&quot;/rest&quot;)
public class RestController {
    @RequestMapping(value=&quot;/user/{id}&quot;,method=RequestMethod.GET)
    public String get(@PathVariable(&quot;id&quot;) Integer id){
        System.out.println(&quot;get&quot;+id);
        return &quot;/hello&quot;;
    }
    
    @RequestMapping(value=&quot;/user/{id}&quot;,method=RequestMethod.POST)
    public String post(@PathVariable(&quot;id&quot;) Integer id){
        System.out.println(&quot;post&quot;+id);
        return &quot;/hello&quot;;
    }
    
    @RequestMapping(value=&quot;/user/{id}&quot;,method=RequestMethod.PUT)
    public String put(@PathVariable(&quot;id&quot;) Integer id){
        System.out.println(&quot;put&quot;+id);
        return &quot;/hello&quot;;
    }
    
    @RequestMapping(value=&quot;/user/{id}&quot;,method=RequestMethod.DELETE)
    public String delete(@PathVariable(&quot;id&quot;) Integer id){
        System.out.println(&quot;delete&quot;+id);
        return &quot;/hello&quot;;
    }
    
}</pre>

<p>&nbsp;</p>

<p>2.form表单发送put和delete请求</p>

<p>在web.xml中配置</p>

<pre>
  &lt;!-- configure the HiddenHttpMethodFilter,convert the post method to put or delete --&gt;
  &lt;filter&gt;
      &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;
      &lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt;
  &lt;/filter&gt;
  &lt;filter-mapping&gt;
      &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;
      &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
  &lt;/filter-mapping&gt;
</pre>

<p>在前台可以用以下代码产生请求</p>

<p>&nbsp;</p>

<pre>
    &lt;form action=&quot;rest/user/1&quot; method=&quot;post&quot;&gt;
        &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;PUT&quot;&gt;
        &lt;input type=&quot;submit&quot; value=&quot;put&quot;&gt;
    &lt;/form&gt;
    
    &lt;form action=&quot;rest/user/1&quot; method=&quot;post&quot;&gt;
        &lt;input type=&quot;submit&quot; value=&quot;post&quot;&gt;
    &lt;/form&gt;
    
    &lt;form action=&quot;rest/user/1&quot; method=&quot;get&quot;&gt;
        &lt;input type=&quot;submit&quot; value=&quot;get&quot;&gt;
    &lt;/form&gt;
    
    &lt;form action=&quot;rest/user/1&quot; method=&quot;post&quot;&gt;
        &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;DELETE&quot;&gt;
        &lt;input type=&quot;submit&quot; value=&quot;delete&quot;&gt;
    &lt;/form&gt;
</pre>

<h2>十三、返回json格式的字符串</h2>

<p>1.导入以下jar包</p>

<p><img alt="" src="http://images0.cnblogs.com/blog2015/694841/201506/052029372696778.png" /></p>

<p>2.方法代码</p>

<pre>
@Controller
@RequestMapping(&quot;/json&quot;)
public class jsonController {
    
    @ResponseBody
    @RequestMapping(&quot;/user&quot;)
    public  User get(){
        User u = new User();
        u.setId(1);
        u.setName(&quot;jayjay&quot;);
        u.setBirth(new Date());
        return u;
    }
}
</pre>

<h2>十四、异常的处理</h2>

<p>1.处理局部异常（Controller内）</p>

<pre>
    @ExceptionHandler
    public ModelAndView exceptionHandler(Exception ex){
        ModelAndView mv = new ModelAndView(&quot;error&quot;);
        mv.addObject(&quot;exception&quot;, ex);
        System.out.println(&quot;in testExceptionHandler&quot;);
        return mv;
    }
    
    @RequestMapping(&quot;/error&quot;)
    public String error(){
        int i = 5/0;
        return &quot;hello&quot;;
    }
</pre>

<p>2.处理全局异常（所有Controller）</p>

<pre>
@ControllerAdvice
public class testControllerAdvice {
    @ExceptionHandler
    public ModelAndView exceptionHandler(Exception ex){
        ModelAndView mv = new ModelAndView(&quot;error&quot;);
        mv.addObject(&quot;exception&quot;, ex);
        System.out.println(&quot;in testControllerAdvice&quot;);
        return mv;
    }
}
</pre>

<p>3.另一种处理全局异常的方法</p>

<p>在SpringMVC配置文件中配置</p>

<pre>
    &lt;!-- configure SimpleMappingExceptionResolver --&gt;
    &lt;bean class=&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;&gt;
        &lt;property name=&quot;exceptionMappings&quot;&gt;
            &lt;props&gt;
                &lt;prop key=&quot;java.lang.ArithmeticException&quot;&gt;error&lt;/prop&gt;
            &lt;/props&gt;
        &lt;/property&gt;
    &lt;/bean&gt;
</pre>

<p>error是出错页面</p>

<h2>十五、设置一个自定义拦截器</h2>

<p>1.创建一个MyInterceptor类，并实现HandlerInterceptor接口</p>

<pre>
public class MyInterceptor implements HandlerInterceptor {

    @Override
    public void afterCompletion(HttpServletRequest arg0,
            HttpServletResponse arg1, Object arg2, Exception arg3)
            throws Exception {
        System.out.println(&quot;afterCompletion&quot;);
    }

    @Override
    public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1,
            Object arg2, ModelAndView arg3) throws Exception {
        System.out.println(&quot;postHandle&quot;);
    }

    @Override
    public boolean preHandle(HttpServletRequest arg0, HttpServletResponse arg1,
            Object arg2) throws Exception {
        System.out.println(&quot;preHandle&quot;);
        return true;
    }

}
</pre>

<p>2.在SpringMVC的配置文件中配置</p>

<pre>
    &lt;!-- interceptor setting --&gt;
    &lt;mvc:interceptors&gt;
        &lt;mvc:interceptor&gt;
            &lt;mvc:mapping path=&quot;/mvc/**&quot;/&gt;
            &lt;bean class=&quot;test.SpringMVC.Interceptor.MyInterceptor&quot;&gt;&lt;/bean&gt;
        &lt;/mvc:interceptor&gt;        
    &lt;/mvc:interceptors&gt;
</pre>

<p>3.拦截器执行顺序</p>

<p><img alt="" src="http://images0.cnblogs.com/blog2015/694841/201506/052112090047146.png" /></p>

<h2>十六、表单的验证（使用Hibernate-validate）及国际化</h2>

<p>1.导入Hibernate-validate需要的jar包</p>

<p><img alt="" src="http://images0.cnblogs.com/blog2015/694841/201506/052116271296839.png" />(未选中不用导入)</p>

<p><img alt="" src="http://images0.cnblogs.com/blog2015/694841/201506/052116407233893.png" /></p>

<p>2.编写实体类User并加上验证注解</p>

<pre>
public class User {
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public Date getBirth() {
        return birth;
    }
    public void setBirth(Date birth) {
        this.birth = birth;
    }
    @Override
    public String toString() {
        return &quot;User [id=&quot; + id + &quot;, name=&quot; + name + &quot;, birth=&quot; + birth + &quot;]&quot;;
    }    
    private int id;
    @NotEmpty
    private String name;

    @Past
    @DateTimeFormat(pattern=&quot;yyyy-MM-dd&quot;)
    private Date birth;
}
</pre>

<p>ps:@Past表示时间必须是一个过去值</p>

<p>3.在jsp中使用SpringMVC的form表单</p>

<pre>
    &lt;form:form action=&quot;form/add&quot; method=&quot;post&quot; modelAttribute=&quot;user&quot;&gt;
        id:&lt;form:input path=&quot;id&quot;/&gt;&lt;form:errors path=&quot;id&quot;/&gt;&lt;br&gt;
        name:&lt;form:input path=&quot;name&quot;/&gt;&lt;form:errors path=&quot;name&quot;/&gt;&lt;br&gt;
        birth:&lt;form:input path=&quot;birth&quot;/&gt;&lt;form:errors path=&quot;birth&quot;/&gt;
        &lt;input type=&quot;submit&quot; value=&quot;submit&quot;&gt;
    &lt;/form:form&gt; 
</pre>

<p>ps:path对应name</p>

<p>4.Controller中代码</p>

<pre>
@Controller
@RequestMapping(&quot;/form&quot;)
public class formController {
    @RequestMapping(value=&quot;/add&quot;,method=RequestMethod.POST)    
    public String add(@Valid User u,BindingResult br){
        if(br.getErrorCount()&gt;0){            
            return &quot;addUser&quot;;
        }
        return &quot;showUser&quot;;
    }
    
    @RequestMapping(value=&quot;/add&quot;,method=RequestMethod.GET)
    public String add(Map&lt;String,Object&gt; map){
        map.put(&quot;user&quot;,new User());
        return &quot;addUser&quot;;
    }
}
</pre>

<p>ps:</p>

<p>　　1.因为jsp中使用了modelAttribute属性，所以必须在request域中有一个&quot;user&quot;.</p>

<p>　　2.@Valid 表示按照在实体上标记的注解验证参数</p>

<p>　　3.返回到原页面错误信息回回显，表单也会回显</p>

<p>5.错误信息自定义</p>

<p>在src目录下添加locale.properties</p>

<pre>
NotEmpty.user.name=name can&#39;t not be empty
Past.user.birth=birth should be a past value
DateTimeFormat.user.birth=the format of input is wrong
typeMismatch.user.birth=the format of input is wrong
typeMismatch.user.id=the format of input is wrong</pre>

<p>在SpringMVC配置文件中配置</p>

<pre>
    &lt;!-- configure the locale resource --&gt;
    &lt;bean id=&quot;messageSource&quot; class=&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;&gt;
        &lt;property name=&quot;basename&quot; value=&quot;locale&quot;&gt;&lt;/property&gt;
    &lt;/bean&gt;</pre>

<p>6.国际化显示</p>

<p>在src下添加locale_zh_CN.properties</p>

<pre>
username=账号
password=密码</pre>

<p>locale.properties中添加</p>

<pre>
username=user name
password=password</pre>

<p>创建一个locale.jsp</p>

<pre>
  &lt;body&gt;
    &lt;fmt:message key=&quot;username&quot;&gt;&lt;/fmt:message&gt;
    &lt;fmt:message key=&quot;password&quot;&gt;&lt;/fmt:message&gt;
  &lt;/body&gt;</pre>

<p>在SpringMVC中配置</p>

<pre>
    &lt;!-- make the jsp page can be visited --&gt;
    &lt;mvc:view-controller path=&quot;/locale&quot; view-name=&quot;locale&quot;/&gt;</pre>

<p>让locale.jsp在WEB-INF下也能直接访问</p>

<p>最后，访问locale.jsp，切换浏览器语言，能看到账号和密码的语言也切换了</p>

<h2>十七、压轴大戏--整合SpringIOC和SpringMVC</h2>

<p>1.创建一个test.SpringMVC.integrate的包用来演示整合，并创建各类</p>

<p><img alt="" src="http://images0.cnblogs.com/blog2015/694841/201506/052306155821182.png" /></p>

<p>2.User实体类</p>

<pre>
public class User {
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public Date getBirth() {
        return birth;
    }
    public void setBirth(Date birth) {
        this.birth = birth;
    }
    @Override
    public String toString() {
        return &quot;User [id=&quot; + id + &quot;, name=&quot; + name + &quot;, birth=&quot; + birth + &quot;]&quot;;
    }    
    private int id;
    @NotEmpty
    private String name;

    @Past
    @DateTimeFormat(pattern=&quot;yyyy-MM-dd&quot;)
    private Date birth;
}</pre>

<p>&nbsp;</p>

<p>3.UserService类</p>

<pre>
@Component
public class UserService {
    public UserService(){
        System.out.println(&quot;UserService Constructor...\n\n\n\n\n\n&quot;);
    }
    
    public void save(){
        System.out.println(&quot;save&quot;);
    }
}
</pre>

<p>4.UserController</p>

<pre>
@Controller
@RequestMapping(&quot;/integrate&quot;)
public class UserController {
    @Autowired
    private UserService userService;
    
    @RequestMapping(&quot;/user&quot;)
    public String saveUser(@RequestBody @ModelAttribute User u){
        System.out.println(u);
        userService.save();
        return &quot;hello&quot;;
    }
}
</pre>

<p>5.Spring配置文件</p>

<p>在src目录下创建SpringIOC的配置文件applicationContext.xml</p>

<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans  
        http://www.springframework.org/schema/beans/spring-beans.xsd 
        http://www.springframework.org/schema/util 
        http://www.springframework.org/schema/util/spring-util-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        &quot;
        xmlns:util=&quot;http://www.springframework.org/schema/util&quot;
        xmlns:p=&quot;http://www.springframework.org/schema/p&quot;
        xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    
        &gt;
    &lt;context:component-scan base-package=&quot;test.SpringMVC.integrate&quot;&gt;
        &lt;context:exclude-filter type=&quot;annotation&quot; 
            expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;
        &lt;context:exclude-filter type=&quot;annotation&quot; 
            expression=&quot;org.springframework.web.bind.annotation.ControllerAdvice&quot;/&gt;        
    &lt;/context:component-scan&gt;
    
&lt;/beans&gt;
</pre>

<p>在Web.xml中添加配置</p>

<pre>
  &lt;!-- configure the springIOC --&gt;
  &lt;listener&gt;
      &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
  &lt;/listener&gt;
  &lt;context-param&gt;  
    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;  
    &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;
  &lt;/context-param&gt;
</pre>

<p>6.在SpringMVC中进行一些配置，防止SpringMVC和SpringIOC对同一个对象的管理重合</p>

<pre>
&lt;!-- scan the package and the sub package --&gt;
    &lt;context:component-scan base-package=&quot;test.SpringMVC.integrate&quot;&gt;
        &lt;context:include-filter type=&quot;annotation&quot; 
            expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;
        &lt;context:include-filter type=&quot;annotation&quot; 
            expression=&quot;org.springframework.web.bind.annotation.ControllerAdvice&quot;/&gt;
    &lt;/context:component-scan&gt;
</pre>

<p>&nbsp;</p>

<h2><strong>十八、SpringMVC详细运行流程图</strong></h2>

<p><img alt="" src="http://images0.cnblogs.com/blog2015/694841/201506/052340331602684.png" /></p>

<h2>十九、SpringMVC运行原理</h2>

<p>&nbsp;</p>

<p>1. 客户端请求提交到DispatcherServlet<br />
2. 由DispatcherServlet控制器查询一个或多个HandlerMapping，找到处理请求的Controller<br />
3. DispatcherServlet将请求提交到Controller<br />
4. Controller调用业务逻辑处理后，返回ModelAndView<br />
5. DispatcherServlet查询一个或多个ViewResoler视图解析器，找到ModelAndView指定的视图<br />
6. 视图负责将结果显示到客户端</p>

<p>&nbsp;</p>

<h2>二十、SpringMVC与struts2的区别</h2>

<p>1、springmvc基于方法开发的，struts2基于类开发的。springmvc将url和controller里的方法映射。映射成功后springmvc生成一个Handler对象，对象中只包括了一个method。方法执行结束，形参数据销毁。springmvc的controller开发类似web service开发。<br />
2、springmvc可以进行单例开发，并且建议使用单例开发，struts2通过类的成员变量接收参数，无法使用单例，只能使用多例。<br />
3、经过实际测试，struts2速度慢，在于使用struts标签，如果使用struts建议使用jstl。</p>
