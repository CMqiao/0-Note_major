<h1><a href="http://www.cnblogs.com/focusChen/articles/2401892.html" id="cb_post_title_url">hibernate -- HQL语句总结</a></h1>

<h2><strong>1. 查询整个映射对象所有字段</strong></h2>

<pre>
//直接from查询出来的是一个映射对象，即：查询整个映射对象所有字段   
        String hql = &quot;from Users&quot;;   
        Query query = session.createQuery(hql);   
           
        List&lt;Users&gt; users = query.list();   
        for(Users user : users){   
            System.out.println(user.getName() + &quot; : &quot; + user.getPasswd() + &quot; : &quot; + user.getId());   
        }   
  
 输出结果为：   
name1 : password1 : 1  
name2 : password2 : 2  
name3 : password3 : 3  
</pre>

<h2><strong>2.查询字段　</strong>　</h2>

<pre>
//查询其中几个字段   
        String hql = &quot; select name,passwd from Users&quot;;   
        Query query = session.createQuery(hql);   
        //默认查询出来的list里存放的是一个Object数组   
        List&lt;Object[]&gt; list = query.list();   
        for(Object[] object : list){   
            String name = (String)object[0];   
            String passwd = (String)object[1];   
               
            System.out.println(name + &quot; : &quot; + passwd);   
        }   
输出结果为：   
name1 : password1   
name2 : password2   
name3 : password3  
</pre>

<p>&nbsp;</p>

<h2><strong>3.修改默认查询结果(query.list())不以Object[]数组形式返回，以List形式返回</strong></h2>

<pre>
//查询其中几个字段,添加new list(),注意list里的l是小写的。也不需要导入包，这样通过query.list()出来的list里存放的不再是默认的Object数组了，而是List集合了  
         String hql = &quot; select new list(name,passwd) from Users&quot;;   
        Query query = session.createQuery(hql);   
        //默认查询出来的list里存放的是一个Object数组，但是在这里list里存放的不再是默认的Object数组了，而是List集合了   
        List&lt;List&gt; list = query.list();   
        for(List user : list){   
            String name = (String)user.get(0);   
            String passwd = (String)user.get(1);   
               
            System.out.println(name + &quot; : &quot; + passwd);   
        }   
        /**  
        输出结果为：  
         name1 : password1  
        name2 : password2  
        name3 : password3  
         */  
</pre>

<p>&nbsp;</p>

<h2><strong>4.修改默认查询结果(query.list())不以Object[]数组形式返回，以Map形式返回</strong></h2>

<pre>
//查询其中几个字段,添加new map(),注意map里的m是小写的。也不需要导入包，这样通过query.list()出来的list里存放的不再是默认的Object数组了，而是map集合了   
        String hql = &quot; select new map(name,passwd) from Users&quot;;   
        Query query = session.createQuery(hql);   
        //默认查询出来的list里存放的是一个Object数组，但是在这里list里存放的不再是默认的Object数组了，而是Map集合了   
        List&lt;Map&gt; list = query.list();   
        for(Map user : list){   
            //一条记录里所有的字段值都是map里的一个元素,key是字符串0,1,2,3....，value是字段值   
            //如果将hql改为：String hql = &quot; select new map(name as username,passwd as password) from Users&quot;;,那么key将不是字符串0,1,2...了，而是&quot;username&quot;,&quot;password&quot;了   
            String name = (String)user.get(&quot;0&quot;);//get(&quot;0&quot;);是get(key),注意:0,1,2...是字符串，而不是整形   
            String passwd = (String)user.get(&quot;1&quot;);   
               
            System.out.println(name + &quot; : &quot; + passwd);   
        }   
        /**  
        输出结果为：  
         name1 : password1  
        name2 : password2  
        name3 : password3  
         */  
</pre>

<p>&nbsp;</p>

<h2><strong>5.修改默认查询结果(query.list())不以Object[]数组形式返回，以自定义类型返回</strong></h2>

<p>&nbsp;</p>

<h2><strong>6.条件查询</strong></h2>

<pre>
//条件查询，参数索引值从0开始，索引位置。通过setString,setParameter设置参数   
        String hql = &quot;from Users where name=? and passwd=?&quot;;   
        Query query = session.createQuery(hql);   
        //第1种方式   
//      query.setString(0, &quot;name1&quot;);   
//      query.setString(1, &quot;password1&quot;);   
        //第2种方式   
        query.setParameter(0, &quot;name1&quot;,Hibernate.STRING);   
        query.setParameter(1, &quot;password1&quot;,Hibernate.STRING);   
        List&lt;Users&gt; list = query.list();   
        for(Users users : list){   
            System.out.println(users.getId());   
        }   
</pre>

<p>&nbsp;</p>

<pre>
//条件查询，自定义索引名(参数名):username,:password.通过setString,setParameter设置参数   
        String hql = &quot;from Users where name=:username and passwd=:password&quot;;   
        Query query = session.createQuery(hql);   
        //第1种方式   
//      query.setString(&quot;username&quot;, &quot;name1&quot;);   
//      query.setString(&quot;password&quot;, &quot;password1&quot;);   
        //第2种方式,第3个参数确定类型   
        query.setParameter(&quot;username&quot;, &quot;name1&quot;,Hibernate.STRING);   
        query.setParameter(&quot;password&quot;, &quot;password1&quot;,Hibernate.STRING);   
        List&lt;Users&gt; list = query.list();   
        for(Users users : list){   
            System.out.println(users.getId());   
        }  
</pre>

<p>　　</p>

<pre>
//条件查询,通过setProperties设置参数   
        String hql = &quot;from Users where name=:username and passwd=:password&quot;;   
        Query query = session.createQuery(hql);   
        //MyUser类的2个属性必须和:username和:password对应   
        MyUser myUser = new MyUser(&quot;name1&quot;,&quot;password1&quot;);   
        query.setProperties(myUser);   
        List&lt;Users&gt; list = query.list();   
        for(Users users : list){   
            System.out.println(users.getId());   
        }  
</pre>

<p>　　</p>

<h2><strong>7.update 数据</strong></h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 执行SQL语句（为什么要用SQL语句，我想是为了执行某些复杂的SQL语句吧）　</p>

<pre>
String sql=&quot;update Table set field = &#39;test&#39;&quot;
Session session = HibernateSessionFactory.getSession();
session.createSQLQuery(sql).executeUpdate();
ts.commit();
</pre>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>

<p>&nbsp;&nbsp; 执行HQL语句　　　</p>

<pre>
String hql=&quot;update Table set field = &#39;test&#39;&quot; </pre>

<pre>
Session session = HiberanteSessionFactory.getSession();
Transaction ts = session.beginTransaction();
Query query = session.createQuery(hql);
query.executeUpdate();
ts.commit();</pre>

<p>&nbsp;</p>

<h1>hql的常用的查询语句</h1>

<p>在这里通过定义了三个类，Special、Classroom、Student来做测试，Special与Classroom是一对多，Classroom与Student是一对多的关系，这里仅仅贴出这三个bean的属性代码：</p>

<p>Special类：</p>

<pre>
public class Special
{
    private int id;
    private String name;
    private String type;
    private Set&lt;Classroom&gt; rooms;
    ..........
}
</pre>

<p>Classroom类：</p>

<pre>
public class Classroom
{
    private int id;
    private String name;
    private Special special;
    private Set&lt;Student&gt; students;
　  ............
}
</pre>

<p>Student类：</p>

<pre>
public class Student
{
    private int id;
    private String name;
    private String sex;
    private Classroom room;
    ..........
}
</pre>

<h2>1.最简单的查询</h2>

<pre>
List&lt;Special&gt; specials = (List&lt;Special&gt;)session.createQuery(&quot;select spe from Special spe&quot;).list();</pre>

<p>这是hql最基本的查询语句了，作用就是查出所有的Special对象放到一个List当中</p>

<p>2.基于 ? 的参数化形式</p>

<pre>
　　　　　　　/**
             * 查询中使用?，通过setParameter的方式可以防止sql注入
             * jdbc的setParameter的下标从1开始，hql的下标从0开始
             */
            List&lt;Student&gt; students = (List&lt;Student&gt;)session.createQuery(&quot;select stu from Student stu where name like ?&quot;).setParameter(0, &quot;%刘%&quot;).list();
</pre>

<p>&nbsp;</p>

<p>在hql中同样支持基于 ? 的参数化形式查询，<strong>注意</strong>：在jdbc中，setParameter的下标是从1开始的，而hibernate的setParameter的下标是从0开始的。</p>

<p>3.基于 :xx 的别名的方式设置参数</p>

<pre>
　　　　　　　/**
             * 在hql中可以使用别名的方式来查询，格式是 :xxx 通过setParameter来设置别名
             */
            List&lt;Student&gt; students = (List&lt;Student&gt;)session.createQuery(&quot;select stu from Student stu where name like :name and sex like :sex&quot;).setParameter(&quot;name&quot;, &quot;%王%&quot;).setParameter(&quot;sex&quot;, &quot;%男%&quot;).list();
</pre>

<p>4.如果返回的值只有一个，可以使用uniqueResult方法</p>

<pre>
　　　　　　　/**
             * 如果得到的值只有一个，则可以使用uniqueResult方法
             */
            Long stu = (Long)session.createQuery(&quot;select count(*) from Student stu where name like :name and sex like :sex&quot;).setParameter(&quot;name&quot;, &quot;%王%&quot;).setParameter(&quot;sex&quot;, &quot;%男%&quot;).uniqueResult();

　　　　　　　/**
             * 如果得到的值只有一个，则可以使用uniqueResult方法
             */
            Student stu = (Student)session.createQuery(&quot;select stu from Student stu where id = ?&quot;).setParameter(0, 1).uniqueResult();
</pre>

<h2>5.基于投影的查询</h2>

<pre>
　　　　　　　/**
             * 基于投影的查询，如果返回多个值，这些值都是保存在一个object[]数组当中
             */
            List&lt;Object[]&gt; stus = (List&lt;Object[]&gt;)session.createQuery(&quot;select stu.name, stu.sex from Student stu where name like:name and sex like :sex&quot;).setParameter(&quot;name&quot;, &quot;%张%&quot;).setParameter(&quot;sex&quot;, &quot;%男%&quot;).list();
</pre>

<p>6.基于导航对象的查询</p>

<pre>
　　　　　　　/**
             * 如果对象中有导航对象，可以直接通过对象导航查询
             */
            List&lt;Student&gt; stus = (List&lt;Student&gt;)session.createQuery(&quot;select stu from Student stu where stu.room.name like :room and sex like :sex&quot;)
                                                .setParameter(&quot;room&quot;, &quot;%计算机应用%&quot;).setParameter(&quot;sex&quot;, &quot;%女%&quot;)
                                                .list();
</pre>

<p><strong>注意</strong>:若直接通过导航对象来查询时，其实际是使用cross join(笛卡儿积)来进行连接查询，这样做性能很差，不建议使用</p>

<p>7.使用 in 进行列表查询</p>

<pre>
　　　　　　　/**
             * 可以使用in设置基于列表的查询，使用in查询时需要使用别名来进行参数设置，
             * 通过setParameterList方法即可设置，在使用别名和?的hql语句查询时，?形式的查询必须放在别名前面
             */
//            List&lt;Student&gt; stus = (List&lt;Student&gt;)session.createQuery(&quot;select stu from Student stu where sex like ? and stu.room.id in (:room)&quot;).setParameter(0, &quot;%女%&quot;).setParameterList(&quot;room&quot;, new Integer[]{1, 2}).list();
          List&lt;Student&gt; stus = (List&lt;Student&gt;)session.createQuery(&quot;select stu from Student stu where stu.room.id in (:room) and stu.sex like :sex&quot;).setParameterList(&quot;room&quot;, new Integer[]{1,2}).setParameter(&quot;sex&quot;, &quot;%女%&quot;).list();
</pre>

<p>在使用 in 进行列表查询时，这个时候要通过 setParameterList() 方法来设置我们的参数，<strong>注意</strong>：如果一个参数通过别名来传入，一个是通过 ? 的方式来传入的话，那么通过别名的hql语句以及参数设置语句要放在 ? 的后面，不然hibernate会报错。如果都是使用 别名 来设置参数，则无先后顺序</p>

<p>8.分页查询</p>

<pre>
　　　　　　　/**
             * 通过setFirstResult(0).setMaxResults(10)可以设置分页查询，相当于offset和pagesize
             */
            List&lt;Student&gt; stus = (List&lt;Student&gt;)session.createQuery(&quot;select stu from Student stu where stu.room.name like :room and sex like :sex&quot;).setParameter(&quot;room&quot;, &quot;%计算机应用%&quot;).setParameter(&quot;sex&quot;, &quot;%女%&quot;).setFirstResult(0).setMaxResults(10).list();
</pre>

<p>9.内连接查询</p>

<pre>
　　　　　　　/**
             *    使用对象的导航查询可以完成连接查询，但是使用的是Cross Join(笛卡儿积)，效率不高，所以建议使用join来查询
             */
            List&lt;Student&gt; stus = (List&lt;Student&gt;)session.createQuery(&quot;select stu from Student stu join stu.room room where room.id=2&quot;).list();
</pre>

<p>在hql中使用连接查询的语句与我们的sql进行连接查询的语句是有区别的：</p>

<pre>
<strong>hql</strong>:    select stu from Student stu join stu.room room

<strong>sql</strong>:    select t.* from Student t join Classroom c on t.cid=c.id</pre>

<p>10.左外连和右外连查询</p>

<pre>
　　　　　　　/**
             *    左外连和右外连其实是相对的，left join 就是以左边的表为基准， right join 就是以右边的表为基准
             */
            List&lt;Object[]&gt; stus = (List&lt;Object[]&gt;)session.createQuery(&quot;select room.name, count(stu.room.id) from Student stu right join stu.room room group by room.id&quot;)
                                                .list();
</pre>

<p>11.创建DTO类，将查询出来的多个字段可以存放到DTO对象中去</p>

<pre>
　　　　　　　/**
             *    <strong>当如果我们查询出多个字段的话，通常会创建一个DTO对象，用来存储我们查询出来的数据，通过 new XXX() 这样的方式</strong>
             *    <strong>前提是XXX这个类里面必须要有接受这些字段的构造方法才行，而且必须要使用类的全名
             </strong>*/
//            List&lt;Object[]&gt; stus = (List&lt;Object[]&gt;)session.createQuery(&quot;select stu.id,stu.name,stu.sex,room.name,special.name from Student stu left join stu.room room left join room.special special&quot;)
//                                                .list();
//            for(Object[] obj : stus)
//            {
//                System.out.println(obj[0] + &quot;, &quot; + obj[1] + &quot;, &quot; + obj[2] + &quot;, &quot; + obj[3] + &quot;, &quot; + obj[4]);
//            }


            List&lt;StudentDTO&gt; stus = (List&lt;StudentDTO&gt;)session.createQuery(&quot;select new com.xiaoluo.bean.StudentDTO(stu.id, stu.name, stu.sex, room.name, special.name) from Student stu left join stu.room room left join room.special special&quot;).list();</pre>

<p>&nbsp;</p>

<p>12.group having字句</p>

<p>&nbsp;</p>

<pre>
/*** 在hql中不能通过给查询出来的字段设置别名，别名只能设置在from 后面*/
     List&lt;Object[]&gt; stus = (List&lt;Object[]&gt;)session.createQuery(&quot;select special.name, count(stu.room.special.id) from Student stu right join stu.room.special special group by special.id having count(stu.room.special.id)&gt;150&quot;).list();　　// 查询出人数大于150个人的专业</pre>

<p>&nbsp;</p>

<pre>
　　　　　　　
　　//　　查询出每个专业中男生与女生的个数
　　List&lt;Object[]&gt; stus = (List&lt;Object[]&gt;)session.createQuery(&quot;select special.name, stu.sex, count(stu.room.special.id) from Student stu right join stu.room.special special group by special.id,stu.sex&quot;).list();</pre>

<p>&nbsp;</p>

<p>基本上用到的hql查询语句就是这些，以后若再遇到会进行补充。</p>
