<h1>Spring缓存注解@Cache,@CachePut , @CacheEvict，@CacheConfig使用</h1>

<h2>Cacheable、@CachePut、@CacheEvict 注释介绍</h2>

<h5>表 1. @Cacheable 作用和配置方法</h5>

<p>@Cacheable 的作用&nbsp;主要针对方法配置，能够根据方法的请求参数对其结果进行缓存</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
		</tr>
		<tr>
			<td>@Cacheable 主要的参数</td>
		</tr>
		<tr>
			<td>value</td>
			<td>缓存的名称，在 spring 配置文件中定义，必须指定至少一个</td>
			<td>例如：<br />
			@Cacheable(value=&rdquo;mycache&rdquo;) 或者&nbsp;<br />
			@Cacheable(value={&rdquo;cache1&rdquo;,&rdquo;cache2&rdquo;}</td>
		</tr>
		<tr>
			<td>key</td>
			<td>缓存的 key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合</td>
			<td>例如：<br />
			@Cacheable(value=&rdquo;testcache&rdquo;,key=&rdquo;#userName&rdquo;)</td>
		</tr>
		<tr>
			<td>condition</td>
			<td>缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存</td>
			<td>例如：<br />
			@Cacheable(value=&rdquo;testcache&rdquo;,condition=&rdquo;#userName.length()&gt;2&rdquo;)</td>
		</tr>
	</tbody>
</table>

<h5>------------------------------------------------------------</h5>

<p>--////////////////////////////////////////////////////////////////////////////////</p>

<h5>表 2. @CachePut 作用和配置方法</h5>

<p>@CachePut 的作用&nbsp;主要针对方法配置，能够根据方法的请求参数对其结果进行缓存，和 @Cacheable 不同的是，它每次都会触发真实方法的调用</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
		</tr>
		<tr>
			<td>@CachePut 主要的参数</td>
		</tr>
		<tr>
			<td>value</td>
			<td>缓存的名称，在 spring 配置文件中定义，必须指定至少一个</td>
			<td>例如：<br />
			@Cacheable(value=&rdquo;mycache&rdquo;) 或者&nbsp;<br />
			@Cacheable(value={&rdquo;cache1&rdquo;,&rdquo;cache2&rdquo;}</td>
		</tr>
		<tr>
			<td>key</td>
			<td>缓存的 key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合</td>
			<td>例如：<br />
			@Cacheable(value=&rdquo;testcache&rdquo;,key=&rdquo;#userName&rdquo;)</td>
		</tr>
		<tr>
			<td>condition</td>
			<td>缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存</td>
			<td>例如：<br />
			@Cacheable(value=&rdquo;testcache&rdquo;,condition=&rdquo;#userName.length()&gt;2&rdquo;)</td>
		</tr>
	</tbody>
</table>

<h5>&nbsp;</h5>

<h5>//////////////////////////////////////////////////////</h5>

<p>&nbsp;</p>

<h5>表 3. @CacheEvict 作用和配置方法</h5>

<p>@CachEvict 的作用&nbsp;主要针对方法配置，能够根据一定的条件对缓存进行清空</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
		</tr>
		<tr>
			<td>@CacheEvict 主要的参数</td>
		</tr>
		<tr>
			<td>value</td>
			<td>缓存的名称，在 spring 配置文件中定义，必须指定至少一个</td>
			<td>例如：<br />
			@CachEvict(value=&rdquo;mycache&rdquo;) 或者&nbsp;<br />
			@CachEvict(value={&rdquo;cache1&rdquo;,&rdquo;cache2&rdquo;}</td>
		</tr>
		<tr>
			<td>key</td>
			<td>缓存的 key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合</td>
			<td>例如：<br />
			@CachEvict(value=&rdquo;testcache&rdquo;,key=&rdquo;#userName&rdquo;)</td>
		</tr>
		<tr>
			<td>condition</td>
			<td>缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才清空缓存</td>
			<td>例如：<br />
			@CachEvict(value=&rdquo;testcache&rdquo;,<br />
			condition=&rdquo;#userName.length()&gt;2&rdquo;)</td>
		</tr>
		<tr>
			<td>allEntries</td>
			<td>是否清空所有缓存内容，缺省为 false，如果指定为 true，则方法调用后将立即清空所有缓存</td>
			<td>例如：<br />
			@CachEvict(value=&rdquo;testcache&rdquo;,allEntries=true)</td>
		</tr>
		<tr>
			<td>beforeInvocation</td>
			<td>是否在方法执行前就清空，缺省为 false，如果指定为 true，则在方法还没有执行的时候就清空缓存，缺省情况下，如果方法执行抛出异常，则不会清空缓存</td>
			<td>例如：<br />
			@CachEvict(value=&rdquo;testcache&rdquo;，beforeInvocation=true)</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<p>－－－－－－－－－－－－－－</p>

<p><strong>额外补充</strong>：@cache（&ldquo;something&quot;);这个相当于save（）操作，@cachePut相当于Update（）操作，只要他标示的方法被调用，那么都会缓存起来，而@cache则是先看下有没已经缓存了，然后再选择是否执行方法。@CacheEvict相当于Delete（）操作。用来清除缓存用的。</p>

<p>&nbsp;</p>

<p>这写配置的声明需要配置好了@enableCache才有用，具体的配置可以看这篇文章</p>

<p>http://blog.csdn.net/sanjay_f/article/details/47363845</p>

<p>&nbsp;</p>

<p>如果忘记了SpEL怎么用了，&nbsp;do yourself a favor and read&nbsp;<a href="http://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/expressions.html" target="_blank" title="9. Spring Expression Language (SpEL)">Chapter&nbsp;9,&nbsp;<em>Spring Expression Language (SpEL)</em></a>:</p>

<ol start="1">
	<li>importorg.springframework.stereotype.Service;&nbsp;&nbsp;</li>
	<li>importcom.springcache.annotation.Cacheable;&nbsp;&nbsp;</li>
	<li>@Service&nbsp;&nbsp;</li>
	<li>@Cacheable&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;MemcachedService{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;@Cacheable(name=&quot;remote&quot;,key=&quot;&#39;USER_NAME_&#39;+#args[0]&quot;)&nbsp;&nbsp;</li>
	<li>public&nbsp;String&nbsp;storeUserName(String&nbsp;accountId,String&nbsp;name)&nbsp;&nbsp;</li>
	<li>{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;return&nbsp;name;&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;@Cacheable(name=&quot;remote&quot;)&nbsp;&nbsp;</li>
	<li>&nbsp;public&nbsp;String&nbsp;storeUserAddress(String&nbsp;accountId,String&nbsp;address){&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;return&nbsp;address;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<p>不知道你们注意到一个问题没有，就是所有的@Cacheable（）里面都有一个name＝&ldquo;xxx&rdquo;的属性，这显然如果方法多了，写起来也是挺累的，如果可以一次性声明完 那就省事了，</p>

<p>所以，有了@CacheConfig这个配置，<code>@CacheConfig</code>&nbsp;is a class-level annotation that allows to share the cache names,不过不用担心，如果你在你的方法写别的名字，那么依然以方法的名字为准。</p>

<ol start="1">
	<li>@CacheConfig(&quot;books&quot;)&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;BookRepositoryImpl&nbsp;implements&nbsp;BookRepository&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Cacheable&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Book&nbsp;findBook(ISBN&nbsp;isbn)&nbsp;{...}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>当然还有另外一个情况，@Cacheable(name=&quot;remote&quot;,key=&quot;&#39;USER_NAME_&#39;+#args[0]&quot; ，conditional＝&ldquo;xxx&rdquo;，allEntries＝true，beforeInvocation＝true)&nbsp;,像这样的配置就很长，</p>

<pre>
<em>@Cacheable(name = &quot;book&quot;,</em><em> key=&quot;#isbn&quot;</em>，conditional＝&ldquo;xxx&rdquo;，allEntries＝true，beforeInvocation＝true)&nbsp;<em>
</em>public Book findBook(ISBN isbn, boolean checkWarehouse, boolean includeUsed)</pre>

<p>这样的配置很长，而且有可能声明在很多个方法的，所以我们很想精简点，容易配置些。所以</p>

<pre>
<em>@findBookByIsbnervice</em>
public Book findBook(ISBN isbn, boolean checkWarehouse, boolean includeUsed)</pre>

<p>&nbsp;</p>

<p>新建一个文件<em>findBookByIsbn, 内容如下</em></p>

<pre>
<em>@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.METHOD})
@Cacheable(cacheNames=&quot;books&quot;, key=&quot;#isbn&quot;)</em>
public <em>@interface</em> findBookByIsbn {
}
</pre>

<p>&nbsp;</p>

<p>For those who are familiar with Spring&rsquo;s caching annotations, the following table describes the main differences between the Spring annotations and the JSR-107 counterpart:</p>

<p><strong>Table&nbsp;35.3.&nbsp;Spring vs. JSR-107 caching annotations</strong></p>

<table summary="Spring vs. JSR-107 caching annotations">
	<thead>
		<tr>
			<th>Spring</th>
			<th>JSR-107</th>
			<th>Remark</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>
			<p><code>@Cacheable</code></p>
			</td>
			<td>
			<p><code>@CacheResult</code></p>
			</td>
			<td>
			<p>Fairly similar.&nbsp;<code>@CacheResult</code>&nbsp;can cache specific exceptions and force the execution of the method regardless of the content of the cache.</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><code>@CachePut</code></p>
			</td>
			<td>
			<p><code>@CachePut</code></p>
			</td>
			<td>
			<p>While Spring updates the cache with the result of the method invocation, JCache requires to pass it as an argument that is annotated with&nbsp;<code>@CacheValue</code>. Due to this difference, JCache allows to update the cache before or after the actual method invocation.</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><code>@CacheEvict</code></p>
			</td>
			<td>
			<p><code>@CacheRemove</code></p>
			</td>
			<td>
			<p>Fairly similar.&nbsp;<code>@CacheRemove</code>&nbsp;supports a conditional evict in case the method invocation results in an exception.</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><code>@CacheEvict(allEntries=true)</code></p>
			</td>
			<td>
			<p><code>@CacheRemoveAll</code></p>
			</td>
			<td>
			<p>See&nbsp;<code>@CacheRemove</code>.</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><code>@CacheConfig</code></p>
			</td>
			<td>
			<p><code>@CacheDefaults</code></p>
			</td>
			<td>
			<p>Allows to configure the same concepts, in a similar fashion.</p>

			<p>&nbsp;</p>
			</td>
		</tr>
	</tbody>
</table>
