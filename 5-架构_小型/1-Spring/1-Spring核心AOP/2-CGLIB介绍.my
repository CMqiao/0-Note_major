<h1>CGLIB介绍与原理</h1>

<h2>一、什么是CGLIB?</h2>

<p>CGLIB是一个功能强大，高性能的代码生成包。它为没有实现接口的类提供代理，为JDK的动态代理提供了很好的补充。通常可以使用Java的动态代理创建代理，但当要代理的类没有实现接口或者为了更好的性能，CGLIB是一个好的选择。</p>

<h2>二、CGLIB原理</h2>

<p>CGLIB原理：动态生成一个要代理类的子类，子类重写要代理的类的所有不是final的方法。在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。它比使用java反射的JDK动态代理要快。<br />
CGLIB底层：使用字节码处理框架ASM，来转换字节码并生成新的类。不鼓励直接使用ASM，因为它要求你必须对JVM内部结构包括class文件的格式和指令集都很熟悉。<br />
CGLIB缺点：对于final方法，无法进行代理。</p>

<h2>三、CGLIB的应用</h2>

<p>广泛的被许多AOP的框架使用，例如spring AOP和dynaop。hibernate使用CGLIB来代理单端single-ended(多对一和一对一)关联。</p>

<h2>四、CGLIB的API</h2>

<h3>1、Jar包：</h3>

<p>cglib-nodep-2.2.jar：使用nodep包不需要关联asm的jar包,jar包内部包含asm的类.<br />
cglib-2.2.jar：使用此jar包需要关联asm的jar包,否则运行时报错.</p>

<h3>2、CGLIB类库：</h3>

<p>由于基本代码很少，学起来有一定的困难，主要是缺少文档和示例，这也是CGLIB的一个不足之处。<br />
本系列使用的CGLIB版本是2.2。<br />
net.sf.cglib.core:底层字节码处理类，他们大部分与ASM有关系。<br />
net.sf.cglib.transform:编译期或运行期类和类文件的转换<br />
net.sf.cglib.proxy:实现创建代理和方法拦截器的类<br />
net.sf.cglib.reflect:实现快速反射和C#风格代理的类<br />
net.sf.cglib.util:集合排序等工具类<br />
net.sf.cglib.beans:JavaBean相关的工具类<br />
本篇介绍通过MethodInterceptor和Enhancer实现一个动态代理。</p>

<p>一、首先说一下JDK中的动态代理：</p>

<p>JDK中的动态代理是通过反射类Proxy以及InvocationHandler回调接口实现的，<br />
但是，JDK中所要进行动态代理的类必须要实现一个接口，也就是说只能对该类所实现接口中定义的方法进行代理，这在实际编程中具有一定的局限性，而且使用反射的效率也并不是很高。</p>

<p>二、使用CGLib实现：</p>

<p>使用CGLib实现动态代理，完全不受代理类必须实现接口的限制，而且CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类，比使用Java反射效率要高。唯一需要注意的是，CGLib不能对声明为final的方法进行代理，因为CGLib原理是动态生成被代理类的子类。</p>

<h2>五、实例介绍</h2>

<h3>1、被代理类：</h3>

<p>首先，定义一个类，该类没有实现任何接口<br />
package com.zghw.cglib; &nbsp;<br />
&nbsp;&nbsp;<br />
/**&nbsp;<br />
&nbsp;* 没有实现接口，需要CGlib动态代理的目标类&nbsp;<br />
&nbsp;* &nbsp;<br />
&nbsp;* @author zghw&nbsp;<br />
&nbsp;*&nbsp;<br />
&nbsp;*/ &nbsp;<br />
public class TargetObject { &nbsp;<br />
&nbsp; &nbsp; public String method1(String paramName) { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; return paramName; &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; public int method2(int count) { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; return count; &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; public int method3(int count) { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; return count; &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; @Override &nbsp;<br />
&nbsp; &nbsp; public String toString() { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; return &quot;TargetObject []&quot;+ getClass(); &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
}&lt;/span&gt; &nbsp;</p>

<h3>2、拦截器：</h3>

<p>定义一个拦截器。在调用目标方法时，CGLib会回调MethodInterceptor接口方法拦截，来实现你自己的代理逻辑，类似于JDK中的InvocationHandler接口。</p>

<p>import java.lang.reflect.Method; &nbsp;<br />
&nbsp;&nbsp;<br />
import net.sf.cglib.proxy.MethodInterceptor; &nbsp;<br />
import net.sf.cglib.proxy.MethodProxy; &nbsp;<br />
/**&nbsp;<br />
&nbsp;* 目标对象拦截器，实现MethodInterceptor&nbsp;<br />
&nbsp;* @author zghw&nbsp;<br />
&nbsp;*&nbsp;<br />
&nbsp;*/ &nbsp;<br />
public class TargetInterceptor implements MethodInterceptor{ &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; &nbsp;* 重写方法拦截在方法前和方法后加入业务&nbsp;<br />
&nbsp; &nbsp; &nbsp;* Object obj为目标对象&nbsp;<br />
&nbsp; &nbsp; &nbsp;* Method method为目标方法&nbsp;<br />
&nbsp; &nbsp; &nbsp;* Object[] params 为参数，&nbsp;<br />
&nbsp; &nbsp; &nbsp;* MethodProxy proxy CGlib方法代理对象&nbsp;<br />
&nbsp; &nbsp; &nbsp;*/ &nbsp;<br />
&nbsp; &nbsp; @Override &nbsp;<br />
&nbsp; &nbsp; public Object intercept(Object obj, Method method, Object[] params, &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MethodProxy proxy) throws Throwable { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;调用前&quot;); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; Object result = proxy.invokeSuper(obj, params); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot; 调用后&quot;+result); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; return result; &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
} &nbsp;<br />
&nbsp;</p>

<p>参数：Object为由CGLib动态生成的代理类实例，Method为上文中实体类所调用的被代理的方法引用，Object[]为参数值列表，MethodProxy为生成的代理类对方法的代理引用。<br />
返回：从代理实例的方法调用返回的值。<br />
其中，proxy.invokeSuper(obj,arg)：<br />
调用代理类实例上的proxy方法的父类方法（即实体类TargetObject中对应的方法）<br />
在这个示例中，只在调用被代理类方法前后各打印了一句话，当然实际编程中可以是其它复杂逻辑。</p>

<h3>3、生成动态代理类：</h3>

<p>package com.zghw.cglib; &nbsp;<br />
&nbsp;&nbsp;<br />
import net.sf.cglib.proxy.Callback; &nbsp;<br />
import net.sf.cglib.proxy.CallbackFilter; &nbsp;<br />
import net.sf.cglib.proxy.Enhancer; &nbsp;<br />
import net.sf.cglib.proxy.NoOp; &nbsp;<br />
&nbsp;&nbsp;<br />
public class TestCglib { &nbsp;<br />
&nbsp; &nbsp; public static void main(String args[]) { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; Enhancer enhancer =new Enhancer(); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; enhancer.setSuperclass(TargetObject.class); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; enhancer.setCallback(new TargetInterceptor()); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; TargetObject targetObject2=(TargetObject)enhancer.create(); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(targetObject2); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(targetObject2.method1(&quot;mmm1&quot;)); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(targetObject2.method2(100)); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(targetObject2.method3(200)); &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
} &nbsp;<br />
<br />
这里Enhancer类是CGLib中的一个字节码增强器，它可以方便的对你想要处理的类进行扩展，以后会经常看到它。<br />
首先将被代理类TargetObject设置成父类，然后设置拦截器TargetInterceptor，最后执行enhancer.create()动态生成一个代理类，并从Object强制转型成父类型TargetObject。<br />
最后，在代理类上调用方法.</p>

<h3>4、回调过滤器CallbackFilter</h3>

<p>一、作用</p>

<p>在CGLib回调时可以设置对不同方法执行不同的回调逻辑，或者根本不执行回调。<br />
在JDK动态代理中并没有类似的功能，对InvocationHandler接口方法的调用对代理类内的所以方法都有效。</p>

<p>定义实现过滤器CallbackFilter接口的类：<br />
package com.zghw.cglib; &nbsp;<br />
&nbsp;&nbsp;<br />
import java.lang.reflect.Method; &nbsp;<br />
&nbsp;&nbsp;<br />
import net.sf.cglib.proxy.CallbackFilter; &nbsp;<br />
/**&nbsp;<br />
&nbsp;* 回调方法过滤&nbsp;<br />
&nbsp;* @author zghw&nbsp;<br />
&nbsp;*&nbsp;<br />
&nbsp;*/ &nbsp;<br />
public class TargetMethodCallbackFilter implements CallbackFilter { &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; &nbsp;* 过滤方法&nbsp;<br />
&nbsp; &nbsp; &nbsp;* 返回的值为数字，代表了Callback数组中的索引位置，要到用的Callback&nbsp;<br />
&nbsp; &nbsp; &nbsp;*/ &nbsp;<br />
&nbsp; &nbsp; @Override &nbsp;<br />
&nbsp; &nbsp; public int accept(Method method) { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; if(method.getName().equals(&quot;method1&quot;)){ &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;filter method1 ==0&quot;); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 0; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; } &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; if(method.getName().equals(&quot;method2&quot;)){ &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;filter method2 ==1&quot;); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 1; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; } &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; if(method.getName().equals(&quot;method3&quot;)){ &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;filter method3 ==2&quot;); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 2; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; } &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; return 0; &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp;&nbsp;<br />
} &nbsp;</p>

<p>其中return值为被代理类的各个方法在回调数组Callback[]中的位置索引（见下文）。<br />
[java] view plain copy<br />
&lt;span style=&quot;font-size:14px;&quot;&gt;package com.zghw.cglib; &nbsp;<br />
&nbsp;&nbsp;<br />
import net.sf.cglib.proxy.Callback; &nbsp;<br />
import net.sf.cglib.proxy.CallbackFilter; &nbsp;<br />
import net.sf.cglib.proxy.Enhancer; &nbsp;<br />
import net.sf.cglib.proxy.NoOp; &nbsp;<br />
&nbsp;&nbsp;<br />
public class TestCglib { &nbsp;<br />
&nbsp; &nbsp; public static void main(String args[]) { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; Enhancer enhancer =new Enhancer(); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; enhancer.setSuperclass(TargetObject.class); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; CallbackFilter callbackFilter = new TargetMethodCallbackFilter(); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* (1)callback1：方法拦截器&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(2)NoOp.INSTANCE：这个NoOp表示no operator，即什么操作也不做，代理类直接调用被代理的方法不进行拦截。&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(3)FixedValue：表示锁定方法返回值，无论被代理类的方法返回什么值，回调方法都返回固定值。&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/ &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; Callback noopCb=NoOp.INSTANCE; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; Callback callback1=new TargetInterceptor(); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; Callback fixedValue=new TargetResultFixed(); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; Callback[] cbarray=new Callback[]{callback1,noopCb,fixedValue}; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; //enhancer.setCallback(new TargetInterceptor()); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; enhancer.setCallbacks(cbarray); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; enhancer.setCallbackFilter(callbackFilter); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; TargetObject targetObject2=(TargetObject)enhancer.create(); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(targetObject2); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(targetObject2.method1(&quot;mmm1&quot;)); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(targetObject2.method2(100)); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(targetObject2.method3(100)); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(targetObject2.method3(200)); &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
} &nbsp;<br />
&nbsp;</p>

<p>package com.zghw.cglib; &nbsp;<br />
&nbsp;&nbsp;<br />
import net.sf.cglib.proxy.FixedValue; &nbsp;<br />
/** &nbsp;<br />
&nbsp;* 表示锁定方法返回值，无论被代理类的方法返回什么值，回调方法都返回固定值。 &nbsp;<br />
&nbsp;* @author zghw &nbsp;<br />
&nbsp;* &nbsp;<br />
&nbsp;*/ &nbsp;<br />
public class TargetResultFixed implements FixedValue{ &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; /** &nbsp;<br />
&nbsp; &nbsp; &nbsp;* 该类实现FixedValue接口，同时锁定回调值为999 &nbsp;<br />
&nbsp; &nbsp; &nbsp;* (整型，CallbackFilter中定义的使用FixedValue型回调的方法为getConcreteMethodFixedValue，该方法返回值为整型)。 &nbsp;<br />
&nbsp; &nbsp; &nbsp;*/ &nbsp;<br />
&nbsp; &nbsp; @Override &nbsp;<br />
&nbsp; &nbsp; public Object loadObject() throws Exception { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;锁定结果&quot;); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; Object obj = 999; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; return obj; &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
} &nbsp;</p>

<h3>5、延迟加载对象</h3>

<p>一、作用：</p>

<p>说到延迟加载，应该经常接触到，尤其是使用Hibernate的时候，本篇将通过一个实例分析延迟加载的实现方式。<br />
LazyLoader接口继承了Callback，因此也算是CGLib中的一种Callback类型。<br />
另一种延迟加载接口Dispatcher。<br />
Dispatcher接口同样继承于Callback，也是一种回调类型。<br />
但是Dispatcher和LazyLoader的区别在于：LazyLoader只在第一次访问延迟加载属性时触发代理类回调方法，而Dispatcher在每次访问延迟加载属性时都会触发代理类回调方法。</p>

<p>二、示例：</p>

<p>首先定义一个实体类LoaderBean，该Bean内有一个需要延迟加载的属性PropertyBean。</p>

<p>package com.zghw.cglib; &nbsp;<br />
&nbsp;&nbsp;<br />
import net.sf.cglib.proxy.Enhancer; &nbsp;<br />
&nbsp;&nbsp;<br />
public class LazyBean { &nbsp;<br />
&nbsp; &nbsp; private String name; &nbsp;<br />
&nbsp; &nbsp; private int age; &nbsp;<br />
&nbsp; &nbsp; private PropertyBean propertyBean; &nbsp;<br />
&nbsp; &nbsp; private PropertyBean propertyBeanDispatcher; &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; public LazyBean(String name, int age) { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;lazy bean init&quot;); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; this.name = name; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; this.age = age; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; this.propertyBean = createPropertyBean(); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; this.propertyBeanDispatcher = createPropertyBeanDispatcher(); &nbsp;<br />
&nbsp; &nbsp; } &nbsp;&nbsp;</p>

<p><br />
&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; &nbsp;* 只第一次懒加载&nbsp;<br />
&nbsp; &nbsp; &nbsp;* @return&nbsp;<br />
&nbsp; &nbsp; &nbsp;*/ &nbsp;<br />
&nbsp; &nbsp; private PropertyBean createPropertyBean() { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* 使用cglib进行懒加载 对需要延迟加载的对象添加代理，在获取该对象属性时先通过代理类回调方法进行对象初始化。&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* 在不需要加载该对象时，只要不去获取该对象内属性，该对象就不会被初始化了（在CGLib的实现中只要去访问该对象内属性的getter方法，&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* 就会自动触发代理类回调）。&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/ &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; Enhancer enhancer = new Enhancer(); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; enhancer.setSuperclass(PropertyBean.class); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; PropertyBean pb = (PropertyBean) enhancer.create(PropertyBean.class, &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new ConcreteClassLazyLoader()); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; return pb; &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; &nbsp;* 每次都懒加载&nbsp;<br />
&nbsp; &nbsp; &nbsp;* @return&nbsp;<br />
&nbsp; &nbsp; &nbsp;*/ &nbsp;<br />
&nbsp; &nbsp; private PropertyBean createPropertyBeanDispatcher() { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; Enhancer enhancer = new Enhancer(); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; enhancer.setSuperclass(PropertyBean.class); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; PropertyBean pb = (PropertyBean) enhancer.create(PropertyBean.class, &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new ConcreteClassDispatcher()); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; return pb; &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp; &nbsp; public String getName() { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; return name; &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; public void setName(String name) { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; this.name = name; &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; public int getAge() { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; return age; &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; public void setAge(int age) { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; this.age = age; &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; public PropertyBean getPropertyBean() { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; return propertyBean; &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; public void setPropertyBean(PropertyBean propertyBean) { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; this.propertyBean = propertyBean; &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; public PropertyBean getPropertyBeanDispatcher() { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; return propertyBeanDispatcher; &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; public void setPropertyBeanDispatcher(PropertyBean propertyBeanDispatcher) { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; this.propertyBeanDispatcher = propertyBeanDispatcher; &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; @Override &nbsp;<br />
&nbsp; &nbsp; public String toString() { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; return &quot;LazyBean [name=&quot; + name + &quot;, age=&quot; + age + &quot;, propertyBean=&quot; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; + propertyBean + &quot;]&quot;; &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
} &nbsp;</p>

<p>package com.zghw.cglib; &nbsp;<br />
&nbsp;&nbsp;<br />
public class PropertyBean { &nbsp;<br />
&nbsp; &nbsp; private String key; &nbsp;<br />
&nbsp; &nbsp; private Object value; &nbsp;<br />
&nbsp; &nbsp; public String getKey() { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; return key; &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp; &nbsp; public void setKey(String key) { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; this.key = key; &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp; &nbsp; public Object getValue() { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; return value; &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp; &nbsp; public void setValue(Object value) { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; this.value = value; &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp; &nbsp; @Override &nbsp;<br />
&nbsp; &nbsp; public String toString() { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; return &quot;PropertyBean [key=&quot; + key + &quot;, value=&quot; + value + &quot;]&quot; +getClass(); &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp; &nbsp; &nbsp;&nbsp;<br />
} &nbsp;<br />
&nbsp;</p>

<p>package com.zghw.cglib; &nbsp;<br />
&nbsp;&nbsp;<br />
import net.sf.cglib.proxy.LazyLoader; &nbsp;<br />
&nbsp;&nbsp;<br />
public class ConcreteClassLazyLoader implements LazyLoader { &nbsp;<br />
&nbsp; &nbsp; /**&nbsp;<br />
&nbsp; &nbsp; &nbsp;* 对需要延迟加载的对象添加代理，在获取该对象属性时先通过代理类回调方法进行对象初始化。&nbsp;<br />
&nbsp; &nbsp; &nbsp;* 在不需要加载该对象时，只要不去获取该对象内属性，该对象就不会被初始化了（在CGLib的实现中只要去访问该对象内属性的getter方法，&nbsp;<br />
&nbsp; &nbsp; &nbsp;* 就会自动触发代理类回调）。&nbsp;<br />
&nbsp; &nbsp; &nbsp;*/ &nbsp;<br />
&nbsp; &nbsp; @Override &nbsp;<br />
&nbsp; &nbsp; public Object loadObject() throws Exception { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;before lazyLoader...&quot;); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; PropertyBean propertyBean = new PropertyBean(); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; propertyBean.setKey(&quot;zghw&quot;); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; propertyBean.setValue(new TargetObject()); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;after lazyLoader...&quot;); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; return propertyBean; &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp;&nbsp;<br />
} &nbsp;</p>

<p>package com.zghw.cglib; &nbsp;<br />
&nbsp;&nbsp;<br />
import net.sf.cglib.proxy.Dispatcher; &nbsp;<br />
&nbsp;&nbsp;<br />
public class ConcreteClassDispatcher implements Dispatcher{ &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; @Override &nbsp;<br />
&nbsp; &nbsp; public Object loadObject() throws Exception { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;before Dispatcher...&quot;); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; PropertyBean propertyBean = new PropertyBean(); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; propertyBean.setKey(&quot;xxx&quot;); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; propertyBean.setValue(new TargetObject()); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;after Dispatcher...&quot;); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; return propertyBean; &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp;&nbsp;<br />
} &nbsp;<br />
&nbsp;</p>

<h3>6、接口生成器InterfaceMaker</h3>

<p>一、作用：</p>

<p>InterfaceMaker会动态生成一个接口，该接口包含指定类定义的所有方法。</p>

<p>二、示例：</p>

<p>package com.zghw.cglib; &nbsp;<br />
&nbsp;&nbsp;<br />
import java.lang.reflect.InvocationTargetException; &nbsp;<br />
import java.lang.reflect.Method; &nbsp;<br />
&nbsp;&nbsp;<br />
import net.sf.cglib.proxy.Enhancer; &nbsp;<br />
import net.sf.cglib.proxy.InterfaceMaker; &nbsp;<br />
import net.sf.cglib.proxy.MethodInterceptor; &nbsp;<br />
import net.sf.cglib.proxy.MethodProxy; &nbsp;<br />
&nbsp;&nbsp;<br />
public class TestInterfaceMaker { &nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp; &nbsp; public static void main(String[] args) throws NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException, InvocationTargetException { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; InterfaceMaker interfaceMaker =new InterfaceMaker(); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; //抽取某个类的方法生成接口方法 &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; interfaceMaker.add(TargetObject.class); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; Class&lt;?&gt; targetInterface=interfaceMaker.create(); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; for(Method method : targetInterface.getMethods()){ &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(method.getName()); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; } &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; //接口代理并设置代理接口方法拦截 &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; Object object = Enhancer.create(Object.class, new Class[]{targetInterface}, new MethodInterceptor(){ &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @Override &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public Object intercept(Object obj, Method method, Object[] args, &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MethodProxy methodProxy) throws Throwable { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(method.getName().equals(&quot;method1&quot;)){ &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;filter method1 &quot;); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return &quot;mmmmmmmmm&quot;; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(method.getName().equals(&quot;method2&quot;)){ &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;filter method2 &quot;); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 1111111; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(method.getName().equals(&quot;method3&quot;)){ &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;filter method3 &quot;); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 3333; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return &quot;default&quot;; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }}); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; Method targetMethod1=object.getClass().getMethod(&quot;method3&quot;,new Class[]{int.class}); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; int i=(int)targetMethod1.invoke(object, new Object[]{33}); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; Method targetMethod=object.getClass().getMethod(&quot;method1&quot;,new Class[]{String.class}); &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(targetMethod.invoke(object, new Object[]{&quot;sdfs&quot;})); &nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp;&nbsp;<br />
} &nbsp;</p>
