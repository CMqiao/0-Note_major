<p><strong>&nbsp;六、AOP</strong></p>

<p>两种代理：这两种代理都是实现spring AOP 的基础。</p>

<ul>
	<li>JDK：基于接口
	<ul>
		<li>原理：动态代理 + 反射</li>
		<li>定义一个类XxHandler，实现InvocationHandler接口，里边包含真实对象的实例（实际上是一个Object，具体真实对象在运行期赋值给Object），并使用反射调用真实对象的指定方法</li>
		<li>使用Proxy.newProxyInstance(ClassLoader,&nbsp;interfaces, InvocationHandler)创建代理对象，之后调用相应的真实对象的方法即可。
		<ul>
			<li>由于该方法的第二个对象是interface，所以JDK<strong>只能基于接口实现动态代理</strong>。</li>
		</ul>
		</li>
	</ul>
	</li>
	<li>CGLib：基于类
	<ul>
		<li>原理：动态生成字节码技术，即为将要拦截的类动态生成子类，然后在子类中拦截所有父类的调用并顺势织入横切逻辑。</li>
		<li>由于是创建子类，所以不能代理目标类中的private和final方法。</li>
	</ul>
	</li>
</ul>

<p>比较：</p>

<ul>
	<li>CGLib创建代理对象花费的时间长于JDK，因为要动态生成子类</li>
	<li>CGLib创建好的代理对象的性能由于JDK</li>
</ul>
