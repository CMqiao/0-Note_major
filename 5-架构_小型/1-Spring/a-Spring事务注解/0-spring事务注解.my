<h1>spring的@Transactional注解详细用法</h1>

<h2><strong>概述</strong></h2>

<p>事务管理对于企业应用来说是至关重要的，即使出现异常情况，它也可以保证数据的一致性。<br />
Spring Framework对事务管理提供了一致的抽象，其特点如下：</p>

<ul>
	<li>为不同的事务API提供一致的编程模型，比如JTA(Java Transaction API), JDBC, Hibernate, JPA(Java Persistence API和JDO(Java Data Objects)</li>
	<li>支持声明式事务管理，特别是基于注解的声明式事务管理，简单易用</li>
	<li>提供比其他事务API如JTA更简单的编程式事务管理API</li>
	<li>与spring数据访问抽象的完美集成</li>
</ul>

<p><strong>事务管理方式</strong></p>

<p>spring支持编程式事务管理和声明式事务管理两种方式。</p>

<p>编程式事务管理使用TransactionTemplate或者直接使用底层的PlatformTransactionManager。对于编程式事务管理，spring推荐使用TransactionTemplate。</p>

<p><strong>声明式事务管理建立在AOP之上的。其本质是对方法前后进行拦截，然后在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务</strong>。声明式事务最大的优点就是不需要通过编程的方式管理事务，这样就不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中做相关的事务规则声明(或通过基于@Transactional注解的方式)，便可以将事务规则应用到业务逻辑中。</p>

<p>显然声明式事务管理要优于编程式事务管理，这正是spring倡导的非侵入式的开发方式。声明式事务管理使业务代码不受污染，一个普通的POJO对象，只要加上注解就可以获得完全的事务支持。<strong>和编程式事务相比，声明式事务唯一不足地方是，后者的最细粒度只能作用到方法级别，无法做到像编程式事务那样可以作用到代码块级别</strong>。但是即便有这样的需求，也存在很多变通的方法，比如，可以将需要进行事务管理的代码块独立为方法等等。</p>

<p>声明式事务管理也有两种常用的方式：1、一种是基于tx和aop名字空间的xml配置文件；2、另一种就是基于@Transactional注解。</p>

<p>显然基于注解的方式更简单易用，更清爽。</p>

<p><strong>自动提交(AutoCommit)与连接关闭时的是否自动提交</strong></p>

<p><em>自动提交</em></p>

<p>默认情况下，数据库处于自动提交模式。每一条语句处于一个单独的事务中，在这条语句执行完毕时，如果执行成功则隐式的提交事务，如果<br />
执行失败则隐式的回滚事务。</p>

<p>对于正常的事务管理，是一组相关的操作处于一个事务之中，因此必须关闭数据库的自动提交模式。不过，这个我们不用担心，spring会将底层连接的自动提交特性设置为false。<br />
org/springframework/jdbc/datasource/DataSourceTransactionManager.java</p>

<pre>
 1 // switch to manual commit if necessary. this is very expensive in some jdbc drivers,
 2 // so we don&#39;t want to do it unnecessarily (for example if we&#39;ve explicitly
 3 // configured the connection pool to set it already).
 4 if (con.getautocommit()) {
 5     txobject.setmustrestoreautocommit(true);
 6     if (logger.isdebugenabled()) {
 7         logger.debug(&quot;switching jdbc connection [&quot; + con + &quot;] to manual commit&quot;);
 8     }
 9     con.setautocommit(false);
10 }
</pre>

<p>有些数据连接池提供了关闭事务自动提交的设置，最好在设置连接池时就将其关闭。但C3P0没有提供这一特性，只能依靠spring来设置。<br />
因为JDBC规范规定，当连接对象建立时应该处于自动提交模式，这是跨DBMS的缺省值，如果需要,必须显式的关闭自动提交。C3P0遵守这一规范，让客户代码来显式的设置需要的提交模式。</p>

<p><em>连接关闭时的是否自动提交</em></p>

<p><strong>当一个连接关闭时，如果有未提交的事务应该如何处理？JDBC规范没有提及，C3P0默认的策略是回滚任何未提交的事务。</strong>这是一个正确的策略，但JDBC驱动提供商之间对此问题并没有达成一致。<br />
C3P0的autoCommitOnClose属性默认是false,没有十分必要不要动它。或者可以显式的设置此属性为false，这样会更明确。</p>

<h2><strong>基于注解的声明式事务管理配置</strong></h2>

<p>spring-servlet.xml</p>

<pre>
1 &lt;!-- transaction support--&gt;
2 &lt;!-- PlatformTransactionMnager --&gt;
3 &lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
4     &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;
5 &lt;/bean&gt;
6 &lt;!-- enable transaction annotation support --&gt;
7 &lt;tx:annotation-driven transaction-manager=&quot;txManager&quot; /&gt;
</pre>

<p>还要在spring-servlet.xml中添加tx名字空间</p>

<pre>
 1     ...
 2     xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
 3     xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;
 4     xsi:schemaLocation=&quot;
 5     ...
 6  
 7 http://www.springframework.org/schema/tx
 8 http://www.springframework.org/schema/tx/spring-tx.xsd
 9 ...   
</pre>

<p>MyBatis自动参与到spring事务管理中，无需额外配置，只要org.mybatis.spring.SqlSessionFactoryBean引用的数据源与DataSourceTransactionManager引用的数据源一致即可，否则事务管理会不起作用。</p>

<p>另外需要下载依赖包<a href="http://aopalliance.sourceforge.net/">aopalliance</a>.jar放置到WEB-INF/lib目录下。否则spring初始化时会报异常<br />
java.lang.NoClassDefFoundError: org/aopalliance/intercept/MethodInterceptor</p>

<h3>项目中实际使用</h3>

<p>&nbsp;&nbsp; &nbsp;&lt;!-- 事务管理器 --&gt;<br />
&nbsp;&nbsp; &nbsp;&lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &lt;property name=&quot;dataSource&quot; ref=&quot;readWriteDataSource&quot;/&gt; &nbsp;<br />
&nbsp; &nbsp; &lt;/bean&gt;<br />
&nbsp; &nbsp;&lt;!-- 事务注解 --&gt;<br />
&nbsp; &nbsp;&lt;tx:annotation-driven transaction-manager=&quot;txManager&quot; proxy-target-class=&quot;true&quot;/&gt;<br />
&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp;&lt;!-- XML事务属性配置 --&gt; &nbsp;&nbsp;<br />
&nbsp; &nbsp;&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;txManager&quot;&gt;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&lt;tx:attributes&gt;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;tx:method name=&quot;insert*&quot; propagation=&quot;REQUIRED&quot; rollback-for=&quot;Exception&quot;/&gt;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot; rollback-for=&quot;Exception&quot;/&gt;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;tx:method name=&quot;delete*&quot; propagation=&quot;REQUIRED&quot; rollback-for=&quot;Exception&quot;/&gt;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;tx:method name=&quot;del*&quot; propagation=&quot;REQUIRED&quot; rollback-for=&quot;Exception&quot;/&gt;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;tx:method name=&quot;modify*&quot; propagation=&quot;REQUIRED&quot; rollback-for=&quot;Exception&quot;/&gt;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;tx:method name=&quot;add*&quot; propagation=&quot;REQUIRED&quot; rollback-for=&quot;Exception&quot;/&gt;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;tx:method name=&quot;save*&quot; propagation=&quot;REQUIRED&quot; rollback-for=&quot;Exception&quot;/&gt;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;tx:method name=&quot;get*&quot; read-only=&quot;true&quot; rollback-for=&quot;Exception&quot;/&gt;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;tx:method name=&quot;select*&quot; read-only=&quot;true&quot; rollback-for=&quot;Exception&quot;/&gt;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;tx:method name=&quot;find*&quot; read-only=&quot;true&quot; rollback-for=&quot;Exception&quot;/&gt;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&lt;/tx:attributes&gt;<br />
&nbsp;&nbsp; &nbsp;&lt;/tx:advice&gt;</p>

<h2><strong>spring事务特性</strong></h2>

<p>spring所有的事务管理策略类都继承自org.springframework.transaction.PlatformTransactionManager接口</p>

<pre>
1 public interface PlatformTransactionManager {
2  
3   TransactionStatus getTransaction(TransactionDefinition definition)
4     throws TransactionException;
5  
6   void commit(TransactionStatus status) throws TransactionException;
7  
8   void rollback(TransactionStatus status) throws TransactionException;
9 }
</pre>

<p>其中TransactionDefinition接口定义以下特性：</p>

<h3><em>事务隔离级别</em></h3>

<p>隔离级别是指若干个并发的事务之间的隔离程度。TransactionDefinition 接口中定义了五个表示隔离级别的常量：</p>

<ul>
	<li>TransactionDefinition.ISOLATION_DEFAULT：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是TransactionDefinition.ISOLATION_READ_COMMITTED。</li>
	<li>TransactionDefinition.ISOLATION_READ_UNCOMMITTED：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读，不可重复读和幻读，因此很少使用该隔离级别。比如PostgreSQL实际上并没有此级别。</li>
	<li>TransactionDefinition.ISOLATION_READ_COMMITTED：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。</li>
	<li>TransactionDefinition.ISOLATION_REPEATABLE_READ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。该级别可以防止脏读和不可重复读。</li>
	<li>TransactionDefinition.ISOLATION_SERIALIZABLE：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</li>
</ul>

<h3><em>事务传播行为</em></h3>

<p>所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：</p>

<ul>
	<li>TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。这是默认值。</li>
	<li>TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li>
	<li>TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li>
	<li>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li>
	<li>TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</li>
	<li>TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li>
	<li>TransactionDefinition.PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</li>
</ul>

<h3><em>事务超时</em></h3>

<p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。</p>

<p>默认设置为底层事务系统的超时值，如果底层数据库事务系统没有设置超时值，那么就是none，没有超时限制。</p>

<p><em>事务只读属性</em></p>

<p>只读事务用于客户代码只读但不修改数据的情形，只读事务用于特定情景下的优化，比如使用Hibernate的时候。<br />
默认为读写事务。</p>

<h2><strong>spring事务回滚规则</strong></h2>

<p>指示spring事务管理器回滚一个事务的推荐方法是在当前事务的上下文内抛出异常。spring事务管理器会捕捉任何未处理的异常，然后依据规则决定是否回滚抛出异常的事务。</p>

<p>默认配置下，spring只有在抛出的异常为运行时unchecked异常时才回滚该事务，也就是抛出的异常为RuntimeException的子类(Errors也会导致事务回滚)，而抛出checked异常则不会导致事务回滚。<br />
可以明确的配置在抛出那些异常时回滚事务，包括checked异常。也可以明确定义那些异常抛出时不回滚事务。</p>

<p>还可以编程性的通过setRollbackOnly()方法来指示一个事务必须回滚，在调用完setRollbackOnly()后你所能执行的唯一操作就是回滚。</p>

<h3><strong>@Transactional注解</strong></h3>

<p><em>@Transactional属性</em></p>

<table border="1">
	<caption>&nbsp;</caption>
	<thead>
		<tr>
			<th>属性</th>
			<th>类型</th>
			<th>描述</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>value</td>
			<td>String</td>
			<td>可选的限定描述符，指定使用的事务管理器</td>
		</tr>
		<tr>
			<td>propagation</td>
			<td>enum: Propagation</td>
			<td>可选的事务传播行为设置</td>
		</tr>
		<tr>
			<td>isolation</td>
			<td>enum: Isolation</td>
			<td>可选的事务隔离级别设置</td>
		</tr>
		<tr>
			<td>readOnly</td>
			<td>boolean</td>
			<td>读写或只读事务，默认读写</td>
		</tr>
		<tr>
			<td>timeout</td>
			<td>int (in seconds granularity)</td>
			<td>事务超时时间设置</td>
		</tr>
		<tr>
			<td>rollbackFor</td>
			<td>Class对象数组，必须继承自Throwable</td>
			<td>导致事务回滚的异常类数组</td>
		</tr>
		<tr>
			<td>rollbackForClassName</td>
			<td>类名数组，必须继承自Throwable</td>
			<td>导致事务回滚的异常类名字数组</td>
		</tr>
		<tr>
			<td>noRollbackFor</td>
			<td>Class对象数组，必须继承自Throwable</td>
			<td>不会导致事务回滚的异常类数组</td>
		</tr>
		<tr>
			<td>noRollbackForClassName</td>
			<td>类名数组，必须继承自Throwable</td>
			<td>不会导致事务回滚的异常类名字数组</td>
		</tr>
	</tbody>
	<tfoot>
	</tfoot>
</table>

<h3><em>用法</em></h3>

<p>@Transactional 可以作用于接口、接口方法、类以及类方法上。当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。</p>

<p>虽然 @Transactional 注解可以作用于接口、接口方法、类以及类方法上，但是 Spring 建议不要在接口或者接口方法上使用该注解，因为这只有在使用基于接口的代理时它才会生效。另外， @Transactional 注解应该只被应用到 public 方法上，这是由 Spring AOP 的本质决定的。如果你在 protected、private 或者默认可见性的方法上使用 @Transactional 注解，这将被忽略，也不会抛出任何异常。</p>

<p>默认情况下，只有来自外部的方法调用才会被AOP代理捕获，也就是，类内部方法调用本类内部的其他方法并不会引起事务行为，即使被调用方法使用@Transactional注解进行修饰。</p>

<pre>
 1 @Transactional(readOnly = true)
 2 public class DefaultFooService implements FooService {
 3  
 4   public Foo getFoo(String fooName) {
 5     // do something
 6   }
 7  
 8   // these settings have precedence for this method
 9   //方法上注解属性会覆盖类注解上的相同属性
10   @Transactional(readOnly = false, propagation = Propagation.REQUIRES_NEW)
11   public void updateFoo(Foo foo) {
12     // do something
13   }
14 }</pre>

<p>&nbsp;</p>

<h2><strong>事物注解方式: @Transactional</strong></h2>

<p>当标于类前时, 标示类中所有方法都进行事物处理&nbsp;,&nbsp;例子:</p>

<pre>
1 @Transactional public class TestServiceBean implements TestService {}</pre>

<h2><strong>当类中某些方法不需要事物时:</strong></h2>

<pre>
 1 @Transactional  
 2 public class TestServiceBean implements TestService { 
 3     private TestDao dao; 
 4     public void setDao(TestDao dao) { 
 5         this.dao = dao; 
 6     } 
 7     @Transactional(propagation =Propagation.NOT_SUPPORTED)
 8     public List getAll() { 
 9         return null; 
10     } 
11 }
</pre>

<h2><strong>事物传播行为介绍:</strong>&nbsp;</h2>

<p>　　@Transactional(propagation=Propagation.REQUIRED) ：如果有事务, 那么加入事务, 没有的话新建一个(默认情况下)<br />
　　@Transactional(propagation=Propagation.NOT_SUPPORTED) ：容器不为这个方法开启事务<br />
　　@Transactional(propagation=Propagation.REQUIRES_NEW) ：不管是否存在事务,都创建一个新的事务,原来的挂起,新的执行完毕,继续执行老的事务<br />
　　@Transactional(propagation=Propagation.MANDATORY) ：必须在一个已有的事务中执行,否则抛出异常<br />
　　@Transactional(propagation=Propagation.NEVER) ：必须在一个没有的事务中执行,否则抛出异常(与Propagation.MANDATORY相反)<br />
　　@Transactional(propagation=Propagation.SUPPORTS) ：如果其他bean调用这个方法,在其他bean中声明事务,那就用事务.如果其他bean没有声明事务,那就不用事务.</p>

<h2><strong>事物超时设置:</strong></h2>

<p><strong>　</strong>　@Transactional(timeout=30) //默认是30秒</p>

<h2><strong>事务隔离级别:</strong></h2>

<p>　　@Transactional(isolation = Isolation.READ_UNCOMMITTED)：读取未提交数据(会出现脏读, 不可重复读) 基本不使用<br />
　　@Transactional(isolation = Isolation.READ_COMMITTED)：读取已提交数据(会出现不可重复读和幻读)<br />
　　@Transactional(isolation = Isolation.REPEATABLE_READ)：可重复读(会出现幻读)<br />
　　@Transactional(isolation = Isolation.SERIALIZABLE)：串行化</p>

<p>　　MYSQL: 默认为REPEATABLE_READ级别<br />
　　SQLSERVER: 默认为READ_COMMITTED</p>

<p><strong>脏读</strong>&nbsp;: 一个事务读取到另一事务未提交的更新数据<br />
<strong>不可重复读</strong>&nbsp;: 在同一事务中, 多次读取同一数据返回的结果有所不同, 换句话说,&nbsp;<br />
后续读取可以读到另一事务已提交的更新数据. 相反, &quot;可重复读&quot;在同一事务中多次<br />
读取数据时, 能够保证所读数据一样, 也就是后续读取不能读到另一事务已提交的更新数据<br />
<strong>幻读</strong>&nbsp;: 一个事务读到另一个事务已提交的insert数据</p>

<h2><strong>@Transactional注解中常用参数说明</strong></h2>

<table border="1">
	<tbody>
		<tr>
			<td>
			<p><strong>参数名称</strong></p>
			</td>
			<td>
			<p><strong>功能描述</strong></p>
			</td>
		</tr>
		<tr>
			<td>
			<p><strong>readOnly</strong></p>
			</td>
			<td>
			<p>该属性用于设置当前事务是否为只读事务，设置为true表示只读，false则表示可读写，默认值为false。例如：@Transactional(readOnly=true)</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><strong>rollbackFor</strong></p>
			</td>
			<td>
			<p>该属性用于设置需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，则进行事务回滚。例如：</p>

			<p>指定单一异常类：@Transactional(rollbackFor=RuntimeException.class)</p>

			<p>指定多个异常类：@Transactional(rollbackFor={RuntimeException.class, Exception.class})</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><strong>rollbackForClassName</strong></p>
			</td>
			<td>
			<p>该属性用于设置需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，则进行事务回滚。例如：</p>

			<p>指定单一异常类名称：@Transactional(rollbackForClassName=&quot;RuntimeException&quot;)</p>

			<p>指定多个异常类名称：@Transactional(rollbackForClassName={&quot;RuntimeException&quot;,&quot;Exception&quot;})</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><strong>noRollbackFor</strong></p>
			</td>
			<td>
			<p>该属性用于设置不需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，不进行事务回滚。例如：</p>

			<p>指定单一异常类：@Transactional(noRollbackFor=RuntimeException.class)</p>

			<p>指定多个异常类：@Transactional(noRollbackFor={RuntimeException.class, Exception.class})</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><strong>noRollbackForClassName</strong></p>
			</td>
			<td>
			<p>该属性用于设置不需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，不进行事务回滚。例如：</p>

			<p>指定单一异常类名称：@Transactional(noRollbackForClassName=&quot;RuntimeException&quot;)</p>

			<p>指定多个异常类名称：</p>

			<p>@Transactional(noRollbackForClassName={&quot;RuntimeException&quot;,&quot;Exception&quot;})</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><strong>propagation</strong></p>
			</td>
			<td>
			<p>该属性用于设置事务的传播行为，具体取值可参考表6-7。</p>

			<p>例如：@Transactional(propagation=Propagation.NOT_SUPPORTED,readOnly=true)</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><strong>isolation</strong></p>
			</td>
			<td>
			<p>该属性用于设置底层数据库的事务隔离级别，事务隔离级别用于处理多事务并发的情况，通常使用数据库的默认隔离级别即可，基本不需要进行设置</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><strong>timeout</strong></p>
			</td>
			<td>
			<p>该属性用于设置事务的超时秒数，默认值为-1表示永不超时</p>
			</td>
		</tr>
	</tbody>
</table>

<h2><strong>注意的几点:</strong></h2>

<p>　　1、@Transactional 只能被应用到public方法上, 对于其它非public的方法,如果标记了@Transactional也不会报错,但方法没有事务功能.<br />
<br />
　　2、用 spring 事务管理器,由spring来负责数据库的打开,提交,回滚.默认遇到运行期例外(throw new RuntimeException(&quot;注释&quot;);)会回滚，即遇到不受检查（unchecked）的例外时回滚；而遇到需要捕获的例外(throw new Exception(&quot;注释&quot;);)不会回滚,即遇到受检查的例外（就是非运行时抛出的异常，编译器会检查到的异常叫受检查例外或说受检查异常）时，需我们指定方式来让事务回滚要想所有异常都回滚,要加上 @Transactional( rollbackFor={Exception.class,其它异常}) .如果让unchecked例外不回滚： @Transactional(notRollbackFor=RunTimeException.class)<br />
如下:</p>

<pre>
1 @Transactional(rollbackFor=Exception.class) //指定回滚,遇到异常Exception时回滚
2 public void methodName() {
3 　　　throw new Exception(&quot;注释&quot;);
4 }
5 @Transactional(noRollbackFor=Exception.class)//指定不回滚,遇到运行期例外(throw new RuntimeException(&quot;注释&quot;);)会回滚
6 public ItimDaoImpl getItemDaoImpl() {
7 　　　throw new RuntimeException(&quot;注释&quot;);
8 }
</pre>

<p>　　3、@Transactional 注解应该只被应用到 public 可见度的方法上。 如果你在 protected、private 或者 package-visible 的方法上使用 @Transactional 注解，它也不会报错， 但是这个被注解的方法将不会展示已配置的事务设置。</p>

<p><br />
　　4、@Transactional 注解可以被应用于接口定义和接口方法、类定义和类的 public 方法上。然而，请注意仅仅 @Transactional 注解的出现不足于开启事务行为，它仅仅 是一种元数据，能够被可以识别 @Transactional 注解和上述的配置适当的具有事务行为的beans所使用。上面的例子中，其实正是 元素的出现 开启 了事务行为。</p>

<p><br />
　　5、Spring团队的建议是你在具体的类（或类的方法）上使用 @Transactional 注解，而不要使用在类所要实现的任何接口上。你当然可以在接口上使用 @Transactional 注解，但是这将只能当你设置了基于接口的代理时它才生效。因为注解是不能继承的，这就意味着如果你正在使用基于类的代理时，那么事务的设置将不能被基于类的代理所识别，而且对象也将不会被事务代理所包装（将被确认为严重的）。因此，请接受Spring团队的建议并且在具体的类上使用 @Transactional 注解。</p>
