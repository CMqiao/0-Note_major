<h1>Spring 注解总结</h1>

<h2>一 注解优点？注解解决了什么问题，为什么要使用注解？</h2>

<h2>二 注解的来龙去脉（历史）</h2>

<p>Spring 3.1 Reference 对注解与XML对比的一段叙述：</p>

<p><img alt="" src="http://my.csdn.net/uploads/201206/26/1340680037_6914.png" /></p>

<p>&nbsp;</p>

<p>1 没有注解之前</p>

<ol start="1">
	<li>public&nbsp;class&nbsp;UserManagerImpl&nbsp;implements&nbsp;UserManager&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;UserDao&nbsp;userDao;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setUserDao(UserDao&nbsp;userDao)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.userDao&nbsp;=&nbsp;userDao;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;&nbsp;&nbsp;</li>
</ol>

<p><br />
配置文件</p>

<ol start="1">
	<li>&lt;bean&nbsp;id=&quot;userManagerImpl&quot;&nbsp;class=&quot;com.kedacom.spring.annotation.service.UserManagerImpl&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;userDao&quot;&nbsp;ref=&quot;userDao&quot;&nbsp;/&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&lt;/bean&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&lt;bean&nbsp;id=&quot;userDao&quot;&nbsp;class=&quot;com.kedacom.spring.annotation.persistence.UserDaoImpl&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;sessionFactory&quot;&nbsp;ref=&quot;mySessionFactory&quot;&nbsp;/&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&lt;/bean&gt;&nbsp;&nbsp;&nbsp;</li>
</ol>

<p><br />
&nbsp;</p>

<p>&nbsp;</p>

<p>2 注解诞生之后</p>

<ol start="1">
	<li>public&nbsp;class&nbsp;UserManagerImpl&nbsp;implements&nbsp;UserManager&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Autowired&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;UserDao&nbsp;userDao;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;&nbsp;</li>
</ol>

<p><br />
或者（对方法进行标注）</p>

<ol start="1">
	<li>public&nbsp;class&nbsp;UserManagerImpl&nbsp;implements&nbsp;UserManager&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;UserDao&nbsp;userDao;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Autowired&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setUserDao(UserDao&nbsp;userDao)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.userDao&nbsp;=&nbsp;userDao;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;&nbsp;</li>
</ol>

<p><br />
配置文件</p>

<ol start="1">
	<li>&lt;bean&nbsp;id=&quot;userManagerImpl&quot;&nbsp;class=&quot;com.kedacom.spring.annotation.service.UserManagerImpl&quot;&nbsp;/&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&lt;bean&nbsp;id=&quot;userDao&quot;&nbsp;class=&quot;com.kedacom.spring.annotation.persistence.UserDaoImpl&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;sessionFactory&quot;&nbsp;ref=&quot;mySessionFactory&quot;&nbsp;/&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&lt;/bean&gt;&nbsp;&nbsp;</li>
</ol>

<p><br />
@Autowired可以对成员变量、方法和构造函数进行标注，来完成自动装配的工作。以上两种不同实现方式中，@Autowired的标注位置不同，它们都会在Spring在初始化userManagerImpl这个bean时，自动装配userDao这个属性，区别是：第一种实现中，Spring会直接将UserDao类型的唯一一个bean赋值给userDao这个成员变量；第二种实现中，Spring会调用setUserDao方法来将UserDao类型的唯一一个bean装配到userDao这个属性。</p>

<p>&nbsp;</p>

<p>要使@Autowired能够工作，还需要在配置文件中加入以下代码&nbsp;</p>

<ol start="1">
	<li>&lt;bean&nbsp;class=&quot;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor&quot;&nbsp;/&gt;&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>可以看到确实是减少了代码和配置文件中的配置。</p>

<h2>三 注解总体介绍</h2>

<p>注解实现Bean配置主要用来进行如依赖注入、生命周期回调方法定义等，不能消除XML文件中的Bean元数据定义，且基于XML配置中的依赖注入的数据将覆盖基于注解配置中的依赖注入的数据。<br />
Spring3的基于注解实现Bean依赖注入支持如下三种注解：<br />
Spring自带依赖注入注解： Spring自带的一套依赖注入注解；<br />
JSR-250注解：Java平台的公共注解，是Java EE 5规范之一，在JDK6中默认包含这些注解，从Spring2.5开始支持。<br />
JSR-330注解：Java 依赖注入标准，Java EE 6规范之一，可能在加入到未来JDK版本，从Spring3开始支持；<br />
JPA注解：用于注入持久化上下文和尸体管理器。<br />
这三种类型的注解在Spring3中都支持，类似于注解事务支持，想要使用这些注解需要在Spring容器中开启注解驱动支持，即使用如下配置方式开启：</p>

<ol start="1">
	<li>&lt;beans&nbsp;xmlns=&quot;http://www.springframework.org/schema/beans&quot;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;xmlns:context=&quot;http://www.springframework.org/schema/context&quot;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;xsi:schemaLocation=&quot;&nbsp;http://www.springframework.org/schema/beans&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;context:annotation-config/&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&lt;/beans&gt;&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>这样就能使用注解驱动依赖注入了<br />
<strong>Spring自带依赖注入注解</strong><br />
<br />
1 @Required：依赖检查；<br />
2 @Autowired：自动装配2&nbsp;<br />
自动装配，用于替代基于XML配置的自动装配<br />
基于@Autowired的自动装配，默认是根据类型注入，可以用于构造器、字段、方法注入<br />
3 @Value：注入SpEL表达式<br />
用于注入SpEL表达式，可以放置在字段方法或参数上<br />
@Value(value = &quot;SpEL表达式&quot;) &nbsp;<br />
@Value(value = &quot;#{message}&quot;) &nbsp;<br />
4 @Qualifier：限定描述符，用于细粒度选择候选者<br />
@Qualifier限定描述符除了能根据名字进行注入，但能进行更细粒度的控制如何选择候选者<br />
@Qualifier(value = &quot;限定标识符&quot;)&nbsp;<br />
<br />
<br />
<strong>JSR-250注解</strong><br />
<br />
1 @Resource：自动装配，默认根据类型装配，如果指定name属性将根据名字装配，可以使用如下方式来指定<br />
@Resource(name = &quot;标识符&quot;) &nbsp;<br />
字段或setter方法&nbsp;</p>

<p>2 @PostConstruct和PreDestroy：通过注解指定初始化和销毁方法定义</p>

<p>&nbsp;</p>

<p><strong>JSR-330注解</strong><br />
1 @Inject：等价于默认的@Autowired，只是没有required属性<br />
2 @Named：指定Bean名字，对应于Spring自带@Qualifier中的缺省的根据Bean名字注入情况<br />
3 @Qualifier：只对应于Spring自带@Qualifier中的扩展@Qualifier限定描述符注解，即只能扩展使用，没有value属性<br />
<br />
<br />
<strong>JPA注解</strong><br />
@PersistenceContext<br />
@PersistenceUnit</p>

<p>用于注入EntityManagerFactory和EntityManager</p>

<p>&nbsp;</p>

<h2>四 注解需要的jar包及配置</h2>

<p><img alt="" src="http://my.csdn.net/uploads/201206/08/1339134222_3931.png" /></p>

<p>&nbsp;</p>

<h2>五 拓展：结合局部代码来说明注解</h2>

<p><strong>1&nbsp;@Autowired</strong></p>

<p>同二 注解历史中的内容，此处不重复。</p>

<p>&nbsp;</p>

<p><strong>2&nbsp;@Qualifier</strong></p>

<p>@Autowired是根据类型进行自动装配的。在上面的例子中，如果当Spring上下文中存在不止一个UserDao类型的bean时，就会抛出BeanCreationException异常；如果Spring上下文中不存在UserDao类型的bean，也会抛出BeanCreationException异常。我们可以使用@Qualifier配合@Autowired来解决这些问题。</p>

<p>1&gt;可能存在多个UserDao实例&nbsp;</p>

<ol start="1">
	<li>@Autowired&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>public&nbsp;void&nbsp;setUserDao(@Qualifier(&quot;userDao&quot;)&nbsp;UserDao&nbsp;userDao)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;this.userDao&nbsp;=&nbsp;userDao;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;&nbsp;&nbsp;</li>
</ol>

<p><br />
这样，Spring会找到id为userDao的bean进行装配。&nbsp;<br />
2&gt;可能不存在UserDao实例&nbsp;</p>

<ol start="1">
	<li>@Autowired(required&nbsp;=&nbsp;false)&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>public&nbsp;void&nbsp;setUserDao(UserDao&nbsp;userDao)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;this.userDao&nbsp;=&nbsp;userDao;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;&nbsp;&nbsp;</li>
</ol>

<p><br />
<strong>3&nbsp;@Resource（JSR-250标准注解，推荐使用它来代替Spring专有的@Autowired注解）&nbsp;</strong><br />
Spring 不但支持自己定义的@Autowired注解，还支持几个由JSR-250规范定义的注解，它们分别是@Resource、@PostConstruct以及@PreDestroy。&nbsp;<br />
@Resource的作用相当于@Autowired，只不过@Autowired按byType自动注入，而@Resource默认按byName自动注入罢了。@Resource有两个属性是比较重要的，分别是name和type，Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不指定name也不指定type属性，这时将通过反射机制使用byName自动注入策略。&nbsp;<br />
@Resource装配顺序&nbsp;<br />
如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常<br />
如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常<br />
如果指定了type，则从上下文中找到类型匹配的唯一bean进行装配，找不到或者找到多个，都会抛出异常<br />
如果既没有指定name，又没有指定type，则自动按照byName方式进行装配（见2）；如果没有匹配，则回退为一个原始类型（UserDao）进行匹配，如果匹配则自动装配；</p>

<p>&nbsp;</p>

<p><strong>4 @PostConstruct（JSR-250）</strong>&nbsp;<br />
在方法上加上注解@PostConstruct，这个方法就会在Bean初始化之后被Spring容器执行（注：Bean初始化包括，实例化Bean，并装配Bean的属性（依赖注入））。&nbsp;<br />
它的一个典型的应用场景是，当你需要往Bean里注入一个其父类中定义的属性，而你又无法复写父类的属性或属性的setter方法时，如：&nbsp;</p>

<ol start="1">
	<li>public&nbsp;class&nbsp;UserDaoImpl&nbsp;extends&nbsp;HibernateDaoSupport&nbsp;implements&nbsp;UserDao&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;SessionFactory&nbsp;mySessionFacotry;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Resource&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setMySessionFacotry(SessionFactory&nbsp;sessionFacotry)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.mySessionFacotry&nbsp;=&nbsp;sessionFacotry;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@PostConstruct&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;injectSessionFactory()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.setSessionFactory(mySessionFacotry);&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;&nbsp;&nbsp;</li>
</ol>

<p><br />
这里通过@PostConstruct，为UserDaoImpl的父类里定义的一个sessionFactory私有属性，注入了我们自己定义的sessionFactory（父类的setSessionFactory方法为final，不可复写），之后我们就可以通过调用super.getSessionFactory()来访问该属性了。</p>

<p>&nbsp;</p>

<p><strong>5&nbsp;@PreDestroy（JSR-250）&nbsp;</strong><br />
在方法上加上注解@PreDestroy，这个方法就会在Bean初始化之后被Spring容器执行。由于我们当前还没有需要用到它的场景，这里不不去演示。其用法同@PostConstruct。</p>

<p>&nbsp;</p>

<p><strong>6&nbsp;使用&lt;context:annotation-config /&gt;简化配置&nbsp;</strong><br />
Spring2.1添加了一个新的context的Schema命名空间，该命名空间对注释驱动、属性文件引入、加载期织入等功能提供了便捷的配置。我们知道注释本身是不会做任何事情的，它仅提供元数据信息。要使元数据信息真正起作用，必须让负责处理这些元数据的处理器工作起来。&nbsp;</p>

<p>AutowiredAnnotationBeanPostProcessor和CommonAnnotationBeanPostProcessor就是处理这些注释元数据的处理器。但是直接在Spring配置文件中定义这些Bean显得比较笨拙。Spring为我们提供了一种方便的注册这些BeanPostProcessor的方式，这就是&lt;context:annotation-config /&gt;：</p>

<ol start="1">
	<li>&lt;beans&nbsp;xmlns=&quot;http://www.springframework.org/schema/beans&quot;&nbsp;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&nbsp;xmlns:context=&quot;http://www.springframework.org/schema/context&quot;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;context:annotation-config&nbsp;/&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&lt;/beans&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
</ol>

<p><br />
&lt;context:annotationconfig /&gt;将隐式地向Spring容器注册AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor、 PersistenceAnnotationBeanPostProcessor以及RequiredAnnotationBeanPostProcessor这4个BeanPostProcessor。</p>

<p>&nbsp;</p>

<p>使用Spring注解完成Bean的定义&nbsp;<br />
以上我们介绍了通过@Autowired或@Resource来实现在Bean中自动注入的功能，下面我们将介绍如何注解Bean，从而从XML配置文件中完全移除Bean定义的配置。</p>

<p>&nbsp;</p>

<p><strong>7&nbsp; @Component（不推荐使用）、@Repository、@Service、@Controller&nbsp;</strong><br />
只需要在对应的类上加上一个@Component注解，就将该类定义为一个Bean了：</p>

<ol start="1">
	<li>@Component&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;UserDaoImpl&nbsp;extends&nbsp;HibernateDaoSupport&nbsp;implements&nbsp;UserDao&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;&nbsp;</li>
</ol>

<p><br />
使用@Component注解定义的Bean，默认的名称（id）是小写开头的非限定类名。如这里定义的Bean名称就是userDaoImpl。你也可以指定Bean的名称：&nbsp;<br />
@Component(&quot;userDao&quot;)&nbsp;<br />
@Component是所有受Spring管理组件的通用形式，Spring还提供了更加细化的注解形式：@Repository、@Service、@Controller，它们分别对应存储层Bean，业务层Bean，和展示层Bean。目前版本（2.5）中，这些注解与@Component的语义是一样的，完全通用，在Spring以后的版本中可能会给它们追加更多的语义。所以，我们推荐使用@Repository、@Service、@Controller来替代@Component。&nbsp;</p>

<p>&nbsp;</p>

<p><strong>8&nbsp;使用&lt;context:component-scan /&gt;让Bean定义注解工作起来&nbsp;</strong></p>

<ol start="1">
	<li>&lt;beans&nbsp;xmlns=&quot;http://www.springframework.org/schema/beans&quot;&nbsp;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&nbsp;xmlns:context=&quot;http://www.springframework.org/schema/context&quot;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;context:component-scan&nbsp;base-package=&quot;com.kedacom.ksoa&quot;&nbsp;/&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&lt;/beans&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
</ol>

<p><br />
这里，所有通过&lt;bean&gt;元素定义Bean的配置内容已经被移除，仅需要添加一行&lt;context:component-scan /&gt;配置就解决所有问题了&mdash;&mdash;Spring XML配置文件得到了极致的简化（当然配置元数据还是需要的，只不过以注释形式存在罢了）。&lt;context:component-scan /&gt;的base-package属性指定了需要扫描的类包，类包及其递归子包中所有的类都会被处理。&nbsp;<br />
&lt;context:component-scan /&gt;还允许定义过滤器将基包下的某些类纳入或排除。Spring支持以下4种类型的过滤方式：&nbsp;<br />
过滤器类型 表达式范例 &nbsp;&nbsp;说明<br />
注解 org.example.SomeAnnotation将所有使用SomeAnnotation注解的类过滤出来<br />
类名指定 org.example.SomeClass过滤指定的类<br />
正则表达式 com\.kedacom\.spring\.annotation\.web\..*通过正则表达式过滤一些类<br />
AspectJ表达式 org.example..*Service+通过AspectJ表达式过滤一些类<br />
<br />
<br />
以正则表达式为例，我列举一个应用实例：</p>

<ol start="1">
	<li>&lt;context:component-scan&nbsp;base-package=&quot;com.casheen.spring.annotation&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;context:exclude-filter&nbsp;type=&quot;regex&quot;&nbsp;expression=&quot;com\.casheen\.spring\.annotation\.web\..*&quot;&nbsp;/&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&lt;/context:component-scan&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<p>值得注意的是&lt;context:component-scan /&gt;配置项不但启用了对类包进行扫描以实施注释驱动Bean定义的功能，同时还启用了注释驱动自动注入的功能（即还隐式地在内部注册了AutowiredAnnotationBeanPostProcessor和CommonAnnotationBeanPostProcessor），因此当使用&lt;context:component-scan /&gt;后，就可以将&lt;context:annotation-config /&gt;移除了.<br />
&nbsp;</p>

<p><strong>9 使用@Scope来定义Bean的作用范围&nbsp;</strong></p>

<p>在使用XML定义Bean时，我们可能还需要通过bean的scope属性来定义一个Bean的作用范围，我们同样可以通过@Scope注解来完成这项工作</p>

<ol start="1">
	<li>@Scope(&quot;session&quot;)&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>@Component()&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;UserSessionBean&nbsp;implements&nbsp;Serializable&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;&nbsp;</li>
</ol>

<p><br />
<strong>&nbsp;六 一个完整的例子</strong></p>

<p>为了加深印象，又增加了一个完整的例子。</p>

<p>例子来源&nbsp;</p>

<p><a href="http://blog.csdn.net/pk490525/article/details/8096326" target="_blank">http://blog.csdn.net/pk490525/article/details/8096326</a></p>

<p><a href="http://lib.csdn.net/base/javaee" target="_blank" title="Java EE知识库">spring</a>零配置（Annotation）学习笔记</p>

<p>&nbsp;</p>

<p>本地例子：</p>

<p>AnnotationTest</p>

<p>本地有细小的改变</p>

<p>project用到的jar包</p>

<p><img alt="" src="http://img.my.csdn.net/uploads/201211/08/1352355932_4314.png" /></p>

<p>&nbsp;</p>

<p>先上bean-config.xml</p>

<ol start="1">
	<li>&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;UTF-8&quot;?&gt;&nbsp;&nbsp;</li>
	<li>&lt;beans&nbsp;xmlns=&quot;http://www.springframework.org/schema/beans&quot;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmlns:context=&quot;http://www.springframework.org/schema/context&quot;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;context:annotation-config/&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;action暂未用注解&nbsp;--&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;myAction&quot;&nbsp;class=&quot;com.demo.annotation.action.MyAction&quot;&nbsp;scope=&quot;prototype&quot;&nbsp;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;注解测试&nbsp;&nbsp;&nbsp;--&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;context:component-scan&nbsp;base-package=&quot;com.demo.annotation&quot;&nbsp;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&lt;/beans&gt;&nbsp;&nbsp;</li>
</ol>

<p><br />
service 接口</p>

<ol start="1">
	<li>/**&nbsp;</li>
	<li>&nbsp;*&nbsp;&nbsp;</li>
	<li>&nbsp;*&nbsp;Annotation&nbsp;</li>
	<li>&nbsp;*&nbsp;</li>
	<li>&nbsp;*/&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>public&nbsp;interface&nbsp;TestService&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;注解测试&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getTestAnnotation();&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p><br />
service实现类</p>

<ol start="1">
	<li>import&nbsp;org.springframework.stereotype.Service;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>import&nbsp;com.demo.annotation.dao.TestDao;&nbsp;&nbsp;</li>
	<li>import&nbsp;org.springframework.beans.factory.annotation.Autowired;&nbsp;&nbsp;</li>
	<li>import&nbsp;org.springframework.beans.factory.annotation.Qualifier;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>/**&nbsp;</li>
	<li>&nbsp;*&nbsp;&nbsp;</li>
	<li>&nbsp;*&nbsp;注解测试&nbsp;</li>
	<li>&nbsp;*&nbsp;</li>
	<li>&nbsp;*/&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>@Service(&quot;testService&quot;)&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;TestServiceImp&nbsp;implements&nbsp;TestService&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;自动装配&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Autowired&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Qualifier(&quot;testDao&quot;)&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//@Resource(name=&quot;testDao&quot;),&nbsp;等价于&lt;property&nbsp;&hellip;&hellip;&hellip;&hellip;&nbsp;ref=&quot;testDao&quot;&nbsp;/&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;TestDao&nbsp;testDao;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;TestDao&nbsp;getTestDao()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;testDao;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setTestDao(TestDao&nbsp;testDao)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.testDao&nbsp;=&nbsp;testDao;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getTestAnnotation()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;Auto-generated&nbsp;method&nbsp;stub&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;testDao.getTestDaoAnnotation();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p><br />
dao接口</p>

<ol start="1">
	<li>/**&nbsp;</li>
	<li>&nbsp;*&nbsp;测试注解&nbsp;</li>
	<li>&nbsp;*&nbsp;</li>
	<li>&nbsp;*/&nbsp;&nbsp;</li>
	<li>public&nbsp;interface&nbsp;TestDao&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;得到dao层注解&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getTestDaoAnnotation();&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p><br />
dao层实现类</p>

<ol start="1">
	<li>import&nbsp;org.springframework.stereotype.Repository;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>/**&nbsp;</li>
	<li>&nbsp;*&nbsp;测试Annotation&nbsp;</li>
	<li>&nbsp;*&nbsp;</li>
	<li>&nbsp;*/&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>@Repository(&quot;testDao&quot;)&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;TestDaoImpl&nbsp;implements&nbsp;TestDao&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getTestDaoAnnotation()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;Auto-generated&nbsp;method&nbsp;stub&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;This&nbsp;is&nbsp;testDao&nbsp;Annotation...&quot;;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p><br />
Action类</p>

<ol start="1">
	<li>import&nbsp;javax.annotation.Resource;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>import&nbsp;com.demo.annotation.service.TestService;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;MyAction{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Resource(name=&quot;testService&quot;)&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;TestService&nbsp;testService;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;testAnnotation(){&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(null&nbsp;==&nbsp;testService){&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Service&nbsp;is&nbsp;null!!&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;result&nbsp;=&nbsp;testService.getTestAnnotation();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(result);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;success&quot;;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;TestService&nbsp;getTestService()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;testService;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setTestService(TestService&nbsp;testService)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.testService&nbsp;=&nbsp;testService;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p><br />
测试类</p>

<ol start="1">
	<li>import&nbsp;org.springframework.context.ApplicationContext;&nbsp;&nbsp;</li>
	<li>import&nbsp;org.springframework.context.support.ClassPathXmlApplicationContext;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>import&nbsp;com.demo.annotation.action.MyAction;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;TestAnnotation&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ApplicationContext&nbsp;context&nbsp;=&nbsp;new&nbsp;ClassPathXmlApplicationContext(&quot;bean-config.xml&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyAction&nbsp;action&nbsp;=&nbsp;(MyAction)context.getBean(&quot;myAction&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action.testAnnotation();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p><strong>七 总结</strong></p>

<p>Annotation的好处：</p>

<p>简化了xml文件</p>

<p>&nbsp;</p>

<p>坏处：</p>

<p>1 spring一直宣称是无侵入的，annotation是否是侵入了？</p>

<p>2 很多类都是pojo的对象，引入annotation后还是pojo么？</p>

<p>3 增加了复杂度</p>

<p>&nbsp;</p>

<p><strong>spring官方的态度是两种让你混合着用。</strong></p>
