<h2><a href="http://www.cnblogs.com/fangjian0423/p/spring-mybatis-MapperScannerConfigurer-analysis.html" id="cb_post_title_url">Spring与Mybatis整合的MapperScannerConfigurer处理过程源码分析</a></h2>

<p>本文将分析mybatis与spring整合的MapperScannerConfigurer的底层原理，之前已经分析过java中实现动态，可以使用jdk自带api和cglib第三方库生成动态代理。本文分析的mybatis版本3.2.7，mybatis-spring版本1.2.2。</p>

<h2>MapperScannerConfigurer介绍</h2>

<p><a href="https://mybatis.github.io/spring/zh/mappers.html#MapperScannerConfigurer">MapperScannerConfigurer</a>是spring和mybatis整合的mybatis-spring jar包中提供的一个类。</p>

<p>想要了解该类的作用，就得先了解<a href="https://mybatis.github.io/spring/zh/mappers.html#MapperFactoryBean">MapperFactoryBean</a>。</p>

<p>MapperFactoryBean的出现为了代替手工使用SqlSessionDaoSupport或SqlSessionTemplate编写数据访问对象(DAO)的代码,使用动态代理实现。</p>

<p>比如下面这个官方文档中的配置：</p>

<pre>
<code>&lt;bean id=&quot;userMapper&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt;
  &lt;property name=&quot;mapperInterface&quot; value=&quot;org.mybatis.spring.sample.mapper.UserMapper&quot; /&gt;
  &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot; /&gt;
&lt;/bean&gt;</code></pre>

<p>org.mybatis.spring.sample.mapper.UserMapper是一个接口，我们创建一个MapperFactoryBean实例，然后注入这个接口和sqlSessionFactory（mybatis中提供的SqlSessionFactory接口，MapperFactoryBean会使用SqlSessionFactory创建SqlSession）这两个属性。</p>

<p>之后想使用这个UserMapper接口的话，直接通过spring注入这个bean，然后就可以直接使用了，spring内部会创建一个这个接口的动态代理。</p>

<p>当发现要使用多个MapperFactoryBean的时候，一个一个定义肯定非常麻烦，于是mybatis-spring提供了MapperScannerConfigurer这个类，它将会查找类路径下的映射器并自动将它们创建成MapperFactoryBean。</p>

<pre>
<code>&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;
  &lt;property name=&quot;basePackage&quot; value=&quot;org.mybatis.spring.sample.mapper&quot; /&gt;
&lt;/bean&gt;</code></pre>

<p>这段配置会扫描org.mybatis.spring.sample.mapper下的所有接口，然后创建各自接口的动态代理类。</p>

<h2>MapperScannerConfigurer底层代码分析</h2>

<p>以以下代码为示例进行讲解(部分代码，其他代码及配置省略)：</p>

<pre>
<code>package org.format.dynamicproxy.mybatis.dao;
public interface UserDao {
    public User getById(int id);
    public int add(User user);    
    public int update(User user);    
    public int delete(User user);    
    public List&lt;User&gt; getAll();    
}

&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;
    &lt;property name=&quot;basePackage&quot; value=&quot;org.format.dynamicproxy.mybatis.dao&quot;/&gt;
    &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&gt;
&lt;/bean&gt;</code></pre>

<p>我们先通过测试用例debug查看userDao的实现类到底是什么。<br />
<img src="http://images.cnblogs.com/cnblogs_com/fangjian0423/603237/o_mybatis1.png" style="width:800px" /><br />
我们可以看到，userDao是1个MapperProxy类的实例。<br />
看下MapperProxy的源码，没错，实现了InvocationHandler，说明使用了jdk自带的动态代理。</p>

<pre>
<code>public class MapperProxy&lt;T&gt; implements InvocationHandler, Serializable {

  private static final long serialVersionUID = -6424540398559729838L;
  private final SqlSession sqlSession;
  private final Class&lt;T&gt; mapperInterface;
  private final Map&lt;Method, MapperMethod&gt; methodCache;

  public MapperProxy(SqlSession sqlSession, Class&lt;T&gt; mapperInterface, Map&lt;Method, MapperMethod&gt; methodCache) {
    this.sqlSession = sqlSession;
    this.mapperInterface = mapperInterface;
    this.methodCache = methodCache;
  }

  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
    if (Object.class.equals(method.getDeclaringClass())) {
      try {
        return method.invoke(this, args);
      } catch (Throwable t) {
        throw ExceptionUtil.unwrapThrowable(t);
      }
    }
    final MapperMethod mapperMethod = cachedMapperMethod(method);
    return mapperMethod.execute(sqlSession, args);
  }

  private MapperMethod cachedMapperMethod(Method method) {
    MapperMethod mapperMethod = methodCache.get(method);
    if (mapperMethod == null) {
      mapperMethod = new MapperMethod(mapperInterface, method, sqlSession.getConfiguration());
      methodCache.put(method, mapperMethod);
    }
    return mapperMethod;
  }

}</code></pre>

<h3>下面开始分析MapperScannerConfigurer的源码</h3>

<p>MapperScannerConfigurer实现了BeanDefinitionRegistryPostProcessor接口，BeanDefinitionRegistryPostProcessor接口是一个可以修改spring工长中已定义的bean的接口，该接口有个postProcessBeanDefinitionRegistry方法。<br />
<img src="http://images.cnblogs.com/cnblogs_com/fangjian0423/603237/o_mybatis2.png" style="width:800px" /></p>

<p>然后我们看下ClassPathMapperScanner中的关键是如何扫描对应package下的接口的。<br />
<img src="http://images.cnblogs.com/cnblogs_com/fangjian0423/603237/o_mybatis3.png" style="width:800px" /></p>

<p>其实MapperScannerConfigurer的作用也就是将对应的接口的类型改造为MapperFactoryBean，而这个MapperFactoryBean的属性mapperInterface是原类型。MapperFactoryBean本文开头已分析过。</p>

<p>所以最终我们还是要分析MapperFactoryBean的实现原理！</p>

<p>MapperFactoryBean继承了SqlSessionDaoSupport类，SqlSessionDaoSupport类继承DaoSupport抽象类，DaoSupport抽象类实现了InitializingBean接口，因此实例个MapperFactoryBean的时候，都会调用InitializingBean接口的afterPropertiesSet方法。</p>

<p>DaoSupport的afterPropertiesSet方法：<br />
<img src="http://images.cnblogs.com/cnblogs_com/fangjian0423/603237/o_mybatis4.png" style="width:800px" /><br />
MapperFactoryBean重写了checkDaoConfig方法：<br />
<img src="http://images.cnblogs.com/cnblogs_com/fangjian0423/603237/o_mybatis5.png" style="width:800px" /><br />
然后通过spring工厂拿对应的bean的时候：<br />
<img src="http://images.cnblogs.com/cnblogs_com/fangjian0423/603237/o_mybatis6.png" style="width:800px" /><br />
这里的SqlSession是SqlSessionTemplate，SqlSessionTemplate的getMapper方法：<br />
<img src="http://images.cnblogs.com/cnblogs_com/fangjian0423/603237/o_mybatis7.png" style="width:800px" /><br />
Configuration的getMapper方法，会使用MapperRegistry的getMapper方法：<br />
<img src="http://images.cnblogs.com/cnblogs_com/fangjian0423/603237/o_mybatis8.png" style="width:800px" /><br />
MapperRegistry的getMapper方法：<br />
<img src="http://images.cnblogs.com/cnblogs_com/fangjian0423/603237/o_mybatis9.png" style="width:800px" /><br />
MapperProxyFactory构造MapperProxy：<br />
<img src="http://images.cnblogs.com/cnblogs_com/fangjian0423/603237/o_mybatis10.png" style="width:800px" /><br />
<strong>没错！ MapperProxyFactory就是使用了jdk组带的Proxy完成动态代理。</strong><br />
MapperProxy本来一开始已经提到。MapperProxy内部使用了MapperMethod类完成方法的调用：<br />
<img src="http://images.cnblogs.com/cnblogs_com/fangjian0423/603237/o_mybatis11.png" style="width:800px" /></p>

<p>下面，我们以UserDao的getById方法来debug看看MapperMethod的execute方法是如何走的。</p>

<pre>
<code>@Test
public void testGet() {
    int id = 1;
    System.out.println(userDao.getById(id));
}
&lt;select id=&quot;getById&quot; parameterType=&quot;int&quot; resultType=&quot;org.format.dynamicproxy.mybatis.bean.User&quot;&gt;
    SELECT * FROM users WHERE id = #{id}
&lt;/select&gt;</code></pre>

<p><img src="http://images.cnblogs.com/cnblogs_com/fangjian0423/603237/o_mybatis12.png" style="width:800px" /><br />
<img src="http://images.cnblogs.com/cnblogs_com/fangjian0423/603237/o_mybatis13.png" style="width:800px" /></p>

<p>示例代码：<a href="https://github.com/fangjian0423/dynamic-proxy-mybatis-study">https://github.com/fangjian0423/dynamic-proxy-mybatis-study</a></p>

<h2>总结</h2>

<p>来到了新公司，接触了Mybatis，以前接触过～ 但是接触的不深入，突然发现spring与mybatis整合之后可以只写个接口而不实现，spring默认会帮我们实现，然后觉得非常神奇，于是写了篇<a href="http://www.cnblogs.com/fangjian0423/p/java-dynamic-proxy.html">java动态代码浅析</a>和本文。</p>

<h2>参考资料</h2>

<p><a href="https://mybatis.github.io/spring/zh/mappers.html">https://mybatis.github.io/spring/zh/mappers.html</a></p>

<p>&nbsp;</p>

<h2><a href="http://www.cnblogs.com/fangjian0423/p/java-dynamic-proxy.html" id="cb_post_title_url">java动态代理浅析</a></h2>

<p>最近在公司看到了mybatis与spring整合中MapperScannerConfigurer的使用，该类通过反向代理自动生成基于接口的动态代理类。</p>

<p>于是想起了java的动态代理，然后就有了这篇文章。</p>

<p>本文使用动态代理模拟处理事务的拦截器。</p>

<p>接口：</p>

<pre>
<code>public interface UserService {
    public void addUser();
    public void removeUser();
    public void searchUser();
}</code></pre>

<p>实现类：</p>

<pre>
<code>public class UserServiceImpl implements UserService {
    public void addUser() {
        System.out.println(&quot;add user&quot;);
    }
    public void removeUser() {
        System.out.println(&quot;remove user&quot;);
    }
    public void searchUser() {
        System.out.println(&quot;search user&quot;);
    }
}</code></pre>

<h2>java动态代理的实现有2种方式</h2>

<h3>1.jdk自带的动态代理</h3>

<p>使用jdk自带的动态代理需要了解InvocationHandler接口和Proxy类，他们都是在java.lang.reflect包下。</p>

<p>InvocationHandler介绍：</p>

<p>InvocationHandler是代理实例的调用处理程序实现的接口。</p>

<p>每个代理实例都具有一个关联的InvocationHandler。对代理实例调用方法时，这个方法会调用InvocationHandler的invoke方法。</p>

<p>Proxy介绍：</p>

<p>Proxy 提供静态方法用于创建动态代理类和实例。</p>

<p>实例(模拟AOP处理事务)：</p>

<pre>
<code>public class TransactionInterceptor implements InvocationHandler {

    private Object target;

    public void setTarget(Object target) {
        this.target = target;
    }
    
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println(&quot;start Transaction&quot;);
        method.invoke(target, args);
        System.out.println(&quot;end Transaction&quot;);
        return null;
    }

}</code></pre>

<p>测试代码：</p>

<pre>
<code>public class TestDynamicProxy {

    @Test
    public void testJDK() {
        TransactionInterceptor transactionInterceptor = new TransactionInterceptor();
        UserService userService = new UserServiceImpl();
        transactionInterceptor.setTarget(userService);
        UserService userServiceProxy =
                (UserService) Proxy.newProxyInstance(
                        userService.getClass().getClassLoader(),
                        userService.getClass().getInterfaces(),
                        transactionInterceptor);
        userServiceProxy.addUser();
    }

}</code></pre>

<p>测试结果：</p>

<pre>
<code>start Transaction
add user
end Transaction</code></pre>

<p>很明显，我们通过userServiceProxy这个代理类进行方法调用的时候，会在方法调用前后进行事务的开启和关闭。</p>

<h3>2. 第三方库cglib</h3>

<p>CGLIB是一个功能强大的，高性能、高质量的代码生成库，用于在运行期扩展Java类和实现Java接口。</p>

<p>它与JDK的动态代理的之间最大的区别就是：</p>

<p><strong>JDK动态代理是针对接口的，而cglib是针对类来实现代理的，cglib的原理是对指定的目标类生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类进行代理。</strong></p>

<p>实例：</p>

<pre>
<code>public class UserServiceCallBack implements MethodInterceptor {

    @Override
    public Object intercept(Object o, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println(&quot;start Transaction by cglib&quot;);
        methodProxy.invokeSuper(o, args);
        System.out.println(&quot;end Transaction by cglib&quot;);
        return null;
    }

}</code></pre>

<p>测试代码：</p>

<pre>
<code>public class TestDynamicProxy {

    @Test
    public void testCGLIB() {
        Enhancer enhancer = new Enhancer();
        enhancer.setSuperclass(UserServiceImpl.class);
        enhancer.setCallback(new UserServiceCallBack());
        UserServiceImpl proxy = (UserServiceImpl)enhancer.create();
        proxy.addUser();
    }

}</code></pre>

<p>测试结果：</p>

<pre>
<code>start Transaction by cglib
add user
end Transaction by cglib</code></pre>

<h2>结束语</h2>

<p>简单讲解了JDK和cglib这2个动态代理，之后会再写篇文章讲讲MapperScannerConfigurer的原理实现。</p>
