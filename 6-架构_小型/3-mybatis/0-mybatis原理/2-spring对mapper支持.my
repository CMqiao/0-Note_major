<h1>Mybatis中SqlMapper配置</h1>

<h2>四、在Mybatis中的SqlMapper使用SpEL表达式</h2>

<h2>1.SpEL工具类</h2>

<p>SpEL就是Spring提供的EL表达式，虽然到Spring3才开始推出，但已经是Spring的一个基础核心模块了，地位已经差不多等同于IoC和AOP了。SpEL和OGNL类似，也有表达式、上下文环境、root对象等概念，但和OGNL不同的是，SpEL还提供了访问Spring中bean的能力&mdash;&mdash;这是非常强悍的，试问一个Spring应用有多少类不是Spring管理的呢？具体的SpEL语法细节可以参考Spring的官方文档。<br />
SpEL目前主要应用于Spring的配置，使用起来非常方便，但是在Java类中使用则比较繁琐，稍微实用一点的例子都需要创建解析器实例、创建执行环境、解析表达式、对表达式求值等步骤，如果需要访问Spring的Bean，还要设置BeanFactoryResolver等，因此，为了简化SpEL在Java中的应用，我编写了一个SpEL的帮助类：<br />
<img alt="" src="http://images2015.cnblogs.com/blog/433373/201611/433373-20161119180155638-1702550935.png" /><br />
这个工具类分成四个部分：</p>

<ol>
	<li>实现ApplicationContextAware接口，注入ApplicationContext(BeanFactory)对象</li>
	<li>表达式求值方法
	<ul>
		<li>对表达式简单求值（还可指定返回的目标类型）</li>
		<li>指定root对象，对表达式求值（还可指定返回的目标类型）</li>
		<li>指定root对象和其它变量，对表达式求值（还可指定返回的目标类型）</li>
	</ul>
	</li>
	<li>表达式设置方法
	<ul>
		<li>设置表达式的值</li>
		<li>指定root对象，设置表达式的值</li>
		<li>指定root对象和其它变量，设置表达式的值</li>
	</ul>
	</li>
	<li>变量管理方法
	<ul>
		<li>添加变量</li>
		<li>移除变量</li>
	</ul>
	</li>
</ol>

<p>此外，还内置了一个保护变量Tool。<br />
编写一个测试类验证一下：</p>

<pre>
<code>@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations={
    &quot;classpath:applicationContext.xml&quot;  
})
@Component  // 该测试类本身作为一个Spring管理的bean，便于后面的测试
public class SpringHelpTest {
    
    public String getBeanValue(String arg){//bean的一个方法
        return &quot;beanValue:&quot;+arg;
    }

    @Test
    public void testSpelHelp(){
        // 准备root对象 {key1 : &#39;root-value1&#39;, key2 : &#39;root-value2&#39;}
        Root root = new Root(&quot;root-value1&quot;, &quot;root-value2&quot;);
        // 准备一般变量
        Map&lt;String, Object&gt; vars = new HashMap&lt;String, Object&gt;();
        vars.put(&quot;var1&quot;, &quot;value1&quot;);
        vars.put(&quot;var2&quot;, &quot;value2&quot;);
        // 直接计算简单表达式
        Object rs = SpringHelp.evaluate(&quot;1+2&quot;);
        Assert.assertEquals(3, rs);
        // 按指定类型计算简单表达式
        rs = SpringHelp.evaluate(&quot;1+2&quot;, String.class);
        Assert.assertEquals(&quot;3&quot;, rs);
        // 访问root对象的属性
        rs = SpringHelp.evaluate(root, &quot;key1&quot;);
        Assert.assertEquals(&quot;root-value1&quot;, rs);
        // 访问一般变量
        rs = SpringHelp.evaluate(root, &quot;#var2&quot;, vars);
        Assert.assertEquals(&quot;value2&quot;, rs);
        // 访问root对象
        rs = SpringHelp.evaluate(root, &quot;#root&quot;, vars);
        Assert.assertTrue(rs == root);
        // 访问Spring管理的bean，同时传入的参数又是root对象的属性
        rs = SpringHelp.evaluate(root, &quot;@springHelpTest.getBeanValue(key2)&quot;, vars);
        Assert.assertEquals(&quot;beanValue:root-value2&quot;, rs);
        // 设置root对象的属性
        SpringHelp.setValue(root, &quot;key1&quot;, &quot;new-root-value1&quot;);
        rs = SpringHelp.evaluate(root, &quot;key1&quot;);
        Assert.assertEquals(&quot;new-root-value1&quot;, rs);
        //访问工具类，其中Tool.DATE.getDate()的作用是获取当前日期
        rs = SpringHelp.evaluate(&quot;#Tool.DATE.getDate()&quot;);
        Assert.assertEquals(Tool.DATE.getDate(), rs);
    }
    
    public class Root{
        String key1;
        String key2;
        Root(String key1, String key2){
            this.key1 = key1;
            this.key2 = key2;
        }
        // 省略getter/setter方法
    }
}</code></pre>

<p>有了这个静态帮助类，在Java中使用SpEL就方便很多了。</p>

<h2>2.编写表达式处理器</h2>

<p>利用SpEL帮助类，编写表达式处理器IExpressionHandler的实现，具体逻辑参看代码中的注释</p>

<pre>
<code>public class SpelExpressionHandler implements IExpressionHandler {
    
    /**
     * 直接返回true，也就是说不做进一步判断，支持所有的${(exp)}、#{(exp)}内的表达式
     * 由于支持所有表达式，实际上起到了一种拦截作用，所以需要注意，注册该实现时必须最低优先级
     */
    @Override
    public boolean isSupport(String expression) {
        return true;
    }

    /**
     * 对SqlMapper配置中的表达式求值
     */
    @Override
    public Object eval(String expression, Object parameter, String databaseId) {
        /**
         * 如果以spel:为前缀，则将mybatis包装后的参数、数据库id以及表达式自身一起封装一个新的root对象
         * 因此在exp表达式中可以通过params.paramName、databaseId等形式访问
         */
        if(expression.toLowerCase().startsWith(&quot;spel:&quot;)){
            expression = expression.substring(5);
            Root root = new Root(parameter, databaseId, expression);
            return SpringHelp.evaluate(root, expression);
        }
        /**
         * 否则将databaseId作为一个特殊名称的变量
         * 因此在exp表达式中可以通过paramName、#databaseId等形式访问
         */
        else{
            Map&lt;String, Object&gt; vars = new HashMap&lt;String, Object&gt;();
            vars.put(&quot;databaseId&quot;, databaseId);
            return SpringHelp.evaluate(parameter, expression, vars);
        }
    }
    
    public class Root {

        private final Object params;
        private final String databaseId;
        private final String expression;

        public Root(Object params, String databaseId, String expression) {
            this.params = params;
            this.databaseId = databaseId;
            this.expression = expression;
        }

        // 省略getter/setter方法
    }
}</code></pre>

<h2>3.注册表达式处理器</h2>

<p>如上面的注释，注册的时候需要注意一点，优先级要最低，以避免所有表达式都被拦截，导致其它的处理器不生效。<br />
保证优先级最低，有一种方法，就是实现Spring中的Order接口，并且将该实现类的order值设置为最大，然后按Order排序；另外一种方法，就是干脆另起炉灶，单独一个属性保存默认处理器，只有其它处理器都不支持的时候才使用默认处理器，请看下面的代码：</p>

<pre>
<code>/**
 * 表达式处理器
 */
private static final Set&lt;IExpressionHandler&gt; expressions = new LinkedHashSet&lt;IExpressionHandler&gt;();
/**
 * 默认表达式处理器
 */
private static final IExpressionHandler defaultExpressionHandler = new SpelExpressionHandler();
/**
 * 获取表达式处理器
 * @param node
 * @return
 */
public static IExpressionHandler getExpressionHandler(String expression){
    for(IExpressionHandler handler : expressions){
        if(handler.isSupport(expression)){
            return handler;
        }
    }
    return defaultExpressionHandler;
}</code></pre>

<h2>4.修改SqlMapper中配置</h2>

<pre>
<code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;mapper xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; 
    xmlns=&quot;http://dysd.org/schema/sqlmapper&quot;
    xmlns:e=&quot;http://dysd.org/schema/sqlmapper-extend&quot;
    xsi:schemaLocation=&quot;http://dysd.org/schema/sqlmapper http://dysd.org/schema/sqlmapper.xsd
        http://dysd.org/schema/sqlmapper-extend http://dysd.org/schema/sqlmapper-extend.xsd&quot;
    namespace=&quot;org.dysd.dao.mybatis.mapper.IExampleDao&quot;&gt;
    
    &lt;select id=&quot;selectString&quot; resultType=&quot;string&quot;&gt;
        select PARAM_NAME, ${(@spelBean.param(paramName))} AS TEST_SPEL
          from BF_PARAM_ENUM_DEF
         where PARAM_NAME $like{#{(spel:@spelBean.root(#root,params.paramName)), jdbcType=VARCHAR}}
         order by SEQNO
    &lt;/select&gt;
&lt;/mapper&gt;</code></pre>

<h2>5.编写配置中的bean</h2>

<pre>
<code>@Component(&quot;spelBean&quot;)
public class SpelBean {

    public String param(String paramName){
        // 测试的是${()}，所以返回结果中添加单引号
        return &quot;&#39;PARAM-&quot;+paramName+&quot;&#39;&quot;;
    }
    
    public String root(SpelExpressionHandler.Root root,String paramName){
        // 测试spel:为前缀的表达式，所以可以直接访问SpelExpressionHandler.Root对象
        return &quot;ROOT-&quot;+root.getDatabaseId()+&quot;-&quot;+paramName;
    }
}</code></pre>

<h2>6.编写Dao接口</h2>

<pre>
<code>@Repository
public interface IExampleDao {
    
    public String selectString(@Param(&quot;paramName&quot;)String paramName);
}</code></pre>

<h2>7.编写JUnit测试类</h2>

<pre>
<code>@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations={
    &quot;classpath:spring/applicationContext.xml&quot;   
})
@Service
public class ExampleDaoTest{

    @Resource
    private IExampleDao dao;
    
    @Test
    public void testSelectString(){
        try {
            String a = dao.selectString(&quot;DISPLAY_AREA&quot;);
            Assert.assertEquals(&quot;显示区域&quot;, a);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}</code></pre>

<h2>8.执行测试</h2>

<pre>
<code>20161119 19:00:44,298 [main]-[DEBUG] ==&gt;  Preparing: select PARAM_NAME, &#39;PARAM-DISPLAY_AREA&#39; AS TEST_SPEL from BF_PARAM_ENUM_DEF where PARAM_NAME LIKE CONCAT(&#39;%&#39;,?,&#39;%&#39;) order by SEQNO 
20161119 19:00:48,001 [main]-[DEBUG] ==&gt; Parameters: ROOT-MySQL-DISPLAY_AREA(String)</code></pre>

<p>可以看到，无论是${(exp)}还是#{(exp)}，其中的exp都已经得到正确的解析了。</p>

<p>在SqlMapper中可以调用Spring的Bean，大大丰富了SqlMapper的表达能力，但是对于${(exp)}这种情形，由于是字符串的简单替换，也存在SQL注入的风险，因此一般只使用#{(exp)}。</p>
