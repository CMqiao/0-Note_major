<h1>Mybatis 动态sql</h1>

<p>　　传统的使用JDBC的方法，相信大家在组合复杂的的SQL语句的时候，需要去拼接，稍不注意哪怕少了个空格，都会导致错误。Mybatis的动态SQL功能正是为了解决这种问题， 其通过 if, choose, when, otherwise, trim, where, set, foreach标签，可组合成非常灵活的SQL语句，从而提高开发人员的效率。下面就去感受Mybatis动态SQL的魅力吧：</p>

<h2><strong>1. if:</strong></h2>

<p><strong>你们能判断，我也能判断！</strong></p>

<p>作为程序猿，谁不懂 if ! &nbsp;在mybatis中也能用 if 啦</p>

<pre>
&lt;select id=&quot;findUserById&quot; resultType=&quot;user&quot;&gt;
           select * from user where 
           &lt;if test=&quot;id != null&quot;&gt;
               id=#{id}
           &lt;/if&gt;
            and deleteFlag=0;
&lt;/select&gt;
</pre>

<p>上面例子： 如果传入的id 不为空， 那么才会SQL才拼接id = #{id}。 这个相信大家看一样就能明白，不多说。</p>

<p>细心的人会发现一个问题：&ldquo;你这不对啊！ 要是你传入的id为null, &nbsp;那么你这最终的SQL语句不就成了 select * from user where and deleteFlag=0, &nbsp;这语句有问题！&rdquo;</p>

<p>是啊，这时候，mybatis的 where 标签就该隆重登场啦：</p>

<p>&nbsp;</p>

<h2><strong>2. where</strong></h2>

<p><strong>有了我，SQL语句拼接条件神马的都是浮云！</strong></p>

<p>咱们通过where改造一下上面的例子：</p>

<pre>
&lt;select id=&quot;findUserById&quot; resultType=&quot;user&quot;&gt;
           select * from user 
           &lt;where&gt;
               &lt;if test=&quot;id != null&quot;&gt;
                   id=#{id}
               &lt;/if&gt;
               and deleteFlag=0;
           &lt;/where&gt;
 &lt;/select&gt;
</pre>

<p>有些人就要问了： &ldquo;你这都是些什么玩意儿！ 跟上面的相比， 不就是多了个where标签嘛！ 那这个还会不会出现 &nbsp;select * from user where and deleteFlag=0 ？&rdquo;</p>

<p>的确，从表面上来看，就是多了个where标签而已， 不过实质上， mybatis是对它做了处理，当它遇到AND或者OR这些，它知道怎么处理。其实我们可以通过 trim 标签去自定义这种处理规则。</p>

<p>&nbsp;</p>

<h2><strong>3. trim</strong></h2>

<p><strong>我的地盘，我做主！</strong></p>

<p>上面的where标签，其实用trim 可以表示如下：</p>

<pre>
&lt;trim prefix=&quot;WHERE&quot; prefixOverrides=&quot;AND |OR &quot;&gt;
  ... 
&lt;/trim&gt;</pre>

<p>它的意思就是： 当WHERE后紧随AND或则OR的时候，就去除AND或者OR。 除了WHERE以外， 其实还有一个比较经典的实现，那就是SET。</p>

<p>&nbsp;</p>

<h2><strong>4. set</strong></h2>

<p><strong>信我，不出错！</strong></p>

<pre>
&lt;update id=&quot;updateUser&quot; parameterType=&quot;com.dy.entity.User&quot;&gt;
           update user set 
           &lt;if test=&quot;name != null&quot;&gt;
               name = #{name},
           &lt;/if&gt; 
           &lt;if test=&quot;password != null&quot;&gt;
               password = #{password},
           &lt;/if&gt; 
           &lt;if test=&quot;age != null&quot;&gt;
               age = #{age}
           &lt;/if&gt; 
           &lt;where&gt;
               &lt;if test=&quot;id != null&quot;&gt;
                   id = #{id}
               &lt;/if&gt;
               and deleteFlag = 0;
           &lt;/where&gt;
&lt;/update&gt;
</pre>

<p>问题又来了： &ldquo;如果我只有name不为null, &nbsp;那么这SQL不就成了 update set name = #{name}, where ........ ? &nbsp;你那name后面那逗号会导致出错啊！&rdquo;</p>

<p>是的，这时候，就可以用mybatis为我们提供的set 标签了。下面是通过set标签改造后：</p>

<pre>
&lt;update id=&quot;updateUser&quot; parameterType=&quot;com.dy.entity.User&quot;&gt;
           update user
        &lt;set&gt;
          &lt;if test=&quot;name != null&quot;&gt;name = #{name},&lt;/if&gt; 
             &lt;if test=&quot;password != null&quot;&gt;password = #{password},&lt;/if&gt; 
             &lt;if test=&quot;age != null&quot;&gt;age = #{age},&lt;/if&gt; 
        &lt;/set&gt;
           &lt;where&gt;
               &lt;if test=&quot;id != null&quot;&gt;
                   id = #{id}
               &lt;/if&gt;
               and deleteFlag = 0;
           &lt;/where&gt;
&lt;/update&gt;
</pre>

<p>这个用trim 可表示为：</p>

<pre>
&lt;trim prefix=&quot;SET&quot; suffixOverrides=&quot;,&quot;&gt;
  ...
&lt;/trim&gt;</pre>

<p>WHERE是使用的&nbsp;prefixOverrides（前缀）， SET是使用的&nbsp;suffixOverrides （后缀）， 看明白了吧！</p>

<p>&nbsp;</p>

<h2><strong>5. foreach</strong></h2>

<p><strong>你有for, 我有foreach, 不要以为就你才屌！</strong></p>

<p>java中有for, 可通过for循环， 同样， mybatis中有foreach, 可通过它实现循环，循环的对象当然主要是java容器和数组。</p>

<pre>
&lt;select id=&quot;selectPostIn&quot; resultType=&quot;domain.blog.Post&quot;&gt;
  SELECT *
  FROM POST P
  WHERE ID in
  &lt;foreach item=&quot;item&quot; index=&quot;index&quot; collection=&quot;list&quot;
      open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;
        #{item}
  &lt;/foreach&gt;
&lt;/select&gt;
</pre>

<p>将一个 List 实例或者数组作为参数对象传给 MyBatis，当这么做的时候，MyBatis 会自动将它包装在一个 Map 中并以名称为键。List 实例将会以&ldquo;list&rdquo;作为键，而数组实例的键将是&ldquo;array&rdquo;。同样， 当循环的对象为map的时候，index其实就是map的key。</p>

<p>&nbsp;</p>

<h2><strong>6.&nbsp;choose</strong></h2>

<p><strong>我选择了你，你选择了我！</strong></p>

<p>Java中有switch, &nbsp;mybatis有choose。</p>

<pre>
&lt;select id=&quot;findActiveBlogLike&quot;
     resultType=&quot;Blog&quot;&gt;
  SELECT * FROM BLOG WHERE state = &lsquo;ACTIVE&rsquo;
  &lt;choose&gt;
    &lt;when test=&quot;title != null&quot;&gt;
      AND title like #{title}
    &lt;/when&gt;
    &lt;when test=&quot;author != null and author.name != null&quot;&gt;
      AND author_name like #{author.name}
    &lt;/when&gt;
    &lt;otherwise&gt;
      AND featured = 1
    &lt;/otherwise&gt;
  &lt;/choose&gt;
&lt;/select&gt;
</pre>

<p>以上例子中： 当title和author都不为null的时候， 那么选择二选一（前者优先）， 如果都为null, 那么就选择 otherwise中的， 如果tilte和author只有一个不为null, 那么就选择不为null的那个。</p>

<p>纵观mybatis的动态SQL， 强大而简单， 相信大家简单看一下就能使用了。</p>

<p>好啦，本次就写到这！下篇文章将结合mybatis的源码分析一次sql语句执行的整个过程。</p>
