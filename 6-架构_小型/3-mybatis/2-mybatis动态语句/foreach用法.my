<h1>mybatis动态sql之foreach用法</h1>

<h2>一、介绍：&nbsp;</h2>

<p>&nbsp;foreach主要是用于一个循环，大部分用到的是循环的生成sql，下面说一下动态foreach的属性：<br />
&nbsp; foreach元素的属性主要有item，index，collection，open，separator，close。<br />
&nbsp; 1、collection表示如何来得到这个集合，如果传入的直接为一个List，那么collection值就为list，如果直接传入的为一个array不可变数组，那么collection值就为array，如果传入的为一个dto，比如dto里面的array变量名为idLists，那么collection的值就为idLists。<br />
&nbsp; 2、item表示集合中每一个元素进行迭代时的别名，比如item为value，那么，每次获取的都使用#{value}即可<br />
&nbsp; 3、index指定一个名字，用于表示在迭代过程中，每次迭代到的位置，一般很少使用这个<br />
&nbsp; 4、open表示该语句以什么开始<br />
&nbsp; 5、separator表示在每次进行迭代之间以什么符号作为分隔符<br />
&nbsp; 6、close表示以什么结束</p>

<h2>二、原理：</h2>

<p>动态SQL，最后都会根据条件拼成SQL，foreach也不例外，原理为：<br />
首先根据collection来得到集合，然后写入open字符，然后开始遍历：<br />
每次遍历，都会执行里面的条件得到生成的sql，然后加入separator，遍历完成之后，加入close字符。</p>

<h2>三、实战：</h2>

<p><a href="http://www.cnblogs.com/fangyu19900812/p/6046209.html" id="cb_post_title_url">mybatis 中 foreach collection的三种用法</a><br />
<br />
在使用foreach的时候最关键的也是最容易出错的就是collection属性，该属性是必须指定的，但是在不同情况 下，该属性的值是不一样的，主要有一下3种情况：</p>

<p>&nbsp; &nbsp; 1. 如果传入的是单参数且参数类型是一个List的时候，collection属性值为list<br />
&nbsp;&nbsp;&nbsp;&nbsp;2. 如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array<br />
&nbsp;&nbsp;&nbsp;&nbsp;3. 如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了，当然单参数也可</p>

<p>以封装成map，实际上如果你在传入参数的时候，在breast里面也是会把它封装成一个Map的，map的key就是参数名，所以这个时候collection属性值就是传入的List或array对象在自己封装的map里面的key 下面分别来看看上述三种情况的示例代码：<br />
1.单参数List的类型：<br />
&nbsp;&nbsp;</p>

<pre>
1 &lt;select id=&quot;dynamicForeachTest&quot; resultType=&quot;Blog&quot;&gt;
2           select * from t_blog where id in
3        &lt;foreach collection=&quot;list&quot; index=&quot;index&quot; item=&quot;item&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;
4                #{item}       
5        &lt;/foreach&gt;    
6    &lt;/select&gt;</pre>

<p>&nbsp;</p>

<p><br />
上述collection的值为list，对应的Mapper是这样的<br />
public List dynamicForeachTest(List ids);<br />
测试代码：</p>

<pre>
 1 @Test
 2     public void dynamicForeachTest() {
 3         SqlSession session = Util.getSqlSessionFactory().openSession();      
 4         BlogMapper blogMapper = session.getMapper(BlogMapper.class);
 5          List ids = new ArrayList();
 6          ids.add(1);
 7          ids.add(3);
 8          ids.add(6);
 9         List blogs = blogMapper.dynamicForeachTest(ids);
10          for (Blog blog : blogs)
11              System.out.println(blog);
12          session.close();
13      }

2.单参数array数组的类型：</pre>

<pre>
1 &lt;select id=&quot;dynamicForeach2Test&quot; resultType=&quot;Blog&quot;&gt;
2     select * from t_blog where id in
3     &lt;foreach collection=&quot;array&quot; index=&quot;index&quot; item=&quot;item&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;
4          #{item}
5     &lt;/foreach&gt;
6 &lt;/select&gt;    </pre>

<p>&nbsp;</p>

<p><br />
上述collection为array，对应的Mapper代码：<br />
public List dynamicForeach2Test(int[] ids);<br />
对应的测试代码：</p>

<pre>
 1 @Test
 2 public void dynamicForeach2Test() {
 3         SqlSession session = Util.getSqlSessionFactory().openSession();
 4         BlogMapper blogMapper = session.getMapper(BlogMapper.class);
 5         int[] ids = new int[] {1,3,6,9};
 6         List blogs = blogMapper.dynamicForeach2Test(ids);
 7         for (Blog blog : blogs)
 8         System.out.println(blog);    
 9         session.close();
10 }</pre>

<p><br />
3.自己把参数封装成Map的类型</p>

<pre>
1 &lt;select id=&quot;dynamicForeach3Test&quot; resultType=&quot;Blog&quot;&gt;
2         select * from t_blog where title like &quot;%&quot;#{title}&quot;%&quot; and id in
3          &lt;foreach collection=&quot;ids&quot; index=&quot;index&quot; item=&quot;item&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;
4               #{item}
5          &lt;/foreach&gt;
6 &lt;/select&gt;

上述collection的值为ids，是传入的参数Map的key，对应的Mapper代码：
public List dynamicForeach3Test(Map params);
对应测试代码：
</pre>

<pre>
@Test
    public void dynamicForeach3Test() {
        SqlSession session = Util.getSqlSessionFactory().openSession();
         BlogMapper blogMapper = session.getMapper(BlogMapper.class);
          final List ids = new ArrayList();
          ids.add(1);
          ids.add(2);
          ids.add(3);
          ids.add(6);
          ids.add(7);
          ids.add(9);
          Map params = new HashMap();
          params.put(&quot;ids&quot;, ids);
          params.put(&quot;title&quot;, &quot;中国&quot;);
          List blogs = blogMapper.dynamicForeach3Test(params);
          for (Blog blog : blogs)
             System.out.println(blog);
          session.close();
     }</pre>

<h2><strong>实际中使用的例子</strong></h2>

<p>service层里面封装参数：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; Map&lt;String, Object&gt; paramMap = new HashMap&lt;String, Object&gt;();<br />
&nbsp; &nbsp; &nbsp; &nbsp; paramMap.put(&quot;userId&quot;, &quot;0-1&quot;);// 操作人ID<br />
&nbsp; &nbsp; &nbsp; &nbsp; paramMap.put(&quot;userName&quot;, &quot;wang&quot;);// 操作人ID<br />
&nbsp; &nbsp; &nbsp; &nbsp; paramMap.put(&quot;reVerifyDatas&quot;,reVerifyDatas);//用于批量操作的&nbsp;&nbsp;List&lt;Map&lt;String, Object&gt;<br />
&nbsp; &nbsp; &nbsp; &nbsp; paramMap.put(&quot;formParams&quot;,formParams);&nbsp; &nbsp; &nbsp;//表单传来的参数&nbsp;Map&lt;String,Object&gt;</p>

<p>Mapper.xml 里面：</p>

<p>&nbsp; &nbsp; &lt;!--添加审核状态--&gt;<br />
&nbsp; &nbsp; &lt;insert id=&quot;insertReRegVerify_batch&quot; parameterType=&quot;java.util.Map&quot;&gt;<br />
&nbsp; &nbsp; &nbsp; &nbsp; INSERT reg_verify (&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; id,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;student_reg_id,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; user_id,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; user_name,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; verify_status_id,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; remark,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; verify_time<br />
&nbsp; &nbsp; &nbsp; &nbsp; ) VALUES<br />
&nbsp; &nbsp; &nbsp; &nbsp; &lt;foreach collection=&quot;reVerifyDatas&quot; index=&quot;index&quot; item=&quot;reVerifyData&quot; separator=&quot;,&quot;&gt;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (replace(uuid(), &#39;-&#39;, &#39;&#39;),#{reVerifyData.reRegVerifyId},#{userId},#{userName},#{formParams.status},#{formParams.remark},NOW()) &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &lt;/foreach&gt;<br />
&nbsp; &nbsp; &lt;/insert&gt;</p>
