<h1>数据库连接池优化配置(druid,dbcp,c3p0)</h1>

<p>主要描述了数据库连接池参数配置的准则，针对常用的数据库连接池(c3p0,dbcp,druid)给出推荐的配置。</p>

<h2>考虑因素</h2>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 1：当前连接DB的规模 &nbsp; 2：并发情况 3：执行db的响应时间</p>

<h2>配置考虑&nbsp;&nbsp;&nbsp;</h2>

<p>&nbsp; &nbsp; &nbsp; &nbsp;1：初始化连接：可考虑设置为3个连接 。对于db规模特别大的情况下可考虑设置为1个。避免启动时间过长；</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;2：最小连接：可考虑该值的设置和初始化连接保持一致；</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;3：最大连接：对于有较大DB规模，最大连接不要设置过大，避免本地维护的db太大。 如果对应到数据源的并发数过高，可考虑增大最大连接数。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;4：获取连接的超时时间：如果连接全部被占用，需要等待的时间。可以根据当前系统的响应时间判定，如果容忍度较高，可以大点。容忍度较低，设置小点。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;5：当获取连接和释放连接心跳检测：建议全部关闭，否则每个数据库访问指令会对数据库生产额外的两条心跳检测的指令，增加数据库的负载。连接有效性的检查改用后台空闲连接检查。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;6：连接有效性检测时间：该值需要结合数据库的wait_timeout,interactive_timeout值进行设置。假如数据库为120s，则心跳检测时间在120s以内越大越好。如果太小，心跳检测时间会比较频繁。建议设置为90s。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;7：最大空闲时间：如果连接超过该时间没有使用过，则会进行close掉。 该值不要太小，避免频繁的建立连接关闭连接。也不要太大，导致一直无法关闭。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;8：心跳检查的sql语句：尽量使用ping命令，ping的性能较查询语句高。大部分的数据库连接池不配置query语句，便会调用ping命令。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;9：prepareStatement缓存：可以根据自己的业务来判定是否开启。开启后对性能的影响依赖于具体业务和并发情况。可考虑暂时不开启。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;10：连接使用超时：业务拿到一个连接，如果超过指定的时间未归还，是否把该连接给给回收掉。超时时间等和具体的业务关联。暂时建议先不开启。</p>

<p>下面主要给出：druid,dbcp,c3p0 三种连接池的推荐配置</p>

<h2>druid配置</h2>

<p>&nbsp;介绍：<a href="https://github.com/alibaba/druid" rel="nofollow" target="_blank">https://github.com/alibaba/druid</a></p>

<p>&nbsp;推荐配置：</p>

<table>
	<tbody>
		<tr>
			<td>initialSize</td>
			<td>3</td>
			<td>初始化配置</td>
		</tr>
		<tr>
			<td>minIdle</td>
			<td>3</td>
			<td>最小连接数</td>
		</tr>
		<tr>
			<td>maxActive</td>
			<td>15</td>
			<td>最大连接数</td>
		</tr>
		<tr>
			<td>maxWait</td>
			<td>5000</td>
			<td>获取连接超时时间（单位：ms）</td>
		</tr>
		<tr>
			<td>timeBetweenEvictionRunsMillis</td>
			<td>90000</td>
			<td>连接有效性检测时间(单位:ms)</td>
		</tr>
		<tr>
			<td colspan="1">testOnBorrow&nbsp;</td>
			<td colspan="1">false</td>
			<td colspan="1">获取连接检测</td>
		</tr>
		<tr>
			<td colspan="1">testOnReturn&nbsp;</td>
			<td colspan="1">false</td>
			<td colspan="1">归还连接检测</td>
		</tr>
		<tr>
			<td colspan="1">minEvictableIdleTimeMillis</td>
			<td colspan="1">1800000</td>
			<td colspan="1">最大空闲时间(单位ms)</td>
		</tr>
		<tr>
			<td colspan="1">testWhileIdle</td>
			<td colspan="1">true</td>
			<td colspan="1">在获取连接后，确定是否要进行连接空间时间的检查</td>
		</tr>
	</tbody>
</table>

<p>配置说明：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1：minEvictableIdleTimeMillis(最大空闲时间)：默认为30分钟，配置里面不进行设置。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2：testOnBorrow ,testOnReturn 默认为关闭，可以设置为不配置。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;3：testWhileIdle(在获取连接后，确定是否要进行连接空闲时间的检查)。默认为true。配置里面不再进行设置。</p>

<p>流程说明：</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1：在第一次调用connection的时候，才会进行 initialSize的初始化。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2：心跳检测时间线程，会休眠timeBetweenEvictionRunsMillis时间，然后只对(没有borrow的线程 减去 minIdle)的线程进行检查，如果空闲时间大于minEvictableIdleTimeMillis则进行close。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3：testWhileIdle必须设置为true，在获取到连接后，先检查testOnBorrow，然后再判定testwhileIdle，如果连接空闲时间大于timeBetweenEvictionRunsMillis，则会进行心跳检测。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4：不需要配置validationQuery，如果不配置的情况下会走ping命令，性能更高。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 5：连接保存在数组里面，获取连接的时候，获取数组的最后一位。在timeBetweenEvictionRunsMillis时是从前往后进行检查连接的有效性。</p>

<h2>dbcp配置</h2>

<p>&nbsp;介绍：<a href="http://commons.apache.org/proper/commons-dbcp/configuration.html" rel="nofollow" target="_blank">http://commons.apache.org/proper/commons-dbcp/configuration.html</a></p>

<p>&nbsp;推荐配置：</p>

<table>
	<tbody>
		<tr>
			<td>参数</td>
			<td>配置</td>
			<td>说明</td>
		</tr>
		<tr>
			<td>initialSize</td>
			<td>3</td>
			<td>初始化配置</td>
		</tr>
		<tr>
			<td>minIdle</td>
			<td>3</td>
			<td>最小连接数</td>
		</tr>
		<tr>
			<td>maxIdle</td>
			<td>15</td>
			<td>最大空闲连接</td>
		</tr>
		<tr>
			<td>
			<pre>
maxTotal</pre>
			</td>
			<td>15</td>
			<td>最大连接数</td>
		</tr>
		<tr>
			<td>maxWaitMillis</td>
			<td>5000</td>
			<td>获取连接超时时间(单位ms)</td>
		</tr>
		<tr>
			<td>timeBetweenEvictionRunsMillis</td>
			<td>90000</td>
			<td>心跳检测时间(单位ms)</td>
		</tr>
		<tr>
			<td>minEvictableIdleTimeMillis</td>
			<td>1800000</td>
			<td>最大空闲时间(单位ms)</td>
		</tr>
		<tr>
			<td>testOnBorrow</td>
			<td>FALSE</td>
			<td>获取连接检测</td>
		</tr>
		<tr>
			<td>testOnReturn</td>
			<td>FALSE</td>
			<td>归还连接检测</td>
		</tr>
		<tr>
			<td>numTestsPerEvictionRun</td>
			<td>-1</td>
			<td>空闲连接检查的个数</td>
		</tr>
		<tr>
			<td>testWhileIdle</td>
			<td>TRUE</td>
			<td>是否开启对空闲连接的检查</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;配置说明：</p>

<p>&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; 1：关于maxidle和maxTotal尽量保持一致。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2：numTestsPerEvictionRun 设置为-1，代表对所有的连接均进行检查。默认值为3。-1代表对全部idle的连接检查有效性。 否则有可能造成部分连接的有效性未进行检查。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;3：testWhileIdle 也必须为true，代表需要检查有效性。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;4：minEvictableIdleTimeMillis默认值为30分钟，可以不用进行设置。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 5：testOnReturn默认值为false，可以不用设置。但是testOnBorrow必须进行设置为false，默认值为true。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 6：validationQuery不配置默认走ping命令</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p>

<p>&nbsp;流程说明：</p>

<p>&nbsp; &nbsp; &nbsp;1：在第一次调用connection的时候，才会进行 initialSize的初始化。</p>

<p>&nbsp; &nbsp;&nbsp;&nbsp;2：不需要配置validationQuery，如果不配置的情况下会走ping命令，性能更高。</p>

<p>&nbsp; &nbsp; &nbsp;3：连接保存在LinkedBlockingDeque 中。来做并发的控制。</p>

<p>&nbsp; &nbsp; &nbsp;4：后端会有一个定时任务，间隔为timeBetweenEvictionRunsMillis，先确定需要对多少线程进行检测(numTestsPerEvictionRun控制)，然后判定是否超过minEvictableIdleTimeMillis，如果超过则close掉。没有超过，则判定testWhileIdle为true的话，进行心跳检查。如果检查失败则关闭连接。</p>

<p>&nbsp; &nbsp; &nbsp;5：在return连接的时候会判定maxIdle，如果当前空闲连接是否大于maxIdle，则会关闭掉连接。</p>

<h2>c3p0配置</h2>

<p>&nbsp;&nbsp;介绍：&nbsp;<a href="http://www.mchange.com/projects/c3p0/" rel="nofollow" target="_blank">http://www.mchange.com/projects/c3p0/</a></p>

<p>&nbsp;&nbsp;推荐配置：</p>

<table>
	<tbody>
		<tr>
			<td>参数</td>
			<td>推荐值</td>
			<td>说明</td>
		</tr>
		<tr>
			<td>initialPoolSize</td>
			<td>3</td>
			<td>初始化配置</td>
		</tr>
		<tr>
			<td>minPoolSize</td>
			<td>3</td>
			<td>最小连接数</td>
		</tr>
		<tr>
			<td>maxPoolSize</td>
			<td>15</td>
			<td>最大连接数</td>
		</tr>
		<tr>
			<td>acquireIncrement</td>
			<td>1</td>
			<td>每次获取的个数</td>
		</tr>
		<tr>
			<td>checkoutTimeout</td>
			<td>5000</td>
			<td>获取连接超时时间(单位ms)</td>
		</tr>
		<tr>
			<td>idleConnectionTestPeriod</td>
			<td>90</td>
			<td>心跳检测时间(单位 s)</td>
		</tr>
		<tr>
			<td>maxIdleTime</td>
			<td>1800</td>
			<td>最大空闲时间(单位 s)</td>
		</tr>
		<tr>
			<td>testConnectionOnCheckout</td>
			<td>FALSE</td>
			<td>获取连接检测</td>
		</tr>
		<tr>
			<td>testConnectionOnCheckin</td>
			<td>FALSE</td>
			<td>归还连接检测</td>
		</tr>
		<tr>
			<td colspan="1">
			<pre>
numHelperThreads</pre>
			</td>
			<td colspan="1">1</td>
			<td colspan="1">&nbsp;</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;配置说明：</p>

<p>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;1：testConnectionOnCheckout和testConnectionOnCheckin默认为false，可不用配置</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 2：preferredTestQuery不用配置，默认走ping命令。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 3：numHelperThreads 默认是开启3个线程。如果数据源较多，这里会存在较多线程。 这里设置为1，避免线程较多的情况。</p>

<p>&nbsp;&nbsp;流程说明：</p>

<p>&nbsp; &nbsp; &nbsp; 1：在第一次调用connection的时候，才会进行&nbsp;initialPoolSize的初始化。</p>

<p>&nbsp; &nbsp; &nbsp; 2：在进行心跳检测的时候，会对所有的空闲连接进行心跳检测。如果发现总连接小于最小连接数，则会创建连接，保持最小的连接数。</p>
