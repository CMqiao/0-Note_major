<h1>log基本知识</h1>

<p>日志记录器(Logger)是日志处理的核心组件。log4j具有5种正常级别(Level)。日志记录器(Logger)的可用级别Level (不包括自定义级别 Level)， 以下内容就是摘自log4j API (<a href="http://jakarta.apache.org/log4j/docs/api/index.html" target="_blank">http://jakarta.apache.org/log4j/docs/api/index.html</a>):</p>

<p>static Level WARN</p>

<p>WARN level表明会出现潜在错误的情形。</p>

<p>static Level ERROR</p>

<p>ERROR level指出虽然发生错误事件，但仍然不影响系统的继续运行。</p>

<p>static Level FATAL</p>

<p>FATAL level指出每个严重的错误事件将会导致应用程序的退出。</p>

<p>另外，还有两个可用的特别的日志记录级别: (以下描述来自log4j API<a href="http://jakarta.apache.org/log4j/docs/api/index.html" target="_blank">http://jakarta.apache.org/log4j/docs/api/index.html</a>):</p>

<p>static Level ALL</p>

<p>ALL Level是最低等级的，用于打开所有日志记录。</p>

<p>static Level OFF</p>

<p>OFF Level是最高等级的，用于关闭所有日志记录。</p>

<p>日志记录器（Logger）的行为是分等级的。如下表所示：</p>

<p>分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者您定义的级别。<strong>Log4j建议只使用四个级别，优先级从高到低分别是 ERROR、WARN、INFO、DEBUG</strong>。通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。<strong>比如在这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来，也是说大于等于的级别的日志才输出。</strong></p>

<p><strong>日志记录的级别有继承性，子类会记录父类的所有的日志级别。</strong></p>

<p>logger日志设置：</p>

<p>1、加包：log4j-1.2.16.jar &nbsp;一般还会加入 commons-logging-1.1.1.jar</p>

<p>2、在CLASSPATH 下建立log4j.properties</p>

<ol start="1">
	<li>log4j.appender.stdout=org.apache.log4j.ConsoleAppender&nbsp;&nbsp;</li>
	<li>log4j.appender.stdout.Target=System.out&nbsp;&nbsp;</li>
	<li>log4j.appender.stdout.layout=org.apache.log4j.PatternLayout&nbsp;&nbsp;</li>
	<li>log4j.appender.stdout.layout.ConversionPattern=%d&nbsp;%5p&nbsp;%c{1}:%L&nbsp;-&nbsp;%m%n&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>log4j.appender.file=org.apache.log4j.RollingFileAppender&nbsp;&nbsp;</li>
	<li>log4j.appender.file.File=${catalina.home}/logs/ddoMsg.log&nbsp;&nbsp;</li>
	<li>#log4j.appender.file.File=D:/SmgpAppService/logs/smgpApp.log&nbsp;&nbsp;</li>
	<li>log4j.appender.file.MaxFileSize=1024KB&nbsp;&nbsp;</li>
	<li>log4j.appender.file.MaxBackupIndex=100&nbsp;&nbsp;</li>
	<li>log4j.appender.file.layout=org.apache.log4j.PatternLayout&nbsp;&nbsp;</li>
	<li>log4j.appender.file.layout.ConversionPattern=&nbsp;%d{yyyy-MM-dd&nbsp;HH:mm:ss}&nbsp;%5p&nbsp;%c&nbsp;%t:&nbsp;-&nbsp;%m%n&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>#INFO&nbsp;WARN&nbsp;ERROR&nbsp;DEBUG&nbsp;&nbsp;</li>
	<li>log4j.rootLogger=WARN,&nbsp;file,&nbsp;stdout&nbsp;&nbsp;</li>
	<li>#log4j.rootLogger=INFO,stdout&nbsp;&nbsp;</li>
	<li>org.apache.commons.logging.Log=org.apache.commons.logging.impl.SimpleLog&nbsp;&nbsp;</li>
	<li>#org.apache.commons.logging.simplelog.log.org.apache.commons.digester.Digester=debug&nbsp;&nbsp;</li>
	<li>#org.apache.commons.logging.simplelog.log.org.apache.commons.digester.ObjectCreateRule=debug&nbsp;&nbsp;</li>
	<li>#org.apache.commons.logging.simplelog.log.org.apache.commons.digester.Digester.sax=info&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>log4j.logger.com.jason.ddoMsg=debug&nbsp;&nbsp;</li>
</ol>

<p>在要输出的日志的类中</p>

<p>定义：private static final org.apache.log4j.Logger logger = Logger.getLogger(类名.class);</p>

<p>在类输位置：logger.info(XXX);</p>

<p>logger 配置说明：</p>

<p>1、 log4j.rootLogger=INFO, stdout , R</p>

<p>此句为将等级为INFO的日志信息输出到stdout和R这两个目的地，stdout和R的定义在下面的代码，可以任意起名。等级可分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL，如果配置OFF则不打出任何信息，如果配置为INFO这样只显示INFO, WARN, ERROR的log信息，而DEBUG信息不会被显示，具体讲解可参照第三部分定义配置文件中的logger。</p>

<p>2、log4j.appender.stdout=org.apache.log4j.ConsoleAppender</p>

<p>此句为定义名为stdout的输出端是哪种类型，可以是</p>

<p>org.apache.log4j.ConsoleAppender（控制台），</p>

<p>org.apache.log4j.FileAppender（文件），</p>

<p>org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），</p>

<p>org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）</p>

<p>org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</p>

<p>3、log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</p>

<p>此句为定义名为stdout的输出端的layout是哪种类型，可以是</p>

<p>org.apache.log4j.HTMLLayout（以HTML表格形式布局），</p>

<p>org.apache.log4j.PatternLayout（可以灵活地指定布局模式），</p>

<p>org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），</p>

<p>org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</p>

<p>4、log4j.appender.stdout.layout.ConversionPattern= [QC] %p [%t] %C.%M(%L) | %m%n</p>

<p>如果使用pattern布局就要指定的打印信息的具体格式ConversionPattern，打印参数如下：</p>

<p>%m 输出代码中指定的消息</p>

<p>%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL</p>

<p>%r 输出自应用启动到输出该log信息耗费的毫秒数</p>

<p>%c 输出所属的类目，通常就是所在类的全名</p>

<p>%t 输出产生该日志事件的线程名</p>

<p>%n 输出一个回车换行符，Windows平台为&ldquo;rn&rdquo;，Unix平台为&ldquo;n&rdquo;</p>

<p>%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921</p>

<p>%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。</p>

<p>[QC]是log信息的开头，可以为任意字符，一般为项目简称。</p>

<p>输出的信息</p>

<p>[TS] DEBUG [main] AbstractBeanFactory.getBean(189) | Returning cached instance of singleton bean &#39;MyAutoProxy&#39;</p>

<p>5、 log4j.appender.R=org.apache.log4j.DailyRollingFileAppender</p>

<p>此句与第3行一样。定义名为R的输出端的类型为每天产生一个日志文件。</p>

<p>6、log4j.appender.R.File=D:\\Tomcat 5.5\\logs\\qc.log</p>

<p>此句为定义名为R的输出端的文件名为D:\\Tomcat 5.5\\logs\\qc.log可以自行修改。</p>

<p>7、 log4j.appender.R.layout=org.apache.log4j.PatternLayout</p>

<p>与第4行相同。</p>

<p>8、 log4j.appender.R.layout.ConversionPattern=%d-[TS] %p %t %c - %m%n</p>

<p>与第5行相同。</p>

<p>9、 log4j.logger.com. neusoft =DEBUG</p>

<p>指定com.neusoft包下的所有类的等级为DEBUG。</p>

<p>可以把com.neusoft改为自己项目所用的包名。</p>

<p>10、 &nbsp;log4j.logger.com.opensymphony.oscache=ERROR</p>

<p>11、 log4j.logger<a href="http://lib.csdn.net/base/dotnet" target="_blank" title=".NET知识库">.NET</a>.sf.navigator=ERROR</p>

<p>这两句是把这两个包下出现的错误的等级设为ERROR，如果项目中没有配置EHCache，则不需要这两句。</p>

<p>12、log4j.logger.org.apache.commons=ERROR</p>

<p>13、 log4j.logger.org.apache.struts=WARN</p>

<p>这两句是struts的包。</p>

<p>14、 &nbsp;log4j.logger.org.displaytag=ERROR</p>

<p>这句是displaytag的包。（QC问题列表页面所用）</p>

<p>15、 log4j.logger.org.springframework=DEBUG</p>

<p>此句为<a href="http://lib.csdn.net/base/javaee" target="_blank" title="Java EE知识库">spring</a>的包。</p>

<p>16、 log4j.logger.org.<a href="http://lib.csdn.net/base/javaee" target="_blank" title="Java EE知识库">hibernate</a>.ps.PreparedStatementCache=WARN</p>

<p>17、log4j.logger.org.hibernate=DEBUG</p>

<p>此两句是hibernate的包。</p>

<p>以上这些包的设置可根据项目的实际情况而自行定制。</p>

<p>&nbsp;</p>
