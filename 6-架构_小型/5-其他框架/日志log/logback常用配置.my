<h1><strong>logback 配置详解</strong></h1>

<h2><strong>logback 配置详解（一）&lt;configuration&gt; and &lt;logger&gt;</strong></h2>

<h3><strong>一：根节点&lt;configuration&gt;包含的属性：</strong></h3>

<p>scan:</p>

<p>当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</p>

<p>scanPeriod:</p>

<p>设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。</p>

<p>debug:</p>

<p>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</p>

<p>例如：</p>

<p>&nbsp;</p>

<ol start="1">
	<li>&lt;configuration&nbsp;scan=&quot;true&quot;&nbsp;scanPeriod=&quot;60&nbsp;seconds&quot;&nbsp;debug=&quot;false&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;其他配置省略--&gt;&nbsp;&nbsp;</li>
	<li>&lt;/configuration&gt;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<h3><strong>二：根节点&lt;configuration&gt;的子节点：</strong></h3>

<p>&nbsp;<iframe frameborder="0" id="iframe_0.4142369480444945" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://logback.qos.ch/manual/images/chapters/configuration/basicSyntax.png?_=2163458%22%20style=%22border:none;max-width:882px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.4142369480444945',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></p>

<h4><strong>2.1设置上下文名称：&lt;contextName&gt;</strong></h4>

<p>每个logger都关联到logger上下文，默认上下文名称为&ldquo;default&rdquo;。但可以使用&lt;contextName&gt;设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。</p>

<p>&nbsp;</p>

<ol start="1">
	<li>&lt;configuration&nbsp;scan=&quot;true&quot;&nbsp;scanPeriod=&quot;60&nbsp;seconds&quot;&nbsp;debug=&quot;false&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;contextName&gt;myAppName&lt;/contextName&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;其他配置省略--&gt;&nbsp;&nbsp;</li>
	<li>&lt;/configuration&gt;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<h4><strong>2.2设置变量：</strong>&nbsp;<strong>&lt;property&gt;</strong></h4>

<p>用来定义变量值的标签，&lt;property&gt; 有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。通过&lt;property&gt;定义的值会被插入到logger上下文中。定义变量后，可以使&ldquo;${}&rdquo;来使用变量。</p>

<p>例如使用&lt;property&gt;定义上下文名称，然后在&lt;contentName&gt;设置logger上下文时使用。</p>

<ol start="1">
	<li>&lt;configuration&nbsp;scan=&quot;true&quot;&nbsp;scanPeriod=&quot;60&nbsp;seconds&quot;&nbsp;debug=&quot;false&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;APP_Name&quot;&nbsp;value=&quot;myAppName&quot;&nbsp;/&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;contextName&gt;${APP_Name}&lt;/contextName&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;其他配置省略--&gt;&nbsp;&nbsp;</li>
	<li>&lt;/configuration&gt;&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h4><strong>2.3获取时间戳字符串：&lt;timestamp&gt;</strong></h4>

<p>两个属性 key:标识此<strong>&lt;timestamp&gt;</strong>&nbsp;的名字；datePattern：设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。</p>

<p><strong>&nbsp;</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 例如将解析配置文件的时间作为上下文名称：</p>

<ol start="1">
	<li>&lt;configuration&nbsp;scan=&quot;true&quot;&nbsp;scanPeriod=&quot;60&nbsp;seconds&quot;&nbsp;debug=&quot;false&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;timestamp&nbsp;key=&quot;bySecond&quot;&nbsp;datePattern=&quot;yyyyMMdd&#39;T&#39;HHmmss&quot;/&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;contextName&gt;${bySecond}&lt;/contextName&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;其他配置省略--&gt;&nbsp;&nbsp;</li>
	<li>&lt;/configuration&gt;&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<h4><strong>2.4设置loger：</strong></h4>

<p><strong>&lt;loger&gt;</strong></p>

<p>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。&lt;loger&gt;仅有一个name属性，一个可选的level和一个可选的addtivity属性。</p>

<p>name:</p>

<p>用来指定受此loger约束的某一个包或者具体的某一个类。</p>

<p>level:</p>

<p>用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。</p>

<p>如果未设置此属性，那么当前loger将会继承上级的级别。</p>

<p>addtivity:</p>

<p>是否向上级loger传递打印信息。默认是true。</p>

<p>&lt;loger&gt;可以包含零个或多个&lt;appender-ref&gt;元素，标识这个appender将会添加到这个loger。</p>

<p>&nbsp;</p>

<p><strong>&lt;root&gt;</strong></p>

<p>也是&lt;loger&gt;元素，但是它是根loger。只有一个level属性，应为已经被命名为&quot;root&quot;.</p>

<p>level:</p>

<p>用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。</p>

<p>默认是DEBUG。</p>

<p>&lt;root&gt;可以包含零个或多个&lt;appender-ref&gt;元素，标识这个appender将会添加到这个loger。</p>

<p>&nbsp;</p>

<p>例如：</p>

<p>LogbackDemo.java类</p>

<ol start="1">
	<li>package&nbsp;logback;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>import&nbsp;org.slf4j.Logger;&nbsp;&nbsp;</li>
	<li>import&nbsp;org.slf4j.LoggerFactory;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;LogbackDemo&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;Logger&nbsp;log&nbsp;=&nbsp;LoggerFactory.getLogger(LogbackDemo.class);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.trace(&quot;======trace&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.debug(&quot;======debug&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.info(&quot;======info&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.warn(&quot;======warn&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.error(&quot;======error&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<h3>logback.xml配置文件</h3>

<h4><strong>第1种：只配置root</strong></h4>

<ol start="1">
	<li>&lt;configuration&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;appender&nbsp;name=&quot;STDOUT&quot;&nbsp;class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;encoder&nbsp;默认配置为PatternLayoutEncoder&nbsp;--&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;encoder&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;pattern&gt;%d{HH:mm:ss.SSS}&nbsp;[%thread]&nbsp;%-5level&nbsp;%logger{36}&nbsp;-&nbsp;%msg%n&lt;/pattern&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/encoder&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;/appender&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;root&nbsp;level=&quot;INFO&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;appender-ref&nbsp;ref=&quot;STDOUT&quot;&nbsp;/&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;/root&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&lt;/configuration&gt;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;其中appender的配置表示打印到控制台(稍后详细讲解appender&nbsp;)；</p>

<p>&lt;root level=&quot;INFO&quot;&gt;将root的打印级别设置为&ldquo;INFO&rdquo;，指定了名字为&ldquo;STDOUT&rdquo;的appender。</p>

<p>&nbsp;</p>

<p>当执行logback.LogbackDemo类的main方法时，root将级别为&ldquo;INFO&rdquo;及大于&ldquo;INFO&rdquo;的日志信息交给已经配置好的名为&ldquo;STDOUT&rdquo;的appender处理，&ldquo;STDOUT&rdquo;appender将信息打印到控制台；</p>

<p><strong>打印结果如下：</strong></p>

<ol start="1">
	<li>13:30:38.484&nbsp;[main]&nbsp;INFO&nbsp;&nbsp;logback.LogbackDemo&nbsp;-&nbsp;======info&nbsp;&nbsp;</li>
	<li>13:30:38.500&nbsp;[main]&nbsp;WARN&nbsp;&nbsp;logback.LogbackDemo&nbsp;-&nbsp;======warn&nbsp;&nbsp;</li>
	<li>13:30:38.500&nbsp;[main]&nbsp;ERROR&nbsp;logback.LogbackDemo&nbsp;-&nbsp;======error&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<h4><strong>第2种：带有loger的配置，不指定级别，不指定appender，</strong></h4>

<ol start="1">
	<li>&lt;configuration&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;appender&nbsp;name=&quot;STDOUT&quot;&nbsp;class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;encoder&nbsp;默认配置为PatternLayoutEncoder&nbsp;--&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;encoder&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;pattern&gt;%d{HH:mm:ss.SSS}&nbsp;[%thread]&nbsp;%-5level&nbsp;%logger{36}&nbsp;-&nbsp;%msg%n&lt;/pattern&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/encoder&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;/appender&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;!--&nbsp;logback为java中的包&nbsp;--&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;logger&nbsp;name=&quot;logback&quot;/&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;root&nbsp;level=&quot;DEBUG&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;appender-ref&nbsp;ref=&quot;STDOUT&quot;&nbsp;/&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;/root&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&lt;/configuration&gt;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;其中appender的配置表示打印到控制台(稍后详细讲解appender&nbsp;)；</p>

<p>&lt;logger name=&quot;logback&quot; /&gt;将控制logback包下的所有类的日志的打印，但是并没用设置打印级别，所以继承他的上级&lt;root&gt;的日志级别&ldquo;DEBUG&rdquo;；</p>

<p>没有设置addtivity，默认为true，将此loger的打印信息向上级传递；</p>

<p>没有设置appender，此loger本身不打印任何信息。</p>

<p>&lt;root level=&quot;DEBUG&quot;&gt;将root的打印级别设置为&ldquo;DEBUG&rdquo;，指定了名字为&ldquo;STDOUT&rdquo;的appender。</p>

<p>&nbsp;</p>

<p>当执行logback.LogbackDemo类的main方法时，因为LogbackDemo 在包logback中，所以首先执行&lt;logger name=&quot;logback&quot; /&gt;，将级别为&ldquo;DEBUG&rdquo;及大于&ldquo;DEBUG&rdquo;的日志信息传递给root，本身并不打印；</p>

<p>root接到下级传递的信息，交给已经配置好的名为&ldquo;STDOUT&rdquo;的appender处理，&ldquo;STDOUT&rdquo;appender将信息打印到控制台；</p>

<p><strong>打印结果如下：</strong></p>

<ol start="1">
	<li>13:19:15.406&nbsp;[main]&nbsp;DEBUG&nbsp;logback.LogbackDemo&nbsp;-&nbsp;======debug&nbsp;&nbsp;</li>
	<li>13:19:15.406&nbsp;[main]&nbsp;INFO&nbsp;&nbsp;logback.LogbackDemo&nbsp;-&nbsp;======info&nbsp;&nbsp;</li>
	<li>13:19:15.406&nbsp;[main]&nbsp;WARN&nbsp;&nbsp;logback.LogbackDemo&nbsp;-&nbsp;======warn&nbsp;&nbsp;</li>
	<li>13:19:15.406&nbsp;[main]&nbsp;ERROR&nbsp;logback.LogbackDemo&nbsp;-&nbsp;======error&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<h4><strong>第3种：带有多个loger的配置，指定级别，指定appender</strong>&nbsp;&nbsp;</h4>

<ol start="1">
	<li>&lt;configuration&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&lt;appender&nbsp;name=&quot;STDOUT&quot;&nbsp;class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;encoder&nbsp;默认配置为PatternLayoutEncoder&nbsp;--&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;encoder&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;pattern&gt;%d{HH:mm:ss.SSS}&nbsp;[%thread]&nbsp;%-5level&nbsp;%logger{36}&nbsp;-&nbsp;%msg%n&lt;/pattern&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/encoder&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;/appender&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;!--&nbsp;logback为java中的包&nbsp;--&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;logger&nbsp;name=&quot;logback&quot;/&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;!--logback.LogbackDemo：类的全路径&nbsp;--&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;logger&nbsp;name=&quot;logback.LogbackDemo&quot;&nbsp;level=&quot;INFO&quot;&nbsp;additivity=&quot;false&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;appender-ref&nbsp;ref=&quot;STDOUT&quot;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;/logger&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;root&nbsp;level=&quot;ERROR&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;appender-ref&nbsp;ref=&quot;STDOUT&quot;&nbsp;/&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;/root&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&lt;/configuration&gt;&nbsp;&nbsp;</li>
</ol>

<p>其中appender的配置表示打印到控制台(稍后详细讲解appender&nbsp;)；</p>

<p>&nbsp;</p>

<p>&lt;logger name=&quot;logback&quot; /&gt;将控制logback包下的所有类的日志的打印，但是并没用设置打印级别，所以继承他的上级&lt;root&gt;的日志级别&ldquo;DEBUG&rdquo;；</p>

<p>没有设置addtivity，默认为true，将此loger的打印信息向上级传递；</p>

<p>没有设置appender，此loger本身不打印任何信息。</p>

<p>&nbsp;</p>

<p>&nbsp;&lt;logger name=&quot;logback.LogbackDemo&quot; level=&quot;INFO&quot; additivity=&quot;false&quot;&gt;控制logback.LogbackDemo类的日志打印，打印级别为&ldquo;INFO&rdquo;；</p>

<p>additivity属性为false，表示此loger的打印信息不再向上级传递，</p>

<p>指定了名字为&ldquo;STDOUT&rdquo;的appender。</p>

<p>&nbsp;</p>

<p>&lt;root level=&quot;DEBUG&quot;&gt;将root的打印级别设置为&ldquo;ERROR&rdquo;，指定了名字为&ldquo;STDOUT&rdquo;的appender。</p>

<p>&nbsp;</p>

<p>&nbsp;当执行logback.LogbackDemo类的main方法时，先执行&lt;logger name=&quot;logback.LogbackDemo&quot; level=&quot;INFO&quot; additivity=&quot;false&quot;&gt;，将级别为&ldquo;INFO&rdquo;及大于&ldquo;INFO&rdquo;的日志信息交给此loger指定的名为&ldquo;STDOUT&rdquo;的appender处理，在控制台中打出日志，不再向次loger的上级 &lt;logger name=&quot;logback&quot;/&gt; 传递打印信息；</p>

<p>&lt;logger name=&quot;logback&quot;/&gt;未接到任何打印信息，当然也不会给它的上级root传递任何打印信息；</p>

<p><strong>打印结果如下：</strong>&nbsp;&nbsp;</p>

<ol start="1">
	<li>14:05:35.937&nbsp;[main]&nbsp;INFO&nbsp;&nbsp;logback.LogbackDemo&nbsp;-&nbsp;======info&nbsp;&nbsp;</li>
	<li>14:05:35.937&nbsp;[main]&nbsp;WARN&nbsp;&nbsp;logback.LogbackDemo&nbsp;-&nbsp;======warn&nbsp;&nbsp;</li>
	<li>14:05:35.937&nbsp;[main]&nbsp;ERROR&nbsp;logback.LogbackDemo&nbsp;-&nbsp;======error&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;如果将&lt;logger name=&quot;logback.LogbackDemo&quot; level=&quot;INFO&quot; additivity=&quot;false&quot;&gt;修改为&nbsp;&lt;logger name=&quot;logback.LogbackDemo&quot; level=&quot;INFO&quot; additivity=&quot;true&quot;&gt;那打印结果将是什么呢？</p>

<p>没错，日志打印了两次，想必大家都知道原因了，因为打印信息向上级传递，logger本身打印一次，root接到后又打印一次</p>

<p><strong>打印结果如下：</strong>&nbsp;&nbsp;</p>

<ol start="1">
	<li>14:09:01.531&nbsp;[main]&nbsp;INFO&nbsp;&nbsp;logback.LogbackDemo&nbsp;-&nbsp;======info&nbsp;&nbsp;</li>
	<li>14:09:01.531&nbsp;[main]&nbsp;INFO&nbsp;&nbsp;logback.LogbackDemo&nbsp;-&nbsp;======info&nbsp;&nbsp;</li>
	<li>14:09:01.531&nbsp;[main]&nbsp;WARN&nbsp;&nbsp;logback.LogbackDemo&nbsp;-&nbsp;======warn&nbsp;&nbsp;</li>
	<li>14:09:01.531&nbsp;[main]&nbsp;WARN&nbsp;&nbsp;logback.LogbackDemo&nbsp;-&nbsp;======warn&nbsp;&nbsp;</li>
	<li>14:09:01.531&nbsp;[main]&nbsp;ERROR&nbsp;logback.LogbackDemo&nbsp;-&nbsp;======error&nbsp;&nbsp;</li>
	<li>14:09:01.531&nbsp;[main]&nbsp;ERROR&nbsp;logback.LogbackDemo&nbsp;-&nbsp;======error &nbsp;</li>
</ol>

<p>&nbsp;</p>

<h2><strong>logback 常用配置详解（二）</strong>&nbsp;<strong>&lt;appender&gt;</strong></h2>

<p><strong>&lt;appender&gt;：</strong></p>

<p>&lt;appender&gt;是&lt;configuration&gt;的子节点，是负责写日志的组件。</p>

<p>&lt;appender&gt;有两个必要属性name和class。name指定appender名称，class指定appender的全限定名。</p>

<p>&nbsp;</p>

<h3><strong>1.ConsoleAppender:</strong></h3>

<p>把日志添加到控制台，有以下子节点：</p>

<p>&lt;encoder&gt;：对日志进行格式化。（具体参数稍后讲解&nbsp;）</p>

<p>&lt;target&gt;：字符串&nbsp;<em>System.out&nbsp;</em>或者&nbsp;<em>System.err</em>&nbsp;，默认&nbsp;<em>System.out</em>&nbsp;；</p>

<p>例如：</p>

<ol start="1">
	<li>&lt;configuration&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;appender&nbsp;name=&quot;STDOUT&quot;&nbsp;class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;encoder&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;pattern&gt;%-4relative&nbsp;[%thread]&nbsp;%-5level&nbsp;%logger{35}&nbsp;-&nbsp;%msg&nbsp;%n&lt;/pattern&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/encoder&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;/appender&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;root&nbsp;level=&quot;DEBUG&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;appender-ref&nbsp;ref=&quot;STDOUT&quot;&nbsp;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;/root&gt;&nbsp;&nbsp;</li>
	<li>&lt;/configuration&gt;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<h3><strong>2.FileAppender:</strong></h3>

<p>把日志添加到文件，有以下子节点：</p>

<p>&lt;file&gt;：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。</p>

<p>&lt;append&gt;：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。</p>

<p>&lt;encoder&gt;：对记录事件进行格式化。（具体参数稍后讲解&nbsp;）</p>

<p>&lt;prudent&gt;：如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。</p>

<p>例如：</p>

<ol start="1">
	<li>&lt;configuration&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;appender&nbsp;name=&quot;FILE&quot;&nbsp;class=&quot;ch.qos.logback.core.FileAppender&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;file&gt;testFile.log&lt;/file&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;append&gt;true&lt;/append&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;encoder&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;pattern&gt;%-4relative&nbsp;[%thread]&nbsp;%-5level&nbsp;%logger{35}&nbsp;-&nbsp;%msg%n&lt;/pattern&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/encoder&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;/appender&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;root&nbsp;level=&quot;DEBUG&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;appender-ref&nbsp;ref=&quot;FILE&quot;&nbsp;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;/root&gt;&nbsp;&nbsp;</li>
	<li>&lt;/configuration&gt;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<h3><strong>3.RollingFileAppender:</strong></h3>

<p>滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：</p>

<p>&lt;file&gt;：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。</p>

<p>&lt;append&gt;：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。</p>

<p>&lt;encoder&gt;：对记录事件进行格式化。（具体参数稍后讲解&nbsp;）</p>

<p>&lt;rollingPolicy&gt;:当发生滚动时，决定&nbsp;<strong>RollingFileAppender</strong>&nbsp;的行为，涉及文件移动和重命名。</p>

<p>&lt;triggeringPolicy&nbsp;<strong>&gt;:&nbsp;</strong>告知&nbsp;<strong>RollingFileAppender</strong>&nbsp;合适激活滚动。</p>

<p>&lt;prudent&gt;：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。</p>

<p>&nbsp;</p>

<h4><strong>rollingPolicy：</strong></h4>

<p><strong>TimeBasedRollingPolicy：</strong>&nbsp;最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。有以下子节点：</p>

<p>&lt;fileNamePattern&gt;:</p>

<p>必要节点，包含文件名及&ldquo;%d&rdquo;转换符，&nbsp;&ldquo;%d&rdquo;可以包含一个<code>java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。如果直接使用 %d，默认格式是 yyyy-MM-dd。</code><strong>RollingFileAppender</strong>&nbsp;的file字节点可有可无，通过设置file，可以为活动文件和归档文件指定不同位置，当前日志总是记录到file指定的文件（活动文件），活动文件的名字不会改变；如果没设置file，活动文件的名字会根据<strong>fileNamePattern&nbsp;</strong>的值，每隔一段时间改变一次。&ldquo;/&rdquo;或者&ldquo;\&rdquo;会被当做目录分隔符。</p>

<p>&nbsp;</p>

<p>&lt;maxHistory&gt;:</p>

<p>可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每个月滚动，且&lt;maxHistory&gt;是6，则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除。</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p><strong>FixedWindowRollingPolicy：</strong>&nbsp;根据固定窗口算法重命名文件的滚动策略。有以下子节点：</p>

<p>&lt;minIndex&gt;:窗口索引最小值</p>

<p>&lt;maxIndex&gt;:窗口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为12。</p>

<p>&lt;fileNamePattern&nbsp;&gt;:</p>

<p>必须包含&ldquo;%i&rdquo;例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 没有log%i.log.zip</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h4><strong>triggeringPolicy:</strong></h4>

<p><strong>SizeBasedTriggeringPolicy：</strong>&nbsp;查看当前活动文件的大小，如果超过指定大小会告知<strong>RollingFileAppender&nbsp;</strong>触发当前活动文件滚动。只有一个节点<strong>:</strong></p>

<p>&lt;maxFileSize&gt;:这是活动文件的大小，默认值是10MB。</p>

<p>例如：每天生成一个日志文件，保存30天的日志文件。</p>

<ol start="1">
	<li>&lt;configuration&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;appender&nbsp;name=&quot;FILE&quot;&nbsp;class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;rollingPolicy&nbsp;class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;fileNamePattern&gt;logFile.%d{yyyy-MM-dd}.log&lt;/fileNamePattern&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;maxHistory&gt;30&lt;/maxHistory&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/rollingPolicy&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;encoder&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;pattern&gt;%-4relative&nbsp;[%thread]&nbsp;%-5level&nbsp;%logger{35}&nbsp;-&nbsp;%msg%n&lt;/pattern&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/encoder&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;/appender&gt;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;root&nbsp;level=&quot;DEBUG&quot;&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;appender-ref&nbsp;ref=&quot;FILE&quot;&nbsp;/&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;/root&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&lt;/configuration&gt;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp; 例如：按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。</p>

<ol start="1">
	<li>&lt;configuration&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;appender&nbsp;name=&quot;FILE&quot;&nbsp;class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;file&gt;test.log&lt;/file&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;rollingPolicy&nbsp;class=&quot;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&quot;&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;fileNamePattern&gt;tests.%i.log.zip&lt;/fileNamePattern&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;minIndex&gt;1&lt;/minIndex&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;maxIndex&gt;3&lt;/maxIndex&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/rollingPolicy&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;triggeringPolicy&nbsp;class=&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;maxFileSize&gt;5MB&lt;/maxFileSize&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/triggeringPolicy&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;encoder&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;pattern&gt;%-4relative&nbsp;[%thread]&nbsp;%-5level&nbsp;%logger{35}&nbsp;-&nbsp;%msg%n&lt;/pattern&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/encoder&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;/appender&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;root&nbsp;level=&quot;DEBUG&quot;&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;appender-ref&nbsp;ref=&quot;FILE&quot;&nbsp;/&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;/root&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&lt;/configuration&gt;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<h3><strong>4.另外一些Appender</strong></h3>

<p>SocketAppender、SMTPAppender、DBAppender、SyslogAppender、SiftingAppender，并不常用，这些就不在这里讲解了，大家可以参考官方文档。当然大家可以编写自己的Appender。</p>

<p>&nbsp;</p>

<h3><strong>5.encoder和pattern</strong></h3>

<p><strong>&lt;encoder&gt;</strong></p>

<p>负责两件事，一是把日志信息转换成字节数组，二是把字节数组写入到输出流。</p>

<p>目前<strong>PatternLayoutEncoder</strong>&nbsp;是唯一有用的且默认的<strong>encoder</strong>&nbsp;，有一个&lt;pattern&gt;节点，用来设置日志的输入格式。使用&ldquo;%&rdquo;加&ldquo;转换符&rdquo;方式，如果要输出&ldquo;%&rdquo;，则必须用&ldquo;\&rdquo;对&ldquo;\%&rdquo;进行转义。</p>

<p>例如：</p>

<ol start="1">
	<li>&lt;encoder&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&lt;pattern&gt;%-4relative&nbsp;[%thread]&nbsp;%-5level&nbsp;%logger{35}&nbsp;-&nbsp;%msg%n&lt;/pattern&gt;&nbsp;&nbsp;&nbsp;</li>
	<li>&lt;/encoder&nbsp;&nbsp;</li>
</ol>

<p><strong>&lt;pattern&gt;里面的转换符说明：</strong></p>

<table border="1">
	<tbody>
		<tr>
			<th>转换符</th>
			<th>作用</th>
		</tr>
		<tr>
			<td><strong>c</strong>&nbsp;{<em>length</em>&nbsp;}&nbsp;<br />
			<strong>lo</strong>&nbsp;{<em>length</em>&nbsp;}&nbsp;<br />
			<strong>logger</strong>&nbsp;{<em>length</em>&nbsp;}&nbsp;</td>
			<td>输出日志的logger名，可有一个整形参数，功能是缩短logger名，设置为0表示只输入logger最右边点符号之后的字符串。
			<table border="1" cellpadding="8">
				<tbody>
					<tr>
						<th>Conversion specifier</th>
						<th>Logger name</th>
						<th>Result</th>
					</tr>
					<tr>
						<td>%logger</td>
						<td>mainPackage.sub.sample.Bar</td>
						<td>mainPackage.sub.sample.Bar</td>
					</tr>
					<tr>
						<td>%logger{0}</td>
						<td>mainPackage.sub.sample.Bar</td>
						<td>Bar</td>
					</tr>
					<tr>
						<td>%logger{5}</td>
						<td>mainPackage.sub.sample.Bar</td>
						<td>m.s.s.Bar</td>
					</tr>
					<tr>
						<td>%logger{10}</td>
						<td>mainPackage.sub.sample.Bar</td>
						<td>m.s.s.Bar</td>
					</tr>
					<tr>
						<td>%logger{15}</td>
						<td>mainPackage.sub.sample.Bar</td>
						<td>m.s.sample.Bar</td>
					</tr>
					<tr>
						<td>%logger{16}</td>
						<td>mainPackage.sub.sample.Bar</td>
						<td>m.sub.sample.Bar</td>
					</tr>
					<tr>
						<td>%logger{26}</td>
						<td>mainPackage.sub.sample.Bar</td>
						<td>mainPackage.sub.sample.Bar</td>
					</tr>
				</tbody>
			</table>

			<p>&nbsp;</p>
			</td>
		</tr>
		<tr>
			<td><strong>C</strong>&nbsp;{<em>length</em>&nbsp;}&nbsp;<br />
			<strong>class</strong>&nbsp;{<em>length</em>&nbsp;}&nbsp;</td>
			<td>输出执行记录请求的调用者的全限定名。参数与上面的一样。尽量避免使用，除非执行速度不造成任何问题。</td>
		</tr>
		<tr>
			<td><strong>contextName</strong>&nbsp;<br />
			<strong>cn</strong>&nbsp;</td>
			<td>输出上下文名称。</td>
		</tr>
		<tr>
			<td><strong>d</strong>&nbsp;{<em>pattern</em>&nbsp;}&nbsp;<br />
			<strong>date</strong>&nbsp;{<em>pattern</em>&nbsp;}&nbsp;</td>
			<td>输出日志的打印日志，模式语法与<code>java.text.SimpleDateFormat</code>&nbsp;兼容。
			<table border="1" cellpadding="8">
				<tbody>
					<tr>
						<th>Conversion Pattern</th>
						<th>Result</th>
					</tr>
					<tr>
						<td>%d</td>
						<td>2006-10-20 14:06:49,812</td>
					</tr>
					<tr>
						<td>%date</td>
						<td>2006-10-20 14:06:49,812</td>
					</tr>
					<tr>
						<td>%date{ISO8601}</td>
						<td>2006-10-20 14:06:49,812</td>
					</tr>
					<tr>
						<td>%date{HH:mm:ss.SSS}</td>
						<td>14:06:49.812</td>
					</tr>
					<tr>
						<td>%date{dd&nbsp;MMM&nbsp;yyyy&nbsp;;HH:mm:ss.SSS}</td>
						<td>20 oct. 2006;14:06:49.812</td>
					</tr>
				</tbody>
			</table>
			</td>
		</tr>
		<tr>
			<td><strong>F / file</strong></td>
			<td>输出执行记录请求的java源文件名。尽量避免使用，除非执行速度不造成任何问题。</td>
		</tr>
		<tr>
			<td><strong>caller{depth}</strong><strong>caller{depth, evaluator-1, ... evaluator-n}</strong></td>
			<td>输出生成日志的调用者的位置信息，整数选项表示输出信息深度。
			<p>例如，&nbsp;<strong>%caller{2}</strong>&nbsp;&nbsp; 输出为：</p>

			<pre>
0    [main] DEBUG - logging statement 
Caller+0   at mainPackage.sub.sample.Bar.sampleMethodName(Bar.java:22)
Caller+1   at mainPackage.sub.sample.Bar.createLoggingRequest(Bar.java:17)</pre>

			<p>例如，&nbsp;<strong>%caller{3}</strong>&nbsp;&nbsp; 输出为：</p>

			<pre>
16   [main] DEBUG - logging statement 
Caller+0   at mainPackage.sub.sample.Bar.sampleMethodName(Bar.java:22)
Caller+1   at mainPackage.sub.sample.Bar.createLoggingRequest(Bar.java:17)
Caller+2   at mainPackage.ConfigTester.main(ConfigTester.java:38)</pre>
			</td>
		</tr>
		<tr>
			<td><strong>L / line</strong></td>
			<td>输出执行日志请求的行号。尽量避免使用，除非执行速度不造成任何问题。</td>
		</tr>
		<tr>
			<td><strong>m / msg / message</strong></td>
			<td>
			<p>输出应用程序提供的信息。</p>
			</td>
		</tr>
		<tr>
			<td><strong>M / method</strong></td>
			<td>输出执行日志请求的方法名。尽量避免使用，除非执行速度不造成任何问题。</td>
		</tr>
		<tr>
			<td><strong>n</strong></td>
			<td>输出平台先关的分行符&ldquo;\n&rdquo;或者&ldquo;\r\n&rdquo;。</td>
		</tr>
		<tr>
			<td><strong>p / le / level</strong></td>
			<td>输出日志级别。</td>
		</tr>
		<tr>
			<td><strong>r / relative</strong></td>
			<td>输出从程序启动到创建日志记录的时间，单位是毫秒</td>
		</tr>
		<tr>
			<td><strong>t / thread</strong></td>
			<td>输出产生日志的线程名。</td>
		</tr>
		<tr>
			<td><strong>replace(<em>p</em>&nbsp;){r, t}</strong></td>
			<td>
			<p><strong>p</strong>&nbsp;为日志内容，<strong>r</strong>&nbsp;是正则表达式，将<strong>p</strong>&nbsp;中符合<strong>r</strong>&nbsp;的内容替换为<strong>t</strong>&nbsp;。</p>

			<p>例如， &quot;%replace(%msg){&#39;\s&#39;, &#39;&#39;}&quot;</p>
			</td>
		</tr>
	</tbody>
</table>

<p><strong>格式修饰符，与转换符共同使用：</strong></p>

<p>可选的格式修饰符位于&ldquo;%&rdquo;和转换符之间。</p>

<p>第一个可选修饰符是<strong>左对齐</strong>&nbsp;标志，符号是减号&ldquo;-&rdquo;；接着是可选的<strong>最小宽度</strong>&nbsp;修饰符，用十进制数表示。如果字符小于最小宽度，则左填充或右填充，默认是左填充（即右对齐），填充符为空格。如果字符大于最小宽度，字符永远不会被截断。<strong>最大宽度</strong>&nbsp;修饰符，符号是点号&quot;.&quot;后面加十进制数。如果字符大于最大宽度，则从前面截断。点符号&ldquo;.&rdquo;后面加减号&ldquo;-&rdquo;在加数字，表示从尾部截断。</p>

<p>例如：%-4relative 表示，将输出从程序启动到创建日志记录的时间 进行左对齐 且最小宽度为4。</p>
