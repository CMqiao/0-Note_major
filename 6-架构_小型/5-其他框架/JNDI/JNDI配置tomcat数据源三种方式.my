<h1><a href="http://blog.csdn.net/dyllove98/article/details/7706218">在Tomcat配置JNDI数据源的三种方式</a></h1>

<p>在我过去工作的过程中,开发用服务器一般都是Tomcat</p>

<p>数据源的配置往往都是在applicationContext.xml中配置一个dataSource的bean</p>

<p>然后在部署时再修改JNDI配置</p>

<p>我猜是因为Tomcat的配置需要改配置文件</p>

<p>不像JBoss,Weblogic等服务器在管理界面可以直接添加JNDI数据源</p>

<p>也很少人去研究它的配置</p>

<p>最近做了个小项目,发布版本的时候都是通过ant编译成jar包之后丢给<a href="http://lib.csdn.net/base/softwaretest" target="_blank" title="软件测试知识库">测试</a></p>

<p>测试是大爷,教他修改数据源了还是当没听到</p>

<p>周末闲来无聊,看了一些Tomcat配置的教程,下面做一些总结</p>

<p>注:如果你的工程是直接丢在webapps下面的,server.xml中就没有工程对应的Context节点</p>

<p>更新:由于之前有些配置来自网络,不太好用,作了一些更新</p>

<p>对每种方法作了一些个人评价</p>

<p>PS:以下配置在apache-tomcat-6.0.35下测试通过,可以访问<a href="http://lib.csdn.net/base/mysql" target="_blank" title="MySQL知识库">数据库</a></p>

<p>第一种,单个应用独享数据源</p>

<h3>就一步,找到Tomcat的server.xml找到工程的Context节点,添加一个私有数据源</h3>

<ol start="1">
	<li>&lt;Context&nbsp;docBase=&quot;WebApp&quot;&nbsp;path=&quot;/WebApp&quot;&nbsp;reloadable=&quot;true&quot;&nbsp;source=&quot;org.eclipse.jst.jee.server:WebApp&quot;&gt;&nbsp;&nbsp;</li>
	<li>&lt;Resource&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;jdbc/mysql&quot;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;scope=&quot;Shareable&quot;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;type=&quot;javax.sql.DataSource&quot;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;factory=&quot;org.apache.tomcat.dbcp.dbcp.BasicDataSourceFactory&quot;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;url=&quot;jdbc:mysql://localhost:3306/test&quot;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;driverClassName&nbsp;=&quot;com.mysql.jdbc.Driver&quot;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;username=&quot;root&quot;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;password=&quot;root&quot;&nbsp;&nbsp;</li>
	<li>/&gt;&nbsp;&nbsp;</li>
	<li>&lt;/Context&gt;&nbsp;&nbsp;</li>
</ol>

<p>优点:简单</p>

<p>缺点:重用性差</p>

<h1>第二种,配置全局JNDI数据源,应用到单个应用</h1>

<p>分两步</p>

<h3>第一步, 找到Tomcat的server.xml中GlobalNamingResources节点,在节点下加一个全局数据源</h3>

<ol start="1">
	<li>&lt;Resource&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;jdbc/mysql&quot;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;scope=&quot;Shareable&quot;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;type=&quot;javax.sql.DataSource&quot;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;factory=&quot;org.apache.tomcat.dbcp.dbcp.BasicDataSourceFactory&quot;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;url=&quot;jdbc:mysql://localhost:3306/test&quot;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;driverClassName&nbsp;=&quot;com.mysql.jdbc.Driver&quot;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;username=&quot;root&quot;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;password=&quot;root&quot;&nbsp;&nbsp;</li>
	<li>/&gt;&nbsp;&nbsp;</li>
</ol>

<p>&lt;script type=&quot;text/javascript&quot;&gt;&lt;!-- google_ad_client = &quot;ca-pub-1944176156128447&quot;; /* csdn 横中 */ google_ad_slot = &quot;7877933139&quot;; google_ad_width = 468; google_ad_height = 60; //--&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;&lt;/script&gt;</p>

<h3>第二步,找到要应用此JNDI数据源的工程Context节点,增加对全局数据源的引用ResourceLink&nbsp;</h3>

<ol start="1">
	<li>&lt;Context&nbsp;docBase=&quot;WebApp&quot;&nbsp;path=&quot;/WebApp&quot;&nbsp;reloadable=&quot;true&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ResourceLink&nbsp;global=&quot;jdbc/mysql&quot;&nbsp;name=&quot;jdbc/mysql&quot;&nbsp;type=&quot;javax.sql.DataSource&quot;&nbsp;/&gt;&nbsp;&nbsp;</li>
	<li>&lt;/Context&gt;&nbsp;&nbsp;</li>
</ol>

<p>优点:重用性,可控性</p>

<p>缺点:配置相对第三种方法要繁琐一点,每个工程都得配</p>

<h1>第三种,配置全局JNDI数据源,应用到所有Tomcat下部署的应用</h1>

<p>也分两步</p>

<h3>第一步</h3>

<p>&nbsp; &nbsp; 参考第二种的第一步</p>

<h3>第二步,找到Tomcat的context.xml,在Context节点下加一个ResourceLink节点对第一步配置的数据源进行引用</h3>

<p>这个XML配置文件的根节点就是&lt;Context&gt;</p>

<ol start="1">
	<li>&lt;Context&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ResourceLink&nbsp;global=&quot;jdbc/mysql&quot;&nbsp;name=&quot;jdbc/mysql&quot;&nbsp;type=&quot;javax.sql.DataSource&quot;&nbsp;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&lt;WatchedResource&gt;WEB-INF/web.xml&lt;/WatchedResource&gt;&nbsp;&nbsp;</li>
	<li>&lt;Context&gt;&nbsp;&nbsp;</li>
</ol>

<h2>优点:重用性,一次性到位</h2>

<p>缺点:没有可控性</p>

<h2>Spring对JNDI数据源的引用</h2>

<p>在applicationContext.xml中加一个bean,替代原来的dataSource</p>

<ol start="1">
	<li>&lt;jee:jndi-lookup&nbsp;id=&quot;dataSource&quot;&nbsp;jndi-name=&quot;jdbc/mysql&quot;&nbsp;/&gt;&nbsp;&nbsp;</li>
</ol>

<h2>C3P0数据源的配置</h2>

<p>type和factory的值发生变化</p>

<p>username=&gt;user</p>

<p>url=&gt;jdbcUrl</p>

<p>driverClassName=&gt;driverClass</p>

<ol start="1">
	<li>&lt;Resource&nbsp;name=&quot;jdbc/mysql_c3p0&quot;&nbsp;scope=&quot;Shareable&quot;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;type=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;factory=&quot;org.apache.naming.factory.BeanFactory&quot;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;jdbcUrl=&quot;jdbc:mysql://localhost:3306/test&quot;&nbsp;driverClass=&quot;com.mysql.jdbc.Driver&quot;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;user=&quot;root&quot;&nbsp;password=&quot;root&quot;&nbsp;/&gt;&nbsp;&nbsp;</li>
</ol>
