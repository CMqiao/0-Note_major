<h1>&nbsp;Spring mvc中@RequestMapping 6个基本用法小结</h1>

<p>小结下spring mvc中的@RequestMapping的用法。</p>

<h2>1）最基本的，方法级别上应用，例如：&nbsp;</h2>

<ol start="1">
	<li>@RequestMapping(value=&quot;/departments&quot;)&nbsp;&nbsp;</li>
	<li>public&nbsp;String&nbsp;simplePattern(){&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;System.out.println(&quot;simplePattern&nbsp;method&nbsp;was&nbsp;called&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;return&nbsp;&quot;someResult&quot;;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;&nbsp; 则访问http://localhost/xxxx/departments的时候，会调用 simplePattern方法了&nbsp;</p>

<h2>2） 参数绑定&nbsp;</h2>

<ol start="1">
	<li>@RequestMapping(value=&quot;/departments&quot;)&nbsp;&nbsp;</li>
	<li>public&nbsp;String&nbsp;findDepatment(&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;@RequestParam(&quot;departmentId&quot;)&nbsp;String&nbsp;departmentId){&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Find&nbsp;department&nbsp;with&nbsp;ID:&nbsp;&quot;&nbsp;+&nbsp;departmentId);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;someResult&quot;;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>&nbsp; 形如这样的访问形式：&nbsp;<br />
&nbsp;&nbsp; /departments?departmentId=23就可以触发访问findDepatment方法了&nbsp;</p>

<h2>3 REST风格的参数&nbsp;</h2>

<ol start="1">
	<li>@RequestMapping(value=&quot;/departments/{departmentId}&quot;)&nbsp;&nbsp;</li>
	<li>public&nbsp;String&nbsp;findDepatment(@PathVariable&nbsp;String&nbsp;departmentId){&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;System.out.println(&quot;Find&nbsp;department&nbsp;with&nbsp;ID:&nbsp;&quot;&nbsp;+&nbsp;departmentId);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;return&nbsp;&quot;someResult&quot;;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>形如REST风格的地址访问，比如：&nbsp;<br />
/departments/23，其中用(@PathVariable接收rest风格的参数&nbsp;</p>

<h2>4 REST风格的参数绑定形式之2&nbsp;</h2>

<p>先看例子，这个有点象之前的：&nbsp;</p>

<ol start="1">
	<li>@RequestMapping(value=&quot;/departments/{departmentId}&quot;)&nbsp;&nbsp;</li>
	<li>public&nbsp;String&nbsp;findDepatmentAlternative(&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;@PathVariable(&quot;departmentId&quot;)&nbsp;String&nbsp;someDepartmentId){&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Find&nbsp;department&nbsp;with&nbsp;ID:&nbsp;&quot;&nbsp;+&nbsp;someDepartmentId);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;someResult&quot;;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>这个有点不同，就是接收形如/departments/23的URL访问，把23作为传入的departmetnId,，但是在实际的方法findDepatmentAlternative中，使用&nbsp;<br />
@PathVariable(&quot;departmentId&quot;) String someDepartmentId，将其绑定为&nbsp;<br />
someDepartmentId,所以这里someDepartmentId为23&nbsp;</p>

<h2>5 url中同时绑定多个id&nbsp;</h2>

<ol start="1">
	<li>@RequestMapping(value=&quot;/departments/{departmentId}/employees/{employeeId}&quot;)&nbsp;&nbsp;</li>
	<li>public&nbsp;String&nbsp;findEmployee(&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;@PathVariable&nbsp;String&nbsp;departmentId,&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;@PathVariable&nbsp;String&nbsp;employeeId){&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Find&nbsp;employee&nbsp;with&nbsp;ID:&nbsp;&quot;&nbsp;+&nbsp;employeeId&nbsp;+&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&nbsp;from&nbsp;department:&nbsp;&quot;&nbsp;+&nbsp;departmentId);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;someResult&quot;;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;&nbsp; 这个其实也比较好理解了。&nbsp;</p>

<h2>6 支持正则表达式&nbsp;</h2>

<ol start="1">
	<li>@RequestMapping(value=&quot;/{textualPart:[a-z-]+}.{numericPart:[\\d]+}&quot;)&nbsp;&nbsp;</li>
	<li>public&nbsp;String&nbsp;regularExpression(&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;@PathVariable&nbsp;String&nbsp;textualPart,&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;@PathVariable&nbsp;String&nbsp;numericPart){&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Textual&nbsp;part:&nbsp;&quot;&nbsp;+&nbsp;textualPart&nbsp;+&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;,&nbsp;numeric&nbsp;part:&nbsp;&quot;&nbsp;+&nbsp;numericPart);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;someResult&quot;;&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>比如如下的URL：/sometext.123，则输出：</p>

<p>Textual part: sometext, numeric part: 123.&nbsp;</p>
