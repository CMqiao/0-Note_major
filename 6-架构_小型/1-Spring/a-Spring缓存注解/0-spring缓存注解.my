<h1>Spring缓存注解@Cacheable、@CacheEvict、@CachePut使用</h1>

<p>从3.1开始，Spring引入了对Cache的支持。其使用方法和原理都类似于Spring对事务管理的支持。Spring Cache是作用在方法上的，其核心思想是这样的：当我们在调用一个缓存方法时会把该方法参数和返回结果作为一个键值对存放在缓存中，等到下次利用同样的参数来调用该方法时将不再执行该方法，而是直接从缓存中获取结果进行返回。所以在使用Spring Cache的时候我们要保证我们缓存的方法对于相同的方法参数要有相同的返回结果。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用Spring Cache需要我们做两方面的事：</p>

<p>n&nbsp;&nbsp;声明某些方法使用缓存</p>

<p>n&nbsp;&nbsp;配置Spring对Cache的支持</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;和Spring对事务管理的支持一样，Spring对Cache的支持也有基于注解和基于XML配置两种方式。下面我们先来看看基于注解的方式。</p>

<h2>1&nbsp; 基于注解的支持</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Spring为我们提供了几个注解来支持Spring Cache。其核心主要是@Cacheable和@CacheEvict。使用@Cacheable标记的方法在执行后Spring Cache将缓存其返回结果，而使用@CacheEvict标记的方法会在方法执行前或者执行后移除Spring Cache中的某些元素。下面我们将来详细介绍一下Spring基于注解对Cache的支持所提供的几个注解。</p>

<h2>1.1&nbsp;&nbsp;&nbsp;&nbsp;@Cacheable</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Cacheable可以标记在一个方法上，也可以标记在一个类上。当标记在一个方法上时表示该方法是支持缓存的，当标记在一个类上时则表示该类所有的方法都是支持缓存的。对于一个支持缓存的方法，Spring会在其被调用后将其返回值缓存起来，以保证下次利用同样的参数来执行该方法时可以直接从缓存中获取结果，而不需要再次执行该方法。Spring在缓存方法的返回值时是以键值对进行缓存的，值就是方法的返回结果，至于键的话，Spring又支持两种策略，默认策略和自定义策略，这个稍后会进行说明。需要注意的是当一个支持缓存的方法在对象内部被调用时是不会触发缓存功能的。@Cacheable可以指定三个属性，value、key和condition。</p>

<h3>1.1.1&nbsp;&nbsp;value属性指定Cache名称</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value属性是必须指定的，其表示当前方法的返回值是会被缓存在哪个Cache上的，对应Cache的名称。其可以是一个Cache也可以是多个Cache，当需要指定多个Cache时其是一个数组。</p>

<p>&nbsp;&nbsp;&nbsp;@Cacheable(&quot;cache1&quot;)//Cache是发生在cache1上的</p>

<p>&nbsp;&nbsp;&nbsp;public&nbsp;User find(Integer id) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;returnnull;</p>

<p>&nbsp;&nbsp; }</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;@Cacheable({&quot;cache1&quot;,&nbsp;&quot;cache2&quot;})//Cache是发生在cache1和cache2上的</p>

<p>&nbsp;&nbsp;&nbsp;public&nbsp;User find(Integer id) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;returnnull;</p>

<p>&nbsp;&nbsp; }</p>

<p>&nbsp;</p>

<h3>1.1.2&nbsp;&nbsp;使用key属性自定义key</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; key属性是用来指定Spring缓存方法的返回结果时对应的key的。该属性支持SpringEL表达式。当我们没有指定该属性时，Spring将使用默认策略生成key。我们这里先来看看自定义策略，至于默认策略会在后文单独介绍。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;自定义策略是指我们可以通过Spring的EL表达式来指定我们的key。这里的EL表达式可以使用方法参数及它们对应的属性。使用方法参数时我们可以直接使用&ldquo;#参数名&rdquo;或者&ldquo;#p参数index&rdquo;。下面是几个使用参数作为key的示例。</p>

<p>&nbsp;&nbsp;&nbsp;@Cacheable(value=&quot;users&quot;, key=&quot;#id&quot;)</p>

<p>&nbsp;&nbsp;&nbsp;public&nbsp;User find(Integer id) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;returnnull;</p>

<p>&nbsp;&nbsp; }</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;@Cacheable(value=&quot;users&quot;, key=&quot;#p0&quot;)</p>

<p>&nbsp;&nbsp;&nbsp;public&nbsp;User find(Integer id) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;returnnull;</p>

<p>&nbsp;&nbsp; }</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;@Cacheable(value=&quot;users&quot;, key=&quot;#user.id&quot;)</p>

<p>&nbsp;&nbsp;&nbsp;public&nbsp;User find(User user) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;returnnull;</p>

<p>&nbsp;&nbsp; }</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;@Cacheable(value=&quot;users&quot;, key=&quot;#p0.id&quot;)</p>

<p>&nbsp;&nbsp;&nbsp;public&nbsp;User find(User user) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;returnnull;</p>

<p>&nbsp;&nbsp; }</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除了上述使用方法参数作为key之外，Spring还为我们提供了一个root对象可以用来生成key。通过该root对象我们可以获取到以下信息。</p>

<table border="1" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>属性名称</p>
			</td>
			<td>
			<p>描述</p>
			</td>
			<td>
			<p>示例</p>
			</td>
		</tr>
		<tr>
			<td>
			<p>methodName</p>
			</td>
			<td>
			<p>当前方法名</p>
			</td>
			<td>
			<p>#root.methodName</p>
			</td>
		</tr>
		<tr>
			<td>
			<p>method</p>
			</td>
			<td>
			<p>当前方法</p>
			</td>
			<td>
			<p>#root.method.name</p>
			</td>
		</tr>
		<tr>
			<td>
			<p>target</p>
			</td>
			<td>
			<p>当前被调用的对象</p>
			</td>
			<td>
			<p>#root.target</p>
			</td>
		</tr>
		<tr>
			<td>
			<p>targetClass</p>
			</td>
			<td>
			<p>当前被调用的对象的class</p>
			</td>
			<td>
			<p>#root.targetClass</p>
			</td>
		</tr>
		<tr>
			<td>
			<p>args</p>
			</td>
			<td>
			<p>当前方法参数组成的数组</p>
			</td>
			<td>
			<p>#root.args[0]</p>
			</td>
		</tr>
		<tr>
			<td>
			<p>caches</p>
			</td>
			<td>
			<p>当前被调用的方法使用的Cache</p>
			</td>
			<td>
			<p>#root.caches[0].name</p>
			</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当我们要使用root对象的属性作为key时我们也可以将&ldquo;#root&rdquo;省略，因为Spring默认使用的就是root对象的属性。如：</p>

<p>&nbsp;&nbsp;&nbsp;@Cacheable(value={&quot;users&quot;,&nbsp;&quot;xxx&quot;}, key=&quot;caches[1].name&quot;)</p>

<p>&nbsp;&nbsp;&nbsp;public&nbsp;User find(User user) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;returnnull;</p>

<p>&nbsp;&nbsp; }</p>

<p>&nbsp;</p>

<h3>1.1.3&nbsp;&nbsp;condition属性指定发生的条件</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有的时候我们可能并不希望缓存一个方法所有的返回结果。通过condition属性可以实现这一功能。condition属性默认为空，表示将缓存所有的调用情形。其值是通过SpringEL表达式来指定的，当为true时表示进行缓存处理；当为false时表示不进行缓存处理，即每次调用该方法时该方法都会执行一次。如下示例表示只有当user的id为偶数时才会进行缓存。</p>

<p>&nbsp;&nbsp;&nbsp;@Cacheable(value={&quot;users&quot;}, key=&quot;#user.id&quot;, condition=&quot;#user.id%2==0&quot;)</p>

<p>&nbsp;&nbsp;&nbsp;public&nbsp;User find(User user) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.<em>out</em>.println(&quot;find user by user &quot;&nbsp;+ user);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;user;</p>

<p>&nbsp;&nbsp; }</p>

<p>&nbsp;</p>

<h2>1.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@CachePut</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在支持Spring Cache的环境下，对于使用@Cacheable标注的方法，Spring在每次执行前都会检查Cache中是否存在相同key的缓存元素，如果存在就不再执行该方法，而是直接从缓存中获取结果进行返回，否则才会执行并将返回结果存入指定的缓存中。@CachePut也可以声明一个方法支持缓存功能。与@Cacheable不同的是使用@CachePut标注的方法在执行前不会去检查缓存中是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @CachePut也可以标注在类上和方法上。使用@CachePut时我们可以指定的属性跟@Cacheable是一样的。</p>

<p>&nbsp;&nbsp;&nbsp;@CachePut(&quot;users&quot;)//每次都会执行方法，并将结果存入指定的缓存中</p>

<p>&nbsp;&nbsp;&nbsp;public&nbsp;User find(Integer id) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;returnnull;</p>

<p>&nbsp;&nbsp; }</p>

<p>&nbsp;</p>

<h2>1.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@CacheEvict</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @CacheEvict是用来标注在需要清除缓存元素的方法或类上的。当标记在一个类上时表示其中所有的方法的执行都会触发缓存的清除操作。@CacheEvict可以指定的属性有value、key、condition、allEntries和beforeInvocation。其中value、key和condition的语义与@Cacheable对应的属性类似。即value表示清除操作是发生在哪些Cache上的（对应Cache的名称）；key表示需要清除的是哪个key，如未指定则会使用默认策略生成的key；condition表示清除操作发生的条件。下面我们来介绍一下新出现的两个属性allEntries和beforeInvocation。</p>

<h3>1.3.1&nbsp;&nbsp;allEntries属性</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; allEntries是boolean类型，表示是否需要清除缓存中的所有元素。默认为false，表示不需要。当指定了allEntries为true时，Spring Cache将忽略指定的key。有的时候我们需要Cache一下清除所有的元素，这比一个一个清除元素更有效率。</p>

<p>&nbsp;&nbsp;&nbsp;@CacheEvict(value=&quot;users&quot;, allEntries=true)</p>

<p>&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;delete(Integer id) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.<em>out</em>.println(&quot;delete user by id: &quot;&nbsp;+ id);</p>

<p>&nbsp;&nbsp; }</p>

<p>&nbsp;</p>

<h3>1.3.2&nbsp;&nbsp;beforeInvocation属性</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;清除操作默认是在对应方法成功执行之后触发的，即方法如果因为抛出异常而未能成功返回时也不会触发清除操作。使用beforeInvocation可以改变触发清除操作的时间，当我们指定该属性值为true时，Spring会在调用该方法之前清除缓存中的指定元素。</p>

<p>&nbsp;&nbsp;&nbsp;@CacheEvict(value=&quot;users&quot;, beforeInvocation=true)</p>

<p>&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;delete(Integer id) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.<em>out</em>.println(&quot;delete user by id: &quot;&nbsp;+ id);</p>

<p>&nbsp;&nbsp; }</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实除了使用@CacheEvict清除缓存元素外，当我们使用Ehcache作为实现时，我们也可以配置Ehcache自身的驱除策略，其是通过Ehcache的配置文件来指定的。由于Ehcache不是本文描述的重点，这里就不多赘述了，想了解更多关于Ehcache的信息，请查看我关于Ehcache的专栏。</p>

<p>&nbsp;</p>

<h2>1.4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Caching</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Caching注解可以让我们在一个方法或者类上同时指定多个Spring Cache相关的注解。其拥有三个属性：cacheable、put和evict，分别用于指定@Cacheable、@CachePut和@CacheEvict。</p>

<p>&nbsp;&nbsp;&nbsp;@Caching(cacheable =&nbsp;@Cacheable(&quot;users&quot;), evict = {&nbsp;@CacheEvict(&quot;cache2&quot;),</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@CacheEvict(value =&nbsp;&quot;cache3&quot;, allEntries =&nbsp;true) })</p>

<p>&nbsp;&nbsp;&nbsp;public&nbsp;User find(Integer id) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;returnnull;</p>

<p>&nbsp;&nbsp; }</p>

<p>&nbsp;</p>

<h2>1.5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用自定义注解</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Spring允许我们在配置可缓存的方法时使用自定义的注解，前提是自定义的注解上必须使用对应的注解进行标注。如我们有如下这么一个使用@Cacheable进行标注的自定义注解。</p>

<p>@Target({ElementType.<em>TYPE</em>, ElementType.<em>METHOD</em>})</p>

<p>@Retention(RetentionPolicy.<em>RUNTIME</em>)</p>

<p>@Cacheable(value=&quot;users&quot;)</p>

<p>public&nbsp;@interface&nbsp;MyCacheable&nbsp;{</p>

<p>&nbsp;</p>

<p>}</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么在我们需要缓存的方法上使用@MyCacheable进行标注也可以达到同样的效果。</p>

<p>&nbsp;&nbsp;&nbsp;@MyCacheable</p>

<p>&nbsp;&nbsp;&nbsp;public&nbsp;User findById(Integer id) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.<em>out</em>.println(&quot;find user by id: &quot;&nbsp;+ id);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; User user =&nbsp;new&nbsp;User();</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; user.setId(id);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; user.setName(&quot;Name&quot;&nbsp;+ id);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;user;</p>

<p>&nbsp;&nbsp; }</p>

<p>&nbsp;</p>

<h1>2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;配置Spring对Cache的支持</h1>

<h2>2.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;声明对Cache的支持</h2>

<h3>2.1.1&nbsp;&nbsp;基于注解</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;配置Spring对基于注解的Cache的支持，首先我们需要在Spring的配置文件中引入cache命名空间，其次通过&lt;cache:annotation-driven /&gt;就可以启用Spring对基于注解的Cache的支持。</p>

<p>&lt;?xml&nbsp;version=<em>&quot;1.0&quot;</em>&nbsp;encoding=<em>&quot;UTF-8&quot;</em>?&gt;</p>

<p>&lt;beans&nbsp;xmlns=<em>&quot;http://www.springframework.org/schema/beans&quot;</em></p>

<p>&nbsp;&nbsp;&nbsp;xmlns:xsi=<em>&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</em></p>

<p>&nbsp;&nbsp;&nbsp;xmlns:cache=<em>&quot;http://www.springframework.org/schema/cache&quot;</em></p>

<p>&nbsp;&nbsp;&nbsp;xsi:schemaLocation=<em>&quot;http://www.springframework.org/schema/beans</em></p>

<p><em>&nbsp;&nbsp;&nbsp;&nbsp; http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</em></p>

<p><em>&nbsp;&nbsp;&nbsp;&nbsp; http://www.springframework.org/schema/cache</em></p>

<p><em>&nbsp;&nbsp;&nbsp;&nbsp; http://www.springframework.org/schema/cache/spring-cache.xsd&quot;</em>&gt;</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&lt;cache:annotation-driven/&gt;</p>

<p>&nbsp;</p>

<p>&lt;/beans&gt;</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;cache:annotation-driven/&gt;有一个cache-manager属性用来指定当前所使用的CacheManager对应的bean的名称，默认是cacheManager，所以当我们的CacheManager的id为cacheManager时我们可以不指定该参数，否则就需要我们指定了。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;cache:annotation-driven/&gt;还可以指定一个mode属性，可选值有proxy和aspectj。默认是使用proxy。当mode为proxy时，只有缓存方法在外部被调用的时候Spring Cache才会发生作用，这也就意味着如果一个缓存方法在其声明对象内部被调用时Spring Cache是不会发生作用的。而mode为aspectj时就不会有这种问题。另外使用proxy时，只有public方法上的@Cacheable等标注才会起作用，如果需要非public方法上的方法也可以使用Spring Cache时把mode设置为aspectj。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此外，&lt;cache:annotation-driven/&gt;还可以指定一个proxy-target-class属性，表示是否要代理class，默认为false。我们前面提到的@Cacheable、@cacheEvict等也可以标注在接口上，这对于基于接口的代理来说是没有什么问题的，但是需要注意的是当我们设置proxy-target-class为true或者mode为aspectj时，是直接基于class进行操作的，定义在接口上的@Cacheable等Cache注解不会被识别到，那对应的Spring Cache也不会起作用了。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;需要注意的是&lt;cache:annotation-driven/&gt;只会去寻找定义在同一个ApplicationContext下的@Cacheable等缓存注解。</p>

<p>&nbsp;</p>

<h3>2.1.2&nbsp;&nbsp;基于XML配置</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除了使用注解来声明对Cache的支持外，Spring还支持使用XML来声明对Cache的支持。这主要是通过类似于aop:advice的cache:advice来进行的。在cache命名空间下定义了一个cache:advice元素用来定义一个对于Cache的advice。其需要指定一个cache-manager属性，默认为cacheManager。cache:advice下面可以指定多个cache:caching元素，其有点类似于使用注解时的@Caching注解。cache:caching元素下又可以指定cache:cacheable、cache:cache-put和cache:cache-evict元素，它们类似于使用注解时的@Cacheable、@CachePut和@CacheEvict。下面来看一个示例：</p>

<p>&nbsp;&nbsp;&nbsp;&lt;cache:advice&nbsp;id=<em>&quot;cacheAdvice&quot;</em>&nbsp;cache-manager=<em>&quot;cacheManager&quot;</em>&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;cache:caching&nbsp;cache=<em>&quot;users&quot;</em>&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;cache:cacheable&nbsp;method=<em>&quot;findById&quot;</em>&nbsp;key=<em>&quot;#p0&quot;</em>/&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;cache:cacheable&nbsp;method=<em>&quot;find&quot;</em>&nbsp;key=<em>&quot;#user.id&quot;</em>/&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;cache:cache-evict&nbsp;method=<em>&quot;deleteAll&quot;</em>&nbsp;all-entries=<em>&quot;true&quot;</em>/&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/cache:caching&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&lt;/cache:advice&gt;</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面配置定义了一个名为cacheAdvice的cache:advice，其中指定了将缓存findById方法和find方法到名为users的缓存中。这里的方法还可以使用通配符&ldquo;*&rdquo;，比如&ldquo;find*&rdquo;表示任何以&ldquo;find&rdquo;开始的方法。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有了cache:advice之后，我们还需要引入aop命名空间，然后通过aop:config指定定义好的cacheAdvice要应用在哪些pointcut上。如：</p>

<p>&nbsp;&nbsp;&nbsp;&lt;aop:config&nbsp;proxy-target-class=<em>&quot;false&quot;</em>&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;aop:advisor&nbsp;advice-ref=<em>&quot;cacheAdvice&quot;</em>&nbsp;pointcut=<em>&quot;execution(* com.xxx.UserService.*(..))&quot;</em>/&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&lt;/aop:config&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面的配置表示在调用com.xxx.UserService中任意公共方法时将使用cacheAdvice对应的cache:advice来进行Spring Cache处理。更多关于Spring Aop的内容不在本文讨论范畴内。</p>

<p>&nbsp;</p>

<h2>2.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;配置CacheManager</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CacheManager是Spring定义的一个用来管理Cache的接口。Spring自身已经为我们提供了两种CacheManager的实现，一种是基于Java API的ConcurrentMap，另一种是基于第三方Cache实现&mdash;&mdash;Ehcache，如果我们需要使用其它类型的缓存时，我们可以自己来实现Spring的CacheManager接口或AbstractCacheManager抽象类。下面分别来看看Spring已经为我们实现好了的两种CacheManager的配置示例。</p>

<h3>2.2.1&nbsp;&nbsp;基于ConcurrentMap的配置</h3>

<p>&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=<em>&quot;cacheManager&quot;</em>&nbsp;class=<em>&quot;org.springframework.cache.support.SimpleCacheManager&quot;</em>&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=<em>&quot;caches&quot;</em>&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;set&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;class=<em>&quot;org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean&quot;&nbsp;</em>p:name=<em>&quot;xxx&quot;</em>/&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/set&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/property&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&lt;/bean&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面的配置使用的是一个SimpleCacheManager，其中包含一个名为&ldquo;xxx&rdquo;的ConcurrentMapCache。</p>

<p>&nbsp;</p>

<h3>2.2.2&nbsp;&nbsp;基于Ehcache的配置</h3>

<p>&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;Ehcache实现&nbsp;--&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=<em>&quot;cacheManager&quot;</em>&nbsp;class=<em>&quot;org.springframework.cache.ehcache.EhCacheCacheManager&quot;&nbsp;</em>p:cache-manager-ref=<em>&quot;ehcacheManager&quot;</em>/&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=<em>&quot;ehcacheManager&quot;</em>&nbsp;class=<em>&quot;org.springframework.cache.ehcache.EhCacheManagerFactoryBean&quot;&nbsp;</em>p:config-location=<em>&quot;ehcache-spring.xml&quot;</em>/&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面的配置使用了一个Spring提供的EhCacheCacheManager来生成一个Spring的CacheManager，其接收一个Ehcache的CacheManager，因为真正用来存入缓存数据的还是Ehcache。Ehcache的CacheManager是通过Spring提供的EhCacheManagerFactoryBean来生成的，其可以通过指定ehcache的配置文件位置来生成一个Ehcache的CacheManager。若未指定则将按照Ehcache的默认规则取classpath根路径下的ehcache.xml文件，若该文件也不存在，则获取Ehcache对应jar包中的ehcache-failsafe.xml文件作为配置文件。更多关于Ehcache的内容这里就不多说了，它不属于本文讨论的内容，欲了解更多关于Ehcache的内容可以参考我之前发布的Ehcache系列文章，也可以参考官方文档等。</p>

<p>&nbsp;</p>

<h1>3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;键的生成策略</h1>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;键的生成策略有两种，一种是默认策略，一种是自定义策略。</p>

<h2>3.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;默认策略</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;默认的key生成策略是通过KeyGenerator生成的，其默认策略如下：</p>

<p>n&nbsp;&nbsp;如果方法没有参数，则使用0作为key。</p>

<p>n&nbsp;&nbsp;如果只有一个参数的话则使用该参数作为key。</p>

<p>n&nbsp;&nbsp;如果参数多余一个的话则使用所有参数的hashCode作为key。</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果我们需要指定自己的默认策略的话，那么我们可以实现自己的KeyGenerator，然后指定我们的Spring Cache使用的KeyGenerator为我们自己定义的KeyGenerator。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用基于注解的配置时是通过cache:annotation-driven指定的.</p>

<p>&nbsp;&nbsp;&nbsp;&lt;cache:annotation-driven&nbsp;key-generator=<em>&quot;userKeyGenerator&quot;</em>/&gt;</p>

<p>&nbsp;&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=<em>&quot;userKeyGenerator&quot;</em>&nbsp;class=<em>&quot;com.xxx.cache.UserKeyGenerator&quot;</em>/&gt;</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而使用基于XML配置时是通过cache:advice来指定的。</p>

<p>&nbsp;&nbsp;&nbsp;&lt;cache:advice&nbsp;id=<em>&quot;cacheAdvice&quot;</em>&nbsp;cache-manager=<em>&quot;cacheManager&quot;</em>&nbsp;key-generator=<em>&quot;userKeyGenerator&quot;</em>&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&lt;/cache:advice&gt;</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;需要注意的是此时我们所有的Cache使用的Key的默认生成策略都是同一个KeyGenerator。</p>

<h2>3.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;自定义策略</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;自定义策略是指我们可以通过Spring的EL表达式来指定我们的key。这里的EL表达式可以使用方法参数及它们对应的属性。使用方法参数时我们可以直接使用&ldquo;#参数名&rdquo;或者&ldquo;#p参数index&rdquo;。下面是几个使用参数作为key的示例。</p>

<p>&nbsp;&nbsp;&nbsp;@Cacheable(value=&quot;users&quot;, key=&quot;#id&quot;)</p>

<p>&nbsp;&nbsp;&nbsp;public&nbsp;User find(Integer id) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;returnnull;</p>

<p>&nbsp;&nbsp; }</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;@Cacheable(value=&quot;users&quot;, key=&quot;#p0&quot;)</p>

<p>&nbsp;&nbsp;&nbsp;public&nbsp;User find(Integer id) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;returnnull;</p>

<p>&nbsp;&nbsp; }</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;@Cacheable(value=&quot;users&quot;, key=&quot;#user.id&quot;)</p>

<p>&nbsp;&nbsp;&nbsp;public&nbsp;User find(User user) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;returnnull;</p>

<p>&nbsp;&nbsp; }</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;@Cacheable(value=&quot;users&quot;, key=&quot;#p0.id&quot;)</p>

<p>&nbsp;&nbsp;&nbsp;public&nbsp;User find(User user) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;returnnull;</p>

<p>&nbsp;&nbsp; }</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除了上述使用方法参数作为key之外，Spring还为我们提供了一个root对象可以用来生成key。通过该root对象我们可以获取到以下信息。</p>

<table border="1" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>属性名称</p>
			</td>
			<td>
			<p>描述</p>
			</td>
			<td>
			<p>示例</p>
			</td>
		</tr>
		<tr>
			<td>
			<p>methodName</p>
			</td>
			<td>
			<p>当前方法名</p>
			</td>
			<td>
			<p>#root.methodName</p>
			</td>
		</tr>
		<tr>
			<td>
			<p>method</p>
			</td>
			<td>
			<p>当前方法</p>
			</td>
			<td>
			<p>#root.method.name</p>
			</td>
		</tr>
		<tr>
			<td>
			<p>target</p>
			</td>
			<td>
			<p>当前被调用的对象</p>
			</td>
			<td>
			<p>#root.target</p>
			</td>
		</tr>
		<tr>
			<td>
			<p>targetClass</p>
			</td>
			<td>
			<p>当前被调用的对象的class</p>
			</td>
			<td>
			<p>#root.targetClass</p>
			</td>
		</tr>
		<tr>
			<td>
			<p>args</p>
			</td>
			<td>
			<p>当前方法参数组成的数组</p>
			</td>
			<td>
			<p>#root.args[0]</p>
			</td>
		</tr>
		<tr>
			<td>
			<p>caches</p>
			</td>
			<td>
			<p>当前被调用的方法使用的Cache</p>
			</td>
			<td>
			<p>#root.caches[0].name</p>
			</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当我们要使用root对象的属性作为key时我们也可以将&ldquo;#root&rdquo;省略，因为Spring默认使用的就是root对象的属性。如：</p>

<p>&nbsp;&nbsp;&nbsp;@Cacheable(value={&quot;users&quot;,&nbsp;&quot;xxx&quot;}, key=&quot;caches[1].name&quot;)</p>

<p>&nbsp;&nbsp;&nbsp;public&nbsp;User find(User user) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;returnnull;</p>

<p>&nbsp;&nbsp; }</p>

<p>&nbsp;</p>

<h1>4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Spring单独使用Ehcache</h1>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面介绍的内容是Spring内置的对Cache的支持，其实我们也可以通过Spring自己单独的使用Ehcache的CacheManager或Ehcache对象。通过在Application Context中配置EhCacheManagerFactoryBean和EhCacheFactoryBean，我们就可以把对应的EhCache的CacheManager和Ehcache对象注入到其它的Spring bean对象中进行使用。</p>

<p>&nbsp;</p>

<h2>4.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EhCacheManagerFactoryBean</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; EhCacheManagerFactoryBean是Spring内置的一个可以产生Ehcache的CacheManager对象的FactoryBean。其可以通过属性configLocation指定用于创建CacheManager的Ehcache配置文件的路径，通常是ehcache.xml文件的路径。如果没有指定configLocation，则将使用默认位置的配置文件创建CacheManager，这是属于Ehcache自身的逻辑，即如果在classpath根路径下存在ehcache.xml文件，则直接使用该文件作为Ehcache的配置文件，否则将使用ehcache-xxx.jar中的ehcache-failsafe.xml文件作为配置文件来创建Ehcache的CacheManager。此外，如果不希望创建的CacheManager使用默认的名称（在ehcache.xml文件中定义的，或者是由CacheManager内部定义的），则可以通过cacheManagerName属性进行指定。下面是一个配置EhCacheManagerFactoryBean的示例。</p>

<p>&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;定义CacheManager --&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=<em>&quot;cacheManager&quot;</em>&nbsp;class=<em>&quot;org.springframework.cache.ehcache.EhCacheManagerFactoryBean&quot;</em>&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;指定配置文件的位置&nbsp;--&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=<em>&quot;configLocation&quot;</em>&nbsp;value=<em>&quot;/WEB-INF/config/ehcache.xml&quot;</em>/&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;指定新建的CacheManager的名称&nbsp;--&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=<em>&quot;cacheManagerName&quot;</em>&nbsp;value=<em>&quot;cacheManagerName&quot;</em>/&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&lt;/bean&gt;</p>

<p>&nbsp;</p>

<h2>4.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EhCacheFactoryBean</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EhCacheFactoryBean是用来产生Ehcache的Ehcache对象的FactoryBean。定义EhcacheFactoryBean时有两个很重要的属性我们可以来指定。一个是cacheManager属性，其可以指定将用来获取或创建Ehcache的CacheManager对象，若未指定则将通过CacheManager.create()获取或创建默认的CacheManager。另一个重要属性是cacheName，其表示当前EhCacheFactoryBean对应的是CacheManager中的哪一个Ehcache对象，若未指定默认使用beanName作为cacheName。若CacheManager中不存在对应cacheName的Ehcache对象，则将使用CacheManager创建一个名为cacheName的Cache对象。此外我们还可以通过EhCacheFactoryBean的timeToIdle、timeToLive等属性指定要创建的Cache的对应属性，注意这些属性只对CacheManager中不存在对应Cache时新建的Cache才起作用，对已经存在的Cache将不起作用，更多属性设置请参考Spring的API文档。此外还有几个属性是对不管是已经存在还是新创建的Cache都起作用的属性：statisticsEnabled、sampledStatisticsEnabled、disabled、blocking和cacheEventListeners，其中前四个默认都是false，最后一个表示为当前Cache指定CacheEventListener。下面是一个定义EhCacheFactoryBean的示例。</p>

<p>&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;定义CacheManager --&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=<em>&quot;cacheManager&quot;</em>&nbsp;class=<em>&quot;org.springframework.cache.ehcache.EhCacheManagerFactoryBean&quot;</em>&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;指定配置文件的位置&nbsp;--&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=<em>&quot;configLocation&quot;</em>&nbsp;value=<em>&quot;/WEB-INF/config/ehcache.xml&quot;</em>/&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;指定新建的CacheManager的名称&nbsp;--&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=<em>&quot;cacheManagerName&quot;</em>&nbsp;value=<em>&quot;cacheManagerName&quot;</em>/&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&lt;/bean&gt;</p>

<p>&nbsp;&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;定义一个Ehcache&nbsp;--&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=<em>&quot;userCache&quot;</em>&nbsp;class=<em>&quot;org.springframework.cache.ehcache.EhCacheFactoryBean&quot;</em>&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=<em>&quot;cacheName&quot;</em>&nbsp;value=<em>&quot;user&quot;</em>/&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=<em>&quot;cacheManager&quot;</em>&nbsp;ref=<em>&quot;cacheManager&quot;</em>/&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&lt;/bean&gt;</p>
