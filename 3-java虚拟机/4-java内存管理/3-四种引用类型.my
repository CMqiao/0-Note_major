<h1>java的四种引用，强弱软虚，用到的场景</h1>

<h2>1、强引用（StrongReference）</h2>

<p>强引用是使用最普遍的引用。如果一个对象具有强引用，那垃圾回收器绝不会回收它。如下： &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>

<p>Object&nbsp;o=new&nbsp;Object();&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;强引用 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p>

<p>o=null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;帮助垃圾收集器回收此对象当内存空间不足，<a href="http://lib.csdn.net/base/javase" target="_blank" title="Java SE知识库">Java</a>虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足的问题。如果不使用时，要通过如下方式来弱化引用，如下：<br />
举例：&nbsp; 显式地设置o为null，或超出对象的生命周期范围，则gc认为该对象不存在引用，这时就可以回收这个对象。具体什么时候收集这要取决于gc的<a href="http://lib.csdn.net/base/datastructure" target="_blank" title="算法与数据结构知识库">算法</a>。</p>

<p>public&nbsp;void&nbsp;test(){</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;o=new&nbsp;Object();</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;省略其他操作</p>

<p>}</p>

<p>但是如果这个o是全局的变量时，就需要在不用这个对象时赋值为null，因为强引用不会被垃圾回收。在一个方法的内部有一个强引用，这个引用保存在栈中，而真正的引用内容（Object）保存在堆中。当这个方法运行完成后就会退出方法栈，则引用内容的引用不存在，这个Object会被回收。</p>

<p>强引用在实际中有非常重要的用处，举个ArrayList的实现源代码：</p>

<p>private&nbsp;transient&nbsp;Object[]&nbsp;elementData;</p>

<p>public&nbsp;void&nbsp;clear()&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modCount++;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Let&nbsp;gc&nbsp;do&nbsp;its&nbsp;work</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;size;&nbsp;i++)</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementData[i]&nbsp;=&nbsp;null;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;=&nbsp;0;</p>

<p>}</p>

<p>在ArrayList类中定义了一个私有的变量elementData数组，在调用方法清空数组时可以看到为每个数组内容赋值为null。不同于elementData=null，强引用仍然存在，避免在后续调用 add()等方法添加元素时进行重新的内存分配。使用如clear()方法中释放内存的方法对数组中存放的引用类型特别适用，这样就可以及时释放内存。</p>

<h2>2、软引用（SoftReference）</h2>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。 &nbsp;&nbsp;</p>

<p>String&nbsp;str=new&nbsp;String(&quot;abc&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;强引用</p>

<p>&nbsp;SoftReference&lt;String&gt;&nbsp;softRef=new&nbsp;SoftReference&lt;String&gt;(str);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;软引用</p>

<p>If(JVM.内存不足())&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;str&nbsp;=&nbsp;null;&nbsp;&nbsp;//&nbsp;转换为软引用</p>

<p>&nbsp;&nbsp;&nbsp;System.gc();&nbsp;//&nbsp;垃圾回收器进行回收</p>

<p>}</p>

<p>当内存不足时，等价于：</p>

<p>虚引用在实际中有重要的应用，例如浏览器的后退按钮。按后退时，这个后退时显示的网页内容是重新进行请求还是从缓存中取出呢？这就要看具体的实现策略了。</p>

<p>（1）如果一个网页在浏览结束时就进行内容的回收，则按后退查看前面浏览过的页面时，需要重新构建</p>

<p>（2）如果将浏览过的网页存储到内存中会造成内存的大量浪费，甚至会造成内存溢出</p>

<p>这时候就可以使用软引用</p>

<p>Browser&nbsp;prev&nbsp;=&nbsp;new&nbsp;Browser();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;获取页面进行浏览</p>

<p>SoftReference&nbsp;sr&nbsp;=&nbsp;new&nbsp;SoftReference(prev);&nbsp;//&nbsp;浏览完毕后置为软引用&nbsp;&nbsp;&nbsp;&nbsp;</p>

<p>if(sr.get()!=null){&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;rev&nbsp;=&nbsp;(Browser)&nbsp;sr.get();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;还没有被回收器回收，直接获取</p>

<p>}else{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;prev&nbsp;=&nbsp;new&nbsp;Browser();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;由于内存吃紧，所以对软引用的对象回收了</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;sr&nbsp;=&nbsp;new&nbsp;SoftReference(prev);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;重新构建</p>

<p>}</p>

<p>软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中。这样就很好的解决了实际的问题。</p>

<h2>3、弱引用（WeakReference）</h2>

<p>&nbsp; &nbsp; &nbsp; 弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。</p>

<p>String&nbsp;str=new&nbsp;String(&quot;abc&quot;);&nbsp;&nbsp;&nbsp;&nbsp;</p>

<p>WeakReference&lt;String&gt;&nbsp;abcWeakRef&nbsp;=&nbsp;new&nbsp;WeakReference&lt;String&gt;(str);</p>

<p>str=null;</p>

<p>str&nbsp;=&nbsp;null;当垃圾回收器进行扫描回收时等价于：</p>

<p>System.gc();</p>

<p>如果这个对象是偶尔的使用，并且希望在使用时随时就能获取到，但又不想影响此对象的垃圾收集，那么你应该用 Weak Reference 来记住此对象。 &nbsp;&nbsp;</p>

<p>下面的代码会让str再次变为一个强引用：</p>

<p>String&nbsp;&nbsp;abc&nbsp;=&nbsp;abcWeakRef.get();</p>

<p>当你想引用一个对象，但是这个对象有自己的生命周期，你不想介入这个对象的生命周期，这时候你就是用弱引用。弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。</p>

<p>这个引用不会在对象的垃圾回收判断中产生任何附加的影响。</p>

<p>public&nbsp;class&nbsp;ReferenceTest&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;ReferenceQueue&lt;VeryBig&gt;&nbsp;rq&nbsp;=&nbsp;new&nbsp;ReferenceQueue&lt;VeryBig&gt;();</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;checkQueue()&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reference&lt;?&nbsp;extends&nbsp;VeryBig&gt;&nbsp;ref&nbsp;=&nbsp;null;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;((ref&nbsp;=&nbsp;rq.poll())&nbsp;!=&nbsp;null)&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(ref&nbsp;!=&nbsp;null)&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;In&nbsp;queue:&nbsp;&quot;&nbsp;&nbsp; +&nbsp;((VeryBigWeakReference)&nbsp;(ref)).id);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String&nbsp;args[])&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;size&nbsp;=&nbsp;3;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedList&lt;WeakReference&lt;VeryBig&gt;&gt;&nbsp;weakList&nbsp;=&nbsp;new&nbsp;LinkedList&lt;WeakReference&lt;VeryBig&gt;&gt;();</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;size;&nbsp;i++)&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;weakList.add(new&nbsp;VeryBigWeakReference(new&nbsp;VeryBig(&quot;Weak&nbsp;&quot;&nbsp;+&nbsp;i),&nbsp;rq));</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Just&nbsp;created&nbsp;weak:&nbsp;&quot;&nbsp;+&nbsp;weakList.getLast());</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.gc();&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;//&nbsp;下面休息几分钟，让上面的垃圾回收线程运行完成</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.currentThread().sleep(6000);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(InterruptedException&nbsp;e)&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkQueue();</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>}</p>

<p>&nbsp;</p>

<p>class&nbsp;VeryBig&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;id;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;占用空间,让线程进行回收</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;byte[]&nbsp;b&nbsp;=&nbsp;new&nbsp;byte[2&nbsp;*&nbsp;1024];</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;VeryBig(String&nbsp;id)&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.id&nbsp;=&nbsp;id;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;void&nbsp;finalize()&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Finalizing&nbsp;VeryBig&nbsp;&quot;&nbsp;+&nbsp;id);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>}</p>

<p>class&nbsp;VeryBigWeakReference&nbsp;extends&nbsp;WeakReference&lt;VeryBig&gt;&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;id;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;VeryBigWeakReference(VeryBig&nbsp;big,&nbsp;ReferenceQueue&lt;VeryBig&gt;&nbsp;rq)&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(big,&nbsp;rq);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.id&nbsp;=&nbsp;big.id;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;void&nbsp;finalize()&nbsp;{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Finalizing&nbsp;VeryBigWeakReference&nbsp;&quot;&nbsp;+&nbsp;id);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>}</p>

<p><br />
Just&nbsp;created&nbsp;weak:&nbsp;com.javabase.reference.VeryBigWeakReference@1641c0最后的输出结果为：</p>

<p>Just&nbsp;created&nbsp;weak:&nbsp;com.javabase.reference.VeryBigWeakReference@136ab79</p>

<p>Just&nbsp;created&nbsp;weak:&nbsp;com.javabase.reference.VeryBigWeakReference@33c1aa</p>

<p>Finalizing&nbsp;VeryBig&nbsp;Weak&nbsp;2</p>

<p>Finalizing&nbsp;VeryBig&nbsp;Weak&nbsp;1</p>

<p>Finalizing&nbsp;VeryBig&nbsp;Weak&nbsp;0</p>

<p>In&nbsp;queue:&nbsp;Weak&nbsp;1</p>

<p>In&nbsp;queue:&nbsp;Weak&nbsp;2</p>

<p>In&nbsp;queue:&nbsp;Weak&nbsp;0、</p>

<h2>4、虚引用（PhantomReference）</h2>

<p>&ldquo;虚引用&rdquo;顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。4、虚引用（PhantomReference）</p>

<p>&nbsp; &nbsp; 虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列（ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。</p>

<h2>5、总结</h2>

<p>&nbsp;Java4种引用的级别由高到低依次为：</p>

<p>强引用 &nbsp;&gt; &nbsp;软引用 &nbsp;&gt; &nbsp;弱引用 &nbsp;&gt; &nbsp;虚引用</p>

<p>通过图来看一下他们之间在垃圾回收时的区别：</p>

<p>当垃圾回收器回收时，某些对象会被回收，某些不会被回收。垃圾回收器会从根对象Object来标记存活的对象，然后将某些不可达的对象和一些引用的对象进行回收，如果对这方面不是很了解，可以参考如下的文章：</p>
