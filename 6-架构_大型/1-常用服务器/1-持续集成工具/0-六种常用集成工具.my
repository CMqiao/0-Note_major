<h2>六款不容错过的开源持续集成工具</h2>

<p>在今天的文章中，我们就将共同了解六款开源持续集成服务器工具，相信它们能帮助大家在自己的敏捷性体系当中解决各类常见难题。</p>

<p>持续集成是敏捷软件开发工作当中的一大组成部分。从一轮冲刺到下一轮冲刺，技术团队在&ldquo;不断前进&rdquo;的同时持续推出各类增量化功能。不过当开发人员高度专注于添加功能的同时，代码错误有时候也会不期而至、并导致软件无法正常使用。为了阻止此类错误被集成至软件配置管理(简称SCM)方案当中，持续集成服务器则扮演守门人的角色，帮助我们对代码质量进行把关。即使糟糕代码已经被集成到SCM当中，持续集成服务器仍然能够快速告诉我们是哪里出了问题。在今天的文章中，我们就将共同了解六款开源持续集成服务器工具，相信它们能帮助大家在自己的敏捷性体系当中解决各类常见难题。</p>

<p><strong>Jenkins</strong></p>

<ul>
	<li><a href="https://jenkins-ci.org/">项目页面</a></li>
	<li><a href="https://github.com/jenkinsci">源代码</a></li>
	<li>许可协议:<a href="http://opensource.org/licenses/MIT">&nbsp;MIT</a></li>
</ul>

<p>Jenkins的诞生介于Hudson项目发布与Sun Microsystems公司被收购之间。Jenkins以Java语言开发而成，且能够在WAR文件下载完成之后使用java &ndash;jar jenkins.war命令进行安装。大家也可以将其部署在servlet容器当中。Jenkins的主要任务分为以下两种：持续构建/测试软件项目与以外部方式监控运行任务。对于前者，Jenkins支持一系列SCM工具&mdash;&mdash;包括Git、Mercurial、Subversion以前Clearcase等等。大家可以以该项目为基础构建Apache Ant以及Apache Maven外加其它shell脚本，或者利用Windows批处理文件完成各类预/后构建操作。需要注意的是，几乎所有配置都能够通过基于Web的GUI完成。</p>

<p>Jenkins同时也可以作为来自第三方供应商的服务方案，但如果大家拥有一套规模可观的待测试软件清单，那么它可能更适合运行在我们自己的服务器之上&mdash;&mdash;这样不仅能够保证各位对基础设施问题拥有全面控制能力，同时也有助于企业客户保障软件安全水平。</p>

<p><strong>Buildbot</strong></p>

<ul>
	<li><a href="http://buildbot.net/">项目页面</a></li>
	<li><a href="https://github.com/buildbot/buildbot">源代码</a></li>
	<li>许可协议:&nbsp;<a href="https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html">GPL v2</a></li>
</ul>

<p>作为以Python语言开发而成的项目，Buildbot基于Twisted框架构建完成。它最初仅仅作为Tinderbox项目的备用方案存在，但现在已经为Mozilla、Webkit、Chromium以及其它众多产品所支持。Buildbot安全需要一台或者更多主服务器外加多从服务器作为配合。其中主服务器负责监控源代码库的变化，协调各从服务器的操作活动并向用户及开发人员报告结果。从服务器则可运行多种不同操作系统。大家需要向主服务器提供一套Python配置脚本以完成Buildbot的配置工作。这一点对于非程序员用户而言可能有些困难，不过此类脚本的存在也让Buildbot具备更为出色的灵活性。</p>

<p>这种设置机制的指导思想在于，目前的大部分持续集成工具在设计与选项方面都受到工具缔造者的严格限制。不过像混合型语言应用程序或者复杂发布任务等用例很可能超出开发者的预先假设。Buildbot在设计上允许大家随着具体要求的变化而进行安装，从简单到复杂一路满足用户的实际状况。</p>

<p><a href="http://s7.51cto.com/wyfs02/M00/70/FA/wKiom1XCucmiU4ydAAD6fbxEcBU224.png" target="_blank"><img alt="六款不容错过的开源持续集成工具" src="http://s7.51cto.com/wyfs02/M00/70/FA/wKiom1XCucmiU4ydAAD6fbxEcBU224.png" /></a></p>

<p><strong>Travis CI</strong></p>

<ul>
	<li><a href="https://travis-ci.org/">项目页面</a></li>
	<li><a href="https://github.com/travis-ci">源代码</a></li>
	<li>许可协议:<a href="http://opensource.org/licenses/MIT">&nbsp;MIT</a></li>
</ul>

<p>Travis CI可能是目前最适合新手作为起步平台的持续集成服务器方案了。Travis CI属于开源项目，而且能够在我们自己的服务器上实现免费托管。不过值得一提的是，它也提供一套SaaS版本，旨在帮助各位以免费方式对开源项目进行测试。整个安装过程非常轻松，我们只需要接入自己的GitHub账户，提供相关权限并根据项目的实际要求更新travis.yaml文件即可。在文件提交至GitHub之后，一套新的Travis CI即可开始构建。</p>

<p><strong>Strider</strong></p>

<ul>
	<li><a href="http://stridercd.com/">项目页面</a></li>
	<li><a href="https://github.com/Strider-CD/strider">源代码</a></li>
	<li><a href="https://en.wikipedia.org/wiki/BSD_licenses">许可协议: BSD License</a></li>
</ul>

<p>Strider由Node.JS与JavaScript编写而成，同时利用MongoDB作为后备存储机制。我们必须首先安装MongoDB与Node.JS，而后才安装Strider。大家可以使用npm install strider命令进行安装。不过，Strider最大的特色在于无与伦比的可定制能力，我们可以亲自动手编写插件以强化其功能&mdash;&mdash;这当然不是件坏事，但如果各位想要的是一款无需编程就能快速起效的方案，那么最好还是优先考虑其它项目。</p>

<p><strong>Go</strong></p>

<ul>
	<li><a href="http://www.go.cd/">项目页面</a></li>
	<li><a href="https://github.com/gocd/gocd/">源代码</a></li>
	<li>许可协议:&nbsp;<a href="http://www.apache.org/licenses/LICENSE-2.0">Apache v2</a></li>
</ul>

<p>Go是由ThoughtWorks公司创建并加以开源的项目。与其它先进持续集成服务器一样，Go也允许大家将自己的构建版本分发至多种不同系统当中，并以集中方式对它们加以监控。要使用Go，大家需要将其安装在自己的服务器内&mdash;&mdash;其不提供任何SaaS选项。</p>

<p>在Go的帮助下，我们能够以流水线的方式实现各类定期执行任务，而这些操作当中的实例会被称为job。另外值得一提的是，它能够利用值流图对整个持续交付流程进行可视化处理。最终生成的图表能帮助我们追踪从提交到部署的整个流程中的各项具体变更。</p>

<p><strong>Integrity</strong></p>

<ul>
	<li><a href="http://integrity.github.io/">项目页面</a></li>
	<li><a href="https://github.com/integrity/integrity">源代码</a></li>
	<li>许可协议:&nbsp;<a href="http://opensource.org/licenses/MIT">MIT</a></li>
</ul>

<p>由于以Ruby语言编写而成，Integrity需要Ruby 1.8.7或者更新版本、RubyGems 1.3.5或者更新版本以及Git 1.6或者更新版本才能正常运行。其不提供SaaS选项，大家需要在使用之前以本地方式进行安装。整个配置工作可以通过&ldquo;init.rb&rdquo;文件实现。该项目的官方页面当中提供了此文件的示例。另外需要特殊强调的一点是，Integrity目前只能与Git进行协作。因此如果大家正在使用其它SCM工具，那么Integrity恐怕并不适合您。</p>

<p>原文标题：6 top continuous integration tools</p>

<p>核子可乐译</p>
