<h1>Java中普通代码块，构造代码块，静态代码块区别及代码示例</h1>

<p>//执行顺序：（优先级从高到低。）静态代码块&gt;mian方法&gt;构造代码块&gt;构造方法。</p>

<p>其中静态代码块只执行一次。构造代码块在每次创建对象是都会执行。</p>

<h2>1 普通代码块</h2>

<pre>
 1 //普通代码块：在方法或语句中出现的{}就称为普通代码块。普通代码块和一般的语句执行顺序由他们在代码中出现的次序决定--&ldquo;先出现先执行&rdquo;
 2 public class CodeBlock01{
 3       public static void main(String[] args){
 4           
 5             {
 6               int x=3;
 7               System.out.println(&quot;1,普通代码块内的变量x=&quot;+x);    
 8             }
 9             
10             int x=1;
11             System.out.println(&quot;主方法内的变量x=&quot;+x);
12             
13             {
14                int y=7;// int x=4; 这句不能成功执行。可能是与前面一个代码块重复了吧。
15                System.out.println(&quot;2,普通代码块内的变量y=&quot;+y);    
16             }
17           }
18     }
19     
20     /*
21     运行结果：
22     1,普通代码块内的变量x=3
23          主方法内的变量x=1
24          2,普通代码块内的变量y=7
25     */
26     
</pre>

<h2>2 构造代码块</h2>

<pre>
//构造块：直接在类中定义且没有加static关键字的代码块称为{}构造代码块。<span class="marker">构造代码块在创建对象时被调用，每次创建对象都会被调用</span>，并且构造代码块的执行次序优先于类构造函数。

public class CodeBlock02{
    {
      System.out.println(&quot;第一代码块&quot;);    
    }
    
    public CodeBlock02(){
        System.out.println(&quot;构造方法&quot;);
        }
        
        {
          System.out.println(&quot;第二构造块&quot;);
        }
      public static void main(String[] args){
          new CodeBlock02();
          new CodeBlock02();
          new CodeBlock02();
           
    }
}    

/*
*
执行结果：
第一代码块
第二构造块
构造方法
第一代码块
第二构造块
构造方法
第一代码块
第二构造块
构造方法
*/
</pre>

<h2>3 静态代码块</h2>

<pre>
//静态代码块:在java中使用static关键字声明的代码块。静态块用于初始化类，为类的属性初始化。每个静态代码块只会执行一次。由于JVM在加载类时会执行静态代码块，所以静态代码块先于主方法执行。
//如果类中包含多个静态代码块，那么将按照&quot;先定义的代码先执行，后定义的代码后执行&quot;。
//注意：1 静态代码块不能存在于任何方法体内。2 静态代码块不能直接访问静态实例变量和实例方法，需要通过类的实例对象来访问。


class Code{
    {
      System.out.println(&quot;Code的构造块&quot;);
    }
    
    static{
        System.out.println(&quot;Code的静态代码块&quot;);
    }
        
    public Code(){
        System.out.println(&quot;Code的构造方法&quot;);
        }
    }
    
    
public class CodeBlock03{
     {
      System.out.println(&quot;CodeBlock03的构造块&quot;);    
     }
     
     static{
        System.out.println(&quot;CodeBlock03的静态代码块&quot;);
        }
        
        public CodeBlock03(){
             System.out.println(&quot;CodeBlock03的构造方法&quot;);
            }
        
      public static void main(String[] args){
            System.out.println(&quot;CodeBlock03的主方法&quot;);
            new Code();
            new Code();
            new CodeBlock03();
            new CodeBlock03();
          }
    }
/*
CodeBlock03的静态代码块
CodeBlock03的主方法
Code的静态代码块
Code的构造块
Code的构造方法
Code的构造块
Code的构造方法
CodeBlock03的构造块
CodeBlock03的构造方法
CodeBlock03的构造块
CodeBlock03的构造方法
*/</pre>

<p>&nbsp;</p>
