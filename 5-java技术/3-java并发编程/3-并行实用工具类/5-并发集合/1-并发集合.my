<h1>2. 阻塞队列 BlockingQueue</h1>

<p>java.util.concurrent 包里的 BlockingQueue 接口表示一个线程安放入和提取实例的队列。本小节我将给你演示如何使用这个 BlockingQueue。<br />
本节不会讨论如何在 Java 中实现一个你自己的 BlockingQueue。如果你对那个感兴趣，参考《<a href="http://tutorials.jenkov.com/java-concurrency/index.html" target="_blank">Java 并发指南</a>》</p>

<h2>BlockingQueue 用法</h2>

<p>BlockingQueue 通常用于一个线程生产对象，而另外一个线程消费这些对象的场景。下图是对这个原理的阐述：<br />
<br />
<img alt="blocking-queue" src="http://img.blog.csdn.net/20150302184203260?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGVmb25kcw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /><br />
<strong>一个线程往里边放，另外一个线程从里边取的一个 BlockingQueue。</strong><br />
一个线程将会持续生产新对象并将其插入到队列之中，直到队列达到它所能容纳的临界点。也就是说，它是有限的。如果该阻塞队列到达了其临界点，负责生产的线程将会在往里边插入新对象时发生阻塞。它会一直处于阻塞之中，直到负责消费的线程从队列中拿走一个对象。<br />
负责消费的线程将会一直从该阻塞队列中拿出对象。如果消费线程尝试去从一个空的队列中提取对象的话，这个消费线程将会处于阻塞之中，直到一个生产线程把一个对象丢进队列。</p>

<h2>BlockingQueue 的方法</h2>

<p>BlockingQueue 具有 4 组不同的方法用于插入、移除以及对队列中的元素进行检查。如果请求的操作不能得到立即执行的话，每个方法的表现也不同。这些方法如下：</p>

<table align="center" border="1" cellpadding="1" cellspacing="1" style="width:600px">
	<tbody>
		<tr>
			<th scope="col">&nbsp;</th>
			<th scope="col">抛异常</th>
			<th scope="col">特定值</th>
			<th scope="col">阻塞</th>
			<th scope="col">超时</th>
		</tr>
	</tbody>
	<tbody>
		<tr>
			<th scope="row">插入</th>
			<td>add(o)</td>
			<td>offer(o)</td>
			<td>put(o)</td>
			<td>offer(o, timeout, timeunit)</td>
		</tr>
		<tr>
			<th scope="row">移除</th>
			<td>remove(o)</td>
			<td>poll(o)</td>
			<td>take(o)</td>
			<td>poll(timeout, timeunit)</td>
		</tr>
		<tr>
			<th scope="row">检查</th>
			<td>element(o)</td>
			<td>peek(o)</td>
			<td>&nbsp;</td>
			<td>&nbsp;</td>
		</tr>
	</tbody>
</table>

<p><br />
四组不同的行为方式解释：</p>

<ol>
	<li><strong>抛异常</strong>：如果试图的操作无法立即执行，抛一个异常。</li>
	<li><strong>特定值</strong>：如果试图的操作无法立即执行，返回一个特定的值(常常是 true / false)。</li>
	<li><strong>阻塞</strong>：如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行。</li>
	<li><strong>超时</strong>：如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行，但等待时间不会超过给定值。返回一个特定值以告知该操作是否成功(典型的是 true / false)。</li>
</ol>

<p>无法向一个 BlockingQueue 中插入 null。如果你试图插入 null，BlockingQueue 将会抛出一个 NullPointerException。<br />
可以访问到 BlockingQueue 中的所有元素，而不仅仅是开始和结束的元素。比如说，你将一个对象放入队列之中以等待处理，但你的应用想要将其取消掉。那么你可以调用诸如 remove(o) 方法来将队列之中的特定对象进行移除。但是这么干效率并不高(译者注：基于队列的数据结构，获取除开始或结束位置的其他对象的效率不会太高)，因此你尽量不要用这一类的方法，除非你确实不得不那么做。</p>

<h2>BlockingQueue 的实现</h2>

<p>BlockingQueue 是个接口，你需要使用它的实现之一来使用 BlockingQueue。java.util.concurrent 具有以下 BlockingQueue 接口的实现(Java 6)：</p>

<ul>
	<li><a href="http://blog.csdn.net/defonds/article/details/44021605#t7" target="_blank">ArrayBlockingQueue</a></li>
	<li><a href="http://blog.csdn.net/defonds/article/details/44021605#t8" target="_blank">DelayQueue</a></li>
	<li><a href="http://blog.csdn.net/defonds/article/details/44021605#t9" target="_blank">LinkedBlockingQueue</a></li>
	<li><a href="http://blog.csdn.net/defonds/article/details/44021605#t10" target="_blank">PriorityBlockingQueue</a></li>
	<li><a href="http://blog.csdn.net/defonds/article/details/44021605#t11" target="_blank">SynchronousQueue</a></li>
</ul>

<h2>Java 中使用 BlockingQueue 的例子</h2>

<p>这里是一个 Java 中使用 BlockingQueue 的示例。本示例使用的是 BlockingQueue 接口的 ArrayBlockingQueue 实现。<br />
首先，BlockingQueueExample 类分别在两个独立的线程中启动了一个 Producer 和 一个 Consumer。Producer 向一个共享的 BlockingQueue 中注入字符串，而 Consumer 则会从中把它们拿出来。</p>

<ol start="1">
	<li>public&nbsp;class&nbsp;BlockingQueueExample&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;throws&nbsp;Exception&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BlockingQueue&nbsp;queue&nbsp;=&nbsp;new&nbsp;ArrayBlockingQueue(1024);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Producer&nbsp;producer&nbsp;=&nbsp;new&nbsp;Producer(queue);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Consumer&nbsp;consumer&nbsp;=&nbsp;new&nbsp;Consumer(queue);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;Thread(producer).start();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;Thread(consumer).start();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.sleep(4000);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p><br />
以下是 Producer 类。注意它在每次 put() 调用时是如何休眠一秒钟的。这将导致 Consumer 在等待队列中对象的时候发生阻塞。</p>

<ol start="1">
	<li>public&nbsp;class&nbsp;Producer&nbsp;implements&nbsp;Runnable{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;BlockingQueue&nbsp;queue&nbsp;=&nbsp;null;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Producer(BlockingQueue&nbsp;queue)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.queue&nbsp;=&nbsp;queue;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;run()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue.put(&quot;1&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.sleep(1000);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue.put(&quot;2&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.sleep(1000);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue.put(&quot;3&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(InterruptedException&nbsp;e)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p><br />
以下是 Consumer 类。它只是把对象从队列中抽取出来，然后将它们打印到 System.out。</p>

<ol start="1">
	<li>public&nbsp;class&nbsp;Consumer&nbsp;implements&nbsp;Runnable{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;BlockingQueue&nbsp;queue&nbsp;=&nbsp;null;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Consumer(BlockingQueue&nbsp;queue)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.queue&nbsp;=&nbsp;queue;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;run()&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(queue.take());&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(queue.take());&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(queue.take());&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(InterruptedException&nbsp;e)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<h1>3. 数组阻塞队列 ArrayBlockingQueue</h1>

<p>ArrayBlockingQueue 类实现了 BlockingQueue 接口。<br />
ArrayBlockingQueue 是一个有界的阻塞队列，其内部实现是将对象放到一个数组里。有界也就意味着，它不能够存储无限多数量的元素。它有一个同一时间能够存储元素数量的上限。你可以在对其初始化的时候设定这个上限，但之后就无法对这个上限进行修改了(译者注：因为它是基于数组实现的，也就具有数组的特性：一旦初始化，大小就无法修改)。<br />
ArrayBlockingQueue 内部以 FIFO(先进先出)的顺序对元素进行存储。队列中的头元素在所有元素之中是放入时间最久的那个，而尾元素则是最短的那个。<br />
以下是在使用 &nbsp;ArrayBlockingQueue 的时候对其初始化的一个示例：</p>

<ol start="1">
	<li>BlockingQueue&nbsp;queue&nbsp;=&nbsp;new&nbsp;ArrayBlockingQueue(1024);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>queue.put(&quot;1&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>Object&nbsp;object&nbsp;=&nbsp;queue.take();&nbsp;&nbsp;</li>
</ol>

<p><br />
以下是使用了 Java 泛型的一个 BlockingQueue 示例。注意其中是如何对 String 元素放入和提取的：</p>

<ol start="1">
	<li>BlockingQueue&lt;String&gt;&nbsp;queue&nbsp;=&nbsp;new&nbsp;ArrayBlockingQueue&lt;String&gt;(1024);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>queue.put(&quot;1&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>String&nbsp;string&nbsp;=&nbsp;queue.take();&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h1>4. 延迟队列 DelayQueue</h1>

<p>DelayQueue 实现了 BlockingQueue 接口。<br />
DelayQueue 对元素进行持有直到一个特定的延迟到期。注入其中的元素必须实现 java.util.concurrent.Delayed 接口，该接口定义：</p>

<ol start="1">
	<li>public&nbsp;interface&nbsp;Delayed&nbsp;extends&nbsp;Comparable&lt;Delayed&lt;&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;public&nbsp;long&nbsp;getDelay(TimeUnit&nbsp;timeUnit);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p><br />
DelayQueue 将会在每个元素的 getDelay() 方法返回的值的时间段之后才释放掉该元素。如果返回的是 0 或者负值，延迟将被认为过期，该元素将会在 DelayQueue 的下一次 take &nbsp;被调用的时候被释放掉。<br />
传递给 getDelay 方法的 getDelay 实例是一个枚举类型，它表明了将要延迟的时间段。TimeUnit 枚举将会取以下值：</p>

<p>&nbsp;</p>

<ol start="1">
	<li>DAYS&nbsp;&nbsp;</li>
	<li>HOURS&nbsp;&nbsp;</li>
	<li>MINUTES&nbsp;&nbsp;</li>
	<li>SECONDS&nbsp;&nbsp;</li>
	<li>MILLISECONDS&nbsp;&nbsp;</li>
	<li>MICROSECONDS&nbsp;&nbsp;</li>
	<li>NANOSECONDS&nbsp;&nbsp;</li>
</ol>

<p><br />
正如你所看到的，Delayed 接口也继承了 java.lang.Comparable 接口，这也就意味着 Delayed 对象之间可以进行对比。这个可能在对 DelayQueue 队列中的元素进行排序时有用，因此它们可以根据过期时间进行有序释放。<br />
以下是使用 DelayQueue 的例子：</p>

<ol start="1">
	<li>public&nbsp;class&nbsp;DelayQueueExample&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DelayQueue&nbsp;queue&nbsp;=&nbsp;new&nbsp;DelayQueue();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Delayed&nbsp;element1&nbsp;=&nbsp;new&nbsp;DelayedElement();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue.put(element1);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Delayed&nbsp;element2&nbsp;=&nbsp;queue.take();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<p>DelayedElement 是我所创建的一个 DelayedElement 接口的实现类，它不在&nbsp;<a href="http://lib.csdn.net/base/java" target="_blank" title="Java 知识库">Java</a>.util.concurrent 包里。你需要自行创建你自己的 Delayed 接口的实现以使用 DelayQueue 类。</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h1>5. 链阻塞队列 LinkedBlockingQueue</h1>

<p>LinkedBlockingQueue 类实现了 BlockingQueue 接口。<br />
LinkedBlockingQueue 内部以一个链式结构(链接节点)对其元素进行存储。如果需要的话，这一链式结构可以选择一个上限。如果没有定义上限，将使用 Integer.MAX_VALUE 作为上限。<br />
LinkedBlockingQueue 内部以 FIFO(先进先出)的顺序对元素进行存储。队列中的头元素在所有元素之中是放入时间最久的那个，而尾元素则是最短的那个。<br />
以下是 LinkedBlockingQueue 的初始化和使用示例代码：</p>

<ol start="1">
	<li>BlockingQueue&lt;String&gt;&nbsp;unbounded&nbsp;=&nbsp;new&nbsp;LinkedBlockingQueue&lt;String&gt;();&nbsp;&nbsp;</li>
	<li>BlockingQueue&lt;String&gt;&nbsp;bounded&nbsp;&nbsp;&nbsp;=&nbsp;new&nbsp;LinkedBlockingQueue&lt;String&gt;(1024);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>bounded.put(&quot;Value&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>String&nbsp;value&nbsp;=&nbsp;bounded.take();&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h1>6. 具有优先级的阻塞队列 PriorityBlockingQueue</h1>

<p>PriorityBlockingQueue 类实现了 BlockingQueue 接口。<br />
PriorityBlockingQueue 是一个无界的并发队列。它使用了和类 java.util.PriorityQueue 一样的排序规则。你无法向这个队列中插入 null 值。<br />
所有插入到 PriorityBlockingQueue 的元素必须实现 java.lang.Comparable 接口。因此该队列中元素的排序就取决于你自己的 Comparable 实现。<br />
注意 PriorityBlockingQueue 对于具有相等优先级(compare() == 0)的元素并不强制任何特定行为。<br />
同时注意，如果你从一个 PriorityBlockingQueue 获得一个 Iterator 的话，该 Iterator 并不能保证它对元素的遍历是以优先级为序的。<br />
以下是使用 PriorityBlockingQueue 的示例：</p>

<ol start="1">
	<li>BlockingQueue&nbsp;queue&nbsp;&nbsp;&nbsp;=&nbsp;new&nbsp;PriorityBlockingQueue();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//String&nbsp;implements&nbsp;java.lang.Comparable&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;queue.put(&quot;Value&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;value&nbsp;=&nbsp;queue.take();&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h1>7. 同步队列 SynchronousQueue</h1>

<p>SynchronousQueue 类实现了 BlockingQueue 接口。<br />
SynchronousQueue 是一个特殊的队列，它的内部同时只能够容纳单个元素。如果该队列已有一元素的话，试图向队列中插入一个新元素的线程将会阻塞，直到另一个线程将该元素从队列中抽走。同样，如果该队列为空，试图向队列中抽取一个元素的线程将会阻塞，直到另一个线程向队列中插入了一条新的元素。</p>

<p>据此，把这个类称作一个队列显然是夸大其词了。它更多像是一个汇合点。</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h1>8. 阻塞双端队列 BlockingDeque</h1>

<p>java.util.concurrent 包里的 BlockingDeque 接口表示一个线程安放入和提取实例的双端队列。本小节我将给你演示如何使用 BlockingDeque。<br />
BlockingDeque 类是一个双端队列，在不能够插入元素时，它将阻塞住试图插入元素的线程；在不能够抽取元素时，它将阻塞住试图抽取的线程。<br />
deque(双端队列) 是 &quot;Double Ended Queue&quot; 的缩写。因此，双端队列是一个你可以从任意一端插入或者抽取元素的队列。</p>

<h2>BlockingDeque 的使用</h2>

<p>在线程既是一个队列的生产者又是这个队列的消费者的时候可以使用到 BlockingDeque。如果生产者线程需要在队列的两端都可以插入数据，消费者线程需要在队列的两端都可以移除数据，这个时候也可以使用 BlockingDeque。BlockingDeque 图解：<br />
<br />
<img alt="blocking-deque" src="http://img.blog.csdn.net/20150303084557477?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGVmb25kcw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /><br />
<strong>一个 BlockingDeque - 线程在双端队列的两端都可以插入和提取元素。</strong><br />
一个线程生产元素，并把它们插入到队列的任意一端。如果双端队列已满，插入线程将被阻塞，直到一个移除线程从该队列中移出了一个元素。如果双端队列为空，移除线程将被阻塞，直到一个插入线程向该队列插入了一个新元素。</p>

<h2>BlockingDeque 的方法</h2>

<p>BlockingDeque 具有 4 组不同的方法用于插入、移除以及对双端队列中的元素进行检查。如果请求的操作不能得到立即执行的话，每个方法的表现也不同。这些方法如下：</p>

<table align="center" border="1" cellpadding="1" cellspacing="1" style="width:600px">
	<tbody>
		<tr>
			<th scope="col">&nbsp;</th>
			<th scope="col">抛异常</th>
			<th scope="col">特定值</th>
			<th scope="col">阻塞</th>
			<th scope="col">超时</th>
		</tr>
	</tbody>
	<tbody>
		<tr>
			<th scope="row">插入</th>
			<td>addFirst(o)</td>
			<td>offerFirst(o)</td>
			<td>putFirst(o)</td>
			<td>offerFirst(o, timeout, timeunit)</td>
		</tr>
		<tr>
			<th scope="row">移除</th>
			<td>removeFirst(o)</td>
			<td>pollFirst(o)</td>
			<td>takeFirst(o)</td>
			<td>pollFirst(timeout, timeunit)</td>
		</tr>
		<tr>
			<th scope="row">检查</th>
			<td>getFirst(o)</td>
			<td>peekFirst(o)</td>
			<td>&nbsp;</td>
			<td>&nbsp;</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<table align="center" border="1" cellpadding="1" cellspacing="1" style="width:600px">
	<tbody>
		<tr>
			<th scope="col">&nbsp;</th>
			<th scope="col">抛异常</th>
			<th scope="col">特定值</th>
			<th scope="col">阻塞</th>
			<th scope="col">超时</th>
		</tr>
	</tbody>
	<tbody>
		<tr>
			<th scope="row">插入</th>
			<td>addLast(o)</td>
			<td>offerLast(o)</td>
			<td>putLast(o)</td>
			<td>offerLast(o, timeout, timeunit)</td>
		</tr>
		<tr>
			<th scope="row">移除</th>
			<td>removeLast(o)</td>
			<td>pollLast(o)</td>
			<td>takeLast(o)</td>
			<td>pollLast(timeout, timeunit)</td>
		</tr>
		<tr>
			<th scope="row">检查</th>
			<td>getLast(o)</td>
			<td>peekLast(o)</td>
			<td>&nbsp;</td>
			<td>&nbsp;</td>
		</tr>
	</tbody>
</table>

<p><br />
四组不同的行为方式解释：</p>

<ol>
	<li><strong>抛异常</strong>：如果试图的操作无法立即执行，抛一个异常。</li>
	<li><strong>特定值</strong>：如果试图的操作无法立即执行，返回一个特定的值(常常是 true / false)。</li>
	<li><strong>阻塞</strong>：如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行。</li>
	<li><strong>超时</strong>：如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行，但等待时间不会超过给定值。返回一个特定值以告知该操作是否成功(典型的是 true / false)。</li>
</ol>

<h2>BlockingDeque 继承自 BlockingQueue</h2>

<p>BlockingDeque 接口继承自 BlockingQueue 接口。这就意味着你可以像使用一个 BlockingQueue 那样使用 BlockingDeque。如果你这么干的话，各种插入方法将会把新元素添加到双端队列的尾端，而移除方法将会把双端队列的首端的元素移除。正如 BlockingQueue 接口的插入和移除方法一样。<br />
以下是 BlockingDeque 对 BlockingQueue 接口的方法的具体内部实现：</p>

<table align="center" border="1" cellpadding="1" cellspacing="1" style="width:200px">
	<tbody>
		<tr>
			<th scope="col">BlockingQueue</th>
			<th scope="col">BlockingDeque</th>
		</tr>
	</tbody>
	<tbody>
		<tr>
			<td>add()</td>
			<td>addLast()</td>
		</tr>
		<tr>
			<td>offer() x 2</td>
			<td>offerLast() x 2</td>
		</tr>
		<tr>
			<td>put()</td>
			<td>putLast()</td>
		</tr>
		<tr>
			<td>&nbsp;</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>remove()</td>
			<td>removeFirst()</td>
		</tr>
		<tr>
			<td>poll() x 2</td>
			<td>pollFirst()</td>
		</tr>
		<tr>
			<td>take()</td>
			<td>takeFirst()</td>
		</tr>
		<tr>
			<td>&nbsp;</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>element()</td>
			<td>getFirst()</td>
		</tr>
		<tr>
			<td>peek()</td>
			<td>peekFirst()</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<h2>BlockingDeque 的实现</h2>

<p>既然 BlockingDeque 是一个接口，那么你想要使用它的话就得使用它的众多的实现类的其中一个。java.util.concurrent 包提供了以下 BlockingDeque 接口的实现类：</p>

<ul>
	<li><a href="http://blog.csdn.net/defonds/article/details/44021605#t18" target="_blank">LinkedBlockingDeque</a></li>
</ul>

<h2>BlockingDeque 代码示例</h2>

<p>以下是如何使用 BlockingDeque 方法的一个简短代码示例：</p>

<ol start="1">
	<li>BlockingDeque&lt;String&gt;&nbsp;deque&nbsp;=&nbsp;new&nbsp;LinkedBlockingDeque&lt;String&gt;();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>deque.addFirst(&quot;1&quot;);&nbsp;&nbsp;</li>
	<li>deque.addLast(&quot;2&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>String&nbsp;two&nbsp;=&nbsp;deque.takeLast();&nbsp;&nbsp;</li>
	<li>String&nbsp;one&nbsp;=&nbsp;deque.takeFirst();&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<h1>9. 链阻塞双端队列 LinkedBlockingDeque</h1>

<p>LinkedBlockingDeque 类实现了 BlockingDeque 接口。<br />
deque(双端队列) 是 &quot;Double Ended Queue&quot; 的缩写。因此，双端队列是一个你可以从任意一端插入或者抽取元素的队列。(译者注：唐僧啊，受不了。)<br />
LinkedBlockingDeque 是一个双端队列，在它为空的时候，一个试图从中抽取数据的线程将会阻塞，无论该线程是试图从哪一端抽取数据。<br />
以下是 LinkedBlockingDeque 实例化以及使用的示例：</p>

<ol start="1">
	<li>BlockingDeque&lt;String&gt;&nbsp;deque&nbsp;=&nbsp;new&nbsp;LinkedBlockingDeque&lt;String&gt;();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>deque.addFirst(&quot;1&quot;);&nbsp;&nbsp;</li>
	<li>deque.addLast(&quot;2&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>String&nbsp;two&nbsp;=&nbsp;deque.takeLast();&nbsp;&nbsp;</li>
	<li>String&nbsp;one&nbsp;=&nbsp;deque.takeFirst();&nbsp;&nbsp;</li>
</ol>

<h1>10. 并发 Map(映射) ConcurrentMap</h1>

<h2>java.util.concurrent.ConcurrentMap</h2>

<p>java.util.concurrent.ConcurrentMap 接口表示了一个能够对别人的访问(插入和提取)进行并发处理的 java.util.Map。<br />
ConcurrentMap 除了从其父接口 java.util.Map 继承来的方法之外还有一些额外的原子性方法。</p>

<h2>ConcurrentMap 的实现</h2>

<p>既然 ConcurrentMap 是个接口，你想要使用它的话就得使用它的实现类之一。java.util.concurrent 包具备 ConcurrentMap 接口的以下实现类：</p>

<ul>
	<li>ConcurrentHashMap</li>
</ul>

<h2>ConcurrentHashMap</h2>

<p>ConcurrentHashMap 和 java.util.HashTable 类很相似，但 ConcurrentHashMap 能够提供比 HashTable 更好的并发性能。在你从中读取对象的时候 ConcurrentHashMap 并不会把整个 Map 锁住。此外，在你向其中写入对象的时候，ConcurrentHashMap 也不会锁住整个 Map。它的内部只是把 Map 中正在被写入的部分进行锁定。<br />
另外一个不同点是，在被遍历的时候，即使是 ConcurrentHashMap 被改动，它也不会抛 ConcurrentModificationException。尽管 Iterator 的设计不是为多个线程的同时使用。<br />
更多关于 ConcurrentMap 和 ConcurrentHashMap 的细节请参考官方文档。</p>

<h2>ConcurrentMap 例子</h2>

<p>以下是如何使用 ConcurrentMap 接口的一个例子。本示例使用了 ConcurrentHashMap 实现类：</p>

<ol start="1">
	<li>ConcurrentMap&nbsp;concurrentMap&nbsp;=&nbsp;new&nbsp;ConcurrentHashMap();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>concurrentMap.put(&quot;key&quot;,&nbsp;&quot;value&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>Object&nbsp;value&nbsp;=&nbsp;concurrentMap.get(&quot;key&quot;);&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<h1>11. 并发导航映射 ConcurrentNavigableMap</h1>

<p>java.util.concurrent.ConcurrentNavigableMap 是一个支持并发访问的 java.util.NavigableMap，它还能让它的子 map 具备并发访问的能力。所谓的 &quot;子 map&quot; 指的是诸如 headMap()，subMap()，tailMap() 之类的方法返回的 map。</p>

<p>NavigableMap 中的方法不再赘述，本小节我们来看一下 ConcurrentNavigableMap 添加的方法。</p>

<p>&nbsp;</p>

<h2>headMap()</h2>

<p>headMap(T toKey) 方法返回一个包含了小于给定 toKey 的 key 的子 map。<br />
如果你对原始 map 里的元素做了改动，这些改动将影响到子 map 中的元素(译者注：map 集合持有的其实只是对象的引用)。<br />
以下示例演示了对 headMap() 方法的使用：</p>

<ol start="1">
	<li>ConcurrentNavigableMap&nbsp;map&nbsp;=&nbsp;new&nbsp;ConcurrentSkipListMap();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>map.put(&quot;1&quot;,&nbsp;&quot;one&quot;);&nbsp;&nbsp;</li>
	<li>map.put(&quot;2&quot;,&nbsp;&quot;two&quot;);&nbsp;&nbsp;</li>
	<li>map.put(&quot;3&quot;,&nbsp;&quot;three&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>ConcurrentNavigableMap&nbsp;headMap&nbsp;=&nbsp;map.headMap(&quot;2&quot;);&nbsp;&nbsp;</li>
</ol>

<p><br />
headMap 将指向一个只含有键 &quot;1&quot; 的 ConcurrentNavigableMap，因为只有这一个键小于 &quot;2&quot;。关于这个方法及其重载版本具体是怎么工作的细节请参考 Java 文档。</p>

<p>&nbsp;</p>

<h2>tailMap()</h2>

<p>tailMap(T fromKey) 方法返回一个包含了不小于给定 fromKey 的 key 的子 map。<br />
如果你对原始 map 里的元素做了改动，这些改动将影响到子 map 中的元素(译者注：map 集合持有的其实只是对象的引用)。<br />
以下示例演示了对 tailMap() 方法的使用：</p>

<ol start="1">
	<li>ConcurrentNavigableMap&nbsp;map&nbsp;=&nbsp;new&nbsp;ConcurrentSkipListMap();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>map.put(&quot;1&quot;,&nbsp;&quot;one&quot;);&nbsp;&nbsp;</li>
	<li>map.put(&quot;2&quot;,&nbsp;&quot;two&quot;);&nbsp;&nbsp;</li>
	<li>map.put(&quot;3&quot;,&nbsp;&quot;three&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>ConcurrentNavigableMap&nbsp;tailMap&nbsp;=&nbsp;map.tailMap(&quot;2&quot;);&nbsp;&nbsp;</li>
</ol>

<p><br />
tailMap 将拥有键 &quot;2&quot; 和 &quot;3&quot;，因为它们不小于给定键 &quot;2&quot;。关于这个方法及其重载版本具体是怎么工作的细节请参考 Java 文档。</p>

<h2>subMap()</h2>

<p>subMap() 方法返回原始 map 中，键介于 from(包含) 和 to (不包含) 之间的子 map。示例如下：</p>

<ol start="1">
	<li>ConcurrentNavigableMap&nbsp;map&nbsp;=&nbsp;new&nbsp;ConcurrentSkipListMap();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>map.put(&quot;1&quot;,&nbsp;&quot;one&quot;);&nbsp;&nbsp;</li>
	<li>map.put(&quot;2&quot;,&nbsp;&quot;two&quot;);&nbsp;&nbsp;</li>
	<li>map.put(&quot;3&quot;,&nbsp;&quot;three&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>ConcurrentNavigableMap&nbsp;subMap&nbsp;=&nbsp;map.subMap(&quot;2&quot;,&nbsp;&quot;3&quot;);&nbsp;&nbsp;</li>
</ol>

<p><br />
返回的 submap 只包含键 &quot;2&quot;，因为只有它满足不小于 &quot;2&quot;，比 &quot;3&quot; 小。</p>

<h2>更多方法</h2>

<p>ConcurrentNavigableMap 接口还有其他一些方法可供使用，比如：</p>

<ul>
	<li>descendingKeySet()</li>
	<li>descendingMap()</li>
	<li>navigableKeySet()</li>
</ul>

<p>关于这些方法更多信息参考官方 Java 文档。</p>
