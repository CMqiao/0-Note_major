<h1>Java 并发工具包 java.util.concurrent&nbsp;</h1>

<h1>译序</h1>

<p>本指南根据 Jakob Jenkov 最新博客翻译，请随时关注博客更新：<a href="http://tutorials.jenkov.com/java-util-concurrent/index.html" target="_blank">http://tutorials.jenkov.com/java-util-concurrent/index.html</a>。<br />
本指南已做成中英文对照阅读版的 pdf 文档，有兴趣的朋友可以去&nbsp;<a href="http://download.csdn.net/detail/defonds/8469189" target="_blank">Java并发工具包java.util.concurrent用户指南中英文对照阅读版.pdf[带书签]</a>&nbsp;进行下载。</p>

<h1>1. java.util.concurrent - Java 并发工具包</h1>

<p>Java 5 添加了一个新的包到 Java 平台，java.util.concurrent 包。这个包包含有一系列能够让 Java 的并发编程变得更加简单轻松的类。在这个包被添加以前，你需要自己去动手实现自己的相关工具类。<br />
本文我将带你一一认识 java.util.concurrent 包里的这些类，然后你可以尝试着如何在项目中使用它们。本文中我将使用 Java 6 版本，我不确定这和 Java 5 版本里的是否有一些差异。<br />
我不会去解释关于 Java 并发的核心问题 - 其背后的原理，也就是说，如果你对那些东西感兴趣，参考《<a href="http://tutorials.jenkov.com/java-concurrency/index.html" target="_blank">Java 并发指南</a>》。</p>

<h2>半成品</h2>

<p>本文很大程度上还是个 &quot;半成品&quot;，所以当你发现一些被漏掉的类或接口时，请耐心等待。在我空闲的时候会把它们加进来的。</p>

<p>&nbsp;</p>

<h1>14. 交换机 Exchanger</h1>

<p>java.util.concurrent.Exchanger 类表示一种两个线程可以进行互相交换对象的会和点。这种机制图示如下：<br />
<br />
<img alt="exchanger" src="http://img.blog.csdn.net/20150303091236636?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGVmb25kcw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /><br />
<strong>两个线程通过一个 Exchanger 交换对象。</strong><br />
交换对象的动作由 Exchanger 的两个 exchange() 方法的其中一个完成。以下是一个示例：</p>

<p>Exchanger&nbsp;exchanger&nbsp;=&nbsp;new&nbsp;Exchanger();&nbsp;&nbsp;&nbsp;&nbsp;</p>

<p>ExchangerRunnable&nbsp;exchangerRunnable1&nbsp;=&nbsp;&nbsp;new&nbsp;ExchangerRunnable(exchanger,&nbsp;&quot;A&quot;);&nbsp;&nbsp;<br />
ExchangerRunnable&nbsp;exchangerRunnable2&nbsp;=new&nbsp;ExchangerRunnable(exchanger,&nbsp;&quot;B&quot;);&nbsp;&nbsp;</p>

<p>new&nbsp;Thread(exchangerRunnable1).start();&nbsp;&nbsp;<br />
new&nbsp;Thread(exchangerRunnable2).start();&nbsp;&nbsp;</p>

<p>ExchangerRunnable 代码：</p>

<p>public&nbsp;class&nbsp;ExchangerRunnable&nbsp;implements&nbsp;Runnable{&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;Exchanger&nbsp;exchanger&nbsp;=&nbsp;null;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;&nbsp;&nbsp;&nbsp;object&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;null;&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;ExchangerRunnable(Exchanger&nbsp;exchanger,&nbsp;Object&nbsp;object)&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.exchanger&nbsp;=&nbsp;exchanger;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.object&nbsp;=&nbsp;object;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;run()&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;previous&nbsp;=&nbsp;this.object;&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.object&nbsp;=&nbsp;this.exchanger.exchange(this.object);&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.currentThread().getName()&nbsp;+&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&nbsp;exchanged&nbsp;&quot;&nbsp;+&nbsp;previous&nbsp;+&nbsp;&quot;&nbsp;for&nbsp;&quot;&nbsp;+&nbsp;this.object&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(InterruptedException&nbsp;e)&nbsp;{&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />
}&nbsp;&nbsp;<br />
&nbsp;</p>

<p>以上程序输出：<br />
Thread-0 exchanged A for B</p>

<p>Thread-1 exchanged B for A</p>

<h1>15. 信号量 Semaphore</h1>

<p>java.util.concurrent.Semaphore 类是一个计数信号量。这就意味着它具备两个主要方法：</p>

<ul>
	<li>acquire()</li>
	<li>release()</li>
</ul>

<p>计数信号量由一个指定数量的 &quot;许可&quot; 初始化。每调用一次 acquire()，一个许可会被调用线程取走。每调用一次 release()，一个许可会被返还给信号量。因此，在没有任何 release() 调用时，最多有 N 个线程能够通过 acquire() 方法，N 是该信号量初始化时的许可的指定数量。这些许可只是一个简单的计数器。这里没啥奇特的地方。</p>

<h2>Semaphore 用法</h2>

<p>信号量主要有两种用途：</p>

<ol>
	<li>保护一个重要(代码)部分防止一次超过 N 个线程进入。</li>
	<li>在两个线程之间发送信号。</li>
</ol>

<h2>保护重要部分</h2>

<p>如果你将信号量用于保护一个重要部分，试图进入这一部分的代码通常会首先尝试获得一个许可，然后才能进入重要部分(代码块)，执行完之后，再把许可释放掉。比如这样：</p>

<ol start="1">
	<li>Semaphore&nbsp;semaphore&nbsp;=&nbsp;new&nbsp;Semaphore(1);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>//critical&nbsp;section&nbsp;&nbsp;</li>
	<li>semaphore.acquire();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>...&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>semaphore.release();&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<h2>在线程之间发送信号</h2>

<p>如果你将一个信号量用于在两个线程之间传送信号，通常你应该用一个线程调用 acquire() 方法，而另一个线程调用 release() 方法。<br />
如果没有可用的许可，acquire() 调用将会阻塞，直到一个许可被另一个线程释放出来。同理，如果无法往信号量释放更多许可时，一个 release() 调用也会阻塞。<br />
通过这个可以对多个线程进行协调。比如，如果线程 1 将一个对象插入到了一个共享列表(list)之后之后调用了 acquire()，而线程 2 则在从该列表中获取一个对象之前调用了 release()，这时你其实已经创建了一个阻塞队列。信号量中可用的许可的数量也就等同于该阻塞队列能够持有的元素个数。</p>

<h2>公平</h2>

<p>没有办法保证线程能够公平地可从信号量中获得许可。也就是说，无法担保掉第一个调用 acquire() 的线程会是第一个获得一个许可的线程。如果第一个线程在等待一个许可时发生阻塞，而第二个线程前来索要一个许可的时候刚好有一个许可被释放出来，那么它就可能会在第一个线程之前获得许可。<br />
如果你想要强制公平，Semaphore 类有一个具有一个布尔类型的参数的构造子，通过这个参数以告知 Semaphore 是否要强制公平。强制公平会影响到并发性能，所以除非你确实需要它否则不要启用它。<br />
以下是如何在公平模式创建一个 Semaphore 的示例：</p>

<ol start="1">
	<li>Semaphore&nbsp;semaphore&nbsp;=&nbsp;new&nbsp;Semaphore(1,&nbsp;true);&nbsp;&nbsp;</li>
</ol>

<h2>更多方法</h2>

<p>java.util.concurrent.Semaphore 类还有很多方法，比如：</p>

<ul>
	<li>availablePermits()</li>
	<li>acquireUninterruptibly()</li>
	<li>drainPermits()</li>
	<li>hasQueuedThreads()</li>
	<li>getQueuedThreads()</li>
	<li>tryAcquire()</li>
	<li>等等</li>
</ul>

<p>这些方法的细节请参考 Java 文档。</p>
