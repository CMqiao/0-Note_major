<h1>MongoDB&nbsp;文档操作</h1>

<h2>MongoDB&nbsp;插入文档</h2>

<p>本章节中我们将向大家介绍如何将数据插入到MongoDB的集合中。</p>

<p>文档的数据结构和JSON基本一样。</p>

<p>所有存储在集合中的数据都是BSON格式。</p>

<p>BSON是一种类json的一种二进制形式的存储格式,简称Binary JSON。</p>

<h3>插入文档</h3>

<p>MongoDB 使用 insert() 或 save() 方法向集合中插入文档，语法如下：</p>

<pre>
db.COLLECTION_NAME.insert(document)</pre>

<h3>实例</h3>

<p>以下文档可以存储在 MongoDB 的 runoob 数据库 的 col 集合中：</p>

<pre>
&gt;db.col.insert({title: &#39;MongoDB 教程&#39;, 
    description: &#39;MongoDB 是一个 Nosql 数据库&#39;,
    by: &#39;菜鸟教程&#39;,
    url: &#39;http://www.runoob.com&#39;,
    tags: [&#39;mongodb&#39;, &#39;database&#39;, &#39;NoSQL&#39;],
    likes: 100
})</pre>

<p>以上实例中 col 是我们的集合名，如果该集合不在该数据库中， MongoDB 会自动创建该集合并插入文档。</p>

<p>查看已插入文档：</p>

<pre>
&gt; db.col.find()
{ &quot;_id&quot; : ObjectId(&quot;56064886ade2f21f36b03134&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot; ], &quot;likes&quot; : 100 }
&gt; </pre>

<p>我们也可以将数据定义为一个变量，如下所示：</p>

<p>&nbsp;</p>

<pre>
&gt; document=({title: &#39;MongoDB 教程&#39;, 
    description: &#39;MongoDB 是一个 Nosql 数据库&#39;,
    by: &#39;菜鸟教程&#39;,
    url: &#39;http://www.runoob.com&#39;,
    tags: [&#39;mongodb&#39;, &#39;database&#39;, &#39;NoSQL&#39;],
    likes: 100
});</pre>

<p>执行后显示结果如下：</p>

<pre>
{
        &quot;title&quot; : &quot;MongoDB 教程&quot;,
        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,
        &quot;by&quot; : &quot;菜鸟教程&quot;,
        &quot;url&quot; : &quot;http://www.runoob.com&quot;,
        &quot;tags&quot; : [
                &quot;mongodb&quot;,
                &quot;database&quot;,
                &quot;NoSQL&quot;
        ],
        &quot;likes&quot; : 100
}</pre>

<p>执行插入操作：</p>

<pre>
&gt; db.col.insert(document)
WriteResult({ &quot;nInserted&quot; : 1 })
&gt; </pre>

<p>插入文档你也可以使用 db.col.save(document) 命令。如果不指定 _id 字段 save() 方法类似于 insert() 方法。如果指定 _id 字段，则会更新该 _id 的数据。</p>

<p>笔记列表</p>

<ol>
	<li>
	<p>&nbsp;&nbsp;&nbsp;二少</p>

	<p>&nbsp;&nbsp;272***623@qq.com</p>

	<p>&nbsp;<a href="https://docs.mongodb.com/manual/reference/method/db.collection.insertMany/" rel="nofollow" target="_blank">&nbsp;&nbsp;参考地址</a></p>

	<p>3.2 版本后还有以下几种语法可用于插入文档:</p>

	<ul>
		<li>&nbsp;db.collection.insertOne():向指定集合中插入一条文档数据</li>
		<li>&nbsp;db.collection.insertMany():向指定集合中插入多条文档数据</li>
	</ul>

	<pre>
#  插入单条数据

&gt; var document = db.collection.insertOne({&quot;a&quot;: 3})
&gt; document
{
        &quot;acknowledged&quot; : true,
        &quot;insertedId&quot; : ObjectId(&quot;571a218011a82a1d94c02333&quot;)
}

#  插入多条数据
&gt; var res = db.collection.insertMany([{&quot;b&quot;: 3}, {&#39;c&#39;: 4}])
&gt; res
{
        &quot;acknowledged&quot; : true,
        &quot;insertedIds&quot; : [
                ObjectId(&quot;571a22a911a82a1d94c02337&quot;),
                ObjectId(&quot;571a22a911a82a1d94c02338&quot;)
        ]
}</pre>
	</li>
</ol>

<p>&nbsp;</p>

<h2>MongoDB 更新文档</h2>

<p>MongoDB 使用&nbsp;<strong>update()</strong>&nbsp;和&nbsp;<strong>save()</strong>&nbsp;方法来更新集合中的文档。接下来让我们详细来看下两个函数的应用及其区别。</p>

<hr />
<h3>update() 方法</h3>

<p>update() 方法用于更新已存在的文档。语法格式如下：</p>

<pre>
db.collection.update(
   &lt;query&gt;,
   &lt;update&gt;,
   {
     upsert: &lt;boolean&gt;,
     multi: &lt;boolean&gt;,
     writeConcern: &lt;document&gt;
   }
)</pre>

<p><strong>参数说明：</strong></p>

<ul>
	<li><strong>query&nbsp;</strong>: update的查询条件，类似sql update查询内where后面的。</li>
	<li><strong>update&nbsp;</strong>: update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的</li>
	<li><strong>upsert&nbsp;</strong>: 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</li>
	<li><strong>multi&nbsp;</strong>: 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</li>
	<li><strong>writeConcern&nbsp;</strong>:可选，抛出异常的级别。</li>
</ul>

<h3>实例</h3>

<p>我们在集合 col 中插入如下数据：</p>

<pre>
&gt;db.col.insert({
    title: &#39;MongoDB 教程&#39;, 
    description: &#39;MongoDB 是一个 Nosql 数据库&#39;,
    by: &#39;菜鸟教程&#39;,
    url: &#39;http://www.runoob.com&#39;,
    tags: [&#39;mongodb&#39;, &#39;database&#39;, &#39;NoSQL&#39;],
    likes: 100
})</pre>

<p>接着我们通过 update() 方法来更新标题(title):</p>

<pre>
&gt;db.col.update({&#39;title&#39;:&#39;MongoDB 教程&#39;},{$set:{&#39;title&#39;:&#39;MongoDB&#39;}})
WriteResult({ &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 })   # 输出信息
&gt; db.col.find().pretty()
{
        &quot;_id&quot; : ObjectId(&quot;56064f89ade2f21f36b03136&quot;),
        &quot;title&quot; : &quot;MongoDB&quot;,
        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,
        &quot;by&quot; : &quot;菜鸟教程&quot;,
        &quot;url&quot; : &quot;http://www.runoob.com&quot;,
        &quot;tags&quot; : [
                &quot;mongodb&quot;,
                &quot;database&quot;,
                &quot;NoSQL&quot;
        ],
        &quot;likes&quot; : 100
}
&gt;</pre>

<p>可以看到标题(title)由原来的 &quot;MongoDB 教程&quot; 更新为了 &quot;MongoDB&quot;。</p>

<p>以上语句只会修改第一条发现的文档，如果你要修改多条相同的文档，则需要设置 multi 参数为 true。</p>

<pre>
&gt;db.col.update({&#39;title&#39;:&#39;MongoDB 教程&#39;},{$set:{&#39;title&#39;:&#39;MongoDB&#39;}},{multi:true})</pre>

<hr />
<h3>save() 方法</h3>

<p>save() 方法通过传入的文档来替换已有文档。语法格式如下：</p>

<pre>
db.collection.save(
   &lt;document&gt;,
   {
     writeConcern: &lt;document&gt;
   }
)</pre>

<p><strong>参数说明：</strong></p>

<ul>
	<li><strong>document&nbsp;</strong>: 文档数据。</li>
	<li><strong>writeConcern&nbsp;</strong>:可选，抛出异常的级别。</li>
</ul>

<h3>实例</h3>

<p>以下实例中我们替换了 _id 为 56064f89ade2f21f36b03136 的文档数据：</p>

<pre>
&gt;db.col.save({
&nbsp;&nbsp;&nbsp;&nbsp;&quot;_id&quot; : ObjectId(&quot;56064f89ade2f21f36b03136&quot;),
    &quot;title&quot; : &quot;MongoDB&quot;,
    &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,
    &quot;by&quot; : &quot;Runoob&quot;,
    &quot;url&quot; : &quot;http://www.runoob.com&quot;,
    &quot;tags&quot; : [
            &quot;mongodb&quot;,
            &quot;NoSQL&quot;
    ],
    &quot;likes&quot; : 110
})</pre>

<p>替换成功后，我们可以通过 find() 命令来查看替换后的数据</p>

<pre>
&gt;db.col.find().pretty()
{
        &quot;_id&quot; : ObjectId(&quot;56064f89ade2f21f36b03136&quot;),
        &quot;title&quot; : &quot;MongoDB&quot;,
        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,
        &quot;by&quot; : &quot;Runoob&quot;,
        &quot;url&quot; : &quot;http://www.runoob.com&quot;,
        &quot;tags&quot; : [
                &quot;mongodb&quot;,
                &quot;NoSQL&quot;
        ],
        &quot;likes&quot; : 110
}
&gt; </pre>

<hr />
<h3>更多实例</h3>

<p>只更新第一条记录：</p>

<p>db.col.update( { &quot;count&quot; : { $gt : 1 } } , { $set : { &quot;test2&quot; : &quot;OK&quot;} } );</p>

<p>全部更新：</p>

<p>db.col.update( { &quot;count&quot; : { $gt : 3 } } , { $set : { &quot;test2&quot; : &quot;OK&quot;} },false,true );</p>

<p>只添加第一条：</p>

<p>db.col.update( { &quot;count&quot; : { $gt : 4 } } , { $set : { &quot;test5&quot; : &quot;OK&quot;} },true,false );</p>

<p>全部添加加进去:</p>

<p>db.col.update( { &quot;count&quot; : { $gt : 5 } } , { $set : { &quot;test5&quot; : &quot;OK&quot;} },true,true );</p>

<p>全部更新：</p>

<p>db.col.update( { &quot;count&quot; : { $gt : 15 } } , { $inc : { &quot;count&quot; : 1} },false,true );</p>

<p>只更新第一条记录：</p>

<p>db.col.update( { &quot;count&quot; : { $gt : 10 } } , { $inc : { &quot;count&quot; : 1} },false,false );</p>

<p>笔记列表</p>

<ol>
	<li>
	<p>&nbsp;&nbsp;&nbsp;Linux_Beginner</p>

	<p>&nbsp;&nbsp;lei***sy@163.com</p>

	<p>在3.2版本开始，MongoDB提供以下更新集合文档的方法：</p>

	<ul>
		<li>db.collection.updateOne() 向指定集合更新单个文档</li>
		<li>db.collection.updateMany() 向指定集合更新多个文档</li>
	</ul>

	<p>首先我们在test集合里插入测试数据</p>

	<pre>
use test
db.test_collection.insert( [
{&quot;name&quot;:&quot;abc&quot;,&quot;age&quot;:&quot;25&quot;,&quot;status&quot;:&quot;zxc&quot;},
{&quot;name&quot;:&quot;dec&quot;,&quot;age&quot;:&quot;19&quot;,&quot;status&quot;:&quot;qwe&quot;},
{&quot;name&quot;:&quot;asd&quot;,&quot;age&quot;:&quot;30&quot;,&quot;status&quot;:&quot;nmn&quot;},
] )</pre>

	<p>更新单个文档</p>

	<pre>
&gt; db.test_collection.updateOne({&quot;name&quot;:&quot;abc&quot;},{$set:{&quot;age&quot;:&quot;28&quot;}})
{ &quot;acknowledged&quot; : true, &quot;matchedCount&quot; : 1, &quot;modifiedCount&quot; : 1 }
&gt; db.test_collection.find()
{ &quot;_id&quot; : ObjectId(&quot;59c8ba673b92ae498a5716af&quot;), &quot;name&quot; : &quot;abc&quot;, &quot;age&quot; : &quot;28&quot;, &quot;status&quot; : &quot;zxc&quot; }
{ &quot;_id&quot; : ObjectId(&quot;59c8ba673b92ae498a5716b0&quot;), &quot;name&quot; : &quot;dec&quot;, &quot;age&quot; : &quot;19&quot;, &quot;status&quot; : &quot;qwe&quot; }
{ &quot;_id&quot; : ObjectId(&quot;59c8ba673b92ae498a5716b1&quot;), &quot;name&quot; : &quot;asd&quot;, &quot;age&quot; : &quot;30&quot;, &quot;status&quot; : &quot;nmn&quot; }
&gt;</pre>

	<p>更新多个文档</p>

	<pre>
&gt; db.test_collection.updateMany({&quot;age&quot;:{$gt:&quot;10&quot;}},{$set:{&quot;status&quot;:&quot;xyz&quot;}})
{ &quot;acknowledged&quot; : true, &quot;matchedCount&quot; : 3, &quot;modifiedCount&quot; : 3 }
&gt; db.test_collection.find()
{ &quot;_id&quot; : ObjectId(&quot;59c8ba673b92ae498a5716af&quot;), &quot;name&quot; : &quot;abc&quot;, &quot;age&quot; : &quot;28&quot;, &quot;status&quot; : &quot;xyz&quot; }
{ &quot;_id&quot; : ObjectId(&quot;59c8ba673b92ae498a5716b0&quot;), &quot;name&quot; : &quot;dec&quot;, &quot;age&quot; : &quot;19&quot;, &quot;status&quot; : &quot;xyz&quot; }
{ &quot;_id&quot; : ObjectId(&quot;59c8ba673b92ae498a5716b1&quot;), &quot;name&quot; : &quot;asd&quot;, &quot;age&quot; : &quot;30&quot;, &quot;status&quot; : &quot;xyz&quot; }
&gt;</pre>
	<a href="javascript:;">Linux_Beginner</a>

	<p>&nbsp;&nbsp;&nbsp;Linux_Beginner</p>

	<p>&nbsp;&nbsp;lei***sy@163.com</p>
	5个月前 (09-25)</li>
	<li>
	<p>&nbsp;&nbsp;&nbsp;LiAng</p>

	<p>&nbsp;&nbsp;512***034@qq.com</p>

	<ul>
		<li>WriteConcern.NONE:没有异常抛出</li>
		<li>WriteConcern.NORMAL:仅抛出网络错误异常，没有服务器错误异常</li>
		<li>WriteConcern.SAFE:抛出网络错误异常、服务器错误异常；并等待服务器完成写操作。</li>
		<li>WriteConcern.MAJORITY: 抛出网络错误异常、服务器错误异常；并等待一个主服务器完成写操作。</li>
		<li>WriteConcern.FSYNC_SAFE: 抛出网络错误异常、服务器错误异常；写操作等待服务器将数据刷新到磁盘。</li>
		<li>WriteConcern.JOURNAL_SAFE:抛出网络错误异常、服务器错误异常；写操作等待服务器提交到磁盘的日志文件。</li>
		<li>WriteConcern.REPLICAS_SAFE:抛出网络错误异常、服务器错误异常；等待至少2台服务器完成写操作。</li>
	</ul>
	</li>
</ol>

<p>&nbsp;</p>

<h2>MongoDB 删除文档</h2>

<p>在前面的几个章节中我们已经学习了MongoDB中如何为集合添加数据和更新数据。在本章节中我们将继续学习MongoDB集合的删除。</p>

<p>MongoDB remove()函数是用来移除集合中的数据。</p>

<p>MongoDB数据更新可以使用update()函数。在执行remove()函数前先执行find()命令来判断执行的条件是否正确，这是一个比较好的习惯。</p>

<h3>语法</h3>

<p>remove() 方法的基本语法格式如下所示：</p>

<pre>
db.collection.remove(
   &lt;query&gt;,
   &lt;justOne&gt;
)</pre>

<p>如果你的 MongoDB 是 2.6 版本以后的，语法格式如下：</p>

<pre>
db.collection.remove(
   &lt;query&gt;,
   {
     justOne: &lt;boolean&gt;,
     writeConcern: &lt;document&gt;
   }
)</pre>

<p><strong>参数说明：</strong></p>

<ul>
	<li><strong>query&nbsp;</strong>:（可选）删除的文档的条件。</li>
	<li><strong>justOne&nbsp;</strong>: （可选）如果设为 true 或 1，则只删除一个文档。</li>
	<li><strong>writeConcern&nbsp;</strong>:（可选）抛出异常的级别。</li>
</ul>

<h3>实例</h3>

<p>以下文档我们执行两次插入操作：</p>

<pre>
&gt;db.col.insert({title: &#39;MongoDB 教程&#39;, 
    description: &#39;MongoDB 是一个 Nosql 数据库&#39;,
    by: &#39;菜鸟教程&#39;,
    url: &#39;http://www.runoob.com&#39;,
    tags: [&#39;mongodb&#39;, &#39;database&#39;, &#39;NoSQL&#39;],
    likes: 100
})</pre>

<p>使用 find() 函数查询数据：</p>

<pre>
&gt; db.col.find()
{ &quot;_id&quot; : ObjectId(&quot;56066169ade2f21f36b03137&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot; ], &quot;likes&quot; : 100 }
{ &quot;_id&quot; : ObjectId(&quot;5606616dade2f21f36b03138&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot; ], &quot;likes&quot; : 100 }</pre>

<p>接下来我们移除 title 为 &#39;MongoDB 教程&#39; 的文档：</p>

<pre>
&gt;db.col.remove({&#39;title&#39;:&#39;MongoDB 教程&#39;})
WriteResult({ &quot;nRemoved&quot; : 2 })           # 删除了两条数据
&gt;db.col.find()
&hellip;&hellip;                                        # 没有数据</pre>

<hr />
<p>如果你只想删除第一条找到的记录可以设置 justOne 为 1，如下所示：</p>

<pre>
&gt;db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)</pre>

<p>如果你想删除所有数据，可以使用以下方式（类似常规 SQL 的 truncate 命令）：</p>

<pre>
&gt;db.col.remove({})
&gt;db.col.find()
&gt;</pre>

<p>笔记列表</p>

<ol>
	<li>
	<p>&nbsp;&nbsp;&nbsp;三国电视台</p>

	<p>&nbsp;&nbsp;tre***3@126.com</p>

	<p>remove() 方法已经过时了，现在官方推荐使用 deleteOne() 和 deleteMany() 方法。</p>

	<p>如删除集合下全部文档：</p>

	<pre>
db.inventory.deleteMany({})</pre>

	<p>删除 status 等于 A 的全部文档：</p>

	<pre>
db.inventory.deleteMany({ status : &quot;A&quot; })</pre>

	<p>删除 status 等于 D 的一个文档：</p>

	<pre>
db.inventory.deleteOne( { status: &quot;D&quot; } )</pre>
	</li>
</ol>
