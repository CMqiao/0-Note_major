<h1>职责链模式</h1>

<p><a href="http://haolloyin.blog.51cto.com/1177454/342166">http://haolloyin.blog.51cto.com/1177454/342166</a></p>

<p><strong>职责链模式（Chain of Responsibility）：</strong>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p>

<h2>责任链模式的优缺点</h2>

<p>责任链模式的优点</p>

<p>　　<strong>实现了请求者与处理者代码分离</strong>：发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织和分配责任。提高系统的灵活性和可扩展行。</p>

<p>责任链模式的缺点</p>

<p>　　<strong>每次都是从链头开始</strong>：这也正是链表的缺点。你也许会想到一种貌似不错的解决方案，比如使用hash映射，将要处理的请求id与处理类对象关联，但是这样系统损失了可扩展性。</p>

<h2>适用场景：</h2>

<p>1、有多个的对象可以处理一个请求，哪个对象处理该请求运行时刻自动确定；</p>

<p>2、在不明确指定接收者的情况下，向多个对象中的一个提交一个请求；</p>

<p>3、处理一个请求的对象集合应被动态指定。</p>

<h2>责任链模式案例：</h2>

<p>通用类图：</p>

<p><a href="http://img1.51cto.com/attachment/201007/134916262.jpg" target="_blank"><img alt="" src="http://img1.51cto.com/attachment/201007/134916262.jpg" /></a></p>

<p>在大学里面当班干部，时常要向上级申请各方面的东西。譬如申请全班外出秋游，普通同学将申请表交给班长，班长签字之后交给辅导员，辅导员批准之后上交到主任办公室&hellip;就是这样，一个请求（这里是一份申请表）有时候需要经过好几个级别的处理者（这里是辅导员、主任）的审查才能够最终被确定可行与否。</p>

<p>在这里表现出来的是一个职责链，即不同的处理者对同一个请求可能担负着不同的处理方式、权限，但是我们希望这个<strong>请求必须到达最终拍板的处理者</strong>（否则秋游就没戏了）。这种关系就很适合使用职责链模式了。</p>

<p>类图结构如下：</p>

<p><a href="http://img1.51cto.com/attachment/201007/134948580.jpg" target="_blank"><img alt="" src="http://img1.51cto.com/attachment/201007/134948580.jpg" style="width:650px" /></a></p>

<p>代码实现如下：</p>

<ol>
	<li>//&nbsp;<strong>全局变量</strong>，接口类型 &nbsp;</li>
	<li>/** &nbsp;</li>
	<li>&nbsp;*&nbsp;使用Java中的interface定义全局变量，可根据具体需要在&nbsp; &nbsp;</li>
	<li>&nbsp;*&nbsp;具体的包中使用静态导入相关的全局变量，语法如下：&nbsp; &nbsp;</li>
	<li>&nbsp;*&nbsp;&nbsp;<strong>import&nbsp;static&nbsp;package01.package02.*</strong>; &nbsp;</li>
	<li>&nbsp;*/&nbsp;</li>
	<li>interface&nbsp;Levels&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;final&nbsp;int&nbsp;LEVEL_01&nbsp;=&nbsp;1; &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;final&nbsp;int&nbsp;LEVEL_02&nbsp;=&nbsp;2; &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;final&nbsp;int&nbsp;LEVEL_03&nbsp;=&nbsp;3; &nbsp;</li>
	<li>}&nbsp;</li>
</ol>

<p>&nbsp;</p>

<ol>
	<li>//&nbsp;抽象请求类 &nbsp;</li>
	<li>abstract&nbsp;class&nbsp;AbstractRequest&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;content&nbsp;=&nbsp;null; &nbsp;</li>
	<li>&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;AbstractRequest(String&nbsp;content)&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.content&nbsp;=&nbsp;content; &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</li>
	<li>&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getContent()&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.content; &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</li>
	<li>&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;获得请求的级别 &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;abstract&nbsp;int&nbsp;getRequestLevel(); &nbsp;</li>
	<li>}&nbsp;</li>
</ol>

<p>&nbsp;</p>

<ol>
	<li>//&nbsp;具体请求类01 &nbsp;</li>
	<li>class&nbsp;Request01&nbsp;extends&nbsp;AbstractRequest&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Request01(String&nbsp;content)&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(content); &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</li>
	<li>&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;getRequestLevel()&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Levels.LEVEL_01; &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</li>
	<li>} &nbsp;</li>
	<li>&nbsp;</li>
	<li>//&nbsp;具体请求类02 &nbsp;</li>
	<li>class&nbsp;Request02&nbsp;extends&nbsp;AbstractRequest&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Request02(String&nbsp;content)&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(content); &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</li>
	<li>&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;getRequestLevel()&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Levels.LEVEL_02; &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</li>
	<li>} &nbsp;</li>
	<li>&nbsp;</li>
	<li>//&nbsp;具体请求类03 &nbsp;</li>
	<li>class&nbsp;Request03&nbsp;extends&nbsp;AbstractRequest&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Request03(String&nbsp;content)&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(content); &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</li>
	<li>&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;getRequestLevel()&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Levels.LEVEL_03; &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</li>
	<li>}&nbsp;</li>
</ol>

<pre>

&nbsp;</pre>

<ol>
	<li>//&nbsp;抽象处理者类， &nbsp;</li>
	<li>abstract&nbsp;class&nbsp;AbstractHandler&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;责任链的下一个节点，即处理者 &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;AbstractHandler&nbsp;nextHandler&nbsp;=&nbsp;null; &nbsp;</li>
	<li>&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;捕获具体请求并进行处理，或是将请求传递到责任链的下一级别 &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;final&nbsp;void&nbsp;handleRequest(AbstractRequest&nbsp;request)&nbsp;{ &nbsp;</li>
	<li>&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;若该请求与当前处理者的级别层次相对应，则由自己进行处理 &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(this.getHandlerLevel()&nbsp;==&nbsp;request.getRequestLevel())&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.<strong>handle(request); &nbsp;</strong></li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;当前处理者不能胜任，则传递至职责链的下一节点 &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(this.nextHandler&nbsp;!=&nbsp;null)&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;当前&nbsp;处理者-0&quot;&nbsp;+&nbsp;this.getHandlerLevel() &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;&quot;&nbsp;不足以处理&nbsp;请求-0&quot;&nbsp;+&nbsp;request.getRequestLevel()); &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;这里使用了<strong>递归调用</strong> &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.nextHandler.<strong>handleRequest(request); &nbsp;</strong></li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;职责链上的所有处理者都不能胜任该请求...&quot;); &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</li>
	<li>&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;设置责任链中的下一个处理者 &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setNextHandler(AbstractHandler&nbsp;nextHandler)&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.nextHandler&nbsp;=&nbsp;nextHandler; &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</li>
	<li>&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;获取当前处理者的级别 &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;abstract&nbsp;int&nbsp;getHandlerLevel(); &nbsp;</li>
	<li>&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;定义链中每个处理者具体的处理方式 &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;abstract&nbsp;void&nbsp;handle(AbstractRequest&nbsp;request); &nbsp;</li>
	<li>}&nbsp;</li>
</ol>

<pre>

&nbsp;</pre>

<ol>
	<li>//&nbsp;具体处理者-01 &nbsp;</li>
	<li>class&nbsp;Handler01&nbsp;extends&nbsp;AbstractHandler&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;int&nbsp;getHandlerLevel()&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Levels.LEVEL_01; &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</li>
	<li>&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;void&nbsp;handle(AbstractRequest&nbsp;request)&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;处理者-01&nbsp;处理&nbsp;&quot;&nbsp;+&nbsp;request.getContent()&nbsp;+&nbsp;&quot;\n&quot;); &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</li>
	<li>} &nbsp;</li>
	<li>&nbsp;</li>
	<li>//&nbsp;具体处理者-02 &nbsp;</li>
	<li>class&nbsp;Handler02&nbsp;extends&nbsp;AbstractHandler&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;int&nbsp;getHandlerLevel()&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Levels.LEVEL_02; &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</li>
	<li>&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;void&nbsp;handle(AbstractRequest&nbsp;request)&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;处理者-02&nbsp;处理&nbsp;&quot;&nbsp;+&nbsp;request.getContent()+&nbsp;&quot;\n&quot;); &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</li>
	<li>} &nbsp;</li>
	<li>&nbsp;</li>
	<li>//&nbsp;具体处理者-03 &nbsp;</li>
	<li>class&nbsp;Handler03&nbsp;extends&nbsp;AbstractHandler&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;int&nbsp;getHandlerLevel()&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Levels.LEVEL_03; &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</li>
	<li>&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;void&nbsp;handle(AbstractRequest&nbsp;request)&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;处理者-03&nbsp;处理&nbsp;&quot;&nbsp;+&nbsp;request.getContent()+&nbsp;&quot;\n&quot;); &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</li>
	<li>}&nbsp;</li>
</ol>

<p>&nbsp;</p>

<ol>
	<li>//&nbsp;测试类 &nbsp;</li>
	<li>public&nbsp;class&nbsp;Client&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{ &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;创建指责链的所有节点 &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AbstractHandler&nbsp;handler01&nbsp;=&nbsp;new&nbsp;Handler01(); &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AbstractHandler&nbsp;handler02&nbsp;=&nbsp;new&nbsp;Handler02(); &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AbstractHandler&nbsp;handler03&nbsp;=&nbsp;new&nbsp;Handler03(); &nbsp;</li>
	<li>&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;进行链的组装，即头尾相连，一层套一层 &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler01.setNextHandler(handler02); &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler02.setNextHandler(handler03); &nbsp;</li>
	<li>&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;创建请求并提交到指责链中进行处理 &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AbstractRequest&nbsp;request01&nbsp;=&nbsp;new&nbsp;Request01(&quot;请求-01&quot;); &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AbstractRequest&nbsp;request02&nbsp;=&nbsp;new&nbsp;Request02(&quot;请求-02&quot;); &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AbstractRequest&nbsp;request03&nbsp;=&nbsp;new&nbsp;Request03(&quot;请求-03&quot;); &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;每次提交都是从链头开始遍历 &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler01.handleRequest(request01); &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler01.handleRequest(request02); &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler01.handleRequest(request03); &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</li>
	<li>}&nbsp;</li>
</ol>

<p>测试结果：</p>

<ol>
	<li>处理者-01&nbsp;处理&nbsp;请求-01&nbsp;</li>
	<li>&nbsp;</li>
	<li>当前&nbsp;处理者-01&nbsp;不足以处理&nbsp;请求-02&nbsp;</li>
	<li>处理者-02&nbsp;处理&nbsp;请求-02&nbsp;</li>
	<li>&nbsp;</li>
	<li>当前&nbsp;处理者-01&nbsp;不足以处理&nbsp;请求-03&nbsp;</li>
	<li>当前&nbsp;处理者-02&nbsp;不足以处理&nbsp;请求-03&nbsp;</li>
	<li>处理者-03&nbsp;处理&nbsp;请求-03&nbsp;</li>
</ol>

<p>在上面抽象处理者 AbstractHandler 类的 handleRequest() 方法中，被 protected 修饰，并且该方法中调用了两个必须被子类覆盖实现的抽象方法，这里是使用了模板方法模式（Template Mehtod）。其实在这里，抽象父类的 handleRequest() 具备了请求传递的功能，即对某些请求不能处理时，马上提交到下一结点（处理者）中，而每个具体的处理者仅仅完成了具体的处理逻辑，其他的都不用理。</p>

<p>&nbsp;</p>

<p>记得第一次看到职责链模式的时候，我很惊讶于它能够把我们平时在代码中的 if..else.. 的语句块变成这样灵活、适应变化。例如：如果现在辅导员请长假了，但我们的秋游还是要争取申请成功呀，那么我们在 Client 类中可以不要创建 handler02，即不要将该处理者组装到职责链中。这样子处理比 if..else..好多了。或者说，突然来了个爱管闲事的领导，那么我照样可以将其组装到职责链中。</p>

<p>&nbsp;</p>

<p>关于上面使用场景中提到的3个点：</p>

<p>1、处理者在运行时动态确定其实是我们在 Client 中组装的链所引起的，因为具体的职责逻辑就在链中一一对应起来；</p>

<p>2、因为不确定请求的具体处理者是谁，所以我们把所有可能的处理者组装成一条链，在遍历的过程中就相当于向每个处理者都提交了这个请求，等待其审查。并且在审查过程中，即使不是最终处理者，也可以进行一些请求的&ldquo;包装&rdquo;操作（这种功能类似于装饰者模式），例如上面例子中的签名批准；</p>

<p>3、处理者集合的动态指定跟上面的第1、2点类似，即在 Client 类中创建了所有可能的处理者。</p>

<p>不足之处：</p>

<p>1、<strong>对于每一个请求都需要遍历职责链，性能是个问题</strong>；</p>

<p>2、抽象处理者 AbstractHandler 类中的 handleRequest() 方法中使用了递归，栈空间的大小也是个问题。</p>

<p>&nbsp;个人看法：</p>

<p>职责链模式对于请求的处理是不知道最终处理者是谁，所以是运行动态寻找并指定；而命令模式中对于命令的处理时在创建命令是已经显式或隐式绑定了接收者。</p>

<p>&nbsp;</p>
