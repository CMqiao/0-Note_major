<h1>集成数据库</h1>

<p>为 Express 应用添加连接数据库的能力，只需要加载相应数据库的 Node.js 驱动即可。这里将会简要介绍如何为 Express 应用添加和使用一些常用的数据库 Node 模块。</p>

<ul>
	<li><a href="http://www.expressjs.com.cn/guide/database-integration.html#cassandra">Cassandra</a></li>
	<li><a href="http://www.expressjs.com.cn/guide/database-integration.html#couchdb">CouchDB</a></li>
	<li><a href="http://www.expressjs.com.cn/guide/database-integration.html#leveldb">LevelDB</a></li>
	<li><a href="http://www.expressjs.com.cn/guide/database-integration.html#mysql">MySQL</a></li>
	<li><a href="http://www.expressjs.com.cn/guide/database-integration.html#mongo">MongoDB</a></li>
	<li><a href="http://www.expressjs.com.cn/guide/database-integration.html#neo4j">Neo4j</a></li>
	<li><a href="http://www.expressjs.com.cn/guide/database-integration.html#postgres">PostgreSQL</a></li>
	<li><a href="http://www.expressjs.com.cn/guide/database-integration.html#redis">Redis</a></li>
	<li><a href="http://www.expressjs.com.cn/guide/database-integration.html#sqlite">SQLite</a></li>
	<li><a href="http://www.expressjs.com.cn/guide/database-integration.html#elasticsearch">ElasticSearch</a></li>
</ul>

<p>这些数据库驱动只是其中一部分，可在&nbsp;<a href="https://www.npmjs.com/">npm 官网</a>&nbsp;查找更多驱动。</p>

<h2>Cassandra</h2>

<p><strong>模块</strong>:&nbsp;<a href="https://github.com/datastax/nodejs-driver">cassandra-driver</a><br />
<strong>安装</strong></p>

<pre>
<code>$ npm install cassandra-driver
</code></pre>

<p><strong>示例</strong></p>

<pre>
<code>var cassandra = require(&#39;cassandra-driver&#39;);
var client = new cassandra.Client({ contactPoints: [&#39;localhost&#39;]});

client.execute(&#39;select key from system.local&#39;, function(err, result) {
  if (err) throw err;
  console.log(result.rows[0]);
});</code>
</pre>

<h2>CouchDB</h2>

<p><strong>模块</strong>:&nbsp;<a href="https://github.com/dscape/nano">nano</a><br />
<strong>安装</strong></p>

<pre>
<code>$ npm install nano
</code></pre>

<p><strong>示例</strong></p>

<pre>
<code>var nano = require(&#39;nano&#39;)(&#39;http://localhost:5984&#39;);
nano.db.create(&#39;books&#39;);
var books = nano.db.use(&#39;books&#39;);

//Insert a book document in the books database
books.insert({name: &#39;The Art of war&#39;}, null, function(err, body) {
  if (!err){
    console.log(body);
  }
});

//Get a list of all books
books.list(function(err, body){
  console.log(body.rows);
}</code>
</pre>

<h2>LevelDB</h2>

<p><strong>模块</strong>:&nbsp;<a href="https://github.com/rvagg/node-levelup">levelup</a><br />
<strong>安装</strong></p>

<pre>
<code>$ npm install level levelup leveldown
</code></pre>

<p><strong>示例</strong></p>

<pre>
<code>var levelup = require(&#39;levelup&#39;);
var db = levelup(&#39;./mydb&#39;);

db.put(&#39;name&#39;, &#39;LevelUP&#39;, function (err) {

  if (err) return console.log(&#39;Ooops!&#39;, err);
  db.get(&#39;name&#39;, function (err, value) {
    if (err) return console.log(&#39;Ooops!&#39;, err);
    console.log(&#39;name=&#39; + value)
  });

});</code>
</pre>

<h2>MySQL</h2>

<p><strong>模块</strong>:&nbsp;<a href="https://github.com/felixge/node-mysql/">mysql</a><br />
<strong>安装</strong></p>

<pre>
<code>$ npm install mysql
</code></pre>

<p><strong>示例</strong></p>

<pre>
<code>var mysql      = require(&#39;mysql&#39;);
var connection = mysql.createConnection({
  host     : &#39;localhost&#39;,
  user     : &#39;dbuser&#39;,
  password : &#39;s3kreee7&#39;
});

connection.connect();

connection.query(&#39;SELECT 1 + 1 AS solution&#39;, function(err, rows, fields) {
  if (err) throw err;
  console.log(&#39;The solution is: &#39;, rows[0].solution);
});

connection.end();</code>
</pre>

<h2>MongoDB</h2>

<p><strong>模块</strong>:&nbsp;<a href="https://github.com/kissjs/node-mongoskin">mongoskin</a><br />
<strong>安装</strong></p>

<pre>
<code>$ npm install mongoskin
</code></pre>

<p><strong>示例</strong></p>

<pre>
<code>var db = require(&#39;mongoskin&#39;).db(&#39;localhost:27017/animals&#39;);

db.collection(&#39;mamals&#39;).find().toArray(function(err, result) {
  if (err) throw err;
  console.log(result);
});
</code></pre>

<p>If you want a object model driver for MongoDB, checkout&nbsp;<a href="https://github.com/LearnBoost/mongoose">Mongoose</a>.</p>

<h2>Neo4j</h2>

<p><strong>模块</strong>:&nbsp;<a href="https://github.com/hacksparrow/apoc">apoc</a><br />
<strong>安装</strong></p>

<pre>
<code>$ npm install apoc
</code></pre>

<p><strong>示例</strong></p>

<pre>
<code>var apoc = require(&#39;apoc&#39;);

apoc.query(&#39;match (n) return n&#39;).exec().then(
  function (response) {
    console.log(response);
  },
  function (fail) {
    console.log(fail);
  }
);</code>
</pre>

<h2>PostgreSQL</h2>

<p><strong>模块</strong>:&nbsp;<a href="https://github.com/brianc/node-postgres">pg</a><br />
<strong>安装</strong></p>

<pre>
<code>$ npm install pg
</code></pre>

<p><strong>示例</strong></p>

<pre>
<code>var pg = require(&#39;pg&#39;);
var conString = &quot;postgres://username:password@localhost/database&quot;;

pg.connect(conString, function(err, client, done) {

  if (err) {
    return console.error(&#39;error fetching client from pool&#39;, err);
  }
  client.query(&#39;SELECT $1::int AS number&#39;, [&#39;1&#39;], function(err, result) {
    done();
    if (err) {
      return console.error(&#39;error running query&#39;, err);
    }
    console.log(result.rows[0].number);
  });

});</code>
</pre>

<h2>Redis</h2>

<p><strong>模块</strong>:&nbsp;<a href="https://github.com/mranney/node_redis">redis</a><br />
<strong>安装</strong></p>

<pre>
<code>$ npm install redis
</code></pre>

<p><strong>示例</strong></p>

<pre>
<code>var client = require(&#39;redis&#39;).createClient();

client.on(&#39;error&#39;, function (err) {
  console.log(&#39;Error &#39; + err);
});

client.set(&#39;string key&#39;, &#39;string val&#39;, redis.print);
client.hset(&#39;hash key&#39;, &#39;hashtest 1&#39;, &#39;some value&#39;, redis.print);
client.hset([&#39;hash key&#39;, &#39;hashtest 2&#39;, &#39;some other value&#39;], redis.print);

client.hkeys(&#39;hash key&#39;, function (err, replies) {

  console.log(replies.length + &#39; replies:&#39;);
  replies.forEach(function (reply, i) {
    console.log(&#39;    &#39; + i + &#39;: &#39; + reply);
  });

  client.quit();

});</code>
</pre>

<h2>SQLite</h2>

<p><strong>模块</strong>:&nbsp;<a href="https://github.com/mapbox/node-sqlite3">sqlite3</a><br />
<strong>安装</strong></p>

<pre>
<code>$ npm install sqlite3
</code></pre>

<p><strong>示例</strong></p>

<pre>
<code>var sqlite3 = require(&#39;sqlite3&#39;).verbose();
var db = new sqlite3.Database(&#39;:memory:&#39;);

db.serialize(function() {

  db.run(&#39;CREATE TABLE lorem (info TEXT)&#39;);
  var stmt = db.prepare(&#39;INSERT INTO lorem VALUES (?)&#39;);

  for (var i = 0; i &lt; 10; i++) {
    stmt.run(&#39;Ipsum &#39; + i);
  }

  stmt.finalize();

  db.each(&#39;SELECT rowid AS id, info FROM lorem&#39;, function(err, row) {
    console.log(row.id + &#39;: &#39; + row.info);
  });
});

db.close();
</code>
</pre>

<h2>ElasticSearch</h2>

<p><strong>模块</strong>:&nbsp;<a href="https://github.com/elastic/elasticsearch-js">elasticsearch</a><br />
<strong>安装</strong></p>

<pre>
<code>$ npm install elasticsearch
</code></pre>

<p><strong>示例</strong></p>

<pre>
<code>var elasticsearch = require(&#39;elasticsearch&#39;);
var client = elasticsearch.Client({
  host: &#39;localhost:9200&#39;  
});

client.search({
  index: &#39;books&#39;,
  type: &#39;book&#39;,
  body: {
    query: {
      multi_match: {
        query: &#39;express js&#39;,
        fields: [&#39;title&#39;, &#39;description&#39;]
      }
    }
  }
}).then(function(response) {
  var hits = response.hits.hits;
}, function(error) {
  console.trace(error.message);
});</code></pre>
