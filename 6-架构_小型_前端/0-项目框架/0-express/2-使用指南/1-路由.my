<h1>路由</h1>

<p>路由是指如何定义应用的端点（URIs）以及如何响应客户端的请求。</p>

<p>路由是由一个 URI、HTTP 请求（GET、POST等）和若干个句柄组成，它的结构如下：&nbsp;<code>app.METHOD(path, [callback...], callback)</code>，&nbsp;<code>app</code>&nbsp;是&nbsp;<code>express</code>对象的一个实例，&nbsp;<code>METHOD</code>&nbsp;是一个&nbsp;<a href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">HTTP 请求方法</a>，&nbsp;<code>path</code>&nbsp;是服务器上的路径，&nbsp;<code>callback</code>&nbsp;是当路由匹配时要执行的函数。</p>

<p>下面是一个基本的路由示例：</p>

<pre>
<code>var express = require(&#39;express&#39;);
var app = express();

// respond with &quot;hello world&quot; when a GET request is made to the homepage
app.get(&#39;/&#39;, function(req, res) {
  res.send(&#39;hello world&#39;);
});
</code></pre>

<h2>路由方法</h2>

<p>路由方法源于 HTTP 请求方法，和&nbsp;<code>express</code>&nbsp;实例相关联。</p>

<p>下面这个例子展示了为应用跟路径定义的 GET 和 POST 请求：</p>

<pre>
<code>// GET method route
app.get(&#39;/&#39;, function (req, res) {
  res.send(&#39;GET request to the homepage&#39;);
});

// POST method route
app.post(&#39;/&#39;, function (req, res) {
  res.send(&#39;POST request to the homepage&#39;);
});

</code></pre>

<p>Express 定义了如下和 HTTP 请求对应的路由方法：&nbsp;<code>get</code>,&nbsp;<code>post</code>,&nbsp;<code>put</code>,&nbsp;<code>head</code>,&nbsp;<code>delete</code>,&nbsp;<code>options</code>,&nbsp;<code>trace</code>,&nbsp;<code>copy</code>,&nbsp;<code>lock</code>,&nbsp;<code>mkcol</code>,&nbsp;<code>move</code>,&nbsp;<code>purge</code>,&nbsp;<code>propfind</code>,&nbsp;<code>proppatch</code>,&nbsp;<code>unlock</code>,&nbsp;<code>report</code>,&nbsp;<code>mkactivity</code>,&nbsp;<code>checkout</code>,&nbsp;<code>merge</code>,&nbsp;<code>m-search</code>,&nbsp;<code>notify</code>,&nbsp;<code>subscribe</code>,&nbsp;<code>unsubscribe</code>,&nbsp;<code>patch</code>,&nbsp;<code>search</code>, 和&nbsp;<code>connect</code>。</p>

<p>有些路由方法名不是合规的 JavaScript 变量名，此时使用括号记法，比如：&nbsp;<code>app[&#39;m-search&#39;](&#39;/&#39;, function ...</code></p>

<p><code>app.all()</code>&nbsp;是一个特殊的路由方法，没有任何 HTTP 方法与其对应，它的作用是对于一个路径上的所有请求加载中间件。</p>

<p>在下面的例子中，来自 &ldquo;/secret&rdquo; 的请求，不管使用 GET、POST、PUT、DELETE 或其他任何&nbsp;<a href="https://nodejs.org/api/http.html#http_http_methods">http 模块</a>支持的 HTTP 请求，句柄都会得到执行。</p>

<pre>
<code>app.all(&#39;/secret&#39;, function (req, res, next) {
  console.log(&#39;Accessing the secret section ...&#39;);
  next(); // pass control to the next handler
});
</code></pre>

<h2>路由路径</h2>

<p>路由路径和请求方法一起定义了请求的端点，它可以是字符串、字符串模式或者正则表达式。</p>

<p>Express 使用&nbsp;<a href="https://www.npmjs.com/package/path-to-regexp">path-to-regexp</a>&nbsp;匹配路由路径，请参考文档查阅所有定义路由路径的方法。&nbsp;<a href="http://forbeslindesay.github.io/express-route-tester/">Express Route Tester</a>&nbsp;是测试基本 Express 路径的好工具，但不支持模式匹配。</p>

<p>查询字符串不是路由路径的一部分。</p>

<p>使用字符串的路由路径示例：</p>

<pre>
<code>// 匹配根路径的请求
app.get(&#39;/&#39;, function (req, res) {
  res.send(&#39;root&#39;);
});

// 匹配 /about 路径的请求
app.get(&#39;/about&#39;, function (req, res) {
  res.send(&#39;about&#39;);
});

// 匹配 /random.text 路径的请求
app.get(&#39;/random.text&#39;, function (req, res) {
  res.send(&#39;random.text&#39;);
});
</code></pre>

<p>使用字符串模式的路由路径示例：</p>

<pre>
<code>// 匹配 acd 和 abcd
app.get(&#39;/ab?cd&#39;, function(req, res) {
  res.send(&#39;ab?cd&#39;);
});

// 匹配 abcd、abbcd、abbbcd等
app.get(&#39;/ab+cd&#39;, function(req, res) {
  res.send(&#39;ab+cd&#39;);
});

// 匹配 abcd、abxcd、abRABDOMcd、ab123cd等
app.get(&#39;/ab*cd&#39;, function(req, res) {
  res.send(&#39;ab*cd&#39;);
});

// 匹配 /abe 和 /abcde
app.get(&#39;/ab(cd)?e&#39;, function(req, res) {
 res.send(&#39;ab(cd)?e&#39;);
});
</code></pre>

<p>字符 ?、+、* 和 () 是正则表达式的子集，- 和 . 在基于字符串的路径中按照字面值解释。</p>

<p>使用正则表达式的路由路径示例：</p>

<pre>
<code>// 匹配任何路径中含有 a 的路径：
app.get(/a/, function(req, res) {
  res.send(&#39;/a/&#39;);
});

// 匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等
app.get(/.*fly$/, function(req, res) {
  res.send(&#39;/.*fly$/&#39;);
});
</code></pre>

<h2>路由句柄</h2>

<p>可以为请求处理提供多个回调函数，其行为类似&nbsp;<a href="http://www.expressjs.com.cn/guide/using-middleware.html">中间件</a>。唯一的区别是这些回调函数有可能调用&nbsp;<code>next(&#39;route&#39;)</code>&nbsp;方法而略过其他路由回调函数。可以利用该机制为路由定义前提条件，如果在现有路径上继续执行没有意义，则可将控制权交给剩下的路径。</p>

<p>路由句柄有多种形式，可以是一个函数、一个函数数组，或者是两者混合，如下所示.</p>

<p>使用一个回调函数处理路由：</p>

<pre>
<code>app.get(&#39;/example/a&#39;, function (req, res) {
  res.send(&#39;Hello from A!&#39;);
});
</code></pre>

<p>使用多个回调函数处理路由（记得指定&nbsp;<code>next</code>&nbsp;对象）：</p>

<pre>
<code>app.get(&#39;/example/b&#39;, function (req, res, next) {
  console.log(&#39;response will be sent by the next function ...&#39;);
  next();
}, function (req, res) {
  res.send(&#39;Hello from B!&#39;);
});
</code></pre>

<p>使用回调函数数组处理路由：</p>

<pre>
<code>var cb0 = function (req, res, next) {
  console.log(&#39;CB0&#39;);
  next();
}

var cb1 = function (req, res, next) {
  console.log(&#39;CB1&#39;);
  next();
}

var cb2 = function (req, res) {
  res.send(&#39;Hello from C!&#39;);
}

app.get(&#39;/example/c&#39;, [cb0, cb1, cb2]);
</code></pre>

<p>混合使用函数和函数数组处理路由：</p>

<pre>
<code>var cb0 = function (req, res, next) {
  console.log(&#39;CB0&#39;);
  next();
}

var cb1 = function (req, res, next) {
  console.log(&#39;CB1&#39;);
  next();
}

app.get(&#39;/example/d&#39;, [cb0, cb1], function (req, res, next) {
  console.log(&#39;response will be sent by the next function ...&#39;);
  next();
}, function (req, res) {
  res.send(&#39;Hello from D!&#39;);
});
</code></pre>

<h2>响应方法</h2>

<p>下表中响应对象（<code>res</code>）的方法向客户端返回响应，终结请求响应的循环。如果在路由句柄中一个方法也不调用，来自客户端的请求会一直挂起。</p>

<table>
	<thead>
		<tr>
			<th>方法</th>
			<th>描述</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td><a href="http://www.expressjs.com.cn/4x/api.html#res.download">res.download()</a></td>
			<td>提示下载文件。</td>
		</tr>
		<tr>
			<td><a href="http://www.expressjs.com.cn/4x/api.html#res.end">res.end()</a></td>
			<td>终结响应处理流程。</td>
		</tr>
		<tr>
			<td><a href="http://www.expressjs.com.cn/4x/api.html#res.json">res.json()</a></td>
			<td>发送一个 JSON 格式的响应。</td>
		</tr>
		<tr>
			<td><a href="http://www.expressjs.com.cn/4x/api.html#res.jsonp">res.jsonp()</a></td>
			<td>发送一个支持 JSONP 的 JSON 格式的响应。</td>
		</tr>
		<tr>
			<td><a href="http://www.expressjs.com.cn/4x/api.html#res.redirect">res.redirect()</a></td>
			<td>重定向请求。</td>
		</tr>
		<tr>
			<td><a href="http://www.expressjs.com.cn/4x/api.html#res.render">res.render()</a></td>
			<td>渲染视图模板。</td>
		</tr>
		<tr>
			<td><a href="http://www.expressjs.com.cn/4x/api.html#res.send">res.send()</a></td>
			<td>发送各种类型的响应。</td>
		</tr>
		<tr>
			<td><a href="http://www.expressjs.com.cn/4x/api.html#res.sendFile">res.sendFile</a></td>
			<td>以八位字节流的形式发送文件。</td>
		</tr>
		<tr>
			<td><a href="http://www.expressjs.com.cn/4x/api.html#res.sendStatus">res.sendStatus()</a></td>
			<td>设置响应状态代码，并将其以字符串形式作为响应体的一部分发送。</td>
		</tr>
	</tbody>
</table>

<h2>app.route()</h2>

<p>可使用&nbsp;<code>app.route()</code>&nbsp;创建路由路径的链式路由句柄。由于路径在一个地方指定，这样做有助于创建模块化的路由，而且减少了代码冗余和拼写错误。请参考&nbsp;<a href="http://www.expressjs.com.cn/4x/api.html#router">Router() 文档</a>&nbsp;了解更多有关路由的信息。</p>

<p>下面这个示例程序使用&nbsp;<code>app.route()</code>&nbsp;定义了链式路由句柄。</p>

<pre>
<code>app.route(&#39;/book&#39;)
  .get(function(req, res) {
    res.send(&#39;Get a random book&#39;);
  })
  .post(function(req, res) {
    res.send(&#39;Add a book&#39;);
  })
  .put(function(req, res) {
    res.send(&#39;Update the book&#39;);
  });
</code></pre>

<h2>express.Router</h2>

<p>可使用&nbsp;<code>express.Router</code>&nbsp;类创建模块化、可挂载的路由句柄。<code>Router</code>&nbsp;实例是一个完整的中间件和路由系统，因此常称其为一个 &ldquo;mini-app&rdquo;。</p>

<p>下面的实例程序创建了一个路由模块，并加载了一个中间件，定义了一些路由，并且将它们挂载至应用的路径上。</p>

<p>在 app 目录下创建名为&nbsp;<code>birds.js</code>&nbsp;的文件，内容如下：</p>

<pre>
<code>var express = require(&#39;express&#39;);
var router = express.Router();

// 该路由使用的中间件
router.use(function timeLog(req, res, next) {
  console.log(&#39;Time: &#39;, Date.now());
  next();
});
// 定义网站主页的路由
router.get(&#39;/&#39;, function(req, res) {
  res.send(&#39;Birds home page&#39;);
});
// 定义 about 页面的路由
router.get(&#39;/about&#39;, function(req, res) {
  res.send(&#39;About birds&#39;);
});

module.exports = router;
</code></pre>

<p>然后在应用中加载路由模块：</p>

<pre>
<code>var birds = require(&#39;./birds&#39;);
...
app.use(&#39;/birds&#39;, birds);
</code></pre>

<p>应用即可处理发自&nbsp;<code>/birds</code>&nbsp;和&nbsp;<code>/birds/about</code>&nbsp;的请求，并且调用为该路由指定的&nbsp;<code>timeLog</code>&nbsp;中间件。</p>
