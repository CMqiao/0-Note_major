<h1>管理资源</h1>

<p>如果你是从开始一直遵循着指南的示例，现在会有一个小项目，显示 &quot;Hello webpack&quot;。现在我们尝试整合一些其他资源，比如图像，看看 webpack 如何处理。</p>

<p>在 webpack 出现之前，前端开发人员会使用 grunt 和 gulp 等工具来处理资源，并将它们从&nbsp;<code>/src</code>&nbsp;文件夹移动到&nbsp;<code>/dist</code>&nbsp;或&nbsp;<code>/build</code>&nbsp;目录中。同样方式也被用于 JavaScript 模块，但是，像 webpack 这样的工具，将<strong>动态打包(dynamically bundle)</strong>所有依赖项（创建所谓的<a href="https://www.webpackjs.com/concepts/dependency-graph">依赖图(dependency graph)</a>）。这是极好的创举，因为现在每个模块都可以_明确表述它自身的依赖，我们将避免打包未使用的模块。</p>

<p>webpack 最出色的功能之一就是，除了 JavaScript，还可以通过 loader&nbsp;<em>引入任何其他类型的文件</em>。也就是说，以上列出的那些 JavaScript 的优点（例如显式依赖），同样可以用来构建网站或 web 应用程序中的所有非 JavaScript 内容。让我们从 CSS 开始起步，或许你可能已经熟悉了这个设置过程。</p>

<h2>安装</h2>

<p>在开始之前，让我们对项目做一个小的修改：</p>

<p><strong>dist/index.html</strong></p>

<pre>
<code>  &lt;!doctype html&gt;
  &lt;html&gt;
    &lt;head&gt;
-    &lt;title&gt;Getting Started&lt;/title&gt;
+    &lt;title&gt;Asset Management&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
      &lt;script src=&quot;./bundle.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
  &lt;/html&gt;
</code></pre>

<h2>加载 CSS</h2>

<p>为了从 JavaScript 模块中&nbsp;<code>import</code>&nbsp;一个 CSS 文件，你需要在&nbsp;<a href="https://www.webpackjs.com/configuration/module"><code>module</code>&nbsp;配置中</a>&nbsp;安装并添加&nbsp;<a href="https://www.webpackjs.com/loaders/style-loader">style-loader</a>&nbsp;和&nbsp;<a href="https://www.webpackjs.com/loaders/css-loader">css-loader</a>：</p>

<pre>
<code>npm install --save-dev style-loader css-loader
</code></pre>

<p><strong>webpack.config.js</strong></p>

<pre>
<code>  const path = require(&#39;path&#39;);

  module.exports = {
    entry: &#39;./src/index.js&#39;,
    output: {
      filename: &#39;bundle.js&#39;,
      path: path.resolve(__dirname, &#39;dist&#39;)
    },
+   module: {
+     rules: [
+       {
+         test: /\.css$/,
+         use: [
+           &#39;style-loader&#39;,
+           &#39;css-loader&#39;
+         ]
+       }
+     ]
+   }
  };
</code></pre>

<blockquote>
<p>webpack 根据正则表达式，来确定应该查找哪些文件，并将其提供给指定的 loader。在这种情况下，以&nbsp;<code>.css</code>&nbsp;结尾的全部文件，都将被提供给&nbsp;<code>style-loader</code>&nbsp;和&nbsp;<code>css-loader</code>。</p>
</blockquote>

<p>这使你可以在依赖于此样式的文件中&nbsp;<code>import &#39;./style.css&#39;</code>。现在，当该模块运行时，含有 CSS 字符串的&nbsp;<code>&lt;style&gt;</code>&nbsp;标签，将被插入到 html 文件的&nbsp;<code>&lt;head&gt;</code>&nbsp;中。</p>

<p>我们尝试一下，通过在项目中添加一个新的&nbsp;<code>style.css</code>&nbsp;文件，并将其导入到我们的&nbsp;<code>index.js</code>&nbsp;中：</p>

<p><strong>project</strong></p>

<pre>
<code>  webpack-demo
  |- package.json
  |- webpack.config.js
  |- /dist
    |- bundle.js
    |- index.html
  |- /src
+   |- style.css
    |- index.js
  |- /node_modules
</code></pre>

<p><strong>src/style.css</strong></p>

<pre>
<code>.hello {
  color: red;
}
</code></pre>

<p><strong>src/index.js</strong></p>

<pre>
<code>  import _ from &#39;lodash&#39;;
+ import &#39;./style.css&#39;;

  function component() {
    var element = document.createElement(&#39;div&#39;);

    // lodash 是由当前 script 脚本 import 导入进来的
    element.innerHTML = _.join([&#39;Hello&#39;, &#39;webpack&#39;], &#39; &#39;);
+   element.classList.add(&#39;hello&#39;);

    return element;
  }

  document.body.appendChild(component());
</code></pre>

<p>现在运行构建命令：</p>

<pre>
<code>npm run build

Hash: 9a3abfc96300ef87880f
Version: webpack 2.6.1
Time: 834ms
    Asset    Size  Chunks                    Chunk Names
bundle.js  560 kB       0  [emitted]  [big]  main
   [0] ./~/lodash/lodash.js 540 kB {0} [built]
   [1] ./src/style.css 1 kB {0} [built]
   [2] ./~/css-loader!./src/style.css 191 bytes {0} [built]
   [3] ./~/css-loader/lib/css-base.js 2.26 kB {0} [built]
   [4] ./~/style-loader/lib/addStyles.js 8.7 kB {0} [built]
   [5] ./~/style-loader/lib/urls.js 3.01 kB {0} [built]
   [6] (webpack)/buildin/global.js 509 bytes {0} [built]
   [7] (webpack)/buildin/module.js 517 bytes {0} [built]
   [8] ./src/index.js 351 bytes {0} [built]
</code></pre>

<p>再次在浏览器中打开&nbsp;<code>index.html</code>，你应该看到&nbsp;<code>Hello webpack</code>&nbsp;现在的样式是红色。要查看 webpack 做了什么，请检查页面（不要查看页面源代码，因为它不会显示结果），并查看页面的 head 标签。它应该包含我们在&nbsp;<code>index.js</code>&nbsp;中导入的 style 块元素。</p>

<blockquote>
<p>请注意，在多数情况下，你也可以进行&nbsp;<a href="https://www.webpackjs.com/plugins/extract-text-webpack-plugin">CSS 分离</a>，以便在生产环境中节省加载时间。最重要的是，现有的 loader 可以支持任何你可以想到的 CSS 处理器风格 -&nbsp;<a href="https://www.webpackjs.com/loaders/postcss-loader">postcss</a>,&nbsp;<a href="https://www.webpackjs.com/loaders/sass-loader">sass</a>&nbsp;和&nbsp;<a href="https://www.webpackjs.com/loaders/less-loader">less</a>&nbsp;等。</p>
</blockquote>

<h2>加载图片</h2>

<p>假想，现在我们正在下载 CSS，但是我们的背景和图标这些图片，要如何处理呢？使用&nbsp;<a href="https://www.webpackjs.com/loaders/file-loader">file-loader</a>，我们可以轻松地将这些内容混合到 CSS 中：</p>

<pre>
<code>npm install --save-dev file-loader
</code></pre>

<p><strong>webpack.config.js</strong></p>

<pre>
<code>  const path = require(&#39;path&#39;);

  module.exports = {
    entry: &#39;./src/index.js&#39;,
    output: {
      filename: &#39;bundle.js&#39;,
      path: path.resolve(__dirname, &#39;dist&#39;)
    },
    module: {
      rules: [
        {
          test: /\.css$/,
          use: [
            &#39;style-loader&#39;,
            &#39;css-loader&#39;
          ]
        },
+       {
+         test: /\.(png|svg|jpg|gif)$/,
+         use: [
+           &#39;file-loader&#39;
+         ]
+       }
      ]
    }
  };
</code></pre>

<p>现在，当你&nbsp;<code>import MyImage from &#39;./my-image.png&#39;</code>，该图像将被处理并添加到&nbsp;<code>output</code>&nbsp;目录，_并且_&nbsp;<code>MyImage</code>&nbsp;变量将包含该图像在处理后的最终 url。当使用&nbsp;<a href="https://www.webpackjs.com/loaders/css-loader">css-loader</a>&nbsp;时，如上所示，你的 CSS 中的&nbsp;<code>url(&#39;./my-image.png&#39;)</code>&nbsp;会使用类似的过程去处理。loader 会识别这是一个本地文件，并将&nbsp;<code>&#39;./my-image.png&#39;</code>&nbsp;路径，替换为<code>输出</code>目录中图像的最终路径。<a href="https://www.webpackjs.com/loaders/html-loader">html-loader</a>&nbsp;以相同的方式处理&nbsp;<code>&lt;img src=&quot;./my-image.png&quot; /&gt;</code>。</p>

<p>我们向项目添加一个图像，然后看它是如何工作的，你可以使用任何你喜欢的图像：</p>

<p><strong>project</strong></p>

<pre>
<code>  webpack-demo
  |- package.json
  |- webpack.config.js
  |- /dist
    |- bundle.js
    |- index.html
  |- /src
+   |- icon.png
    |- style.css
    |- index.js
  |- /node_modules
</code></pre>

<p><strong>src/index.js</strong></p>

<pre>
<code>  import _ from &#39;lodash&#39;;
  import &#39;./style.css&#39;;
+ import Icon from &#39;./icon.png&#39;;

  function component() {
    var element = document.createElement(&#39;div&#39;);

    // Lodash，现在由此脚本导入
    element.innerHTML = _.join([&#39;Hello&#39;, &#39;webpack&#39;], &#39; &#39;);
    element.classList.add(&#39;hello&#39;);

+   // 将图像添加到我们现有的 div。
+   var myIcon = new Image();
+   myIcon.src = Icon;
+
+   element.appendChild(myIcon);

    return element;
  }

  document.body.appendChild(component());
</code></pre>

<p><strong>src/style.css</strong></p>

<pre>
<code>  .hello {
    color: red;
+   background: url(&#39;./icon.png&#39;);
  }
</code></pre>

<p>让我们重新构建，并再次打开 index.html 文件：</p>

<pre>
<code>npm run build

Hash: 854865050ea3c1c7f237
Version: webpack 2.6.1
Time: 895ms
                               Asset     Size  Chunks                    Chunk Names
5c999da72346a995e7e2718865d019c8.png  11.3 kB          [emitted]
                           bundle.js   561 kB       0  [emitted]  [big]  main
   [0] ./src/icon.png 82 bytes {0} [built]
   [1] ./~/lodash/lodash.js 540 kB {0} [built]
   [2] ./src/style.css 1 kB {0} [built]
   [3] ./~/css-loader!./src/style.css 242 bytes {0} [built]
   [4] ./~/css-loader/lib/css-base.js 2.26 kB {0} [built]
   [5] ./~/style-loader/lib/addStyles.js 8.7 kB {0} [built]
   [6] ./~/style-loader/lib/urls.js 3.01 kB {0} [built]
   [7] (webpack)/buildin/global.js 509 bytes {0} [built]
   [8] (webpack)/buildin/module.js 517 bytes {0} [built]
   [9] ./src/index.js 503 bytes {0} [built]
</code></pre>

<p>如果一切顺利，和&nbsp;<code>Hello webpack</code>&nbsp;文本旁边的&nbsp;<code>img</code>&nbsp;元素一样，现在看到的图标是重复的背景图片。如果你检查此元素，你将看到实际的文件名已更改为像&nbsp;<code>5c999da72346a995e7e2718865d019c8.png</code>&nbsp;一样。这意味着 webpack 在&nbsp;<code>src</code>&nbsp;文件夹中找到我们的文件，并成功处理过它！</p>

<blockquote>
<p>合乎逻辑下一步是，压缩和优化你的图像。查看&nbsp;<a href="https://github.com/tcoopman/image-webpack-loader">image-webpack-loader</a>&nbsp;和&nbsp;<a href="https://www.webpackjs.com/loaders/url-loader">url-loader</a>，以了解更多关于如果增强加载处理图片功能。</p>
</blockquote>

<h2>加载字体</h2>

<p>那么，像字体这样的其他资源如何处理呢？file-loader 和 url-loader 可以接收并加载任何文件，然后将其输出到构建目录。这就是说，我们可以将它们用于任何类型的文件，包括字体。让我们更新&nbsp;<code>webpack.config.js</code>&nbsp;来处理字体文件：</p>

<p><strong>webpack.config.js</strong></p>

<pre>
<code>  const path = require(&#39;path&#39;);

  module.exports = {
    entry: &#39;./src/index.js&#39;,
    output: {
      filename: &#39;bundle.js&#39;,
      path: path.resolve(__dirname, &#39;dist&#39;)
    },
    module: {
      rules: [
        {
          test: /\.css$/,
          use: [
            &#39;style-loader&#39;,
            &#39;css-loader&#39;
          ]
        },
        {
          test: /\.(png|svg|jpg|gif)$/,
          use: [
            &#39;file-loader&#39;
          ]
        },
+       {
+         test: /\.(woff|woff2|eot|ttf|otf)$/,
+         use: [
+           &#39;file-loader&#39;
+         ]
+       }
      ]
    }
  };
</code></pre>

<p>在项目中添加一些字体文件：</p>

<p><strong>project</strong></p>

<pre>
<code>  webpack-demo
  |- package.json
  |- webpack.config.js
  |- /dist
    |- bundle.js
    |- index.html
  |- /src
+   |- my-font.woff
+   |- my-font.woff2
    |- icon.png
    |- style.css
    |- index.js
  |- /node_modules
</code></pre>

<p>通过配置好 loader 并将字体文件放在合适的地方，你可以通过一个&nbsp;<code>@font-face</code>&nbsp;声明引入。本地的&nbsp;<code>url(...)</code>指令会被 webpack 获取处理，就像它处理图片资源一样：</p>

<p><strong>src/style.css</strong></p>

<pre>
<code>+ @font-face {
+   font-family: &#39;MyFont&#39;;
+   src:  url(&#39;./my-font.woff2&#39;) format(&#39;woff2&#39;),
+         url(&#39;./my-font.woff&#39;) format(&#39;woff&#39;);
+   font-weight: 600;
+   font-style: normal;
+ }

  .hello {
    color: red;
+   font-family: &#39;MyFont&#39;;
    background: url(&#39;./icon.png&#39;);
  }
</code></pre>

<p>现在让我们重新构建来看看 webpack 是否处理了我们的字体：</p>

<pre>
<code>npm run build

Hash: b4aef94169088c79ed1c
Version: webpack 2.6.1
Time: 775ms
                                Asset     Size  Chunks                    Chunk Names
 5c999da72346a995e7e2718865d019c8.png  11.3 kB          [emitted]
11aebbbd407bcc3ab1e914ca0238d24d.woff   221 kB          [emitted]
                            bundle.js   561 kB       0  [emitted]  [big]  main
   [0] ./src/icon.png 82 bytes {0} [built]
   [1] ./~/lodash/lodash.js 540 kB {0} [built]
   [2] ./src/style.css 1 kB {0} [built]
   [3] ./~/css-loader!./src/style.css 420 bytes {0} [built]
   [4] ./~/css-loader/lib/css-base.js 2.26 kB {0} [built]
   [5] ./src/MyFont.woff 83 bytes {0} [built]
   [6] ./~/style-loader/lib/addStyles.js 8.7 kB {0} [built]
   [7] ./~/style-loader/lib/urls.js 3.01 kB {0} [built]
   [8] (webpack)/buildin/global.js 509 bytes {0} [built]
   [9] (webpack)/buildin/module.js 517 bytes {0} [built]
  [10] ./src/index.js 503 bytes {0} [built]
</code></pre>

<p>重新打开&nbsp;<code>index.html</code>&nbsp;看看我们的&nbsp;<code>Hello webpack</code>&nbsp;文本显示是否换上了新的字体。如果一切顺利，你应该能看到变化。</p>

<h2>加载数据</h2>

<p>此外，可以加载的有用资源还有数据，如 JSON 文件，CSV、TSV 和 XML。类似于 NodeJS，JSON 支持实际上是内置的，也就是说&nbsp;<code>import Data from &#39;./data.json&#39;</code>&nbsp;默认将正常运行。要导入 CSV、TSV 和 XML，你可以使用&nbsp;<a href="https://github.com/theplatapi/csv-loader">csv-loader</a>&nbsp;和&nbsp;<a href="https://github.com/gisikw/xml-loader">xml-loader</a>。让我们处理这三类文件：</p>

<pre>
<code>npm install --save-dev csv-loader xml-loader
</code></pre>

<p><strong>webpack.config.js</strong></p>

<pre>
<code>  const path = require(&#39;path&#39;);

  module.exports = {
    entry: &#39;./src/index.js&#39;,
    output: {
      filename: &#39;bundle.js&#39;,
      path: path.resolve(__dirname, &#39;dist&#39;)
    },
    module: {
      rules: [
        {
          test: /\.css$/,
          use: [
            &#39;style-loader&#39;,
            &#39;css-loader&#39;
          ]
        },
        {
          test: /\.(png|svg|jpg|gif)$/,
          use: [
            &#39;file-loader&#39;
          ]
        },
        {
          test: /\.(woff|woff2|eot|ttf|otf)$/,
          use: [
            &#39;file-loader&#39;
          ]
        },
+       {
+         test: /\.(csv|tsv)$/,
+         use: [
+           &#39;csv-loader&#39;
+         ]
+       },
+       {
+         test: /\.xml$/,
+         use: [
+           &#39;xml-loader&#39;
+         ]
+       }
      ]
    }
  };
</code></pre>

<p>给你的项目添加一些数据文件：</p>

<p><strong>project</strong></p>

<pre>
<code>  webpack-demo
  |- package.json
  |- webpack.config.js
  |- /dist
    |- bundle.js
    |- index.html
  |- /src
+   |- data.xml
    |- my-font.woff
    |- my-font.woff2
    |- icon.png
    |- style.css
    |- index.js
  |- /node_modules
</code></pre>

<p><strong>src/data.xml</strong></p>

<pre>
<code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;note&gt;
  &lt;to&gt;Mary&lt;/to&gt;
  &lt;from&gt;John&lt;/from&gt;
  &lt;heading&gt;Reminder&lt;/heading&gt;
  &lt;body&gt;Call Cindy on Tuesday&lt;/body&gt;
&lt;/note&gt;
</code></pre>

<p>现在，你可以&nbsp;<code>import</code>&nbsp;这四种类型的数据(JSON, CSV, TSV, XML)中的任何一种，所导入的&nbsp;<code>Data</code>&nbsp;变量将包含可直接使用的已解析 JSON：</p>

<p><strong>src/index.js</strong></p>

<pre>
<code>  import _ from &#39;lodash&#39;;
  import &#39;./style.css&#39;;
  import Icon from &#39;./icon.png&#39;;
+ import Data from &#39;./data.xml&#39;;

  function component() {
    var element = document.createElement(&#39;div&#39;);

    // Lodash, now imported by this script
    element.innerHTML = _.join([&#39;Hello&#39;, &#39;webpack&#39;], &#39; &#39;);
    element.classList.add(&#39;hello&#39;);

    // Add the image to our existing div.
    var myIcon = new Image();
    myIcon.src = Icon;

    element.appendChild(myIcon);

+   console.log(Data);

    return element;
  }

  document.body.appendChild(component());
</code></pre>

<p>当你打开&nbsp;<code>index.html</code>&nbsp;并查看开发者工具中的控制台，你应该能够看到你导入的数据被打印在了上面！</p>

<blockquote>
<p>在使用&nbsp;<a href="https://github.com/d3">d3</a>&nbsp;等工具来实现某些数据可视化时，预加载数据会非常有用。我们可以不用再发送 ajax 请求，然后于运行时解析数据，而是在构建过程中将其提前载入并打包到模块中，以便浏览器加载模块后，可以立即从模块中解析数据。</p>
</blockquote>

<h2>全局资源</h2>

<p>上述所有内容中最出色之处是，以这种方式加载资源，你可以以更直观的方式将模块和资源组合在一起。无需依赖于含有全部资源的&nbsp;<code>/assets</code>&nbsp;目录，而是将资源与代码组合在一起。例如，类似这样的结构会非常有用：</p>

<pre>
<code>- |- /assets
+ |&ndash; /components
+ |  |&ndash; /my-component
+ |  |  |&ndash; index.jsx
+ |  |  |&ndash; index.css
+ |  |  |&ndash; icon.svg
+ |  |  |&ndash; img.png
</code></pre>

<p>这种配置方式会使你的代码更具备可移植性，因为现有的统一放置的方式会造成所有资源紧密耦合在一起。假如你想在另一个项目中使用&nbsp;<code>/my-component</code>，只需将其复制或移动到&nbsp;<code>/components</code>&nbsp;目录下。只要你已经安装了任何<em>扩展依赖(external dependencies)</em>，并且你<em>已经在配置中定义过相同的 loader</em>，那么项目应该能够良好运行。</p>

<p>但是，假如你无法使用新的开发方式，只能被固定于旧有开发方式，或者你有一些在多个组件（视图、模板、模块等）之间共享的资源。你仍然可以将这些资源存储在公共目录(base directory)中，甚至配合使用&nbsp;<a href="https://www.webpackjs.com/configuration/resolve#resolve-alias">alias</a>&nbsp;来使它们更方便&nbsp;<code>import 导入</code>。</p>

<h2>回退处理</h2>

<p>对于接下来的指南，我们无需使用本指南中所有用到的资源，因此我们会进行一些清理工作，以便为下一部分指南中的<a href="https://www.webpackjs.com/guides/output-management/">管理输出章节</a>做好准备：</p>

<p><strong>project</strong></p>

<pre>
<code>  webpack-demo
  |- package.json
  |- webpack.config.js
  |- /dist
    |- bundle.js
    |- index.html
  |- /src
-   |- data.xml
-   |- my-font.woff
-   |- my-font.woff2
-   |- icon.png
-   |- style.css
    |- index.js
  |- /node_modules
</code></pre>

<p><strong>webpack.config.js</strong></p>

<pre>
<code>  const path = require(&#39;path&#39;);

  module.exports = {
    entry: &#39;./src/index.js&#39;,
    output: {
      filename: &#39;bundle.js&#39;,
      path: path.resolve(__dirname, &#39;dist&#39;)
    },
-   module: {
-     rules: [
-       {
-         test: /\.css$/,
-         use: [
-           &#39;style-loader&#39;,
-           &#39;css-loader&#39;
-         ]
-       },
-       {
-         test: /\.(png|svg|jpg|gif)$/,
-         use: [
-           &#39;file-loader&#39;
-         ]
-       },
-       {
-         test: /\.(woff|woff2|eot|ttf|otf)$/,
-         use: [
-           &#39;file-loader&#39;
-         ]
-       },
-       {
-         test: /\.(csv|tsv)$/,
-         use: [
-           &#39;csv-loader&#39;
-         ]
-       },
-       {
-         test: /\.xml$/,
-         use: [
-           &#39;xml-loader&#39;
-         ]
-       }
-     ]
-   }
  };
</code></pre>

<p><strong>src/index.js</strong></p>

<pre>
<code>  import _ from &#39;lodash&#39;;
- import &#39;./style.css&#39;;
- import Icon from &#39;./icon.png&#39;;
- import Data from &#39;./data.xml&#39;;
-
  function component() {
    var element = document.createElement(&#39;div&#39;);
-
-   // Lodash，现在通过 script 标签导入
    element.innerHTML = _.join([&#39;Hello&#39;, &#39;webpack&#39;], &#39; &#39;);
-   element.classList.add(&#39;hello&#39;);
-
-   // 将图像添加到我们已有的 div 中。
-   var myIcon = new Image();
-   myIcon.src = Icon;
-
-   element.appendChild(myIcon);
-
-   console.log(Data);

    return element;
  }

  document.body.appendChild(component());
</code></pre>

<h2>下一章节指南</h2>

<p>让我们继续移步到<a href="https://www.webpackjs.com/guides/output-management/">管理输出</a></p>
