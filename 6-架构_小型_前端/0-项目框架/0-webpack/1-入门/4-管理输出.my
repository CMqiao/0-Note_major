<h1>管理输出</h1>

<p>本指南继续沿用<a href="https://www.webpackjs.com/guides/asset-management"><code>管理资源</code></a>指南中的代码示例。</p>

<p>到目前为止，我们在&nbsp;<code>index.html</code>&nbsp;文件中手动引入所有资源，然而随着应用程序增长，并且一旦开始对<a href="https://www.webpackjs.com/guides/caching">文件名使用哈希(hash)</a>]并输出<a href="https://www.webpackjs.com/guides/code-splitting">多个 bundle</a>，手动地对&nbsp;<code>index.html</code>&nbsp;文件进行管理，一切就会变得困难起来。然而，可以通过一些插件，会使这个过程更容易操控。</p>

<h2>预先准备</h2>

<p>首先，让我们调整一下我们的项目：</p>

<p><strong>project</strong></p>

<pre>
<code>  webpack-demo
  |- package.json
  |- webpack.config.js
  |- /dist
  |- /src
    |- index.js
+   |- print.js
  |- /node_modules
</code></pre>

<p>我们在&nbsp;<code>src/print.js</code>&nbsp;文件中添加一些逻辑：</p>

<p><strong>src/print.js</strong></p>

<pre>
<code>export default function printMe() {
  console.log(&#39;I get called from print.js!&#39;);
}
</code></pre>

<p>并且在&nbsp;<code>src/index.js</code>&nbsp;文件中使用这个函数：</p>

<p><strong>src/index.js</strong></p>

<pre>
<code>  import _ from &#39;lodash&#39;;
+ import printMe from &#39;./print.js&#39;;

  function component() {
    var element = document.createElement(&#39;div&#39;);
+   var btn = document.createElement(&#39;button&#39;);

    element.innerHTML = _.join([&#39;Hello&#39;, &#39;webpack&#39;], &#39; &#39;);

+   btn.innerHTML = &#39;Click me and check the console!&#39;;
+   btn.onclick = printMe;
+
+   element.appendChild(btn);

    return element;
  }

  document.body.appendChild(component());
</code></pre>

<p>我们还要更新&nbsp;<code>dist/index.html</code>&nbsp;文件，来为 webpack 分离入口做好准备：</p>

<p><strong>dist/index.html</strong></p>

<pre>
<code>  &lt;!doctype html&gt;
  &lt;html&gt;
    &lt;head&gt;
-     &lt;title&gt;Asset Management&lt;/title&gt;
+     &lt;title&gt;Output Management&lt;/title&gt;
+     &lt;script src=&quot;./print.bundle.js&quot;&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
-     &lt;script src=&quot;./bundle.js&quot;&gt;&lt;/script&gt;
+     &lt;script src=&quot;./app.bundle.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
  &lt;/html&gt;
</code></pre>

<p>现在调整配置。我们将在 entry 添加&nbsp;<code>src/print.js</code>&nbsp;作为新的入口起点（<code>print</code>），然后修改 output，以便根据入口起点名称动态生成 bundle 名称：</p>

<p><strong>webpack.config.js</strong></p>

<pre>
<code>  const path = require(&#39;path&#39;);

  module.exports = {
-   entry: &#39;./src/index.js&#39;,
+   entry: {
+     app: &#39;./src/index.js&#39;,
+     print: &#39;./src/print.js&#39;
+   },
    output: {
-     filename: &#39;bundle.js&#39;,
+     filename: &#39;[name].bundle.js&#39;,
      path: path.resolve(__dirname, &#39;dist&#39;)
    }
  };
</code></pre>

<p>执行&nbsp;<code>npm run build</code>，然后看到生成如下：</p>

<pre>
<code>Hash: aa305b0f3373c63c9051
Version: webpack 3.0.0
Time: 536ms
          Asset     Size  Chunks                    Chunk Names
  app.bundle.js   545 kB    0, 1  [emitted]  [big]  app
print.bundle.js  2.74 kB       1  [emitted]         print
   [0] ./src/print.js 84 bytes {0} {1} [built]
   [1] ./src/index.js 403 bytes {0} [built]
   [3] (webpack)/buildin/global.js 509 bytes {0} [built]
   [4] (webpack)/buildin/module.js 517 bytes {0} [built]
    + 1 hidden module
</code></pre>

<p>我们可以看到，webpack 生成&nbsp;<code>print.bundle.js</code>&nbsp;和&nbsp;<code>app.bundle.js</code>&nbsp;文件，这也和我们在&nbsp;<code>index.html</code>&nbsp;文件中指定的文件名称相对应。如果你在浏览器中打开&nbsp;<code>index.html</code>，就可以看到在点击按钮时会发生什么。</p>

<p>但是，如果我们更改了我们的一个入口起点的名称，甚至添加了一个新的名称，会发生什么？生成的包将被重命名在一个构建中，但是我们的<code>index.html</code>文件仍然会引用旧的名字。我们用&nbsp;<a href="https://www.webpackjs.com/plugins/html-webpack-plugin"><code>HtmlWebpackPlugin</code></a>&nbsp;来解决这个问题。</p>

<h2>设定 HtmlWebpackPlugin</h2>

<p>首先安装插件，并且调整&nbsp;<code>webpack.config.js</code>&nbsp;文件：</p>

<pre>
<code>npm install --save-dev html-webpack-plugin
</code></pre>

<p><strong>webpack.config.js</strong></p>

<pre>
<code>  const path = require(&#39;path&#39;);
+ const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);

  module.exports = {
    entry: {
      app: &#39;./src/index.js&#39;,
      print: &#39;./src/print.js&#39;
    },
+   plugins: [
+     new HtmlWebpackPlugin({
+       title: &#39;Output Management&#39;
+     })
+   ],
    output: {
      filename: &#39;[name].bundle.js&#39;,
      path: path.resolve(__dirname, &#39;dist&#39;)
    }
  };
</code></pre>

<p>在我们构建之前，你应该了解，虽然在&nbsp;<code>dist/</code>&nbsp;文件夹我们已经有&nbsp;<code>index.html</code>&nbsp;这个文件，然而&nbsp;<code>HtmlWebpackPlugin</code>&nbsp;还是会默认生成&nbsp;<code>index.html</code>&nbsp;文件。这就是说，它会用新生成的&nbsp;<code>index.html</code>&nbsp;文件，把我们的原来的替换。让我们看下在执行&nbsp;<code>npm run build</code>&nbsp;后会发生什么：</p>

<pre>
<code>Hash: 81f82697c19b5f49aebd
Version: webpack 2.6.1
Time: 854ms
           Asset       Size  Chunks                    Chunk Names
 print.bundle.js     544 kB       0  [emitted]  [big]  print
   app.bundle.js    2.81 kB       1  [emitted]         app
      index.html  249 bytes          [emitted]
   [0] ./~/lodash/lodash.js 540 kB {0} [built]
   [1] (webpack)/buildin/global.js 509 bytes {0} [built]
   [2] (webpack)/buildin/module.js 517 bytes {0} [built]
   [3] ./src/index.js 172 bytes {1} [built]
   [4] multi lodash 28 bytes {0} [built]
Child html-webpack-plugin for &quot;index.html&quot;:
       [0] ./~/lodash/lodash.js 540 kB {0} [built]
       [1] ./~/html-webpack-plugin/lib/loader.js!./~/html-webpack-plugin/default_index.ejs 538 bytes {0} [built]
       [2] (webpack)/buildin/global.js 509 bytes {0} [built]
       [3] (webpack)/buildin/module.js 517 bytes {0} [built]
</code></pre>

<p>如果你在代码编辑器中将&nbsp;<code>index.html</code>&nbsp;打开，你就会看到&nbsp;<code>HtmlWebpackPlugin</code>&nbsp;创建了一个全新的文件，所有的 bundle 会自动添加到 html 中。</p>

<p>如果你想要了解更多&nbsp;<code>HtmlWebpackPlugin</code>&nbsp;插件提供的全部功能和选项，那么你就应该多多熟悉&nbsp;<a href="https://github.com/jantimon/html-webpack-plugin"><code>HtmlWebpackPlugin</code></a>&nbsp;仓库。</p>

<p>你还可以看一下&nbsp;<a href="https://github.com/jaketrent/html-webpack-template"><code>html-webpack-template</code></a>，除了默认模板之外，还提供了一些额外的功能。</p>

<h2>清理&nbsp;<code>/dist</code>&nbsp;文件夹</h2>

<p>你可能已经注意到，由于过去的指南和代码示例遗留下来，导致我们的&nbsp;<code>/dist</code>&nbsp;文件夹相当杂乱。webpack 会生成文件，然后将这些文件放置在&nbsp;<code>/dist</code>&nbsp;文件夹中，但是 webpack 无法追踪到哪些文件是实际在项目中用到的。</p>

<p>通常，在每次构建前清理&nbsp;<code>/dist</code>&nbsp;文件夹，是比较推荐的做法，因此只会生成用到的文件。让我们完成这个需求。</p>

<p><a href="https://www.npmjs.com/package/clean-webpack-plugin"><code>clean-webpack-plugin</code></a>&nbsp;是一个比较普及的管理插件，让我们安装和配置下。</p>

<pre>
<code>npm install clean-webpack-plugin --save-dev
</code></pre>

<p><strong>webpack.config.js</strong></p>

<pre>
<code>  const path = require(&#39;path&#39;);
  const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);
+ const CleanWebpackPlugin = require(&#39;clean-webpack-plugin&#39;);

  module.exports = {
    entry: {
      app: &#39;./src/index.js&#39;,
      print: &#39;./src/print.js&#39;
    },
    plugins: [
+     new CleanWebpackPlugin([&#39;dist&#39;]),
      new HtmlWebpackPlugin({
        title: &#39;Output Management&#39;
      })
    ],
    output: {
      filename: &#39;[name].bundle.js&#39;,
      path: path.resolve(__dirname, &#39;dist&#39;)
    }
  };
</code></pre>

<p>现在执行&nbsp;<code>npm run build</code>，再检查&nbsp;<code>/dist</code>&nbsp;文件夹。如果一切顺利，你现在应该不会再看到旧的文件，只有构建后生成的文件！</p>

<h2>Manifest</h2>

<p>你可能会感兴趣，webpack及其插件似乎&ldquo;知道&rdquo;应该哪些文件生成。答案是，通过 manifest，webpack 能够对「你的模块映射到输出 bundle 的过程」保持追踪。如果你对通过其他方式来管理 webpack 的<a href="https://www.webpackjs.com/configuration/output">输出</a>更感兴趣，那么首先了解 manifest 是个好的开始。</p>

<p>通过使用&nbsp;<a href="https://github.com/danethurber/webpack-manifest-plugin"><code>WebpackManifestPlugin</code></a>，可以直接将数据提取到一个 json 文件，以供使用。</p>

<p>我们不会在此展示一个关于如何在你的项目中使用此插件的完整示例，但是你可以仔细深入阅读&nbsp;<a href="https://www.webpackjs.com/concepts/manifest">manifest 的概念页面</a>，以及通过<a href="https://www.webpackjs.com/guides/caching">缓存指南</a>来弄清如何与长期缓存相关联。</p>

<h2>结论</h2>

<p>现在，你已经了解如何向 HTML 动态添加 bundle，让我们深入<a href="https://www.webpackjs.com/guides/development">开发指南</a>。或者，如果你想要深入更多相关高级话题，我们推荐你前往<a href="https://www.webpackjs.com/guides/code-splitting">代码分离指南</a>。</p>
