<h1>生产环境构建</h1>

<p>在本指南中，我们将深入一些最佳实践，并且使用工具，将网站或应用程序构建到生产环境中。</p>

<blockquote>
<p>以下示例来源于&nbsp;<a href="https://www.webpackjs.com/guides/tree-shaking">tree shaking</a>&nbsp;和&nbsp;<a href="https://www.webpackjs.com/guides/development">开发</a>。在继续之前，请确保你已经熟悉这些指南中所介绍的概念/配置。</p>
</blockquote>

<h2>配置</h2>

<p><em>开发环境(development)</em>和<em>生产环境(production)</em>的构建目标差异很大。在<em>开发环境</em>中，我们需要具有强大的、具有实时重新加载(live reloading)或热模块替换(hot module replacement)能力的 source map 和 localhost server。而在<em>生产环境</em>中，我们的目标则转向于关注更小的 bundle，更轻量的 source map，以及更优化的资源，以改善加载时间。由于要遵循逻辑分离，我们通常建议为每个环境编写<strong>彼此独立的 webpack 配置</strong>。</p>

<p>虽然，以上我们将<em>生产环境</em>和<em>开发环境</em>做了略微区分，但是，请注意，我们还是会遵循不重复原则(Don&#39;t repeat yourself - DRY)，保留一个&ldquo;通用&rdquo;配置。为了将这些配置合并在一起，我们将使用一个名为&nbsp;<a href="https://github.com/survivejs/webpack-merge"><code>webpack-merge</code></a>&nbsp;的工具。通过&ldquo;通用&rdquo;配置，我们不必在环境特定(environment-specific)的配置中重复代码。</p>

<p>我们先从安装&nbsp;<code>webpack-merge</code>&nbsp;开始，并将之前指南中已经成型的那些代码再次进行分离：</p>

<pre>
<code>npm install --save-dev webpack-merge
</code></pre>

<p><strong>project</strong></p>

<pre>
<code>  webpack-demo
  |- package.json
- |- webpack.config.js
+ |- webpack.common.js
+ |- webpack.dev.js
+ |- webpack.prod.js
  |- /dist
  |- /src
    |- index.js
    |- math.js
  |- /node_modules
</code></pre>

<p><strong>webpack.common.js</strong></p>

<pre>
<code>+ const path = require(&#39;path&#39;);
+ const CleanWebpackPlugin = require(&#39;clean-webpack-plugin&#39;);
+ const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);
+
+ module.exports = {
+   entry: {
+     app: &#39;./src/index.js&#39;
+   },
+   plugins: [
+     new CleanWebpackPlugin([&#39;dist&#39;]),
+     new HtmlWebpackPlugin({
+       title: &#39;Production&#39;
+     })
+   ],
+   output: {
+     filename: &#39;[name].bundle.js&#39;,
+     path: path.resolve(__dirname, &#39;dist&#39;)
+   }
+ };
</code></pre>

<p><strong>webpack.dev.js</strong></p>

<pre>
<code>+ const merge = require(&#39;webpack-merge&#39;);
+ const common = require(&#39;./webpack.common.js&#39;);
+
+ module.exports = merge(common, {
+   devtool: &#39;inline-source-map&#39;,
+   devServer: {
+     contentBase: &#39;./dist&#39;
+   }
+ });
</code></pre>

<p><strong>webpack.prod.js</strong></p>

<pre>
<code>+ const merge = require(&#39;webpack-merge&#39;);
+ const UglifyJSPlugin = require(&#39;uglifyjs-webpack-plugin&#39;);
+ const common = require(&#39;./webpack.common.js&#39;);
+
+ module.exports = merge(common, {
+   plugins: [
+     new UglifyJSPlugin()
+   ]
+ });
</code></pre>

<p>现在，在&nbsp;<code>webpack.common.js</code>&nbsp;中，我们设置了&nbsp;<code>entry</code>&nbsp;和&nbsp;<code>output</code>&nbsp;配置，并且在其中引入这两个环境公用的全部插件。在&nbsp;<code>webpack.dev.js</code>&nbsp;中，我们为此环境添加了推荐的&nbsp;<code>devtool</code>（强大的 source map）和简单的&nbsp;<code>devServer</code>&nbsp;配置。最后，在&nbsp;<code>webpack.prod.js</code>&nbsp;中，我们引入了之前在&nbsp;<a href="https://www.webpackjs.com/guides/tree-shaking">tree shaking</a>&nbsp;指南中介绍过的&nbsp;<code>UglifyJSPlugin</code>。</p>

<p>注意，在环境特定的配置中使用&nbsp;<code>merge()</code>&nbsp;很容易地包含我们在&nbsp;<code>dev</code>&nbsp;和&nbsp;<code>prod</code>&nbsp;中的常见配置。<code>webpack-merge</code>工具提供了多种合并(merge)的高级功能，但是在我们的用例中，无需用到这些功能。</p>

<h2>NPM Scripts</h2>

<p>现在，我们把&nbsp;<code>scripts</code>&nbsp;重新指向到新配置。我们将&nbsp;<code>npm start</code>&nbsp;定义为<em>开发环境</em>脚本，并在其中使用&nbsp;<code>webpack-dev-server</code>，将&nbsp;<code>npm run build</code>&nbsp;定义为<em>生产环境</em>脚本：</p>

<p><strong>package.json</strong></p>

<pre>
<code>  {
    &quot;name&quot;: &quot;development&quot;,
    &quot;version&quot;: &quot;1.0.0&quot;,
    &quot;description&quot;: &quot;&quot;,
    &quot;main&quot;: &quot;webpack.config.js&quot;,
    &quot;scripts&quot;: {
-     &quot;start&quot;: &quot;webpack-dev-server --open&quot;,
+     &quot;start&quot;: &quot;webpack-dev-server --open --config webpack.dev.js&quot;,
-     &quot;build&quot;: &quot;webpack&quot;
+     &quot;build&quot;: &quot;webpack --config webpack.prod.js&quot;
    },
    &quot;keywords&quot;: [],
    &quot;author&quot;: &quot;&quot;,
    &quot;license&quot;: &quot;ISC&quot;,
    &quot;devDependencies&quot;: {
      &quot;clean-webpack-plugin&quot;: &quot;^0.1.17&quot;,
      &quot;css-loader&quot;: &quot;^0.28.4&quot;,
      &quot;csv-loader&quot;: &quot;^2.1.1&quot;,
      &quot;express&quot;: &quot;^4.15.3&quot;,
      &quot;file-loader&quot;: &quot;^0.11.2&quot;,
      &quot;html-webpack-plugin&quot;: &quot;^2.29.0&quot;,
      &quot;style-loader&quot;: &quot;^0.18.2&quot;,
      &quot;webpack&quot;: &quot;^3.0.0&quot;,
      &quot;webpack-dev-middleware&quot;: &quot;^1.12.0&quot;,
      &quot;webpack-dev-server&quot;: &quot;^2.9.1&quot;,
      &quot;webpack-merge&quot;: &quot;^4.1.0&quot;,
      &quot;xml-loader&quot;: &quot;^1.2.1&quot;
    }
  }
</code></pre>

<p>随意运行这些脚本，然后查看输出结果的变化，然后我们继续添加一些<em>生产环境</em>配置。</p>

<h2>Minification</h2>

<p>注意，虽然&nbsp;<a href="https://www.webpackjs.com/plugins/uglifyjs-webpack-plugin"><code>UglifyJSPlugin</code></a>&nbsp;是代码压缩方面比较好的选择，但是还有一些其他可选择项。以下有几个同样很受欢迎的插件：</p>

<ul>
	<li><a href="https://github.com/webpack-contrib/babel-minify-webpack-plugin"><code>BabelMinifyWebpackPlugin</code></a></li>
	<li><a href="https://github.com/roman01la/webpack-closure-compiler"><code>ClosureCompilerPlugin</code></a></li>
</ul>

<p>如果决定尝试以上这些，只要确保新插件也会按照&nbsp;<a href="https://www.webpackjs.com/guides/tree-shaking">tree shake</a>&nbsp;指南中所陈述的，具有删除未引用代码(dead code)的能力足矣。</p>

<h2>source map</h2>

<p>我们鼓励你在生产环境中启用 source map，因为它们对调试源码(debug)和运行基准测试(benchmark tests)很有帮助。虽然有如此强大的功能，然而还是应该针对生成环境用途，选择一个构建快速的推荐配置（具体细节请查看&nbsp;<a href="https://www.webpackjs.com/configuration/devtool"><code>devtool</code></a>）。对于本指南，我们将在<em>生产环境</em>中使用&nbsp;<code>source-map</code>&nbsp;选项，而不是我们在<em>开发环境</em>中用到的&nbsp;<code>inline-source-map</code>：</p>

<p><strong>webpack.prod.js</strong></p>

<pre>
<code>  const merge = require(&#39;webpack-merge&#39;);
  const UglifyJSPlugin = require(&#39;uglifyjs-webpack-plugin&#39;);
  const common = require(&#39;./webpack.common.js&#39;);

  module.exports = merge(common, {
+   devtool: &#39;source-map&#39;,
    plugins: [
-     new UglifyJSPlugin()
+     new UglifyJSPlugin({
+       sourceMap: true
+     })
    ]
  });
</code></pre>

<blockquote>
<p>避免在生产中使用&nbsp;<code>inline-***</code>&nbsp;和&nbsp;<code>eval-***</code>，因为它们可以增加 bundle 大小，并降低整体性能。</p>
</blockquote>

<h2>指定环境</h2>

<p>许多 library 将通过与&nbsp;<code>process.env.NODE_ENV</code>&nbsp;环境变量关联，以决定 library 中应该引用哪些内容。例如，当不处于<em>生产环境</em>中时，某些 library 为了使调试变得容易，可能会添加额外的日志记录(log)和测试(test)。其实，当使用&nbsp;<code>process.env.NODE_ENV === &#39;production&#39;</code>&nbsp;时，一些 library 可能针对具体用户的环境进行代码优化，从而删除或添加一些重要代码。我们可以使用 webpack 内置的&nbsp;<a href="https://www.webpackjs.com/plugins/define-plugin"><code>DefinePlugin</code></a>&nbsp;为所有的依赖定义这个变量：</p>

<p><strong>webpack.prod.js</strong></p>

<pre>
<code>+ const webpack = require(&#39;webpack&#39;);
  const merge = require(&#39;webpack-merge&#39;);
  const UglifyJSPlugin = require(&#39;uglifyjs-webpack-plugin&#39;);
  const common = require(&#39;./webpack.common.js&#39;);

  module.exports = merge(common, {
    devtool: &#39;source-map&#39;,
    plugins: [
      new UglifyJSPlugin({
        sourceMap: true
-     })
+     }),
+     new webpack.DefinePlugin({
+       &#39;process.env.NODE_ENV&#39;: JSON.stringify(&#39;production&#39;)
+     })
    ]
  });
</code></pre>

<blockquote>
<p>技术上讲，<code>NODE_ENV</code>&nbsp;是一个由 Node.js 暴露给执行脚本的系统环境变量。通常用于决定在开发环境与生产环境(dev-vs-prod)下，服务器工具、构建脚本和客户端 library 的行为。然而，与预期不同的是，无法在构建脚本&nbsp;<code>webpack.config.js</code>&nbsp;中，将&nbsp;<code>process.env.NODE_ENV</code>&nbsp;设置为&nbsp;<code>&quot;production&quot;</code>，请查看&nbsp;<a href="https://github.com/webpack/webpack/issues/2537">#2537</a>。因此，例如&nbsp;<code>process.env.NODE_ENV === &#39;production&#39; ? &#39;[name].[hash].bundle.js&#39; : &#39;[name].bundle.js&#39;</code>&nbsp;这样的条件语句，在 webpack 配置文件中，无法按照预期运行。</p>
</blockquote>

<p>如果你正在使用像&nbsp;<a href="https://doc.react-china.org/"><code>react</code></a>&nbsp;这样的 library，那么在添加此 DefinePlugin 插件后，你应该看到 bundle 大小显著下降。还要注意，任何位于&nbsp;<code>/src</code>&nbsp;的本地代码都可以关联到 process.env.NODE_ENV 环境变量，所以以下检查也是有效的：</p>

<p><strong>src/index.js</strong></p>

<pre>
<code>  import { cube } from &#39;./math.js&#39;;
+
+ if (process.env.NODE_ENV !== &#39;production&#39;) {
+   console.log(&#39;Looks like we are in development mode!&#39;);
+ }

  function component() {
    var element = document.createElement(&#39;pre&#39;);

    element.innerHTML = [
      &#39;Hello webpack!&#39;,
      &#39;5 cubed is equal to &#39; + cube(5)
    ].join(&#39;\n\n&#39;);

    return element;
  }

  document.body.appendChild(component());
</code></pre>

<h2>Split CSS</h2>

<p>正如在<strong>管理资源</strong>中最后的&nbsp;<a href="https://www.webpackjs.com/guides/asset-management#loading-css">加载 CSS</a>&nbsp;小节中所提到的，通常最好的做法是使用&nbsp;<code>ExtractTextPlugin</code>&nbsp;将 CSS 分离成单独的文件。在插件<a href="https://www.webpackjs.com/plugins/extract-text-webpack-plugin">文档</a>中有一些很好的实现例子。<code>disable</code>&nbsp;选项可以和&nbsp;<code>--env</code>&nbsp;标记结合使用，以允许在开发中进行内联加载，推荐用于热模块替换和构建速度。</p>

<h2>CLI 替代选项</h2>

<p>以上描述也可以通过命令行实现。例如，<code>--optimize-minimize</code>&nbsp;标记将在后台引用&nbsp;<code>UglifyJSPlugin</code>。和以上描述的&nbsp;<code>DefinePlugin</code>&nbsp;实例相同，<code>--define process.env.NODE_ENV=&quot;&#39;production&#39;&quot;</code>&nbsp;也会做同样的事情。并且，<code>webpack -p</code>&nbsp;将自动地调用上述这些标记，从而调用需要引入的插件。</p>

<p>这些简便方式虽然都很不错，但是我们通常建议只使用配置方式，因为在这两种场景中下，配置方式能够更好地帮助你了解自己正在做的事情。配置方式还可以让你更方便地控制这两个插件中的其他选项。</p>
