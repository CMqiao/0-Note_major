<h1>起步</h1>

<p>webpack 用于编译 JavaScript 模块。一旦完成<a href="https://www.webpackjs.com/guides/installation">安装</a>，你就可以通过 webpack 的&nbsp;<a href="https://www.webpackjs.com/api/cli">CLI</a>&nbsp;或&nbsp;<a href="https://www.webpackjs.com/api/node">API</a>&nbsp;与其配合交互。如果你还不熟悉 webpack，请阅读<a href="https://www.webpackjs.com/concepts">核心概念</a>和<a href="https://www.webpackjs.com/comparison">打包器对比</a>，了解为什么你要使用 webpack，而不是社区中的其他工具。</p>

<h2>基本安装</h2>

<p>首先我们创建一个目录，初始化 npm，然后&nbsp;<a href="https://www.webpackjs.com/guides/installation#local-installation">在本地安装 webpack</a>，接着安装 webpack-cli（此工具用于在命令行中运行 webpack）：</p>

<pre>
<code>mkdir webpack-demo &amp;&amp; cd webpack-demo
npm init -y
npm install webpack webpack-cli --save-dev
</code></pre>

<blockquote>
<p>贯穿整个指南的是，我们将使用&nbsp;<code>diff</code>&nbsp;块，来显示我们对目录、文件和代码所做的更改。</p>
</blockquote>

<p>现在我们将创建以下目录结构、文件和内容：</p>

<p><strong>project</strong></p>

<pre>
<code>  webpack-demo
  |- package.json
+ |- index.html
+ |- /src
+   |- index.js
</code></pre>

<p><strong>src/index.js</strong></p>

<pre>
<code>function component() {
  var element = document.createElement(&#39;div&#39;);

  // Lodash（目前通过一个 script 脚本引入）对于执行这一行是必需的
  element.innerHTML = _.join([&#39;Hello&#39;, &#39;webpack&#39;], &#39; &#39;);

  return element;
}

document.body.appendChild(component());
</code></pre>

<p><strong>index.html</strong></p>

<pre>
<code>&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;起步&lt;/title&gt;
    &lt;script src=&quot;https://unpkg.com/lodash@4.16.6&quot;&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;script src=&quot;./src/index.js&quot;&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>我们还需要调整&nbsp;<code>package.json</code>&nbsp;文件，以便确保我们安装包是<code>私有的(private)</code>，并且移除&nbsp;<code>main</code>&nbsp;入口。这可以防止意外发布你的代码。</p>

<blockquote>
<p>如果你想要了解&nbsp;<code>package.json</code>&nbsp;内在机制的更多信息，我们推荐阅读&nbsp;<a href="https://docs.npmjs.com/files/package.json">npm 文档</a>。</p>
</blockquote>

<p><strong>package.json</strong></p>

<pre>
<code>  {
    &quot;name&quot;: &quot;webpack-demo&quot;,
    &quot;version&quot;: &quot;1.0.0&quot;,
    &quot;description&quot;: &quot;&quot;,
+   &quot;private&quot;: true,
-   &quot;main&quot;: &quot;index.js&quot;,
    &quot;scripts&quot;: {
      &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;
    },
    &quot;keywords&quot;: [],
    &quot;author&quot;: &quot;&quot;,
    &quot;license&quot;: &quot;ISC&quot;,
    &quot;devDependencies&quot;: {
      &quot;webpack&quot;: &quot;^4.0.1&quot;,
      &quot;webpack-cli&quot;: &quot;^2.0.9&quot;
    },
    &quot;dependencies&quot;: {}
  }
</code></pre>

<p>在此示例中，<code>&lt;script&gt;</code>&nbsp;标签之间存在隐式依赖关系。<code>index.js</code>&nbsp;文件执行之前，还依赖于页面中引入的&nbsp;<code>lodash</code>。之所以说是隐式的是因为&nbsp;<code>index.js</code>&nbsp;并未显式声明需要引入&nbsp;<code>lodash</code>，只是假定推测已经存在一个全局变量&nbsp;<code>_</code>。</p>

<p>使用这种方式去管理 JavaScript 项目会有一些问题：</p>

<ul>
	<li>无法立即体现，脚本的执行依赖于外部扩展库(external library)。</li>
	<li>如果依赖不存在，或者引入顺序错误，应用程序将无法正常运行。</li>
	<li>如果依赖被引入但是并没有使用，浏览器将被迫下载无用代码。</li>
</ul>

<p>让我们使用 webpack 来管理这些脚本。</p>

<h2>创建一个 bundle 文件</h2>

<p>首先，我们稍微调整下目录结构，将&ldquo;源&rdquo;代码(<code>/src</code>)从我们的&ldquo;分发&rdquo;代码(<code>/dist</code>)中分离出来。&ldquo;源&rdquo;代码是用于书写和编辑的代码。&ldquo;分发&rdquo;代码是构建过程产生的代码最小化和优化后的&ldquo;输出&rdquo;目录，最终将在浏览器中加载：</p>

<p><strong>project</strong></p>

<pre>
<code>  webpack-demo
  |- package.json
+ |- /dist
+   |- index.html
- |- index.html
  |- /src
    |- index.js
</code></pre>

<p>要在&nbsp;<code>index.js</code>&nbsp;中打包&nbsp;<code>lodash</code>&nbsp;依赖，我们需要在本地安装 library：</p>

<pre>
<code>npm install --save lodash
</code></pre>

<blockquote>
<p>在安装一个要打包到生产环境的安装包时，你应该使用&nbsp;<code>npm install --save</code>，如果你在安装一个用于开发环境的安装包（例如，linter, 测试库等），你应该使用&nbsp;<code>npm install --save-dev</code>。请在&nbsp;<a href="https://docs.npmjs.com/cli/install">npm 文档</a>&nbsp;中查找更多信息。</p>
</blockquote>

<p>现在，在我们的脚本中 import&nbsp;<code>lodash</code>：</p>

<p><strong>src/index.js</strong></p>

<pre>
<code>+ import _ from &#39;lodash&#39;;
+
  function component() {
    var element = document.createElement(&#39;div&#39;);

-   // Lodash, currently included via a script, is required for this line to work
+   // Lodash, now imported by this script
    element.innerHTML = _.join([&#39;Hello&#39;, &#39;webpack&#39;], &#39; &#39;);

    return element;
  }

  document.body.appendChild(component());
</code></pre>

<p>现在，由于通过打包来合成脚本，我们必须更新&nbsp;<code>index.html</code>&nbsp;文件。因为现在是通过&nbsp;<code>import</code>&nbsp;引入 lodash，所以将 lodash&nbsp;<code>&lt;script&gt;</code>&nbsp;删除，然后修改另一个&nbsp;<code>&lt;script&gt;</code>&nbsp;标签来加载 bundle，而不是原始的&nbsp;<code>/src</code>&nbsp;文件：</p>

<p><strong>dist/index.html</strong></p>

<pre>
<code>  &lt;!doctype html&gt;
  &lt;html&gt;
   &lt;head&gt;
     &lt;title&gt;起步&lt;/title&gt;
-    &lt;script src=&quot;https://unpkg.com/lodash@4.16.6&quot;&gt;&lt;/script&gt;
   &lt;/head&gt;
   &lt;body&gt;
-    &lt;script src=&quot;./src/index.js&quot;&gt;&lt;/script&gt;
+    &lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt;
   &lt;/body&gt;
  &lt;/html&gt;
</code></pre>

<p>在这个设置中，<code>index.js</code>&nbsp;显式要求引入的&nbsp;<code>lodash</code>&nbsp;必须存在，然后将它绑定为&nbsp;<code>_</code>（没有全局作用域污染）。通过声明模块所需的依赖，webpack 能够利用这些信息去构建依赖图，然后使用图生成一个优化过的，会以正确顺序执行的 bundle。</p>

<p>可以这样说，执行&nbsp;<code>npx webpack</code>，会将我们的脚本作为<a href="https://www.webpackjs.com/concepts/entry-points">入口起点</a>，然后&nbsp;<a href="https://www.webpackjs.com/concepts/output">输出</a>&nbsp;为&nbsp;<code>main.js</code>。Node 8.2+ 版本提供的&nbsp;<code>npx</code>&nbsp;命令，可以运行在初始安装的 webpack 包(package)的 webpack 二进制文件（<code>./node_modules/.bin/webpack</code>）：</p>

<pre>
<code>npx webpack

Hash: dabab1bac2b940c1462b
Version: webpack 4.0.1
Time: 3003ms
Built at: 2018-2-26 22:42:11
    Asset      Size  Chunks             Chunk Names
main.js  69.6 KiB       0  [emitted]  main
Entrypoint main = main.js
   [1] (webpack)/buildin/module.js 519 bytes {0} [built]
   [2] (webpack)/buildin/global.js 509 bytes {0} [built]
   [3] ./src/index.js 256 bytes {0} [built]
    + 1 hidden module

WARNING in configuration(配置警告)
The &#39;mode&#39; option has not been set. Set &#39;mode&#39; option to &#39;development&#39; or &#39;production&#39; to enable defaults for this environment.(&#39;mode&#39; 选项还未设置。将 &#39;mode&#39; 选项设置为 &#39;development&#39; 或 &#39;production&#39;，来启用环境默认值。)
</code></pre>

<blockquote>
<p>输出可能会稍有不同，但是只要构建成功，那么你就可以继续。并且不要担心，稍后我们就会解决。</p>
</blockquote>

<p>在浏览器中打开&nbsp;<code>index.html</code>，如果一切访问都正常，你应该能看到以下文本：&#39;Hello webpack&#39;。</p>

<h2>模块</h2>

<p><a href="https://babeljs.io/learn-es2015/">ES2015</a>&nbsp;中的&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"><code>import</code></a>&nbsp;和&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export"><code>export</code></a>&nbsp;语句已经被标准化。虽然大多数浏览器还无法支持它们，但是 webpack 却能够提供开箱即用般的支持。</p>

<p>事实上，webpack 在幕后会将代码&ldquo;转译&rdquo;，以便旧版本浏览器可以执行。如果你检查&nbsp;<code>dist/bundle.js</code>，你可以看到 webpack 具体如何实现，这是独创精巧的设计！除了&nbsp;<code>import</code>&nbsp;和&nbsp;<code>export</code>，webpack 还能够很好地支持多种其他模块语法，更多信息请查看<a href="https://www.webpackjs.com/api/module-methods">模块 API</a>。</p>

<p>注意，webpack 不会更改代码中除&nbsp;<code>import</code>&nbsp;和&nbsp;<code>export</code>&nbsp;语句以外的部分。如果你在使用其它&nbsp;<a href="http://es6-features.org/">ES2015 特性</a>，请确保你在 webpack 的&nbsp;<a href="https://www.webpackjs.com/concepts/loaders/">loader 系统</a>中使用了一个像是&nbsp;<a href="https://babeljs.io/">Babel</a>&nbsp;或&nbsp;<a href="https://buble.surge.sh/guide/">Bubl&eacute;</a>&nbsp;的<a href="https://www.webpackjs.com/loaders/#transpiling">转译器</a>。</p>

<h2>使用一个配置文件</h2>

<p>在 webpack 4 中，可以无须任何配置使用，然而大多数项目会需要很复杂的设置，这就是为什么 webpack 仍然要支持&nbsp;<a href="https://www.webpackjs.com/concepts/configuration">配置文件</a>。这比在终端(terminal)中手动输入大量命令要高效的多，所以让我们创建一个取代以上使用 CLI 选项方式的配置文件：</p>

<p><strong>project</strong></p>

<pre>
<code>  webpack-demo
  |- package.json
+ |- webpack.config.js
  |- /dist
    |- index.html
  |- /src
    |- index.js
</code></pre>

<p><strong>webpack.config.js</strong></p>

<pre>
<code>const path = require(&#39;path&#39;);

module.exports = {
  entry: &#39;./src/index.js&#39;,
  output: {
    filename: &#39;bundle.js&#39;,
    path: path.resolve(__dirname, &#39;dist&#39;)
  }
};
</code></pre>

<p>现在，让我们通过新配置文件再次执行构建：</p>

<pre>
<code>npx webpack --config webpack.config.js

Hash: dabab1bac2b940c1462b
Version: webpack 4.0.1
Time: 328ms
Built at: 2018-2-26 22:47:43
    Asset      Size  Chunks             Chunk Names
bundle.js  69.6 KiB       0  [emitted]  main
Entrypoint main = bundle.js
   [1] (webpack)/buildin/module.js 519 bytes {0} [built]
   [2] (webpack)/buildin/global.js 509 bytes {0} [built]
   [3] ./src/index.js 256 bytes {0} [built]
    + 1 hidden module

WARNING in configuration(配置警告)
The &#39;mode&#39; option has not been set. Set &#39;mode&#39; option to &#39;development&#39; or &#39;production&#39; to enable defaults for this environment.(&#39;mode&#39; 选项还未设置。将 &#39;mode&#39; 选项设置为 &#39;development&#39; 或 &#39;production&#39;，来启用环境默认值。)
</code></pre>

<blockquote>
<p>注意，当在 windows 中通过调用路径去调用&nbsp;<code>webpack</code>&nbsp;时，必须使用反斜线()。例如&nbsp;<code>node_modules\.bin\webpack --config webpack.config.js</code>。</p>
</blockquote>

<blockquote>
<p>如果&nbsp;<code>webpack.config.js</code>&nbsp;存在，则&nbsp;<code>webpack</code>&nbsp;命令将默认选择使用它。我们在这里使用&nbsp;<code>--config</code>&nbsp;选项只是向你表明，可以传递任何名称的配置文件。这对于需要拆分成多个文件的复杂配置是非常有用。</p>
</blockquote>

<p>比起 CLI 这种简单直接的使用方式，配置文件具有更多的灵活性。我们可以通过配置方式指定 loader 规则(loader rules)、插件(plugins)、解析选项(resolve options)，以及许多其他增强功能。了解更多详细信息，请查看<a href="https://www.webpackjs.com/configuration">配置文档</a>。</p>

<h2>NPM 脚本(NPM Scripts)</h2>

<p>考虑到用 CLI 这种方式来运行本地的 webpack 不是特别方便，我们可以设置一个快捷方式。在&nbsp;<em>package.json</em>&nbsp;添加一个&nbsp;<a href="https://docs.npmjs.com/misc/scripts">npm 脚本(npm script)</a>：</p>

<p><strong>package.json</strong></p>

<pre>
<code>  {
    &quot;name&quot;: &quot;webpack-demo&quot;,
    &quot;version&quot;: &quot;1.0.0&quot;,
    &quot;description&quot;: &quot;&quot;,
    &quot;main&quot;: &quot;index.js&quot;,
    &quot;scripts&quot;: {
      &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,
+     &quot;build&quot;: &quot;webpack&quot;
    },
    &quot;keywords&quot;: [],
    &quot;author&quot;: &quot;&quot;,
    &quot;license&quot;: &quot;ISC&quot;,
    &quot;devDependencies&quot;: {
      &quot;webpack&quot;: &quot;^4.0.1&quot;,
      &quot;webpack-cli&quot;: &quot;^2.0.9&quot;,
      &quot;lodash&quot;: &quot;^4.17.5&quot;
    }
  }

</code></pre>

<p>现在，可以使用&nbsp;<code>npm run build</code>&nbsp;命令，来替代我们之前使用的&nbsp;<code>npx</code>&nbsp;命令。注意，使用 npm 的&nbsp;<code>scripts</code>，我们可以像使用&nbsp;<code>npx</code>&nbsp;那样通过模块名引用本地安装的 npm 包。这是大多数基于 npm 的项目遵循的标准，因为它允许所有贡献者使用同一组通用脚本（如果必要，每个 flag 都带有&nbsp;<code>--config</code>&nbsp;标志）。</p>

<p>现在运行以下命令，然后看看你的脚本别名是否正常运行：</p>

<pre>
<code>npm run build

Hash: dabab1bac2b940c1462b
Version: webpack 4.0.1
Time: 323ms
Built at: 2018-2-26 22:50:25
    Asset      Size  Chunks             Chunk Names
bundle.js  69.6 KiB       0  [emitted]  main
Entrypoint main = bundle.js
   [1] (webpack)/buildin/module.js 519 bytes {0} [built]
   [2] (webpack)/buildin/global.js 509 bytes {0} [built]
   [3] ./src/index.js 256 bytes {0} [built]
    + 1 hidden module

WARNING in configuration(配置警告)
The &#39;mode&#39; option has not been set. Set &#39;mode&#39; option to &#39;development&#39; or &#39;production&#39; to enable defaults for this environment.(&#39;mode&#39; 选项还未设置。将 &#39;mode&#39; 选项设置为 &#39;development&#39; 或 &#39;production&#39;，来启用环境默认值。)
</code></pre>

<blockquote>
<p>通过向&nbsp;<code>npm run build</code>&nbsp;命令和你的参数之间添加两个中横线，可以将自定义参数传递给 webpack，例如：<code>npm run build -- --colors</code>。</p>
</blockquote>

<h2>结论</h2>

<p>现在，你已经实现了一个基本的构建过程，你应该移至下一章节的&nbsp;<a href="https://www.webpackjs.com/guides/asset-management"><code>Asset Management</code></a>&nbsp;指南，以了解如何通过 webpack 来管理资源，例如图片、字体。此刻你的项目应该和如下类似：</p>

<p><strong>project</strong></p>

<pre>
<code>webpack-demo
|- package.json
|- webpack.config.js
|- /dist
  |- bundle.js
  |- index.html
|- /src
  |- index.js
|- /node_modules
</code></pre>

<blockquote>
<p>如果你使用的是 npm 5，你可能还会在目录中看到一个&nbsp;<code>package-lock.json</code>&nbsp;文件。</p>
</blockquote>

<p>如果你想要了解 webpack 的设计思想，你应该查看&nbsp;<a href="https://www.webpackjs.com/concepts">basic concepts</a>&nbsp;和&nbsp;<a href="https://www.webpackjs.com/configuration">configuration</a>&nbsp;页面。此外，<a href="https://www.webpackjs.com/api">API</a>&nbsp;章节可以深入了解 webpack 提供的各种借口。</p>
