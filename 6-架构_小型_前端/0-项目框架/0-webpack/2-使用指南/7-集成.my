<h1>集成(Integrations)</h1>

<p>首先我们要消除一个常见的误解。webpack 是一个模块打包器(module bundler)（例如，<a href="http://browserify.org/">Browserify</a>&nbsp;或&nbsp;<a href="http://brunch.io/">Brunch</a>）。它不是一个任务执行器(task runner)（例如，<a href="https://www.gnu.org/software/make/">Make</a>,&nbsp;<a href="https://gruntjs.com/">Grunt</a>&nbsp;或者&nbsp;<a href="https://gulpjs.com/">Gulp</a>&nbsp;）。任务执行器就是用来自动化处理常见的开发任务，例如项目的检查(lint)、构建(build)、测试(test)。相对于<em>打包器(bundler)</em>，任务执行器则聚焦在偏重上层的问题上面。你可以得益于，使用上层的工具，而将打包部分的问题留给 webpack。</p>

<p>打包器(bundler)帮助你取得准备用于部署的 JavaScript 和样式表，将它们转换为适合浏览器的可用格式。例如，JavaScript 可以<a href="https://www.webpackjs.com/plugins/uglifyjs-webpack-plugin">压缩</a>、<a href="https://www.webpackjs.com/guides/code-splitting">拆分 chunk</a>&nbsp;和<a href="https://www.webpackjs.com/guides/lazy-loading">懒加载</a>，以提高性能。打包是 web 开发中最重要的挑战之一，解决此问题可以消除开发过程中的大部分痛点。</p>

<p>好消息是，虽然有一些功能重复，但如果以正确的方式处理，任务运行器和模块打包器能够一起协同工作。本指南提供了关于如何将 webpack 与一些流行的任务运行器集成在一起的高度概述。</p>

<h2>NPM Scripts</h2>

<p>通常 webpack 用户使用 npm&nbsp;<a href="https://docs.npmjs.com/misc/scripts"><code>scripts</code></a>&nbsp;来作为任务执行器。这是比较好的开始。然而跨平台支持是一个问题，为此有一些解决方案。许多用户，但不是大多数用户，直接使用 npm&nbsp;<code>scripts</code>&nbsp;和各种级别的 webpack 配置和工具，来应对构建任务。</p>

<p>因此，当 webpack 的核心焦点专注于打包时，有多种扩展可以供你使用，可以将其用于任务运行者常见的工作。集成一个单独的工具会增加复杂度，所以一定要权衡集成前后的利弊。</p>

<h2>Grunt</h2>

<p>对于那些使用 Grunt 的人，我们推荐使用&nbsp;<a href="https://www.npmjs.com/package/grunt-webpack"><code>grunt-webpack</code></a>&nbsp;包(package)。使用&nbsp;<code>grunt-webpack</code>&nbsp;你可以将 webpack 或&nbsp;<a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a>&nbsp;作为一项任务(task)执行，访问<a href="https://gruntjs.com/api/grunt.template">模板标签(template tags)</a>中的统计信息，拆分开发和生产配置等等。如果你还没有安装过&nbsp;<code>grunt-webpack</code>&nbsp;和&nbsp;<code>webpack</code>，请先安装它们：</p>

<pre>
<code>npm install --save-dev grunt-webpack webpack
</code></pre>

<p>然后注册一个配置并加载任务：</p>

<p><strong>Gruntfile.js</strong></p>

<pre>
<code>const webpackConfig = require(&#39;./webpack.config.js&#39;);

module.exports = function(grunt) {
  grunt.initConfig({
    webpack: {
      options: {
        stats: !process.env.NODE_ENV || process.env.NODE_ENV === &#39;development&#39;
      },
      prod: webpackConfig,
      dev: Object.assign({ watch: true }, webpackConfig)
    }
  });

  grunt.loadNpmTasks(&#39;grunt-webpack&#39;);
};
</code></pre>

<p>获取更多信息，请查看<a href="https://github.com/webpack-contrib/grunt-webpack">本仓库</a>。</p>

<h2>Gulp</h2>

<p>在&nbsp;<a href="https://github.com/shama/webpack-stream"><code>webpack-stream</code></a>&nbsp;包(package)（也称作&nbsp;<code>gulp-webpack</code>） 的帮助下，也可以很简单方便的将 Gulp 与 webpack 集成。在这种情况下，不需要单独安装&nbsp;<code>webpack</code>&nbsp;，因为它是&nbsp;<code>webpack-stream</code>&nbsp;直接依赖：</p>

<pre>
<code>npm install --save-dev webpack-stream
</code></pre>

<p>只需要把&nbsp;<code>webpack</code>&nbsp;替换为&nbsp;<code>require(&#39;webpack-stream&#39;)</code>，并传递一个配置文件就可以了：</p>

<p><strong>gulpfile.js</strong></p>

<pre>
<code>var gulp = require(&#39;gulp&#39;);
var webpack = require(&#39;webpack-stream&#39;);
gulp.task(&#39;default&#39;, function() {
  return gulp.src(&#39;src/entry.js&#39;)
    .pipe(webpack({
      // 一些配置选项&hellip;&hellip;
    }))
    .pipe(gulp.dest(&#39;dist/&#39;));
});
</code></pre>

<p>获取更多信息，请查看<a href="https://github.com/shama/webpack-stream">本仓库</a>。</p>

<h2>Mocha</h2>

<p><a href="https://github.com/zinserjan/mocha-webpack"><code>mocha-webpack</code></a>&nbsp;可以用来将 Mocha 与 webpack 完全集成。这个仓库提供了很多关于工具优势和缺点方面的细节，但&nbsp;<code>mocha-webpack</code>&nbsp;还算是一层简单的封装，提供与 Mocha 几乎相同的 CLI，并提供各种 webpack 功能，例如改进了 watch 模式和优化了路径分析(path resolution)。这里是一个如何安装并使用它来运行测试套件的小例子（在&nbsp;<code>./test</code>&nbsp;中找到）：</p>

<pre>
<code>npm install --save-dev webpack mocha mocha-webpack
mocha-webpack &#39;test/**/*.js&#39;
</code></pre>

<p>获取更多信息，请查看<a href="https://github.com/zinserjan/mocha-webpack">本仓库</a>。</p>

<h2>Karma</h2>

<p><a href="https://github.com/webpack-contrib/karma-webpack"><code>karma-webpack</code></a>&nbsp;包(package)允许你使用 webpack 预处理&nbsp;<a href="http://karma-runner.github.io/1.0/index.html">Karma</a>&nbsp;中的文件。它也可以使用&nbsp;<a href="https://github.com/webpack/webpack-dev-middleware"><code>webpack-dev-middleware</code></a>，并允许传递两者的配置。下面是一个简单的示例：</p>

<pre>
<code>npm install --save-dev webpack karma karma-webpack
</code></pre>

<p><strong>karma.conf.js</strong></p>

<pre>
<code>module.exports = function(config) {
  config.set({
    files: [
      { pattern: &#39;test/*_test.js&#39;, watched: false },
      { pattern: &#39;test/**/*_test.js&#39;, watched: false }
    ],
    preprocessors: {
      &#39;test/*_test.js&#39;: [ &#39;webpack&#39; ],
      &#39;test/**/*_test.js&#39;: [ &#39;webpack&#39; ]
    },
    webpack: {
      // 一些自定义的 webpack 配置&hellip;&hellip;
    },
    webpackMiddleware: {
      // 一些自定义的 webpack-dev-middleware 配置&hellip;&hellip;
    }
  });
};
</code></pre>

<p>获取更多信息，请访问<a href="https://github.com/webpack-contrib/karma-webpack">本仓库</a>。</p>

<hr />
<blockquote>
<p>原文：<a href="https://webpack.js.org/guides/integrations/">https://webpack.js.org/guides/integrations/</a></p>
</blockquote>
