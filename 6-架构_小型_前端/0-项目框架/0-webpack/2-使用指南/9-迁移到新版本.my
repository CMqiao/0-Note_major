<h1>迁移到新版本</h1>

<p><a href="https://github.com/webpack-china/webpack.js.org/edit/cn/src/content/guides/migrating.md">编辑此页</a></p>

<p>以下各节描述从 webpack 1 到 webpack 2 的重大变化。</p>

<blockquote>
<p>webpack 从 1 到 2 的变化，比从 2 到 3 要少很多，所以版本迁移起来难度应该不大。如果你遇到了问题，请查看&nbsp;<a href="https://github.com/webpack/webpack/releases">更新日志</a>&nbsp;以了解更多细节。</p>
</blockquote>

<blockquote>
<p>随着 webpack 2 版本已经发布一段时间，此章节的内容可能会在不久的将来被转移到博客文章中。最重要的是，webpack 3 版本最近发布，webpack 4 版本即将发布。如上所述，大家最好是参考&nbsp;<a href="https://github.com/webpack/webpack/releases">更新日志</a>&nbsp;去进行相应的版本迁移。</p>
</blockquote>

<h2><code>resolve.root</code>,&nbsp;<code>resolve.fallback</code>,&nbsp;<code>resolve.modulesDirectories</code></h2>

<p>这些选项被一个单独的选项&nbsp;<code>resolve.modules</code>&nbsp;取代。更多用法请查看<a href="https://www.webpackjs.com/configuration/resolve">解析</a>。</p>

<pre>
<code>  resolve: {
-   root: path.join(__dirname, &quot;src&quot;)
+   modules: [
+     path.join(__dirname, &quot;src&quot;),
+     &quot;node_modules&quot;
+   ]
  }
</code></pre>

<h2><code>resolve.extensions</code></h2>

<p>此选项不再需要传一个空字符串。此行为被迁移到&nbsp;<code>resolve.enforceExtension</code>。更多用法请查看<a href="https://www.webpackjs.com/configuration/resolve">解析</a>。</p>

<h2><code>resolve.*</code></h2>

<p>这里更改了几个 API。由于不常用，不在这里详细列出。更多用法请查看<a href="https://www.webpackjs.com/configuration/resolve">解析</a>。</p>

<h2><code>module.loaders</code>&nbsp;改为&nbsp;<code>module.rules</code></h2>

<p>旧的 loader 配置被更强大的 rules 系统取代，后者允许配置 loader 以及其他更多选项。 为了兼容旧版，<code>module.loaders</code>&nbsp;语法仍然有效，旧的属性名依然可以被解析。 新的命名约定更易于理解，并且是升级配置使用&nbsp;<code>module.rules</code>&nbsp;的好理由。</p>

<pre>
<code>  module: {
-   loaders: [
+   rules: [
      {
        test: /\.css$/,
-       loaders: [
-         &quot;style-loader&quot;,
-         &quot;css-loader?modules=true&quot;
+       use: [
+         {
+           loader: &quot;style-loader&quot;
+         },
+         {
+           loader: &quot;css-loader&quot;,
+           options: {
+             modules: true
+           }
+         }
        ]
      },
      {
        test: /\.jsx$/,
        loader: &quot;babel-loader&quot;, // 这里不再使用 &quot;use&quot;
        options: {
          // ...
        }
      }
    ]
  }
</code></pre>

<h2>链式 loader</h2>

<p>就像在 webpack 1 中，loader 可以链式调用，上一个 loader 的输出被作为输入传给下一个 loader。 使用&nbsp;<a href="https://www.webpackjs.com/configuration/module#rule-use">rule.use</a>配置选项，<code>use</code>&nbsp;可以设置为一个 loader 数组。 在 webpack 1 中，loader 通常被用&nbsp;<code>!</code>&nbsp;连写。这一写法在 webpack 2 中只在使用旧的选项&nbsp;<code>module.loaders</code>&nbsp;时才有效。</p>

<pre>
<code>  module: {
-   loaders: [{
+   rules: [{
      test: /\.less$/,
-     loader: &quot;style-loader!css-loader!less-loader&quot;
+     use: [
+       &quot;style-loader&quot;,
+       &quot;css-loader&quot;,
+       &quot;less-loader&quot;
+     ]
    }]
  }
</code></pre>

<h2>取消「在模块名中自动添加&nbsp;<code>-loader</code>&nbsp;后缀」</h2>

<p>在引用 loader 时，不能再省略&nbsp;<code>-loader</code>&nbsp;后缀了:</p>

<pre>
<code>  module: {
    rules: [
      {
        use: [
-         &quot;style&quot;,
+         &quot;style-loader&quot;,
-         &quot;css&quot;,
+         &quot;css-loader&quot;,
-         &quot;less&quot;,
+         &quot;less-loader&quot;,
        ]
      }
    ]
  }
</code></pre>

<p>你仍然可以通过配置&nbsp;<code>resolveLoader.moduleExtensions</code>&nbsp;配置选项，启用这一旧有行为，但是我们不推荐这么做。</p>

<pre>
<code>+ resolveLoader: {
+   moduleExtensions: [&quot;-loader&quot;]
+ }
</code></pre>

<p>了解这一改变背后的原因，请查看&nbsp;<a href="https://github.com/webpack/webpack/issues/2986">#2986</a>。</p>

<h2><code>json-loader</code>&nbsp;不再需要手动添加</h2>

<p>如果没有为 JSON 文件配置 loader，webpack 将自动尝试通过&nbsp;<a href="https://github.com/webpack-contrib/json-loader"><code>json-loader</code></a>&nbsp;加载 JSON 文件。</p>

<pre>
<code>  module: {
    rules: [
-     {
-       test: /\.json/,
-       loader: &quot;json-loader&quot;
-     }
    ]
  }
</code></pre>

<p><a href="https://github.com/webpack/webpack/issues/3363">我们决定这么做</a>是为了消除 webpack、 node.js 和 browserify 之间的环境差异。</p>

<h2>配置中的 loader 默认相对于 context 进行解析</h2>

<p>在&nbsp;<strong>webpack 1</strong>&nbsp;中，默认配置下 loader 解析相对于被匹配的文件。然而，在&nbsp;<strong>webpack 2</strong>&nbsp;中，默认配置下 loader 解析相对于&nbsp;<code>context</code>&nbsp;选项。</p>

<p>这解决了「在使用&nbsp;<code>npm link</code>&nbsp;或引用&nbsp;<code>context</code>&nbsp;上下文目录之外的模块时，loader 所导致的模块重复载入」的问题。</p>

<p>你可以移除掉那些为解决此问题的 hack 方案了：</p>

<pre>
<code>  module: {
    rules: [
      {
        // ...
-       loader: require.resolve(&quot;my-loader&quot;)
+       loader: &quot;my-loader&quot;
      }
    ]
  },
  resolveLoader: {
-   root: path.resolve(__dirname, &quot;node_modules&quot;)
  }
</code></pre>

<h2>移除&nbsp;<code>module.preLoaders</code>&nbsp;和&nbsp;<code>module.postLoaders</code></h2>

<pre>
<code>  module: {
-   preLoaders: [
+   rules: [
      {
        test: /\.js$/,
+       enforce: &quot;pre&quot;,
        loader: &quot;eslint-loader&quot;
      }
    ]
  }
</code></pre>

<h2><code>UglifyJsPlugin</code>&nbsp;sourceMap</h2>

<p><code>UglifyJsPlugin</code>&nbsp;的&nbsp;<code>sourceMap</code>&nbsp;选项现在默认为&nbsp;<code>false</code>&nbsp;而不是&nbsp;<code>true</code>。这意味着如果你在压缩代码时启用了 source map，或者想要让 uglifyjs 的警告能够对应到正确的代码行，你需要将&nbsp;<code>UglifyJsPlugin</code>&nbsp;的&nbsp;<code>sourceMap</code>设为&nbsp;<code>true</code>。</p>

<pre>
<code>  devtool: &quot;source-map&quot;,
  plugins: [
    new UglifyJsPlugin({
+     sourceMap: true
    })
  ]
</code></pre>

<h2><code>UglifyJsPlugin</code>&nbsp;warnings</h2>

<p><code>UglifyJsPlugin</code>&nbsp;的&nbsp;<code>compress.warnings</code>&nbsp;选项现在默认为&nbsp;<code>false</code>&nbsp;而不是&nbsp;<code>true</code>。 这意味着如果你想要看到 uglifyjs 的警告信息，你需要将&nbsp;<code>compress.warnings</code>&nbsp;设为&nbsp;<code>true</code>。</p>

<pre>
<code>  devtool: &quot;source-map&quot;,
  plugins: [
    new UglifyJsPlugin({
+     compress: {
+       warnings: true
+     }
    })
  ]
</code></pre>

<h2><code>UglifyJsPlugin</code>&nbsp;压缩 loaders</h2>

<p><code>UglifyJsPlugin</code>&nbsp;不再压缩 loaders。在未来很长一段时间里，需要通过设置&nbsp;<code>minimize:true</code>&nbsp;来压缩 loaders。参考 loader 文档里的相关选项。</p>

<p>loaders 的压缩模式将在 webpack 3 或后续版本中取消。</p>

<p>为了兼容旧的 loaders，loaders 可以通过插件来切换到压缩模式：</p>

<pre>
<code>  plugins: [
+   new webpack.LoaderOptionsPlugin({
+     minimize: true
+   })
  ]
</code></pre>

<h2>移除&nbsp;<code>DedupePlugin</code></h2>

<p>不再需要&nbsp;<code>webpack.optimize.DedupePlugin</code>。请从配置中移除。</p>

<h2><code>BannerPlugin</code>&nbsp;- 破坏性改动</h2>

<p><code>BannerPlugin</code>&nbsp;不再接受两个参数，而是只接受单独的 options 对象。</p>

<pre>
<code>  plugins: [
-    new webpack.BannerPlugin(&#39;Banner&#39;, {raw: true, entryOnly: true});
+    new webpack.BannerPlugin({banner: &#39;Banner&#39;, raw: true, entryOnly: true});
  ]
</code></pre>

<h2>默认加载&nbsp;<code>OccurrenceOrderPlugin</code></h2>

<p><code>OccurrenceOrderPlugin</code>&nbsp;现在默认启用，并已重命名（在 webpack 1 中为&nbsp;<code>OccurenceOrderPlugin</code>）。 因此，请确保从你的配置中删除该插件：</p>

<pre>
<code>  plugins: [
    // webpack 1
-   new webpack.optimize.OccurenceOrderPlugin()
    // webpack 2
-   new webpack.optimize.OccurrenceOrderPlugin()
  ]
</code></pre>

<h2><code>ExtractTextWebpackPlugin</code>&nbsp;- 破坏性改动</h2>

<p><a href="https://github.com/webpack-contrib/extract-text-webpack-plugin">ExtractTextPlugin</a>&nbsp;需要使用版本 2，才能在 webpack 2 下正常运行。</p>

<p><code>npm install --save-dev extract-text-webpack-plugin</code></p>

<p>这一插件的配置变化主要体现在语法上。</p>

<h3><code>ExtractTextPlugin.extract</code></h3>

<pre>
<code>module: {
  rules: [
    {
      test: /.css$/,
-      loader: ExtractTextPlugin.extract(&quot;style-loader&quot;, &quot;css-loader&quot;, { publicPath: &quot;/dist&quot; })
+      use: ExtractTextPlugin.extract({
+        fallback: &quot;style-loader&quot;,
+        use: &quot;css-loader&quot;,
+        publicPath: &quot;/dist&quot;
+      })
    }
  ]
}
</code></pre>

<h3><code>new ExtractTextPlugin({options})</code></h3>

<pre>
<code>plugins: [
-  new ExtractTextPlugin(&quot;bundle.css&quot;, { allChunks: true, disable: false })
+  new ExtractTextPlugin({
+    filename: &quot;bundle.css&quot;,
+    disable: false,
+    allChunks: true
+  })
]
</code></pre>

<h2>全动态 require 现在默认会失败</h2>

<p>只有一个表达式的依赖（例如&nbsp;<code>require(expr)</code>）将创建一个空的 context 而不是一个完整目录的 context。</p>

<p>这样的代码应该进行重构，因为它不能与 ES2015 模块一起使用。如果你确定不会有 ES2015 模块，你可以使用&nbsp;<code>ContextReplacementPlugin</code>&nbsp;来指示 compiler 进行正确的解析。</p>

<blockquote>
<p>Link to an article about dynamic dependencies.</p>
</blockquote>

<h3>在 CLI 和配置中使用自定义参数</h3>

<p>如果你之前滥用 CLI 来传自定义参数到配置中，比如：</p>

<p><code>webpack --custom-stuff</code></p>

<pre>
<code>// webpack.config.js
var customStuff = process.argv.indexOf(&quot;--custom-stuff&quot;) &gt;= 0;
/* ... */
module.exports = config;
</code></pre>

<p>你将会发现新版中不再允许这么做。CLI 现在更加严格了。</p>

<p>替代地，现在提供了一个接口来传递参数给配置。我们应该采用这种新方式，在未来许多工具将可能依赖于此。</p>

<p><code>webpack --env.customStuff</code></p>

<pre>
<code>module.exports = function(env) {
  var customStuff = env.customStuff;
  /* ... */
  return config;
};
</code></pre>

<p>详见&nbsp;<a href="https://www.webpackjs.com/api/cli">CLI</a>。</p>

<h2><code>require.ensure</code>&nbsp;以及 AMD&nbsp;<code>require</code>&nbsp;将采用异步式调用</h2>

<p>现在这些函数总是异步的，而不是当 chunk 已经加载完成的时候同步调用它们的回调函数(callback)。</p>

<p><strong><code>require.ensure</code>&nbsp;现在依赖于原生的&nbsp;<code>Promise</code>。如果在不支持 Promise 的环境里使用&nbsp;<code>require.ensure</code>，你需要添加 polyfill。</strong></p>

<h2>通过&nbsp;<code>options</code>&nbsp;配置 loader</h2>

<p>你不能再通过&nbsp;<code>webpack.config.js</code>&nbsp;的自定义属性来配置 loader。只能通过&nbsp;<code>options</code>&nbsp;来配置。下面配置的&nbsp;<code>ts</code>属性在 webpack 2 下不再有效：</p>

<pre>
<code>module.exports = {
  ...
  module: {
    rules: [{
      test: /\.tsx?$/,
      loader: &#39;ts-loader&#39;
    }]
  },
  // 在 webpack 2 中无效
  ts: { transpileOnly: false }
}
</code></pre>

<h3>什么是&nbsp;<code>options</code>?</h3>

<p>好问题。严格来说，有两种办法，都可以用来配置 webpack 的 loader。典型的&nbsp;<code>options</code>&nbsp;被称为&nbsp;<code>query</code>，是一个可以被添加到 loader 名之后的字符串。它比较像一个 query string，但是实际上有<a href="https://github.com/webpack/loader-utils#parsequery">更强大的能力</a>：</p>

<pre>
<code>module.exports = {
  ...
  module: {
    rules: [{
      test: /\.tsx?$/,
      loader: &#39;ts-loader?&#39; + JSON.stringify({ transpileOnly: false })
    }]
  }
}
</code></pre>

<p>不过它也可以分开来，写成一个单独的对象，紧跟在 loader 属性后面：</p>

<pre>
<code>module.exports = {
  ...
  module: {
    rules: [{
      test: /\.tsx?$/,
      loader: &#39;ts-loader&#39;,
      options:  { transpileOnly: false }
    }]
  }
}
</code></pre>

<h2><code>LoaderOptionsPlugin</code>&nbsp;context</h2>

<p>有的 loader 需要从配置中读取一些 context 信息。在未来很长一段时间里，这将需要通过 loader options 传入。详见 loader 文档的相关选项。</p>

<p>为了保持对旧 loaders 的兼容，这些信息可以通过插件传进来：</p>

<pre>
<code>  plugins: [
+   new webpack.LoaderOptionsPlugin({
+     options: {
+       context: __dirname
+     }
+   })
  ]
</code></pre>

<h2><code>debug</code></h2>

<p>在 webpack 1 中&nbsp;<code>debug</code>&nbsp;选项可以将 loader 切换到调试模式(debug mode)。在未来很长一段时间里，这将需要通过 loader 选项传递。详见 loader 文档的相关选项。</p>

<p>loaders 的调试模式将在 webpack 3 或后续版本中取消。</p>

<p>为了保持对旧 loaders 的兼容，loader 可以通过插件来切换到调试模式：</p>

<pre>
<code>- debug: true,
  plugins: [
+   new webpack.LoaderOptionsPlugin({
+     debug: true
+   })
  ]
</code></pre>

<h2>ES2015 的代码分割</h2>

<p>在 webpack 1 中，可以使用&nbsp;<a href="https://www.webpackjs.com/api/module-methods#require-ensure"><code>require.ensure</code></a>作为实现应用程序的懒加载 chunks 的一种方法：</p>

<pre>
<code>require.ensure([], function(require) {
  var foo = require(&quot;./module&quot;);
});
</code></pre>

<p>ES2015 模块加载规范定义了&nbsp;<a href="https://www.webpackjs.com/api/module-methods#import-"><code>import()</code></a>&nbsp;方法，可以在运行时(runtime)动态地加载 ES2015 模块。webpack 将&nbsp;<code>import()</code>&nbsp;作为分割点(split-point)并将所要请求的模块(requested module)放置到一个单独的 chunk 中。<code>import()</code>&nbsp;接收模块名作为参数，并返回一个 Promise。</p>

<pre>
<code>function onClick() {
  import(&quot;./module&quot;).then(module =&gt; {
    return module.default;
  }).catch(err =&gt; {
    console.log(&quot;Chunk loading failed&quot;);
  });
}
</code></pre>

<p>好消息是：如果加载 chunk 失败，我们现在可以进行处理，因为现在它基于&nbsp;<code>Promise</code>。</p>

<h2>动态表达式</h2>

<p>可以传递部分表达式给&nbsp;<code>import()</code>。这与 CommonJS 对表达式的处理方式一致（webpack 为所有可能匹配的文件创建&nbsp;<a href="https://www.webpackjs.com/plugins/context-replacement-plugin/">context</a>）。</p>

<p><code>import()</code>&nbsp;为每一个可能的模块创建独立的 chunk。</p>

<pre>
<code>function route(path, query) {
  return import(`./routes/${path}/route`)
    .then(route =&gt; new route.Route(query));
}
// 上面代码为每个可能的路由创建独立的 chunk
</code></pre>

<h2>混合使用 ES2015、AMD 和 CommonJS</h2>

<p>你可以自由混合使用三种模块类型（甚至在同一个文件中）。在这个情况中 webpack 的行为和 babel 以及 node-eps 一致：</p>

<pre>
<code>// CommonJS 调用 ES2015 模块
var book = require(&quot;./book&quot;);

book.currentPage;
book.readPage();
book.default === &quot;This is a book&quot;;
</code></pre>

<pre>
<code>// ES2015 模块调用 CommonJS
import fs from &quot;fs&quot;; // module.exports 映射到 default
import { readFileSync } from &quot;fs&quot;; // 从返回对象(returned object+)中读取命名的导出方法(named exports)

typeof fs.readFileSync === &quot;function&quot;;
typeof readFileSync === &quot;function&quot;;
</code></pre>

<p>值得注意的是，你需要让 Babel 不解析这些模块符号，从而让 webpack 可以使用它们。你可以通过设置如下配置到 .babelrc 或 babel-loader 来实现这一点。</p>

<p><strong>.babelrc</strong></p>

<pre>
<code>{
  &quot;presets&quot;: [
    [&quot;es2015&quot;, { &quot;modules&quot;: false }]
  ]
}
</code></pre>

<h2>Hints</h2>

<p>不需要改变什么，但有机会改变。</p>

<h3>模板字符串</h3>

<p>webpack 现在支持表达式中的模板字符串了。这意味着你可以在 webpack 构建中使用它们：</p>

<pre>
<code>- require(&quot;./templates/&quot; + name);
+ require(`./templates/${name}`);
</code></pre>

<h3>配置中使用 Promise</h3>

<p>webpack 现在支持在配置文件中返回&nbsp;<code>Promise</code>&nbsp;了。这让你能在配置文件中做异步处理。</p>

<p><strong>webpack.config.js</strong></p>

<pre>
<code>module.exports = function() {
  return fetchLangs().then(lang =&gt; ({
    entry: &quot;...&quot;,
    // ...
    plugins: [
      new DefinePlugin({ LANGUAGE: lang })
    ]
  }));
};
</code></pre>

<h3>高级 loader 匹配</h3>

<p>webpack 现在支持对 loader 进行更多方式的匹配。</p>

<pre>
<code>module: {
  rules: [
    {
      resource: /filename/, // 匹配 &quot;/path/filename.js&quot;
      resourceQuery: /^\?querystring$/, // 匹配 &quot;?querystring&quot;
      issuer: /filename/, // 如果请求 &quot;/path/filename.js&quot; 则匹配 &quot;/path/something.js&quot;
    }
  ]
}
</code></pre>

<h3>更多的 CLI 参数项</h3>

<p>你可以使用一些新的 CLI 参数项：</p>

<p><code>--define process.env.NODE_ENV=&quot;production&quot;</code>&nbsp;见&nbsp;<a href="https://www.webpackjs.com/plugins/define-plugin/"><code>DefinePlugin</code></a>。</p>

<p><code>--display-depth</code>&nbsp;显示每个模块到入口的距离。</p>

<p><code>--display-used-exports</code>&nbsp;显示一个模块中被使用的 exports 信息。</p>

<p><code>--display-max-modules</code>&nbsp;设置输出时显示的模块数量（默认是 15）。</p>

<p><code>-p</code>&nbsp;能够定义&nbsp;<code>process.env.NODE_ENV</code>&nbsp;为&nbsp;<code>&quot;production&quot;</code>。</p>

<h2>Loader 变更</h2>

<p>以下变更仅影响 loader 的开发者。</p>

<h3>Cacheable</h3>

<p>Loaders 现在默认可被缓存。Loaders 如果不想被缓存，需要选择不被缓存。</p>

<pre>
<code>  // 缓存 loader
  module.exports = function(source) {
-   this.cacheable();
    return source;
  }
</code></pre>

<pre>
<code>  // 不缓存 loader
  module.exports = function(source) {
+   this.cacheable(false);
    return source;
  }
</code></pre>

<h3>复合 options</h3>

<p><strong>webpack 1</strong>&nbsp;只支持能够「可&nbsp;<code>JSON.stringify</code>的对象」作为 loader 的 options。</p>

<p><strong>webpack 2</strong>&nbsp;现在支持任意 JS 对象作为 loader 的 options.</p>

<p>webpack&nbsp;<a href="https://github.com/webpack/webpack/releases/tag/v2.2.1">2.2.1</a>之前（即从 2.0.0 到 2.2.0），使用复合 options，需要在&nbsp;<code>options</code>&nbsp;对象上添加&nbsp;<code>ident</code>，允许它能够被其他 loader 引用。<strong>这在 2.2.1</strong>&nbsp;中被删除，因此目前的迁移不再需要使用&nbsp;<code>ident</code>&nbsp;键。</p>

<pre>
<code>{
  test: /\.ext/
  use: {
    loader: &#39;...&#39;,
    options: {
-     ident: &#39;id&#39;,
      fn: () =&gt; require(&#39;./foo.js&#39;)
    }
  }
}
</code></pre>

<hr />
<blockquote>
<p>原文：<a href="https://webpack.js.org/guides/migrating/">https://webpack.js.org/guides/migrating/</a></p>
</blockquote>
