<h1>[页面模板框架对比] Apache Tiles VS Sitemesh</h1>

<h2>1. 原理对比</h2>

<p>（1） Apache Tiles 顾名思义，Tile是瓷砖的意思，也就是说一个网页是由多个Tile组成的。</p>

<p>&nbsp; &nbsp; 用户通过访问一个页面的Apache Tiles定义名，就可以访问一个由定义文件中包含的页面组成的最终的JSP。</p>

<p>&nbsp; &nbsp; 如以下一个Apache Tiles定义文件：</p>

<ol start="1">
	<li>&lt;tiles-definitions&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;definition&nbsp;name=&quot;myapp.homepage&quot;&nbsp;template=&quot;/layouts/classic.jsp&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;put-attribute&nbsp;name=&quot;title&quot;&nbsp;value=&quot;Tiles&nbsp;tutorial&nbsp;homepage&quot;&nbsp;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;put-attribute&nbsp;name=&quot;header&quot;&nbsp;value=&quot;/tiles/banner.jsp&quot;&nbsp;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;put-attribute&nbsp;name=&quot;menu&quot;&nbsp;value=&quot;/tiles/common_menu.jsp&quot;&nbsp;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;put-attribute&nbsp;name=&quot;body&quot;&nbsp;value=&quot;/tiles/home_body.jsp&quot;&nbsp;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;put-attribute&nbsp;name=&quot;footer&quot;&nbsp;value=&quot;/tiles/credits.jsp&quot;&nbsp;/&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&lt;/definition&gt;&nbsp;&nbsp;</li>
	<li>&lt;/tiles-definitions&gt;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp; &nbsp; 其中首先告诉我们，这个定义的虚拟页面叫做myapp.homepage.</p>

<p>&nbsp; &nbsp; 用户通过 http://site:port/webname/myapp.homepage就能访问到一个页面。</p>

<p>&nbsp; &nbsp; 这个页面来自的模板是：/layouts/classic.jsp</p>

<p>&nbsp; &nbsp; 而模板中各个部位真正的值，则是下面的那些jsps。</p>

<p>&nbsp; &nbsp; 如下为原理图：</p>

<p>&nbsp; &nbsp;<img alt="" src="https://img-blog.csdn.net/20141110172358987?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvVEJXb29k/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" style="height:406px; width:600px" /></p>

<p>&nbsp; &nbsp; （2） Sitemesh 的原理和 Apache Tiles截然不同，如果说Apache Tiles 中的原理是组装工厂的话，那么Sitemesh中的原理就是装饰工厂。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;这个概念比较抽象。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;Sitemesh通过一个过滤器来实现，当每个页面返回时，给它穿上衣服，打扮打扮，再返回。</p>

<p>&nbsp; &nbsp; &nbsp; 而Apache Tiles 则是通过一个组装器，在页面被请求后开始工作，组装完毕，返回，网站文件中也许根本没有这个请求的资源，而是临时按照定义拼凑起来的。</p>

<p>&nbsp; &nbsp; &nbsp; 如下为一个装饰定义文件：</p>

<ol start="1">
	<li>&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;UTF-8&quot;?&gt;&nbsp;&nbsp;</li>
	<li>&lt;decorators&nbsp;defaultdir=&quot;/decorators&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;decorator&nbsp;name=&quot;basic-theme&quot;&nbsp;page=&quot;basic-theme.jsp&quot;&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;pattern&gt;/data/*&lt;/pattern&gt;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/decorator&gt;&nbsp;&nbsp;</li>
	<li>&lt;/decorators&gt;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp; &nbsp; &nbsp;这个文件，定义了每个jsp被请求后，都穿上一件 叫 basic-theme.jsp的衣服。</p>

<p>&nbsp; &nbsp; &nbsp;如下图为Sitemesh的原理图: (apage.jsp 穿上渲染页面后返回)</p>

<p>&nbsp; &nbsp;&nbsp;<img alt="" src="https://img-blog.csdn.net/20141110173050296?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvVEJXb29k/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" style="height:242px; width:600px" /></p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2>2. 重用性比较</h2>

<p>&nbsp; &nbsp;Apache Tiles 基于定义，任何页面都可以被重组，使用起来组合千变万化。 而Sitemesh 也可以实现页面重用，通过渲染的方式。不过灵活性对比Apache Tiles还是稍微差点。</p>

<p>&nbsp; &nbsp;比如 ABC三个子页面。</p>

<p>&nbsp; &nbsp;ApacheTiles可以轻松定义：page1 = ABC page2= BAC page3=CAB ....</p>

<p>&nbsp; &nbsp;而Sitemesh每个页面都要自己想清楚，谁该是主，谁该是装饰。我觉得这涉及到一个人的思维习惯。。。</p>

<p>&nbsp; &nbsp;总结： 都具有高重用性，Apache Tiles相对于 Sitemesh来说，更加灵活。Apache Tiles 面向定义，Sitemesh 面向 Jsp。</p>

<p>&nbsp; &nbsp;</p>

<h2>3. 轻量级性</h2>

<p>&nbsp; &nbsp;两者都是轻量级框架，不过Sitemesh 更胜一筹，原理简单，配置更加简单，而且非常容易和其他MVC框架结合。</p>

<p>&nbsp;</p>

<h2>4. 用哪个？</h2>

<p>&nbsp; &nbsp; 待实践。不过，我个人喜欢定义方式，千变万化，自己挑拣，所以我更钟爱Apache Tiles。Sitemesh 虽配置简单，但当页面复杂起来，需要好好理理谁主谁次。不过百度一大把说Sitemesh比Tiles好的，我感觉可能是Sitemesh入手简单吧，后面页面层次复杂了，很容易迷失。这个观点在Stackoverflow上得到了验证。老外看来也是比较prefer tiles。其原因还有，Apache Tiles 一直都在升级和维护。国内的话还是Sitemesh比较流行。</p>
