<h1>模板语法</h1>

<p>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析。</p>

<p>在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，Vue 能够智能地计算出最少需要重新渲染多少组件，并把 DOM 操作次数减到最少。</p>

<p>如果你熟悉虚拟 DOM 并且偏爱 JavaScript 的原始力量，你也可以不用模板，<a href="https://cn.vuejs.org/v2/guide/render-function.html">直接写渲染 (render) 函数</a>，使用可选的 JSX 语法。</p>

<h2><a href="https://cn.vuejs.org/v2/guide/syntax.html#%E6%8F%92%E5%80%BC" title="插值">插值</a></h2>

<h3><a href="https://cn.vuejs.org/v2/guide/syntax.html#%E6%96%87%E6%9C%AC" title="文本">文本</a></h3>

<p>数据绑定最常见的形式就是使用&ldquo;Mustache&rdquo;语法 (双大括号) 的文本插值：</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
&lt;span&gt;Message: {{ msg }}&lt;/span&gt;
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>Mustache 标签将会被替代为对应数据对象上&nbsp;<code>msg</code>&nbsp;属性的值。无论何时，绑定的数据对象上&nbsp;<code>msg</code>&nbsp;属性发生了改变，插值处的内容都会更新。</p>

<p>通过使用&nbsp;<a href="https://cn.vuejs.org/v2/api/#v-once">v-once 指令</a>，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上的其它数据绑定：</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
&lt;span v-once&gt;这个将不会改变: {{ msg }}&lt;/span&gt;
</pre>
			</td>
		</tr>
	</tbody>
</table>

<h3><a href="https://cn.vuejs.org/v2/guide/syntax.html#%E5%8E%9F%E5%A7%8B-HTML" title="原始 HTML">原始 HTML</a></h3>

<p>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用&nbsp;<code>v-html</code>&nbsp;指令：</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
&lt;p&gt;Using mustaches: {{ rawHtml }}&lt;/p&gt;
&lt;p&gt;Using v-html directive: &lt;span v-html=&quot;rawHtml&quot;&gt;&lt;/span&gt;&lt;/p&gt;
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>Using mustaches: &lt;span style=&quot;color: red&quot;&gt;This should be red.&lt;/span&gt;</p>

<p>Using v-html directive:&nbsp;This should be red.</p>

<p>这个&nbsp;<code>span</code>&nbsp;的内容将会被替换成为属性值&nbsp;<code>rawHtml</code>，直接作为 HTML&mdash;&mdash;会忽略解析属性值中的数据绑定。注意，你不能使用&nbsp;<code>v-html</code>&nbsp;来复合局部模板，因为 Vue 不是基于字符串的模板引擎。反之，对于用户界面 (UI)，组件更适合作为可重用和可组合的基本单位。</p>

<p>你的站点上动态渲染的任意 HTML 可能会非常危险，因为它很容易导致&nbsp;<a href="https://en.wikipedia.org/wiki/Cross-site_scripting" rel="noopener" target="_blank">XSS 攻击</a>。请只对可信内容使用 HTML 插值，<strong>绝不要</strong>对用户提供的内容使用插值。</p>

<h3><a href="https://cn.vuejs.org/v2/guide/syntax.html#%E7%89%B9%E6%80%A7" title="特性">特性</a></h3>

<p>Mustache 语法不能作用在 HTML 特性上，遇到这种情况应该使用&nbsp;<a href="https://cn.vuejs.org/v2/api/#v-bind">v-bind 指令</a>：</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
&lt;div v-bind:id=&quot;dynamicId&quot;&gt;&lt;/div&gt;
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>在布尔特性的情况下，它们的存在即暗示为&nbsp;<code>true</code>，<code>v-bind</code>&nbsp;工作起来略有不同，在这个例子中：</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
&lt;button v-bind:disabled=&quot;isButtonDisabled&quot;&gt;Button&lt;/button&gt;
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>如果&nbsp;<code>isButtonDisabled</code>&nbsp;的值是&nbsp;<code>null</code>、<code>undefined</code>&nbsp;或&nbsp;<code>false</code>，则&nbsp;<code>disabled</code>&nbsp;特性甚至不会被包含在渲染出来的&nbsp;<code>&lt;button&gt;</code>&nbsp;元素中。</p>

<h3><a href="https://cn.vuejs.org/v2/guide/syntax.html#%E4%BD%BF%E7%94%A8-JavaScript-%E8%A1%A8%E8%BE%BE%E5%BC%8F" title="使用 JavaScript 表达式">使用 JavaScript 表达式</a></h3>

<p>迄今为止，在我们的模板中，我们一直都只绑定简单的属性键值。但实际上，对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
{{ number + 1 }}

{{ ok ? &#39;YES&#39; : &#39;NO&#39; }}

{{ message.split(&#39;&#39;).reverse().join(&#39;&#39;) }}

&lt;div v-bind:id=&quot;&#39;list-&#39; + id&quot;&gt;&lt;/div&gt;
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含<strong>单个表达式</strong>，所以下面的例子都<strong>不会</strong>生效。</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
&lt;!-- 这是语句，不是表达式 --&gt;
{{ var a = 1 }}

&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;
{{ if (ok) { return message } }}
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如&nbsp;<code>Math</code>&nbsp;和&nbsp;<code>Date</code>&nbsp;。你不应该在模板表达式中试图访问用户定义的全局变量。</p>

<h2><a href="https://cn.vuejs.org/v2/guide/syntax.html#%E6%8C%87%E4%BB%A4" title="指令">指令</a></h2>

<p>指令 (Directives) 是带有&nbsp;<code>v-</code>&nbsp;前缀的特殊特性。指令特性的值预期是<strong>单个 JavaScript 表达式</strong>(<code>v-for</code>&nbsp;是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。回顾我们在介绍中看到的例子：</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
&lt;p v-if=&quot;seen&quot;&gt;现在你看到我了&lt;/p&gt;
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>这里，<code>v-if</code>&nbsp;指令将根据表达式&nbsp;<code>seen</code>&nbsp;的值的真假来插入/移除&nbsp;<code>&lt;p&gt;</code>&nbsp;元素。</p>

<h3><a href="https://cn.vuejs.org/v2/guide/syntax.html#%E5%8F%82%E6%95%B0" title="参数">参数</a></h3>

<p>一些指令能够接收一个&ldquo;参数&rdquo;，在指令名称之后以冒号表示。例如，<code>v-bind</code>&nbsp;指令可以用于响应式地更新 HTML 特性：</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
&lt;a v-bind:href=&quot;url&quot;&gt;...&lt;/a&gt;
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>在这里&nbsp;<code>href</code>&nbsp;是参数，告知&nbsp;<code>v-bind</code>&nbsp;指令将该元素的&nbsp;<code>href</code>&nbsp;特性与表达式&nbsp;<code>url</code>&nbsp;的值绑定。</p>

<p>另一个例子是&nbsp;<code>v-on</code>&nbsp;指令，它用于监听 DOM 事件：</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
&lt;a v-on:click=&quot;doSomething&quot;&gt;...&lt;/a&gt;
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>在这里参数是监听的事件名。我们也会更详细地讨论事件处理。</p>

<h3><a href="https://cn.vuejs.org/v2/guide/syntax.html#%E4%BF%AE%E9%A5%B0%E7%AC%A6" title="修饰符">修饰符</a></h3>

<p>修饰符 (Modifiers) 是以半角句号&nbsp;<code>.</code>&nbsp;指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，<code>.prevent</code>&nbsp;修饰符告诉&nbsp;<code>v-on</code>&nbsp;指令对于触发的事件调用&nbsp;<code>event.preventDefault()</code>：</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;...&lt;/form&gt;
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>在接下来对&nbsp;<a href="https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6"><code>v-on</code></a>&nbsp;和&nbsp;<a href="https://cn.vuejs.org/v2/guide/forms.html#%E4%BF%AE%E9%A5%B0%E7%AC%A6"><code>v-for</code></a>&nbsp;等功能的探索中，你会看到修饰符的其它例子。</p>

<h2><a href="https://cn.vuejs.org/v2/guide/syntax.html#%E7%BC%A9%E5%86%99" title="缩写">缩写</a></h2>

<p><code>v-</code>&nbsp;前缀作为一种视觉提示，用来识别模板中 Vue 特定的特性。当你在使用 Vue.js 为现有标签添加动态行为 (dynamic behavior) 时，<code>v-</code>&nbsp;前缀很有帮助，然而，对于一些频繁用到的指令来说，就会感到使用繁琐。同时，在构建由 Vue.js 管理所有模板的<a href="https://en.wikipedia.org/wiki/Single-page_application" rel="noopener" target="_blank">单页面应用程序 (SPA - single page application)</a>&nbsp;时，<code>v-</code>&nbsp;前缀也变得没那么重要了。因此，Vue.js 为&nbsp;<code>v-bind</code>&nbsp;和&nbsp;<code>v-on</code>&nbsp;这两个最常用的指令，提供了特定简写：</p>

<h3><a href="https://cn.vuejs.org/v2/guide/syntax.html#v-bind-%E7%BC%A9%E5%86%99" title="v-bind 缩写"><code>v-bind</code>&nbsp;缩写</a></h3>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
&lt;!-- 完整语法 --&gt;
&lt;a v-bind:href=&quot;url&quot;&gt;...&lt;/a&gt;

&lt;!-- 缩写 --&gt;
&lt;a :href=&quot;url&quot;&gt;...&lt;/a&gt;
</pre>
			</td>
		</tr>
	</tbody>
</table>

<h3><a href="https://cn.vuejs.org/v2/guide/syntax.html#v-on-%E7%BC%A9%E5%86%99" title="v-on 缩写"><code>v-on</code>&nbsp;缩写</a></h3>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
&lt;!-- 完整语法 --&gt;
&lt;a v-on:click=&quot;doSomething&quot;&gt;...&lt;/a&gt;

&lt;!-- 缩写 --&gt;
&lt;a @click=&quot;doSomething&quot;&gt;...&lt;/a&gt;
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>它们看起来可能与普通的 HTML 略有不同，但&nbsp;<code>:</code>&nbsp;与&nbsp;<code>@</code>&nbsp;对于特性名来说都是合法字符，在所有支持 Vue.js 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。缩写语法是完全可选的，但随着你更深入地了解它们的作用，你会庆幸拥有它们。</p>
