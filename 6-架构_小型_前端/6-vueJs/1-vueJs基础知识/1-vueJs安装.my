<h1>安装</h1>

<h3>兼容性</h3>

<p>Vue&nbsp;<strong>不支持</strong>&nbsp;IE8 及以下版本，因为 Vue 使用了 IE8 无法模拟的 ECMAScript 5 特性。但它支持所有<a href="https://caniuse.com/#feat=es5" rel="noopener" target="_blank">兼容 ECMAScript 5 的浏览器</a>。</p>

<h3>更新日志</h3>

<p>最新稳定版本：2.5.16</p>

<p>每个版本的更新日志见&nbsp;<a href="https://github.com/vuejs/vue/releases" rel="noopener" target="_blank">GitHub</a>。</p>

<h2><a href="https://cn.vuejs.org/v2/guide/installation.html#Vue-Devtools" title="Vue Devtools">Vue Devtools</a></h2>

<p>在使用 Vue 时，我们推荐在你的浏览器上安装&nbsp;<a href="https://github.com/vuejs/vue-devtools#vue-devtools" rel="noopener" target="_blank">Vue Devtools</a>。它允许你在一个更友好的界面中审查和调试 Vue 应用。</p>

<h2><a href="https://cn.vuejs.org/v2/guide/installation.html#%E7%9B%B4%E6%8E%A5%E7%94%A8-lt-script-gt-%E5%BC%95%E5%85%A5" title="直接用 &lt;script&gt; 引入">直接用&nbsp;<code>&lt;script&gt;</code>&nbsp;引入</a></h2>

<p>直接下载并用&nbsp;<code>&lt;script&gt;</code>&nbsp;标签引入，<code>Vue</code>&nbsp;会被注册为一个全局变量。</p>

<p>在开发环境下不要使用压缩版本，不然你就失去了所有常见错误相关的警告!</p>

<p><br />
<a download="" href="https://vuejs.org/js/vue.js" rel="noopener" target="_blank">开发版本</a>包含完整的警告和调试模式<br />
<br />
<a download="" href="https://vuejs.org/js/vue.min.js" rel="noopener" target="_blank">生产版本</a>删除了警告，30.90KB min+gzip</p>

<h3><a href="https://cn.vuejs.org/v2/guide/installation.html#CDN" title="CDN">CDN</a></h3>

<p>我们推荐链接到一个你可以手动更新的指定版本号：</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js&quot;&gt;&lt;/script&gt;
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>你可以在&nbsp;<a href="https://cdn.jsdelivr.net/npm/vue/" rel="noopener" target="_blank">cdn.jsdelivr.net/npm/vue</a>&nbsp;浏览 NPM 包的源代码。</p>

<p>Vue 也可以在&nbsp;<a href="https://unpkg.com/vue@2.5.16/dist/vue.js" rel="noopener" target="_blank">unpkg</a>&nbsp;和&nbsp;<a href="https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.16/vue.js" rel="noopener" target="_blank">cdnjs</a>&nbsp;上获取 (cdnjs 的版本更新可能略滞后)。</p>

<p>请确认了解<a href="https://cn.vuejs.org/v2/guide/installation.html#%E5%AF%B9%E4%B8%8D%E5%90%8C%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E7%9A%84%E8%A7%A3%E9%87%8A">不同构建版本</a>并在你发布的站点中使用<strong>生产环境版本</strong>，把&nbsp;<code>vue.js</code>&nbsp;换成&nbsp;<code>vue.min.js</code>。这是一个更小的构建，可以带来比开发环境下更快的速度体验。</p>

<h2><a href="https://cn.vuejs.org/v2/guide/installation.html#NPM" title="NPM">NPM</a></h2>

<p>在用 Vue 构建大型应用时推荐使用 NPM 安装<sup><a href="https://cn.vuejs.org/v2/guide/installation.html#footnote-1">[1]</a></sup>。NPM 能很好地和诸如&nbsp;<a href="https://webpack.js.org/" rel="noopener" target="_blank">webpack</a>&nbsp;或&nbsp;<a href="http://browserify.org/" rel="noopener" target="_blank">Browserify</a>&nbsp;模块打包器配合使用。同时 Vue 也提供配套工具来开发<a href="https://cn.vuejs.org/v2/guide/single-file-components.html">单文件组件</a>。</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
# 最新稳定版
$ npm install vue
</pre>
			</td>
		</tr>
	</tbody>
</table>

<h2><a href="https://cn.vuejs.org/v2/guide/installation.html#%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7-CLI" title="命令行工具 (CLI)">命令行工具 (CLI)</a></h2>

<p>Vue 提供了一个<a href="https://github.com/vuejs/vue-cli" rel="noopener" target="_blank">官方的 CLI</a>，为单页面应用快速搭建 (SPA) 繁杂的脚手架。它为现代前端工作流提供了 batteries-included 的构建设置。只需要几分钟的时间就可以运行起来并带有热重载、保存时 lint 校验，以及生产环境可用的构建版本。更多详情可查阅&nbsp;<a href="https://github.com/vuejs/vue-docs-zh-cn/blob/master/vue-cli/README.md#%E4%BB%8B%E7%BB%8D" rel="noopener" target="_blank">Vue CLI 的文档</a></p>

<p>CLI 工具假定用户对 Node.js 和相关构建工具有一定程度的了解。如果你是新手，我们强烈建议先在不用构建工具的情况下通读<a href="https://cn.vuejs.org/v2/guide/">指南</a>，在熟悉 Vue 本身之后再使用 CLI。</p>

<h2><a href="https://cn.vuejs.org/v2/guide/installation.html#%E5%AF%B9%E4%B8%8D%E5%90%8C%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E7%9A%84%E8%A7%A3%E9%87%8A" title="对不同构建版本的解释">对不同构建版本的解释</a></h2>

<p>在&nbsp;<a href="https://cdn.jsdelivr.net/npm/vue/dist/" rel="noopener" target="_blank">NPM 包的&nbsp;<code>dist/</code>&nbsp;目录</a>你将会找到很多不同的 Vue.js 构建版本。这里列出了它们之间的差别：</p>

<table>
	<thead>
		<tr>
			<th>&nbsp;</th>
			<th>UMD</th>
			<th>CommonJS</th>
			<th>ES Module</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td><strong>完整版</strong></td>
			<td>vue.js</td>
			<td>vue.common.js</td>
			<td>vue.esm.js</td>
		</tr>
		<tr>
			<td><strong>只包含运行时版</strong></td>
			<td>vue.runtime.js</td>
			<td>vue.runtime.common.js</td>
			<td>vue.runtime.esm.js</td>
		</tr>
		<tr>
			<td><strong>完整版 (生产环境)</strong></td>
			<td>vue.min.js</td>
			<td>-</td>
			<td>-</td>
		</tr>
		<tr>
			<td><strong>只包含运行时版 (生产环境)</strong></td>
			<td>vue.runtime.min.js</td>
			<td>-</td>
			<td>-</td>
		</tr>
	</tbody>
</table>

<h3><a href="https://cn.vuejs.org/v2/guide/installation.html#%E6%9C%AF%E8%AF%AD" title="术语">术语</a></h3>

<ul>
	<li>
	<p><strong>完整版</strong>：同时包含编译器和运行时的版本。</p>
	</li>
	<li>
	<p><strong>编译器</strong>：用来将模板字符串编译成为 JavaScript 渲染函数的代码。</p>
	</li>
	<li>
	<p><strong>运行时</strong>：用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切。</p>
	</li>
	<li>
	<p><strong><a href="https://github.com/umdjs/umd" rel="noopener" target="_blank">UMD</a></strong>：UMD 版本可以通过&nbsp;<code>&lt;script&gt;</code>&nbsp;标签直接用在浏览器中。jsDelivr CDN 的&nbsp;<a href="https://cdn.jsdelivr.net/npm/vue" rel="noopener" target="_blank">https://cdn.jsdelivr.net/npm/vue</a>&nbsp;默认文件就是运行时 + 编译器的 UMD 版本 (<code>vue.js</code>)。</p>
	</li>
	<li>
	<p><strong><a href="http://wiki.commonjs.org/wiki/Modules/1.1" rel="noopener" target="_blank">CommonJS</a></strong>：CommonJS 版本用来配合老的打包工具比如&nbsp;<a href="http://browserify.org/" rel="noopener" target="_blank">Browserify</a>&nbsp;或&nbsp;<a href="https://webpack.github.io/" rel="noopener" target="_blank">webpack 1</a>。这些打包工具的默认文件 (<code>pkg.main</code>) 是只包含运行时的 CommonJS 版本 (<code>vue.runtime.common.js</code>)。</p>
	</li>
	<li>
	<p><strong><a href="http://exploringjs.com/es6/ch_modules.html" rel="noopener" target="_blank">ES Module</a></strong>：ES module 版本用来配合现代打包工具比如&nbsp;<a href="https://webpack.js.org/" rel="noopener" target="_blank">webpack 2</a>&nbsp;或&nbsp;<a href="https://rollupjs.org/" rel="noopener" target="_blank">Rollup</a>。这些打包工具的默认文件 (<code>pkg.module</code>) 是只包含运行时的 ES Module 版本 (<code>vue.runtime.esm.js</code>)。</p>
	</li>
</ul>

<h3><a href="https://cn.vuejs.org/v2/guide/installation.html#%E8%BF%90%E8%A1%8C%E6%97%B6-%E7%BC%96%E8%AF%91%E5%99%A8-vs-%E5%8F%AA%E5%8C%85%E5%90%AB%E8%BF%90%E8%A1%8C%E6%97%B6" title="运行时 + 编译器 vs. 只包含运行时">运行时 + 编译器 vs. 只包含运行时</a></h3>

<p>如果你需要在客户端编译模板 (比如传入一个字符串给&nbsp;<code>template</code>&nbsp;选项，或挂载到一个元素上并以其 DOM 内部的 HTML 作为模板)，就将需要加上编译器，即完整版：</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
// 需要编译器
new Vue({
  template: &#39;&lt;div&gt;{{ hi }}&lt;/div&gt;&#39;
})

// 不需要编译器
new Vue({
  render (h) {
    return h(&#39;div&#39;, this.hi)
  }
})
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>当使用&nbsp;<code>vue-loader</code>&nbsp;或&nbsp;<code>vueify</code>&nbsp;的时候，<code>*.vue</code>&nbsp;文件内部的模板会在构建时预编译成 JavaScript。你在最终打好的包里实际上是不需要编译器的，所以只用运行时版本即可。</p>

<p>因为运行时版本相比完整版体积要小大约 30%，所以应该尽可能使用这个版本。如果你仍然希望使用完整版，则需要在打包工具里配置一个别名：</p>

<h4>webpack</h4>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
module.exports = {
  // ...
  resolve: {
    alias: {
      &#39;vue$&#39;: &#39;vue/dist/vue.esm.js&#39; // 用 webpack 1 时需用 &#39;vue/dist/vue.common.js&#39;
    }
  }
}
</pre>
			</td>
		</tr>
	</tbody>
</table>

<h4>Rollup</h4>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
const alias = require(&#39;rollup-plugin-alias&#39;)

rollup({
  // ...
  plugins: [
    alias({
      &#39;vue&#39;: &#39;vue/dist/vue.esm.js&#39;
    })
  ]
})
</pre>
			</td>
		</tr>
	</tbody>
</table>

<h4>Browserify</h4>

<p>添加到你项目的&nbsp;<code>package.json</code>：</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
{
  // ...
  &quot;browser&quot;: {
    &quot;vue&quot;: &quot;vue/dist/vue.common.js&quot;
  }
}
</pre>
			</td>
		</tr>
	</tbody>
</table>

<h4>Parcel</h4>

<p>在你项目的&nbsp;<code>package.json</code>&nbsp;中添加：</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
{
  // ...
  &quot;alias&quot;: {
    &quot;vue&quot; : &quot;./node_modules/vue/dist/vue.common.js&quot;
  }
}
</pre>
			</td>
		</tr>
	</tbody>
</table>

<h3><a href="https://cn.vuejs.org/v2/guide/installation.html#%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83-vs-%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E6%A8%A1%E5%BC%8F" title="开发环境 vs. 生产环境模式">开发环境 vs. 生产环境模式</a></h3>

<p>对于 UMD 版本来说，开发环境/生产环境模式是硬编码好的：开发环境下用未压缩的代码，生产环境下使用压缩后的代码。</p>

<p>CommonJS 和 ES Module 版本是用于打包工具的，因此我们不提供压缩后的版本。你需要自行将最终的包进行压缩。</p>

<p>CommonJS 和 ES Module 版本同时保留原始的&nbsp;<code>process.env.NODE_ENV</code>&nbsp;检测，以决定它们应该运行在什么模式下。你应该使用适当的打包工具配置来替换这些环境变量以便控制 Vue 所运行的模式。把&nbsp;<code>process.env.NODE_ENV</code>&nbsp;替换为字符串字面量同时可以让 UglifyJS 之类的压缩工具完全丢掉仅供开发环境的代码块，以减少最终的文件尺寸。</p>

<h4>webpack</h4>

<p>在 webpack 4+ 中，你可以使用&nbsp;<code>mode</code>&nbsp;选项：</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
module.exports = {
  mode: &#39;production&#39;
}
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>但是在 webpack 3 及其更低版本中，你需要使用&nbsp;<a href="https://webpack.js.org/plugins/define-plugin/" rel="noopener" target="_blank">DefinePlugin</a>：</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
var webpack = require(&#39;webpack&#39;)

module.exports = {
  // ...
  plugins: [
    // ...
    new webpack.DefinePlugin({
      &#39;process.env&#39;: {
        NODE_ENV: JSON.stringify(&#39;production&#39;)
      }
    })
  ]
}
</pre>
			</td>
		</tr>
	</tbody>
</table>

<h4>Rollup</h4>

<p>使用&nbsp;<a href="https://github.com/rollup/rollup-plugin-replace" rel="noopener" target="_blank">rollup-plugin-replace</a>：</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
const replace = require(&#39;rollup-plugin-replace&#39;)

rollup({
  // ...
  plugins: [
    replace({
      &#39;process.env.NODE_ENV&#39;: JSON.stringify(&#39;production&#39;)
    })
  ]
}).then(...)
</pre>
			</td>
		</tr>
	</tbody>
</table>

<h4>Browserify</h4>

<p>为你的包应用一次全局的&nbsp;<a href="https://github.com/hughsk/envify" rel="noopener" target="_blank">envify</a>&nbsp;转换。</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
NODE_ENV=production browserify -g envify -e main.js | uglifyjs -c -m &gt; build.js
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>也可以移步<a href="https://cn.vuejs.org/v2/guide/deployment.html">生产环境部署</a>。</p>

<h3><a href="https://cn.vuejs.org/v2/guide/installation.html#CSP-%E7%8E%AF%E5%A2%83" title="CSP 环境">CSP 环境</a></h3>

<p>有些环境，如 Google Chrome Apps，会强制应用内容安全策略 (CSP)，不能使用&nbsp;<code>new Function()</code>&nbsp;对表达式求值。这时可以用 CSP 兼容版本。完整版本依赖于该功能来编译模板，所以无法在这些环境下使用。</p>

<p>另一方面，运行时版本则是完全兼容 CSP 的。当通过&nbsp;<a href="https://github.com/vuejs-templates/webpack-simple" rel="noopener" target="_blank">webpack + vue-loader</a>&nbsp;或者&nbsp;<a href="https://github.com/vuejs-templates/browserify-simple" rel="noopener" target="_blank">Browserify + vueify</a>&nbsp;构建时，模板将被预编译为&nbsp;<code>render</code>&nbsp;函数，可以在 CSP 环境中完美运行。</p>

<h2><a href="https://cn.vuejs.org/v2/guide/installation.html#%E5%BC%80%E5%8F%91%E7%89%88%E6%9C%AC" title="开发版本">开发版本</a></h2>

<p><strong>重要</strong>: GitHub 仓库的&nbsp;<code>/dist</code>&nbsp;文件夹只有在新版本发布时才会提交。如果想要使用 GitHub 上 Vue 最新的源码，你需要自己构建！</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
git clone https://github.com/vuejs/vue.git node_modules/vue
cd node_modules/vue
npm install
npm run build
</pre>
			</td>
		</tr>
	</tbody>
</table>

<h2><a href="https://cn.vuejs.org/v2/guide/installation.html#Bower" title="Bower">Bower</a></h2>

<p>Bower 只提供 UMD 版本。</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
# 最新稳定版本
$ bower install vue
</pre>
			</td>
		</tr>
	</tbody>
</table>

<h2><a href="https://cn.vuejs.org/v2/guide/installation.html#AMD-%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E5%99%A8" title="AMD 模块加载器">AMD 模块加载器</a></h2>

<p>所有 UMD 版本都可以直接用作 AMD 模块。</p>

<p><br />
<small><strong>译者注</strong><br />
[1] 对于中国大陆用户，建议将 NPM 源设置为<a href="https://npm.taobao.org/" rel="noopener" target="_blank">国内的镜像</a>，可以大幅提升安装速度。</small></p>
