<h1>vue.js的状态管理vuex中store的使用</h1>

<h2>一、状态管理（vuex）简介</h2>

<p>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;vuex是专为vue.js应用程序开发的状态管理模式。它采用集中存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。vuex也集成刀vue的官方调试工具devtools extension，提供了诸如零配置的time-travel调试、状态快照导入导出等高级调试功能。</p>

<h2>二、状态管理核心</h2>

<p>状态管理有5个核心，分别是state、getter、mutation、action以及module。分别简单的介绍一下它们：</p>

<h3>1、state</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state为单一状态树，在state中需要定义我们所需要管理的数组、对象、字符串等等，只有在这里定义了，在vue.js的组件中才能获取你定义的这个对象的状态。</p>

<h3>2、getter</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getter有点类似vue.js的计算属性，当我们需要从store的state中派生出一些状态，那么我们就需要使用getter，getter会接收state作为第一个参数，而且getter的返回值会根据它的依赖被缓存起来，只有getter中的依赖值（state中的某个需要派生状态的值）发生改变的时候才会被重新计算。</p>

<h3>3、mutation</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 更改store中state状态的唯一方法就是提交mutation，就很类似事件。每个mutation都有一个字符串类型的事件类型和一个回调函数，我们需要改变state的值就要在回调函数中改变。我们要执行这个回调函数，那么我们需要执行一个相应的调用方法：store.commit。</p>

<h3>4、action</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action可以提交mutation，在action中可以执行store.commit，而且action中可以有任何的异步操作。在页面中如果我们要嗲用这个action，则需要执行store.dispatch</p>

<h3>5、module</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;module其实只是解决了当state中很复杂臃肿的时候，module可以将store分割成模块，每个模块中拥有自己的state、mutation、action和getter。</p>

<h2>三、实例</h2>

<p>首先建立一个vue.js项目，然后引入vuex</p>

<p>npm install vuex --save</p>

<p>而后建立一个store文件夹，建立一个store.js。在store.js中引入vue和vuex、在有需要的时候可以引入axios。</p>

<p>import vue from &#39;vue&#39;</p>

<p>import&nbsp; vuex from &#39;vuex&#39;</p>

<p>vue.use(vuex)</p>

<p>const state={</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;userList:[]</p>

<p>}</p>

<p>const mutations={</p>

<p>&nbsp; &nbsp; setUserList(state,data){</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; state.userList=data;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; (注：如果这里的userList需要axios请求也可以把axios写在等号后面)</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>}</p>

<p>const action={</p>

<p>&nbsp; &nbsp; commitUserList:({commit},userList)=&gt;commit(&#39;setUserList&#39;,userList)</p>

<p>}</p>

<p>这样一个简单的store.js就已经完成了。</p>

<p>在界面中我们要怎么使用这个建立的状态管理呢：</p>

<p>首先在script下引入store.js</p>

<p>&lt;script&gt;</p>

<p>import store from &#39;store.js的路径&#39;</p>

<p>data(){</p>

<p>&nbsp; &nbsp; return{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; userList:store.state.userList;//引入state中的对象</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>},</p>

<p>methods:{</p>

<p>&nbsp; &nbsp; useAction(){</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; var item=[&#39;1&#39;:&#39;2&#39;,&#39;a&#39;:&#39;c&#39;];</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; store.dispatch(&#39;setUserList&#39;,item);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>}</p>

<p>&lt;/script&gt;</p>
