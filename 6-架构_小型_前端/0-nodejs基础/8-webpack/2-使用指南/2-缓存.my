<h1>缓存</h1>

<blockquote>
<p>本指南继续沿用<a href="https://www.webpackjs.com/guides/getting-started">起步</a>、<a href="https://www.webpackjs.com/guides/output-management">管理输出</a>和<a href="https://www.webpackjs.com/guides/code-splitting">代码分离</a>中的代码示例。</p>
</blockquote>

<p>以上，我们使用 webpack 来打包我们的模块化后的应用程序，webpack 会生成一个可部署的&nbsp;<code>/dist</code>&nbsp;目录，然后把打包后的内容放置在此目录中。只要&nbsp;<code>/dist</code>&nbsp;目录中的内容部署到服务器上，客户端（通常是浏览器）就能够访问网站此服务器的网站及其资源。而最后一步获取资源是比较耗费时间的，这就是为什么浏览器使用一种名为&nbsp;<a href="https://searchstorage.techtarget.com/definition/cache">缓存</a>&nbsp;的技术。可以通过命中缓存，以降低网络流量，使网站加载速度更快，然而，如果我们在部署新版本时不更改资源的文件名，浏览器可能会认为它没有被更新，就会使用它的缓存版本。由于缓存的存在，当你需要获取新的代码时，就会显得很棘手。</p>

<p>此指南的重点在于通过必要的配置，以确保 webpack 编译生成的文件能够被客户端缓存，而在文件内容变化后，能够请求到新的文件。</p>

<h2>输出文件的文件名(Output Filenames)</h2>

<p>通过使用&nbsp;<code>output.filename</code>&nbsp;进行<a href="https://www.webpackjs.com/configuration/output#output-filename">文件名替换</a>，可以确保浏览器获取到修改后的文件。<code>[hash]</code>&nbsp;替换可以用于在文件名中包含一个构建相关(build-specific)的 hash，但是更好的方式是使用&nbsp;<code>[chunkhash]</code>&nbsp;替换，在文件名中包含一个 chunk 相关(chunk-specific)的哈希。</p>

<p>让我们使用<a href="https://www.webpackjs.com/guides/getting-started">起步</a>&nbsp;中的示例，以及<a href="https://www.webpackjs.com/guides/output-management">管理输出</a>&nbsp;中的&nbsp;<code>plugins</code>&nbsp;来作为项目的基础，所以我们不必手动处理维护&nbsp;<code>index.html</code>&nbsp;文件：</p>

<p><strong>project</strong></p>

<pre>
<code>webpack-demo
|- package.json
|- webpack.config.js
|- /dist
|- /src
  |- index.js
|- /node_modules
</code></pre>

<p><strong>webpack.config.js</strong></p>

<pre>
<code>  const path = require(&#39;path&#39;);
  const CleanWebpackPlugin = require(&#39;clean-webpack-plugin&#39;);
  const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);

  module.exports = {
    entry: &#39;./src/index.js&#39;,
    plugins: [
      new CleanWebpackPlugin([&#39;dist&#39;]),
      new HtmlWebpackPlugin({
-       title: &#39;Output Management&#39;
+       title: &#39;Caching&#39;
      })
    ],
    output: {
-     filename: &#39;bundle.js&#39;,
+     filename: &#39;[name].[chunkhash].js&#39;,
      path: path.resolve(__dirname, &#39;dist&#39;)
    }
  };
</code></pre>

<p>使用此配置，然后运行我们的构建脚本&nbsp;<code>npm run build</code>，应该产生以下输出：</p>

<pre>
<code>Hash: f7a289a94c5e4cd1e566
Version: webpack 3.5.1
Time: 835ms
                       Asset       Size  Chunks                    Chunk Names
main.7e2c49a622975ebd9b7e.js     544 kB       0  [emitted]  [big]  main
                  index.html  197 bytes          [emitted]
   [0] ./src/index.js 216 bytes {0} [built]
   [2] (webpack)/buildin/global.js 509 bytes {0} [built]
   [3] (webpack)/buildin/module.js 517 bytes {0} [built]
    + 1 hidden module
Child html-webpack-plugin for &quot;index.html&quot;:
     1 asset
       [2] (webpack)/buildin/global.js 509 bytes {0} [built]
       [3] (webpack)/buildin/module.js 517 bytes {0} [built]
        + 2 hidden modules
</code></pre>

<p>可以看到，bundle 的名称是它内容（通过 hash）的映射。如果我们不做修改，然后再次运行构建，我们以为文件名会保持不变。然而，如果我们真的运行，可能会发现情况并非如此：（译注：这里的意思是，如果不做修改，文件名可能会变，也可能不会。）</p>

<pre>
<code>Hash: f7a289a94c5e4cd1e566
Version: webpack 3.5.1
Time: 835ms
                       Asset       Size  Chunks                    Chunk Names
main.205199ab45963f6a62ec.js     544 kB       0  [emitted]  [big]  main
                  index.html  197 bytes          [emitted]
   [0] ./src/index.js 216 bytes {0} [built]
   [2] (webpack)/buildin/global.js 509 bytes {0} [built]
   [3] (webpack)/buildin/module.js 517 bytes {0} [built]
    + 1 hidden module
Child html-webpack-plugin for &quot;index.html&quot;:
     1 asset
       [2] (webpack)/buildin/global.js 509 bytes {0} [built]
       [3] (webpack)/buildin/module.js 517 bytes {0} [built]
        + 2 hidden modules
</code></pre>

<p>这也是因为 webpack 在入口 chunk 中，包含了某些样板(boilerplate)，特别是 runtime 和 manifest。（译注：样板(boilerplate)指 webpack 运行时的引导代码）</p>

<blockquote>
<p>输出可能会因当前的 webpack 版本而稍有差异。新版本不一定有和旧版本相同的 hash 问题，但我们以下推荐的步骤，仍然是可靠的。</p>
</blockquote>

<h2>提取模板(Extracting Boilerplate)</h2>

<p>就像我们之前从<a href="https://www.webpackjs.com/guides/code-splitting">代码分离</a>了解到的，<a href="https://www.webpackjs.com/plugins/commons-chunk-plugin"><code>CommonsChunkPlugin</code></a>&nbsp;可以用于将模块分离到单独的文件中。然而&nbsp;<code>CommonsChunkPlugin</code>&nbsp;有一个较少有人知道的功能是，能够在每次修改后的构建结果中，将 webpack 的样板(boilerplate)和 manifest 提取出来。通过指定&nbsp;<code>entry</code>&nbsp;配置中未用到的名称，此插件会自动将我们需要的内容提取到单独的包中：</p>

<p><strong>webpack.config.js</strong></p>

<pre>
<code>  const path = require(&#39;path&#39;);
+ const webpack = require(&#39;webpack&#39;);
  const CleanWebpackPlugin = require(&#39;clean-webpack-plugin&#39;);
  const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);

  module.exports = {
    entry: &#39;./src/index.js&#39;,
    plugins: [
      new CleanWebpackPlugin([&#39;dist&#39;]),
      new HtmlWebpackPlugin({
        title: &#39;Caching&#39;
-     })
+     }),
+     new webpack.optimize.CommonsChunkPlugin({
+       name: &#39;manifest&#39;
+     })
    ],
    output: {
      filename: &#39;[name].[chunkhash].js&#39;,
      path: path.resolve(__dirname, &#39;dist&#39;)
    }
  };
</code></pre>

<p>让我们再次构建，然后查看提取出来的&nbsp;<code>manifest</code>&nbsp;bundle：</p>

<pre>
<code>Hash: 80552632979856ddab34
Version: webpack 3.3.0
Time: 1512ms
                           Asset       Size  Chunks                    Chunk Names
    main.5ec8e954e32d66dee1aa.js     542 kB       0  [emitted]  [big]  main
manifest.719796322be98041fff2.js    5.82 kB       1  [emitted]         manifest
                      index.html  275 bytes          [emitted]
   [0] ./src/index.js 336 bytes {0} [built]
   [2] (webpack)/buildin/global.js 509 bytes {0} [built]
   [3] (webpack)/buildin/module.js 517 bytes {0} [built]
    + 1 hidden module
</code></pre>

<p>将第三方库(library)（例如&nbsp;<code>lodash</code>&nbsp;或&nbsp;<code>react</code>）提取到单独的&nbsp;<code>vendor</code>&nbsp;chunk 文件中，是比较推荐的做法，这是因为，它们很少像本地的源代码那样频繁修改。因此通过实现以上步骤，利用客户端的长效缓存机制，可以通过命中缓存来消除请求，并减少向服务器获取资源，同时还能保证客户端代码和服务器端代码版本一致。这可以通过使用新的&nbsp;<code>entry(入口)</code>&nbsp;起点，以及再额外配置一个&nbsp;<code>CommonsChunkPlugin</code>&nbsp;实例的组合方式来实现：</p>

<p><strong>webpack.config.js</strong></p>

<pre>
<code>  var path = require(&#39;path&#39;);
  const webpack = require(&#39;webpack&#39;);
  const CleanWebpackPlugin = require(&#39;clean-webpack-plugin&#39;);
  const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);

  module.exports = {
-   entry: &#39;./src/index.js&#39;,
+   entry: {
+     main: &#39;./src/index.js&#39;,
+     vendor: [
+       &#39;lodash&#39;
+     ]
+   },
    plugins: [
      new CleanWebpackPlugin([&#39;dist&#39;]),
      new HtmlWebpackPlugin({
        title: &#39;Caching&#39;
      }),
+     new webpack.optimize.CommonsChunkPlugin({
+       name: &#39;vendor&#39;
+     }),
      new webpack.optimize.CommonsChunkPlugin({
        name: &#39;manifest&#39;
      })
    ],
    output: {
      filename: &#39;[name].[chunkhash].js&#39;,
      path: path.resolve(__dirname, &#39;dist&#39;)
    }
  };
</code></pre>

<blockquote>
<p>注意，引入顺序在这里很重要。<code>CommonsChunkPlugin</code>&nbsp;的&nbsp;<code>&#39;vendor&#39;</code>&nbsp;实例，必须在&nbsp;<code>&#39;manifest&#39;</code>&nbsp;实例之前引入。</p>
</blockquote>

<p>让我们再次构建，然后查看新的&nbsp;<code>vendor</code>&nbsp;bundle：</p>

<pre>
<code>Hash: 69eb92ebf8935413280d
Version: webpack 3.3.0
Time: 1502ms
                           Asset       Size  Chunks                    Chunk Names
  vendor.8196d409d2f988123318.js     541 kB       0  [emitted]  [big]  vendor
    main.0ac0ae2d4a11214ccd19.js  791 bytes       1  [emitted]         main
manifest.004a1114de8bcf026622.js    5.85 kB       2  [emitted]         manifest
                      index.html  352 bytes          [emitted]
   [1] ./src/index.js 336 bytes {1} [built]
   [2] (webpack)/buildin/global.js 509 bytes {0} [built]
   [3] (webpack)/buildin/module.js 517 bytes {0} [built]
   [4] multi lodash 28 bytes {0} [built]
    + 1 hidden module
</code></pre>

<h2>模块标识符(Module Identifiers)</h2>

<p>让我们向项目中再添加一个模块&nbsp;<code>print.js</code>：</p>

<p><strong>project</strong></p>

<pre>
<code>webpack-demo
|- package.json
|- webpack.config.js
|- /dist
|- /src
  |- index.js
+ |- print.js
|- /node_modules
</code></pre>

<p><strong>print.js</strong></p>

<pre>
<code>+ export default function print(text) {
+   console.log(text);
+ };
</code></pre>

<p><strong>src/index.js</strong></p>

<pre>
<code>  import _ from &#39;lodash&#39;;
+ import Print from &#39;./print&#39;;

  function component() {
    var element = document.createElement(&#39;div&#39;);

    // lodash 是由当前 script 脚本 import 导入进来的
    element.innerHTML = _.join([&#39;Hello&#39;, &#39;webpack&#39;], &#39; &#39;);
+   element.onclick = Print.bind(null, &#39;Hello webpack!&#39;);

    return element;
  }

  document.body.appendChild(component());
</code></pre>

<p>再次运行构建，然后我们期望的是，只有&nbsp;<code>main</code>&nbsp;bundle 的 hash 发生变化，然而&hellip;&hellip;</p>

<pre>
<code>Hash: d38a06644fdbb898d795
Version: webpack 3.3.0
Time: 1445ms
                           Asset       Size  Chunks                    Chunk Names
  vendor.a7561fb0e9a071baadb9.js     541 kB       0  [emitted]  [big]  vendor
    main.b746e3eb72875af2caa9.js    1.22 kB       1  [emitted]         main
manifest.1400d5af64fc1b7b3a45.js    5.85 kB       2  [emitted]         manifest
                      index.html  352 bytes          [emitted]
   [1] ./src/index.js 421 bytes {1} [built]
   [2] (webpack)/buildin/global.js 509 bytes {0} [built]
   [3] (webpack)/buildin/module.js 517 bytes {0} [built]
   [4] ./src/print.js 62 bytes {1} [built]
   [5] multi lodash 28 bytes {0} [built]
    + 1 hidden module
</code></pre>

<p>&hellip;&hellip;我们可以看到这三个文件的 hash 都变化了。这是因为每个&nbsp;<a href="https://www.webpackjs.com/api/module-variables#module-id-commonjs-"><code>module.id</code></a>&nbsp;会基于默认的解析顺序(resolve order)进行增量。也就是说，当解析顺序发生变化，ID 也会随之改变。因此，简要概括：</p>

<ul>
	<li><code>main</code>&nbsp;bundle 会随着自身的新增内容的修改，而发生变化。</li>
	<li><code>vendor</code>&nbsp;bundle 会随着自身的&nbsp;<code>module.id</code>&nbsp;的修改，而发生变化。</li>
	<li><code>manifest</code>&nbsp;bundle 会因为当前包含一个新模块的引用，而发生变化。</li>
</ul>

<p>第一个和最后一个都是符合预期的行为 -- 而&nbsp;<code>vendor</code>&nbsp;的 hash 发生变化是我们要修复的。幸运的是，可以使用两个插件来解决这个问题。第一个插件是&nbsp;<a href="https://www.webpackjs.com/plugins/named-modules-plugin"><code>NamedModulesPlugin</code></a>，将使用模块的路径，而不是数字标识符。虽然此插件有助于在开发过程中输出结果的可读性，然而执行时间会长一些。第二个选择是使用&nbsp;<a href="https://www.webpackjs.com/plugins/hashed-module-ids-plugin"><code>HashedModuleIdsPlugin</code></a>，推荐用于生产环境构建：</p>

<p><strong>webpack.config.js</strong></p>

<pre>
<code>  const path = require(&#39;path&#39;);
  const webpack = require(&#39;webpack&#39;);
  const CleanWebpackPlugin = require(&#39;clean-webpack-plugin&#39;);
  const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);

  module.exports = {
    entry: {
      main: &#39;./src/index.js&#39;,
      vendor: [
        &#39;lodash&#39;
      ]
    },
    plugins: [
      new CleanWebpackPlugin([&#39;dist&#39;]),
      new HtmlWebpackPlugin({
        title: &#39;Caching&#39;
      }),
+     new webpack.HashedModuleIdsPlugin(),
      new webpack.optimize.CommonsChunkPlugin({
        name: &#39;vendor&#39;
      }),
      new webpack.optimize.CommonsChunkPlugin({
        name: &#39;manifest&#39;
      })
    ],
    output: {
      filename: &#39;[name].[chunkhash].js&#39;,
      path: path.resolve(__dirname, &#39;dist&#39;)
    }
  };
</code></pre>

<p>现在，不管再添加任何新的本地依赖，对于每次构建，<code>vendor</code>&nbsp;hash 都应该保持一致：</p>

<pre>
<code>Hash: 1f49b42afb9a5acfbaff
Version: webpack 3.3.0
Time: 1372ms
                           Asset       Size  Chunks                    Chunk Names
  vendor.eed6dcc3b30cfa138aaa.js     541 kB       0  [emitted]  [big]  vendor
    main.d103ac311788fcb7e329.js    1.22 kB       1  [emitted]         main
manifest.d2a6dc1ccece13f5a164.js    5.85 kB       2  [emitted]         manifest
                      index.html  352 bytes          [emitted]
[3Di9] ./src/print.js 62 bytes {1} [built]
[3IRH] (webpack)/buildin/module.js 517 bytes {0} [built]
[DuR2] (webpack)/buildin/global.js 509 bytes {0} [built]
   [0] multi lodash 28 bytes {0} [built]
[lVK7] ./src/index.js 421 bytes {1} [built]
    + 1 hidden module
</code></pre>

<p>然后，修改我们的&nbsp;<code>src/index.js</code>，临时移除额外的依赖：</p>

<p><strong>src/index.js</strong></p>

<pre>
<code>  import _ from &#39;lodash&#39;;
- import Print from &#39;./print&#39;;
+ // import Print from &#39;./print&#39;;

  function component() {
    var element = document.createElement(&#39;div&#39;);

    // lodash 是由当前 script 脚本 import 导入进来的
    element.innerHTML = _.join([&#39;Hello&#39;, &#39;webpack&#39;], &#39; &#39;);
-   element.onclick = Print.bind(null, &#39;Hello webpack!&#39;);
+   // element.onclick = Print.bind(null, &#39;Hello webpack!&#39;);

    return element;
  }

  document.body.appendChild(component());
</code></pre>

<p>最后，再次运行我们的构建：</p>

<pre>
<code>Hash: 37e1358f135c0b992f72
Version: webpack 3.3.0
Time: 1557ms
                           Asset       Size  Chunks                    Chunk Names
  vendor.eed6dcc3b30cfa138aaa.js     541 kB       0  [emitted]  [big]  vendor
    main.fc7f38e648da79db2aba.js  891 bytes       1  [emitted]         main
manifest.bb5820632fb66c3fb357.js    5.85 kB       2  [emitted]         manifest
                      index.html  352 bytes          [emitted]
[3IRH] (webpack)/buildin/module.js 517 bytes {0} [built]
[DuR2] (webpack)/buildin/global.js 509 bytes {0} [built]
   [0] multi lodash 28 bytes {0} [built]
[lVK7] ./src/index.js 427 bytes {1} [built]
    + 1 hidden module
</code></pre>

<p>我们可以看到，这两次构建中，<code>vendor</code>&nbsp;bundle 的文件名称，都是&nbsp;<code>eed6dcc3b30cfa138aaa</code>。</p>

<h2>结论</h2>

<p>缓存从凌乱变得清晰直接。然而以上预先演示，只能帮助你在部署一致性(deploying consistent)和资源可缓存(cachable assets)方面，有个好的开始。想要了解更多信息，请查看以下的<em>进一步阅读</em>部分。</p>
