<h1>Shimming</h1>

<p><a href="https://github.com/webpack-china/webpack.js.org/edit/cn/src/content/guides/shimming.md">编辑此页</a></p>

<p><code>webpack</code>&nbsp;编译器(compiler)能够识别遵循 ES2015 模块语法、CommonJS 或 AMD 规范编写的模块。然而，一些第三方的库(library)可能会引用一些全局依赖（例如&nbsp;<code>jQuery</code>&nbsp;中的&nbsp;<code>$</code>）。这些库也可能创建一些需要被导出的全局变量。这些&ldquo;不符合规范的模块&rdquo;就是&nbsp;<em>shimming</em>&nbsp;发挥作用的地方。</p>

<blockquote>
<p><strong>我们不推荐使用全局的东西！</strong>在 webpack 背后的整个概念是让前端开发更加模块化。也就是说，需要编写具有良好的封闭性(well contained)、彼此隔离的模块，以及不要依赖于那些隐含的依赖模块（例如，全局变量）。请只在必要的时候才使用本文所述的这些特性。</p>
</blockquote>

<p><em>shimming</em>&nbsp;另外一个使用场景就是，当你希望&nbsp;<a href="https://en.wikipedia.org/wiki/Polyfill">polyfill</a>&nbsp;浏览器功能以支持更多用户时。在这种情况下，你可能只想要将这些 polyfills 提供给到需要修补(patch)的浏览器（也就是实现按需加载）。</p>

<p>下面的文章将向我们展示这两种用例。</p>

<blockquote>
<p>为了方便，本指南继续沿用<a href="https://www.webpackjs.com/guides/getting-started">起步</a>中的代码示例。在继续之前，请确保你已经熟悉那些配置。</p>
</blockquote>

<h2>shimming 全局变量</h2>

<p>让我们开始第一个 shimming 全局变量的用例。在此之前，我们先看看我们的项目：</p>

<p><strong>project</strong></p>

<pre>
<code>webpack-demo
|- package.json
|- webpack.config.js
|- /dist
|- /src
  |- index.js
|- /node_modules
</code></pre>

<p>还记得我们之前用过的&nbsp;<code>lodash</code>&nbsp;吗？出于演示的目的，让我们把这个模块作为我们应用程序中的一个全局变量。要实现这些，我们需要使用&nbsp;<code>ProvidePlugin</code>&nbsp;插件。</p>

<p>使用&nbsp;<a href="https://www.webpackjs.com/plugins/provide-plugin"><code>ProvidePlugin</code></a>&nbsp;后，能够在通过 webpack 编译的每个模块中，通过访问一个变量来获取到 package 包。如果 webpack 知道这个变量在某个模块中被使用了，那么 webpack 将在最终 bundle 中引入我们给定的 package。让我们先移除&nbsp;<code>lodash</code>&nbsp;的&nbsp;<code>import</code>&nbsp;语句，并通过插件提供它：</p>

<p><strong>src/index.js</strong></p>

<pre>
<code>- import _ from &#39;lodash&#39;;
-
  function component() {
    var element = document.createElement(&#39;div&#39;);

-   // Lodash, now imported by this script
    element.innerHTML = _.join([&#39;Hello&#39;, &#39;webpack&#39;], &#39; &#39;);

    return element;
  }

  document.body.appendChild(component());
</code></pre>

<p><strong>webpack.config.js</strong></p>

<pre>
<code>  const path = require(&#39;path&#39;);
+ const webpack = require(&#39;webpack&#39;);

  module.exports = {
    entry: &#39;./src/index.js&#39;,
    output: {
      filename: &#39;bundle.js&#39;,
      path: path.resolve(__dirname, &#39;dist&#39;)
-   }
+   },
+   plugins: [
+     new webpack.ProvidePlugin({
+       _: &#39;lodash&#39;
+     })
+   ]
  };
</code></pre>

<p>本质上，我们所做的，就是告诉 webpack&hellip;&hellip;</p>

<blockquote>
<p>如果你遇到了至少一处用到&nbsp;<code>lodash</code>&nbsp;变量的模块实例，那请你将&nbsp;<code>lodash</code>&nbsp;package 包引入进来，并将其提供给需要用到它的模块。</p>
</blockquote>

<p>如果我们 run build，将会看到同样的输出：</p>

<pre>
<code>Hash: f450fa59fa951c68c416
Version: webpack 2.2.0
Time: 343ms
    Asset    Size  Chunks                    Chunk Names
bundle.js  544 kB       0  [emitted]  [big]  main
   [0] ./~/lodash/lodash.js 540 kB {0} [built]
   [1] (webpack)/buildin/global.js 509 bytes {0} [built]
   [2] (webpack)/buildin/module.js 517 bytes {0} [built]
   [3] ./src/index.js 189 bytes {0} [built]
</code></pre>

<p>我们还可以使用&nbsp;<code>ProvidePlugin</code>&nbsp;暴露某个模块中单个导出值，只需通过一个&ldquo;数组路径&rdquo;进行配置（例如&nbsp;<code>[module, child, ...children?]</code>）。所以，让我们做如下设想，无论&nbsp;<code>join</code>&nbsp;方法在何处调用，我们都只会得到的是&nbsp;<code>lodash</code>&nbsp;中提供的&nbsp;<code>join</code>&nbsp;方法。</p>

<p><strong>src/index.js</strong></p>

<pre>
<code>  function component() {
    var element = document.createElement(&#39;div&#39;);

-   element.innerHTML = _.join([&#39;Hello&#39;, &#39;webpack&#39;], &#39; &#39;);
+   element.innerHTML = join([&#39;Hello&#39;, &#39;webpack&#39;], &#39; &#39;);

    return element;
  }

  document.body.appendChild(component());
</code></pre>

<p><strong>webpack.config.js</strong></p>

<pre>
<code>  const path = require(&#39;path&#39;);
  const webpack = require(&#39;webpack&#39;);

  module.exports = {
    entry: &#39;./src/index.js&#39;,
    output: {
      filename: &#39;bundle.js&#39;,
      path: path.resolve(__dirname, &#39;dist&#39;)
    },
    plugins: [
      new webpack.ProvidePlugin({
-       _: &#39;lodash&#39;
+       join: [&#39;lodash&#39;, &#39;join&#39;]
      })
    ]
  };
</code></pre>

<p>这样就能很好的与&nbsp;<a href="https://www.webpackjs.com/guides/tree-shaking">tree shaking</a>&nbsp;配合，将&nbsp;<code>lodash</code>&nbsp;库中的其他没用到的部分去除。</p>

<h2>细粒度 shimming</h2>

<p>一些传统的模块依赖的&nbsp;<code>this</code>&nbsp;指向的是&nbsp;<code>window</code>&nbsp;对象。在接下来的用例中，调整我们的&nbsp;<code>index.js</code>：</p>

<pre>
<code>  function component() {
    var element = document.createElement(&#39;div&#39;);

    element.innerHTML = join([&#39;Hello&#39;, &#39;webpack&#39;], &#39; &#39;);
+
+   // Assume we are in the context of `window`
+   this.alert(&#39;Hmmm, this probably isn\&#39;t a great idea...&#39;)

    return element;
  }

  document.body.appendChild(component());
</code></pre>

<p>当模块运行在 CommonJS 环境下这将会变成一个问题，也就是说此时的&nbsp;<code>this</code>&nbsp;指向的是&nbsp;<code>module.exports</code>。在这个例子中，你可以通过使用&nbsp;<a href="https://www.webpackjs.com/loaders/imports-loader/"><code>imports-loader</code></a>&nbsp;覆写&nbsp;<code>this</code>：</p>

<p><strong>webpack.config.js</strong></p>

<pre>
<code>  const path = require(&#39;path&#39;);
  const webpack = require(&#39;webpack&#39;);

  module.exports = {
    entry: &#39;./src/index.js&#39;,
    output: {
      filename: &#39;bundle.js&#39;,
      path: path.resolve(__dirname, &#39;dist&#39;)
    },
+   module: {
+     rules: [
+       {
+         test: require.resolve(&#39;index.js&#39;),
+         use: &#39;imports-loader?this=&gt;window&#39;
+       }
+     ]
+   },
    plugins: [
      new webpack.ProvidePlugin({
        join: [&#39;lodash&#39;, &#39;join&#39;]
      })
    ]
  };
</code></pre>

<h2>全局 exports</h2>

<p>让我们假设，某个库(library)创建出一个全局变量，它期望用户使用这个变量。为此，我们可以在项目配置中，添加一个小模块来演示说明：</p>

<p><strong>project</strong></p>

<pre>
<code>  webpack-demo
  |- package.json
  |- webpack.config.js
  |- /dist
  |- /src
    |- index.js
+   |- globals.js
  |- /node_modules
</code></pre>

<p><strong>src/globals.js</strong></p>

<pre>
<code>var file = &#39;blah.txt&#39;;
var helpers = {
  test: function() { console.log(&#39;test something&#39;); },
  parse: function() { console.log(&#39;parse something&#39;); }
}
</code></pre>

<p>你可能从来没有在自己的源码中做过这些事情，但是你也许遇到过一个老旧的库(library)，和上面所展示的代码类似。在这个用例中，我们可以使用&nbsp;<a href="https://www.webpackjs.com/loaders/exports-loader/"><code>exports-loader</code></a>，将一个全局变量作为一个普通的模块来导出。例如，为了将&nbsp;<code>file</code>&nbsp;导出为&nbsp;<code>file</code>&nbsp;以及将&nbsp;<code>helpers.parse</code>&nbsp;导出为&nbsp;<code>parse</code>，做如下调整：</p>

<p><strong>webpack.config.js</strong></p>

<pre>
<code>  const path = require(&#39;path&#39;);
  const webpack = require(&#39;webpack&#39;);

  module.exports = {
    entry: &#39;./src/index.js&#39;,
    output: {
      filename: &#39;bundle.js&#39;,
      path: path.resolve(__dirname, &#39;dist&#39;)
    },
    module: {
      rules: [
        {
          test: require.resolve(&#39;index.js&#39;),
          use: &#39;imports-loader?this=&gt;window&#39;
-       }
+       },
+       {
+         test: require.resolve(&#39;globals.js&#39;),
+         use: &#39;exports-loader?file,parse=helpers.parse&#39;
+       }
      ]
    },
    plugins: [
      new webpack.ProvidePlugin({
        join: [&#39;lodash&#39;, &#39;join&#39;]
      })
    ]
  };
</code></pre>

<p>现在从我们的 entry 入口文件中(即&nbsp;<code>src/index.js</code>)，我们能&nbsp;<code>import { file, parse } from &#39;./globals.js&#39;;</code>，然后一切将顺利进行。</p>

<h2>加载 polyfills</h2>

<p>目前为止我们所讨论的所有内容都是处理那些遗留的 package 包，让我们进入到下一个话题：<strong>polyfills</strong>。</p>

<p>有很多方法来载入 polyfills。例如，要引入&nbsp;<a href="https://babeljs.io/docs/usage/polyfill/"><code>babel-polyfill</code></a>&nbsp;我们只需要如下操作：</p>

<pre>
<code>npm install --save babel-polyfill
</code></pre>

<p>然后使用&nbsp;<code>import</code>&nbsp;将其添加到我们的主 bundle 文件：</p>

<p><strong>src/index.js</strong></p>

<pre>
<code>+ import &#39;babel-polyfill&#39;;
+
  function component() {
    var element = document.createElement(&#39;div&#39;);

    element.innerHTML = join([&#39;Hello&#39;, &#39;webpack&#39;], &#39; &#39;);

    return element;
  }

  document.body.appendChild(component());
</code></pre>

<blockquote>
<p>请注意，我们没有将&nbsp;<code>import</code>&nbsp;绑定到变量。这是因为只需在基础代码(code base)之外，再额外执行 polyfills，这样我们就可以假定代码中已经具有某些原生功能。</p>
</blockquote>

<p>polyfills 虽然是一种模块引入方式，但是<strong>并不推荐在主 bundle 中引入 polyfills</strong>，因为这不利于具备这些模块功能的现代浏览器用户，会使他们下载体积很大、但却不需要的脚本文件。</p>

<p>让我们把&nbsp;<code>import</code>&nbsp;放入一个新文件，并加入&nbsp;<a href="https://github.com/github/fetch"><code>whatwg-fetch</code></a>&nbsp;polyfill：</p>

<pre>
<code>npm install --save whatwg-fetch
</code></pre>

<p><strong>src/index.js</strong></p>

<pre>
<code>- import &#39;babel-polyfill&#39;;
-
  function component() {
    var element = document.createElement(&#39;div&#39;);

    element.innerHTML = join([&#39;Hello&#39;, &#39;webpack&#39;], &#39; &#39;);

    return element;
  }

  document.body.appendChild(component());
</code></pre>

<p><strong>project</strong></p>

<pre>
<code>  webpack-demo
  |- package.json
  |- webpack.config.js
  |- /dist
  |- /src
    |- index.js
    |- globals.js
+   |- polyfills.js
  |- /node_modules
</code></pre>

<p><strong>src/polyfills.js</strong></p>

<pre>
<code>import &#39;babel-polyfill&#39;;
import &#39;whatwg-fetch&#39;;
</code></pre>

<p><strong>webpack.config.js</strong></p>

<pre>
<code>  const path = require(&#39;path&#39;);
  const webpack = require(&#39;webpack&#39;);

  module.exports = {
-   entry: &#39;./src/index.js&#39;,
+   entry: {
+     polyfills: &#39;./src/polyfills.js&#39;,
+     index: &#39;./src/index.js&#39;
+   },
    output: {
-     filename: &#39;bundle.js&#39;,
+     filename: &#39;[name].bundle.js&#39;,
      path: path.resolve(__dirname, &#39;dist&#39;)
    },
    module: {
      rules: [
        {
          test: require.resolve(&#39;index.js&#39;),
          use: &#39;imports-loader?this=&gt;window&#39;
        },
        {
          test: require.resolve(&#39;globals.js&#39;),
          use: &#39;exports-loader?file,parse=helpers.parse&#39;
        }
      ]
    },
    plugins: [
      new webpack.ProvidePlugin({
        join: [&#39;lodash&#39;, &#39;join&#39;]
      })
    ]
  };
</code></pre>

<p>如此之后，我们可以在代码中添加一些逻辑，根据条件去加载新的&nbsp;<code>polyfills.bundle.js</code>&nbsp;文件。你该如何决定，依赖于那些需要支持的技术以及浏览器。我们将做一些简单的试验，来确定是否需要引入这些 polyfills：</p>

<p><strong>dist/index.html</strong></p>

<pre>
<code>  &lt;!doctype html&gt;
  &lt;html&gt;
    &lt;head&gt;
      &lt;title&gt;Getting Started&lt;/title&gt;
+     &lt;script&gt;
+       var modernBrowser = (
+         &#39;fetch&#39; in window &amp;&amp;
+         &#39;assign&#39; in Object
+       );
+
+       if ( !modernBrowser ) {
+         var scriptElement = document.createElement(&#39;script&#39;);
+
+         scriptElement.async = false;
+         scriptElement.src = &#39;/polyfills.bundle.js&#39;;
+         document.head.appendChild(scriptElement);
+       }
+     &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
      &lt;script src=&quot;index.bundle.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
  &lt;/html&gt;
</code></pre>

<p>现在，我们能在 entry 入口文件中，通过&nbsp;<code>fetch</code>&nbsp;获取一些数据：</p>

<p><strong>src/index.js</strong></p>

<pre>
<code>  function component() {
    var element = document.createElement(&#39;div&#39;);

    element.innerHTML = join([&#39;Hello&#39;, &#39;webpack&#39;], &#39; &#39;);

    return element;
  }

  document.body.appendChild(component());
+
+ fetch(&#39;https://jsonplaceholder.typicode.com/users&#39;)
+   .then(response =&gt; response.json())
+   .then(json =&gt; {
+     console.log(&#39;We retrieved some data! AND we\&#39;re confident it will work on a variety of browser distributions.&#39;)
+     console.log(json)
+   })
+   .catch(error =&gt; console.error(&#39;Something went wrong when fetching this data: &#39;, error))
</code></pre>

<p>当我们开始执行构建时，<code>polyfills.bundle.js</code>&nbsp;文件将会被载入到浏览器中，然后所有代码将正确无误的在浏览器中执行。请注意，以上的这些设定可能还会有所改进，我们只是对于如何解决「将 polyfills 提供给那些需要引入它的用户」这个问题，向你提供一个很棒的想法。</p>

<h2>深度优化</h2>

<p><code>babel-preset-env</code>&nbsp;package 使用&nbsp;<a href="https://github.com/browserslist/browserslist">browserslist</a>&nbsp;来转译那些你浏览器中不支持的特性。这里预设了&nbsp;<code>useBuiltIns</code>选项，默认值是&nbsp;<code>false</code>，能将你的全局&nbsp;<code>babel-polyfill</code>&nbsp;导入方式，改进为更细粒度的&nbsp;<code>import</code>&nbsp;格式：</p>

<pre>
<code>import &#39;core-js/modules/es7.string.pad-start&#39;;
import &#39;core-js/modules/es7.string.pad-end&#39;;
import &#39;core-js/modules/web.timers&#39;;
import &#39;core-js/modules/web.immediate&#39;;
import &#39;core-js/modules/web.dom.iterable&#39;;
</code></pre>

<p>查看<a href="https://github.com/babel/babel-preset-env">仓库</a>以获取更多信息。</p>

<h2>Node 内置</h2>

<p>像&nbsp;<code>process</code>&nbsp;这种 Node 内置模块，能直接根据配置文件(configuration file)进行正确的 polyfills，且不需要任何特定的 loaders 或者 plugins。查看&nbsp;<a href="https://www.webpackjs.com/configuration/node">node 配置页面</a>获取更多信息。</p>

<h2>其他工具</h2>

<p>还有一些其他的工具能够帮助我们处理这些老旧的模块。</p>

<p><a href="https://www.webpackjs.com/loaders/script-loader/"><code>script-loader</code></a>&nbsp;会在全局上下文中对代码进行取值，类似于通过一个&nbsp;<code>script</code>&nbsp;标签引入脚本。在这种模式下，每一个标准的库(library)都应该能正常运行。<code>require</code>,&nbsp;<code>module</code>&nbsp;等的取值是 undefined。</p>

<blockquote>
<p>当使用&nbsp;<code>script-loader</code>&nbsp;时，模块将转化为字符串，然后添加到 bundle 中。它不会被&nbsp;<code>webpack</code>&nbsp;压缩，所以你应该选择一个 min 版本。同时，使用此 loader 将不会有&nbsp;<code>devtool</code>&nbsp;的支持。</p>
</blockquote>

<p>这些老旧的模块如果没有 AMD/CommonJS 规范版本，但你也想将他们加入&nbsp;<code>dist</code>&nbsp;文件，你可以使用&nbsp;<a href="https://www.webpackjs.com/configuration/module/#module-noparse"><code>noParse</code></a>来标识出这个模块。这样就能使 webpack 将引入这些模块，但是不进行转化(parse)，以及不解析(resolve)&nbsp;<code>require()</code>&nbsp;和&nbsp;<code>import</code>&nbsp;语句。这个实践将提升构建性能。</p>

<blockquote>
<p>例如&nbsp;<code>ProvidePlugin</code>，任何需要 AST 的功能，都无法正常运行。</p>
</blockquote>

<p>最后，有一些模块支持不同的<a href="https://www.webpackjs.com/concepts/modules">模块格式</a>，比如 AMD 规范、CommonJS 规范和遗留模块(legacy)。在大多数情况下，他们首先检查<code>define</code>，然后使用一些古怪的代码来导出一些属性。在这些情况下，可以通过<a href="https://www.webpackjs.com/loaders/imports-loader/"><code>imports-loader</code></a>设置&nbsp;<code>define=&gt;false</code>&nbsp;来强制 CommonJS 路径。</p>

<hr />
<blockquote>
<p>译者注：shim 是一个库(library)，它将一个新的 API 引入到一个旧的环境中，而且仅靠旧的环境中已有的手段实现。polyfill 就是一个用在浏览器 API 上的 shim。我们通常的做法是先检查当前浏览器是否支持某个 API，如果不支持的话就加载对应的 polyfill。然后新旧浏览器就都可以使用这个 API 了。</p>
</blockquote>

<hr />
<blockquote>
<p>原文：<a href="https://webpack.js.org/guides/shimming/">https://webpack.js.org/guides/shimming/</a></p>
</blockquote>

<hr />
<h3>进一步阅读</h3>

<ul>
	<li><a href="https://hackernoon.com/10-things-i-learned-making-the-fastest-site-in-the-world-18a0e1cdf4a7#c665">Reward modern browser users script</a></li>
	<li><a href="https://github.com/babel/babel-preset-env#usebuiltins">useBuiltIns in babel-preset-env</a></li>
</ul>
