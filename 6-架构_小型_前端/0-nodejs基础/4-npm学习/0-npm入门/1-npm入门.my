<h1>NPM 使用介绍</h1>

<p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p>

<ul>
	<li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li>
	<li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li>
	<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li>
</ul>

<p>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入&nbsp;<strong>&quot;npm -v&quot;&nbsp;</strong>来测试是否成功安装。命令如下，出现版本提示表示安装成功:</p>

<pre>
$ npm -v
2.3.0</pre>

<p>如果你安装的是旧版本的 npm，可以很容易得通过 npm 命令来升级，命令如下：</p>

<pre>
$ sudo npm install npm -g
/usr/local/bin/npm -&gt; /usr/local/lib/node_modules/npm/bin/npm-cli.js
npm@2.14.2 /usr/local/lib/node_modules/npm</pre>

<p>如果是 Window 系统使用以下命令即可：</p>

<pre>
npm install npm -g</pre>

<blockquote>
<p>使用淘宝镜像的命令：</p>

<pre>
cnpm install npm -g</pre>
</blockquote>

<hr />
<h2>使用 npm 命令安装模块</h2>

<p>npm 安装 Node.js 模块语法格式如下：</p>

<pre>
$ npm install &lt;Module Name&gt;</pre>

<p>以下实例，我们使用 npm 命令安装常用的 Node.js web框架模块&nbsp;<strong>express</strong>:</p>

<pre>
$ npm install express</pre>

<p>安装好之后，express 包就放在了工程目录下的 node_modules 目录中，因此在代码中只需要通过&nbsp;<strong>require(&#39;express&#39;)</strong>&nbsp;的方式就好，无需指定第三方包路径。</p>

<pre>
var express = require(&#39;express&#39;);</pre>

<hr />
<h2>全局安装与本地安装</h2>

<p>npm 的包安装分为本地安装（local）、全局安装（global）两种，从敲的命令行来看，差别只是有没有-g而已，比如</p>

<pre>
npm install express      # 本地安装
npm install express -g   # 全局安装</pre>

<p>如果出现以下错误：</p>

<pre>
npm err! Error: connect ECONNREFUSED 127.0.0.1:8087 </pre>

<p>解决办法为：</p>

<pre>
$ npm config set proxy null</pre>

<h3>本地安装</h3>

<ul>
	<li>1. 将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。</li>
	<li>2. 可以通过 require() 来引入本地安装的包。</li>
</ul>

<h3>全局安装</h3>

<ul>
	<li>1. 将安装包放在 /usr/local 下或者你 node 的安装目录。</li>
	<li>2. 可以直接在命令行里使用。</li>
</ul>

<p>如果你希望具备两者功能，则需要在两个地方安装它或使用&nbsp;<strong>npm link</strong>。</p>

<p>接下来我们使用全局方式安装 express</p>

<pre>
$ npm install express -g</pre>

<p>安装过程输出如下内容，第一行输出了模块的版本号及安装位置。</p>

<pre>
express@4.13.3 node_modules/express
├── escape-html@1.0.2
├── range-parser@1.0.2
├── merge-descriptors@1.0.0
├── array-flatten@1.1.1
├── cookie@0.1.3
├── utils-merge@1.0.0
├── parseurl@1.3.0
├── cookie-signature@1.0.6
├── methods@1.1.1
├── fresh@0.3.0
├── vary@1.0.1
├── path-to-regexp@0.1.7
├── content-type@1.0.1
├── etag@1.7.0
├── serve-static@1.10.0
├── content-disposition@0.5.0
├── depd@1.0.1
├── qs@4.0.0
├── finalhandler@0.4.0 (unpipe@1.0.0)
├── on-finished@2.3.0 (ee-first@1.1.1)
├── proxy-addr@1.0.8 (forwarded@0.1.0, ipaddr.js@1.0.1)
├── debug@2.2.0 (ms@0.7.1)
├── type-is@1.6.8 (media-typer@0.3.0, mime-types@2.1.6)
├── accepts@1.2.12 (negotiator@0.5.3, mime-types@2.1.6)
└── send@0.13.0 (destroy@1.0.3, statuses@1.2.1, ms@0.7.1, mime@1.3.4, http-errors@1.3.1)</pre>

<h3>查看安装信息</h3>

<p>你可以使用以下命令来查看所有全局安装的模块：</p>

<pre>
$ npm list -g

├─┬ cnpm@4.3.2
│ ├── auto-correct@1.0.0
│ ├── bagpipe@0.3.5
│ ├── colors@1.1.2
│ ├─┬ commander@2.9.0
│ │ └── graceful-readlink@1.0.1
│ ├─┬ cross-spawn@0.2.9
│ │ └── lru-cache@2.7.3
&hellip;&hellip;</pre>

<p>如果要查看某个模块的版本号，可以使用命令如下：</p>

<pre>
$ npm list grunt

projectName@projectVersion /path/to/project/folder
└── grunt@0.4.1</pre>

<hr />
<h2>使用 package.json</h2>

<p>package.json 位于模块的目录下，用于定义包的属性。接下来让我们来看下 express 包的 package.json 文件，位于 node_modules/express/package.json 内容：</p>

<pre>
{
  &quot;name&quot;: &quot;express&quot;,
  &quot;description&quot;: &quot;Fast, unopinionated, minimalist web framework&quot;,
  &quot;version&quot;: &quot;4.13.3&quot;,
  &quot;author&quot;: {
    &quot;name&quot;: &quot;TJ Holowaychuk&quot;,
    &quot;email&quot;: &quot;tj@vision-media.ca&quot;
  },
  &quot;contributors&quot;: [
    {
      &quot;name&quot;: &quot;Aaron Heckmann&quot;,
      &quot;email&quot;: &quot;aaron.heckmann+github@gmail.com&quot;
    },
    {
      &quot;name&quot;: &quot;Ciaran Jessup&quot;,
      &quot;email&quot;: &quot;ciaranj@gmail.com&quot;
    },
    {
      &quot;name&quot;: &quot;Douglas Christopher Wilson&quot;,
      &quot;email&quot;: &quot;doug@somethingdoug.com&quot;
    },
    {
      &quot;name&quot;: &quot;Guillermo Rauch&quot;,
      &quot;email&quot;: &quot;rauchg@gmail.com&quot;
    },
    {
      &quot;name&quot;: &quot;Jonathan Ong&quot;,
      &quot;email&quot;: &quot;me@jongleberry.com&quot;
    },
    {
      &quot;name&quot;: &quot;Roman Shtylman&quot;,
      &quot;email&quot;: &quot;shtylman+expressjs@gmail.com&quot;
    },
    {
      &quot;name&quot;: &quot;Young Jae Sim&quot;,
      &quot;email&quot;: &quot;hanul@hanul.me&quot;
    }
  ],
  &quot;license&quot;: &quot;MIT&quot;,
  &quot;repository&quot;: {
    &quot;type&quot;: &quot;git&quot;,
    &quot;url&quot;: &quot;git+https://github.com/strongloop/express.git&quot;
  },
  &quot;homepage&quot;: &quot;http://expressjs.com/&quot;,
  &quot;keywords&quot;: [
    &quot;express&quot;,
    &quot;framework&quot;,
    &quot;sinatra&quot;,
    &quot;web&quot;,
    &quot;rest&quot;,
    &quot;restful&quot;,
    &quot;router&quot;,
    &quot;app&quot;,
    &quot;api&quot;
  ],
  &quot;dependencies&quot;: {
    &quot;accepts&quot;: &quot;~1.2.12&quot;,
    &quot;array-flatten&quot;: &quot;1.1.1&quot;,
    &quot;content-disposition&quot;: &quot;0.5.0&quot;,
    &quot;content-type&quot;: &quot;~1.0.1&quot;,
    &quot;cookie&quot;: &quot;0.1.3&quot;,
    &quot;cookie-signature&quot;: &quot;1.0.6&quot;,
    &quot;debug&quot;: &quot;~2.2.0&quot;,
    &quot;depd&quot;: &quot;~1.0.1&quot;,
    &quot;escape-html&quot;: &quot;1.0.2&quot;,
    &quot;etag&quot;: &quot;~1.7.0&quot;,
    &quot;finalhandler&quot;: &quot;0.4.0&quot;,
    &quot;fresh&quot;: &quot;0.3.0&quot;,
    &quot;merge-descriptors&quot;: &quot;1.0.0&quot;,
    &quot;methods&quot;: &quot;~1.1.1&quot;,
    &quot;on-finished&quot;: &quot;~2.3.0&quot;,
    &quot;parseurl&quot;: &quot;~1.3.0&quot;,
    &quot;path-to-regexp&quot;: &quot;0.1.7&quot;,
    &quot;proxy-addr&quot;: &quot;~1.0.8&quot;,
    &quot;qs&quot;: &quot;4.0.0&quot;,
    &quot;range-parser&quot;: &quot;~1.0.2&quot;,
    &quot;send&quot;: &quot;0.13.0&quot;,
    &quot;serve-static&quot;: &quot;~1.10.0&quot;,
    &quot;type-is&quot;: &quot;~1.6.6&quot;,
    &quot;utils-merge&quot;: &quot;1.0.0&quot;,
    &quot;vary&quot;: &quot;~1.0.1&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;after&quot;: &quot;0.8.1&quot;,
    &quot;ejs&quot;: &quot;2.3.3&quot;,
    &quot;istanbul&quot;: &quot;0.3.17&quot;,
    &quot;marked&quot;: &quot;0.3.5&quot;,
    &quot;mocha&quot;: &quot;2.2.5&quot;,
    &quot;should&quot;: &quot;7.0.2&quot;,
    &quot;supertest&quot;: &quot;1.0.1&quot;,
    &quot;body-parser&quot;: &quot;~1.13.3&quot;,
    &quot;connect-redis&quot;: &quot;~2.4.1&quot;,
    &quot;cookie-parser&quot;: &quot;~1.3.5&quot;,
    &quot;cookie-session&quot;: &quot;~1.2.0&quot;,
    &quot;express-session&quot;: &quot;~1.11.3&quot;,
    &quot;jade&quot;: &quot;~1.11.0&quot;,
    &quot;method-override&quot;: &quot;~2.3.5&quot;,
    &quot;morgan&quot;: &quot;~1.6.1&quot;,
    &quot;multiparty&quot;: &quot;~4.1.2&quot;,
    &quot;vhost&quot;: &quot;~3.0.1&quot;
  },
  &quot;engines&quot;: {
    &quot;node&quot;: &quot;&gt;= 0.10.0&quot;
  },
  &quot;files&quot;: [
    &quot;LICENSE&quot;,
    &quot;History.md&quot;,
    &quot;Readme.md&quot;,
    &quot;index.js&quot;,
    &quot;lib/&quot;
  ],
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/&quot;,
    &quot;test-ci&quot;: &quot;istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/&quot;,
    &quot;test-cov&quot;: &quot;istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks test/ test/acceptance/&quot;,
    &quot;test-tap&quot;: &quot;mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/&quot;
  },
  &quot;gitHead&quot;: &quot;ef7ad681b245fba023843ce94f6bcb8e275bbb8e&quot;,
  &quot;bugs&quot;: {
    &quot;url&quot;: &quot;https://github.com/strongloop/express/issues&quot;
  },
  &quot;_id&quot;: &quot;express@4.13.3&quot;,
  &quot;_shasum&quot;: &quot;ddb2f1fb4502bf33598d2b032b037960ca6c80a3&quot;,
  &quot;_from&quot;: &quot;express@*&quot;,
  &quot;_npmVersion&quot;: &quot;1.4.28&quot;,
  &quot;_npmUser&quot;: {
    &quot;name&quot;: &quot;dougwilson&quot;,
    &quot;email&quot;: &quot;doug@somethingdoug.com&quot;
  },
  &quot;maintainers&quot;: [
    {
      &quot;name&quot;: &quot;tjholowaychuk&quot;,
      &quot;email&quot;: &quot;tj@vision-media.ca&quot;
    },
    {
      &quot;name&quot;: &quot;jongleberry&quot;,
      &quot;email&quot;: &quot;jonathanrichardong@gmail.com&quot;
    },
    {
      &quot;name&quot;: &quot;dougwilson&quot;,
      &quot;email&quot;: &quot;doug@somethingdoug.com&quot;
    },
    {
      &quot;name&quot;: &quot;rfeng&quot;,
      &quot;email&quot;: &quot;enjoyjava@gmail.com&quot;
    },
    {
      &quot;name&quot;: &quot;aredridel&quot;,
      &quot;email&quot;: &quot;aredridel@dinhe.net&quot;
    },
    {
      &quot;name&quot;: &quot;strongloop&quot;,
      &quot;email&quot;: &quot;callback@strongloop.com&quot;
    },
    {
      &quot;name&quot;: &quot;defunctzombie&quot;,
      &quot;email&quot;: &quot;shtylman@gmail.com&quot;
    }
  ],
  &quot;dist&quot;: {
    &quot;shasum&quot;: &quot;ddb2f1fb4502bf33598d2b032b037960ca6c80a3&quot;,
    &quot;tarball&quot;: &quot;http://registry.npmjs.org/express/-/express-4.13.3.tgz&quot;
  },
  &quot;directories&quot;: {},
  &quot;_resolved&quot;: &quot;https://registry.npmjs.org/express/-/express-4.13.3.tgz&quot;,
  &quot;readme&quot;: &quot;ERROR: No README data found!&quot;
}</pre>

<h3>Package.json 属性说明</h3>

<ul>
	<li>
	<p><strong>name</strong>&nbsp;- 包名。</p>
	</li>
	<li>
	<p><strong>version</strong>&nbsp;- 包的版本号。</p>
	</li>
	<li>
	<p><strong>description</strong>&nbsp;- 包的描述。</p>
	</li>
	<li>
	<p><strong>homepage</strong>&nbsp;- 包的官网 url 。</p>
	</li>
	<li>
	<p><strong>author</strong>&nbsp;- 包的作者姓名。</p>
	</li>
	<li>
	<p><strong>contributors</strong>&nbsp;- 包的其他贡献者姓名。</p>
	</li>
	<li>
	<p><strong>dependencies</strong>&nbsp;- 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。</p>
	</li>
	<li>
	<p><strong>repository</strong>&nbsp;- 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。</p>
	</li>
	<li>
	<p><strong>main</strong>&nbsp;- main 字段指定了程序的主入口文件，require(&#39;moduleName&#39;) 就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js。</p>
	</li>
	<li>
	<p><strong>keywords</strong>&nbsp;- 关键字</p>
	</li>
</ul>

<hr />
<h2>卸载模块</h2>

<p>我们可以使用以下命令来卸载 Node.js 模块。</p>

<pre>
$ npm uninstall express</pre>

<p>&nbsp;</p>

<p>卸载后，你可以到 /node_modules/ 目录下查看包是否还存在，或者使用以下命令查看：</p>

<pre>
$ npm ls</pre>

<hr />
<h2>更新模块</h2>

<p>我们可以使用以下命令更新模块：</p>

<pre>
$ npm update express</pre>

<hr />
<h2>搜索模块</h2>

<p>使用以下来搜索模块：</p>

<pre>
$ npm search express</pre>

<hr />
<h2>创建模块</h2>

<p>创建模块，package.json 文件是必不可少的。我们可以使用 NPM 生成 package.json 文件，生成的文件包含了基本的结果。</p>

<pre>
$ npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See `npm help json` for definitive documentation on these fields
and exactly what they do.

Use `npm install &lt;pkg&gt; --save` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
name: (node_modules) runoob                   # 模块名
version: (1.0.0) 
description: Node.js 测试模块(www.runoob.com)  # 描述
entry point: (index.js) 
test command: make test
git repository: https://github.com/runoob/runoob.git  # Github 地址
keywords: 
author: 
license: (ISC) 
About to write to &hellip;&hellip;/node_modules/package.json:      # 生成地址

{
  &quot;name&quot;: &quot;runoob&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;Node.js 测试模块(www.runoob.com)&quot;,
  &hellip;&hellip;
}


Is this ok? (yes) yes</pre>

<p>以上的信息，你需要根据你自己的情况输入。在最后输入 &quot;yes&quot; 后会生成 package.json 文件。</p>

<p>接下来我们可以使用以下命令在 npm 资源库中注册用户（使用邮箱注册）：</p>

<pre>
$ npm adduser
Username: mcmohd
Password:
Email: (this IS public) mcmohd@gmail.com</pre>

<p>接下来我们就用以下命令来发布模块：</p>

<pre>
$ npm publish</pre>

<p>如果你以上的步骤都操作正确，你就可以跟其他模块一样使用 npm 来安装。</p>

<hr />
<h2>版本号</h2>

<p>使用NPM下载和发布代码时都会接触到版本号。NPM使用语义版本号来管理代码，这里简单介绍一下。</p>

<p>语义版本号分为X.Y.Z三位，分别代表主版本号、次版本号和补丁版本号。当代码变更时，版本号按以下原则更新。</p>

<ul>
	<li>如果只是修复bug，需要更新Z位。</li>
	<li>如果是新增了功能，但是向下兼容，需要更新Y位。</li>
	<li>如果有大变动，向下不兼容，需要更新X位。</li>
</ul>

<p>版本号有了这个保证后，在申明第三方包依赖时，除了可依赖于一个固定版本号外，还可依赖于某个范围的版本号。例如&quot;argv&quot;: &quot;0.0.x&quot;表示依赖于0.0.x系列的最新版argv。</p>

<p>NPM支持的所有版本号范围指定方式可以查看<a href="https://npmjs.org/doc/files/package.json.html#dependencies">官方文档</a>。</p>

<hr />
<h2>NPM 常用命令</h2>

<p>除了本章介绍的部分外，NPM还提供了很多功能，package.json里也有很多其它有用的字段。</p>

<p>除了可以在<a href="https://npmjs.org/doc/">npmjs.org/doc/</a>查看官方文档外，这里再介绍一些NPM常用命令。</p>

<p>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。</p>

<ul>
	<li>
	<p>NPM提供了很多命令，例如<code>install</code>和<code>publish</code>，使用<code>npm help</code>可查看所有命令。</p>
	</li>
	<li>
	<p>使用<code>npm help &lt;command&gt;</code>可查看某条命令的详细帮助，例如<code>npm help install</code>。</p>
	</li>
	<li>
	<p>在<code>package.json</code>所在目录下使用<code>npm install . -g</code>可先在本地安装当前命令行程序，可用于发布前的本地测试。</p>
	</li>
	<li>
	<p>使用<code>npm update &lt;package&gt;</code>可以把当前目录下<code>node_modules</code>子目录里边的对应模块更新至最新版本。</p>
	</li>
	<li>
	<p>使用<code>npm update &lt;package&gt; -g</code>可以把全局安装的对应命令行程序更新至最新版。</p>
	</li>
	<li>
	<p>使用<code>npm cache clear</code>可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。</p>
	</li>
	<li>
	<p>使用<code>npm unpublish &lt;package&gt;@&lt;version&gt;</code>可以撤销发布自己发布过的某个版本代码。</p>
	</li>
</ul>

<hr />
<h2>使用淘宝 NPM 镜像</h2>

<p>大家都知道国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。</p>

<p>淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p>

<p>你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:</p>

<pre>
$ npm install -g cnpm --registry=https://registry.npm.taobao.org</pre>

<p>这样就可以使用 cnpm 命令来安装模块了：</p>

<pre>
$ cnpm install [name]</pre>

<p>更多信息可以查阅：<a href="http://npm.taobao.org/" target="_blank">http://npm.taobao.org/</a>。</p>
