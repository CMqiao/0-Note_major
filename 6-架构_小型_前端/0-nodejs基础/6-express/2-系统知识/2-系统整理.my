<h1>Express框架</h1>

<p>来自<a href="http://javascript.ruanyifeng.com/">《JavaScript 标准参考教程（alpha）》</a>，by 阮一峰</p>

<h2>目录</h2>

<ul>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc0">概述</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc1">运行原理</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc2">底层：http模块</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc3">什么是中间件</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc4">use方法</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc5">Express的方法</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc6">all方法和HTTP动词方法</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc7">set方法</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc8">response对象</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc9">requst对象</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc10">搭建HTTPs服务器</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc11">项目开发实例</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc12">编写启动脚本</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc13">配置路由</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc14">静态网页模板</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc15">动态网页模板</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc16">安装模板引擎</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc17">新建数据脚本</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc18">新建网页模板</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc19">渲染模板</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc20">指定静态文件目录</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc21">Express.Router用法</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc22">基本用法</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc23">router.route方法</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc24">router中间件</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc25">对路径参数的处理</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc26">app.route</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc27">上传文件</a></li>
	<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc28">参考链接</a></li>
</ul>

<h2>概述</h2>

<p>Express是目前最流行的基于Node.js的Web开发框架，可以快速地搭建一个完整功能的网站。</p>

<p>Express上手非常简单，首先新建一个项目目录，假定叫做hello-world。</p>

<pre>
<code>$ mkdir hello-world
</code></pre>

<p>进入该目录，新建一个package.json文件，内容如下。</p>

<pre>
<code>{
  &quot;name&quot;: &quot;hello-world&quot;,
  &quot;description&quot;: &quot;hello world test app&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;private&quot;: true,
  &quot;dependencies&quot;: {
    &quot;express&quot;: &quot;4.x&quot;
  }
}
</code></pre>

<p>上面代码定义了项目的名称、描述、版本等，并且指定需要4.0版本以上的Express。</p>

<p>然后，就可以安装了。</p>

<pre>
<code>$ npm install
</code></pre>

<p>执行上面的命令以后，在项目根目录下，新建一个启动文件，假定叫做index.js。</p>

<pre>
<code>var express = require(&#39;express&#39;);
var app = express();

app.use(express.static(__dirname + &#39;/public&#39;));

app.listen(8080);
</code></pre>

<p>然后，运行上面的启动脚本。</p>

<pre>
<code>$ node index
</code></pre>

<p>现在就可以访问<code>http://localhost:8080</code>，它会在浏览器中打开当前目录的public子目录（严格来说，是打开public目录的index.html文件）。如果public目录之中有一个图片文件<code>my_image.png</code>，那么可以用<code>http://localhost:8080/my_image.png</code>访问该文件。</p>

<p>你也可以在index.js之中，生成动态网页。</p>

<pre>
<code>// index.js

var express = require(&#39;express&#39;);
var app = express();
app.get(&#39;/&#39;, function (req, res) {
  res.send(&#39;Hello world!&#39;);
});
app.listen(3000);
</code></pre>

<p>然后，在命令行下运行启动脚本，就可以在浏览器中访问项目网站了。</p>

<pre>
<code>$ node index
</code></pre>

<p>上面代码会在本机的3000端口启动一个网站，网页显示Hello World。</p>

<p>启动脚本index.js的<code>app.get</code>方法，用于指定不同的访问路径所对应的回调函数，这叫做&ldquo;路由&rdquo;（routing）。上面代码只指定了根目录的回调函数，因此只有一个路由记录。实际应用中，可能有多个路由记录。</p>

<pre>
<code>// index.js

var express = require(&#39;express&#39;);
var app = express();

app.get(&#39;/&#39;, function (req, res) {
  res.send(&#39;Hello world!&#39;);
});
app.get(&#39;/customer&#39;, function(req, res){
  res.send(&#39;customer page&#39;);
});
app.get(&#39;/admin&#39;, function(req, res){
  res.send(&#39;admin page&#39;);
});

app.listen(3000);
</code></pre>

<p>这时，最好就把路由放到一个单独的文件中，比如新建一个routes子目录。</p>

<pre>
<code>// routes/index.js

module.exports = function (app) {
  app.get(&#39;/&#39;, function (req, res) {
    res.send(&#39;Hello world&#39;);
  });
  app.get(&#39;/customer&#39;, function(req, res){
    res.send(&#39;customer page&#39;);
  });
  app.get(&#39;/admin&#39;, function(req, res){
    res.send(&#39;admin page&#39;);
  });
};
</code></pre>

<p>然后，原来的index.js就变成下面这样。</p>

<pre>
<code>// index.js
var express = require(&#39;express&#39;);
var app = express();
var routes = require(&#39;./routes&#39;)(app);
app.listen(3000);
</code></pre>

<h2>运行原理</h2>

<h3>底层：http模块</h3>

<p>Express框架建立在node.js内置的http模块上。http模块生成服务器的原始代码如下。</p>

<pre>
<code>var http = require(&quot;http&quot;);

var app = http.createServer(function(request, response) {
  response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
  response.end(&quot;Hello world!&quot;);
});

app.listen(3000, &quot;localhost&quot;);
</code></pre>

<p>上面代码的关键是http模块的createServer方法，表示生成一个HTTP服务器实例。该方法接受一个回调函数，该回调函数的参数，分别为代表HTTP请求和HTTP回应的request对象和response对象。</p>

<p>Express框架的核心是对http模块的再包装。上面的代码用Express改写如下。</p>

<pre>
<code>var express = require(&#39;express&#39;);
var app = express();

app.get(&#39;/&#39;, function (req, res) {
  res.send(&#39;Hello world!&#39;);
});

app.listen(3000);
</code></pre>

<p>比较两段代码，可以看到它们非常接近。原来是用<code>http.createServer</code>方法新建一个app实例，现在则是用Express的构造方法，生成一个Epress实例。两者的回调函数都是相同的。Express框架等于在http模块之上，加了一个中间层。</p>

<h3>什么是中间件</h3>

<p>简单说，中间件（middleware）就是处理HTTP请求的函数。它最大的特点就是，一个中间件处理完，再传递给下一个中间件。App实例在运行过程中，会调用一系列的中间件。</p>

<p>每个中间件可以从App实例，接收三个参数，依次为request对象（代表HTTP请求）、response对象（代表HTTP回应），next回调函数（代表下一个中间件）。每个中间件都可以对HTTP请求（request对象）进行加工，并且决定是否调用next方法，将request对象再传给下一个中间件。</p>

<p>一个不进行任何操作、只传递request对象的中间件，就是下面这样。</p>

<pre>
<code>function uselessMiddleware(req, res, next) {
  next();
}
</code></pre>

<p>上面代码的next就是下一个中间件。如果它带有参数，则代表抛出一个错误，参数为错误文本。</p>

<pre>
<code>function uselessMiddleware(req, res, next) {
  next(&#39;出错了！&#39;);
}
</code></pre>

<p>抛出错误以后，后面的中间件将不再执行，直到发现一个错误处理函数为止。</p>

<h3>use方法</h3>

<p>use是express注册中间件的方法，它返回一个函数。下面是一个连续调用两个中间件的例子。</p>

<pre>
<code>var express = require(&quot;express&quot;);
var http = require(&quot;http&quot;);

var app = express();

app.use(function(request, response, next) {
  console.log(&quot;In comes a &quot; + request.method + &quot; to &quot; + request.url);
  next();
});

app.use(function(request, response) {
  response.writeHead(200, { &quot;Content-Type&quot;: &quot;text/plain&quot; });
  response.end(&quot;Hello world!\n&quot;);
});

http.createServer(app).listen(1337);
</code></pre>

<p>上面代码使用<code>app.use</code>方法，注册了两个中间件。收到HTTP请求后，先调用第一个中间件，在控制台输出一行信息，然后通过<code>next</code>方法，将执行权传给第二个中间件，输出HTTP回应。由于第二个中间件没有调用<code>next</code>方法，所以request对象就不再向后传递了。</p>

<p><code>use</code>方法内部可以对访问路径进行判断，据此就能实现简单的路由，根据不同的请求网址，返回不同的网页内容。</p>

<pre>
<code>var express = require(&quot;express&quot;);
var http = require(&quot;http&quot;);

var app = express();

app.use(function(request, response, next) {
  if (request.url == &quot;/&quot;) {
    response.writeHead(200, { &quot;Content-Type&quot;: &quot;text/plain&quot; });
    response.end(&quot;Welcome to the homepage!\n&quot;);
  } else {
    next();
  }
});

app.use(function(request, response, next) {
  if (request.url == &quot;/about&quot;) {
    response.writeHead(200, { &quot;Content-Type&quot;: &quot;text/plain&quot; });
  } else {
    next();
  }
});

app.use(function(request, response) {
  response.writeHead(404, { &quot;Content-Type&quot;: &quot;text/plain&quot; });
  response.end(&quot;404 error!\n&quot;);
});

http.createServer(app).listen(1337);
</code></pre>

<p>上面代码通过<code>request.url</code>属性，判断请求的网址，从而返回不同的内容。注意，<code>app.use</code>方法一共登记了三个中间件，只要请求路径匹配，就不会将执行权交给下一个中间件。因此，最后一个中间件会返回404错误，即前面的中间件都没匹配请求路径，找不到所要请求的资源。</p>

<p>除了在回调函数内部判断请求的网址，use方法也允许将请求网址写在第一个参数。这代表，只有请求路径匹配这个参数，后面的中间件才会生效。无疑，这样写更加清晰和方便。</p>

<pre>
<code>app.use(&#39;/path&#39;, someMiddleware);
</code></pre>

<p>上面代码表示，只对根目录的请求，调用某个中间件。</p>

<p>因此，上面的代码可以写成下面的样子。</p>

<pre>
<code>var express = require(&quot;express&quot;);
var http = require(&quot;http&quot;);

var app = express();

app.use(&quot;/home&quot;, function(request, response, next) {
  response.writeHead(200, { &quot;Content-Type&quot;: &quot;text/plain&quot; });
  response.end(&quot;Welcome to the homepage!\n&quot;);
});

app.use(&quot;/about&quot;, function(request, response, next) {
  response.writeHead(200, { &quot;Content-Type&quot;: &quot;text/plain&quot; });
  response.end(&quot;Welcome to the about page!\n&quot;);
});

app.use(function(request, response) {
  response.writeHead(404, { &quot;Content-Type&quot;: &quot;text/plain&quot; });
  response.end(&quot;404 error!\n&quot;);
});

http.createServer(app).listen(1337);
</code></pre>

<h2>Express的方法</h2>

<h3>all方法和HTTP动词方法</h3>

<p>针对不同的请求，Express提供了use方法的一些别名。比如，上面代码也可以用别名的形式来写。</p>

<pre>
<code>var express = require(&quot;express&quot;);
var http = require(&quot;http&quot;);
var app = express();

app.all(&quot;*&quot;, function(request, response, next) {
  response.writeHead(200, { &quot;Content-Type&quot;: &quot;text/plain&quot; });
  next();
});

app.get(&quot;/&quot;, function(request, response) {
  response.end(&quot;Welcome to the homepage!&quot;);
});

app.get(&quot;/about&quot;, function(request, response) {
  response.end(&quot;Welcome to the about page!&quot;);
});

app.get(&quot;*&quot;, function(request, response) {
  response.end(&quot;404!&quot;);
});

http.createServer(app).listen(1337);</code></pre>

<p>上面代码的all方法表示，所有请求都必须通过该中间件，参数中的&ldquo;*&rdquo;表示对所有路径有效。get方法则是只有GET动词的HTTP请求通过该中间件，它的第一个参数是请求的路径。由于get方法的回调函数没有调用next方法，所以只要有一个中间件被调用了，后面的中间件就不会再被调用了。</p>

<p>除了get方法以外，Express还提供post、put、delete方法，即HTTP动词都是Express的方法。</p>

<p>这些方法的第一个参数，都是请求的路径。除了绝对匹配以外，Express允许模式匹配。</p>

<pre>
<code>app.get(&quot;/hello/:who&quot;, function(req, res) {
  res.end(&quot;Hello, &quot; + req.params.who + &quot;.&quot;);
});</code></pre>

<p>上面代码将匹配&ldquo;/hello/alice&rdquo;网址，网址中的alice将被捕获，作为req.params.who属性的值。需要注意的是，捕获后需要对网址进行检查，过滤不安全字符，上面的写法只是为了演示，生产中不应这样直接使用用户提供的值。</p>

<p>如果在模式参数后面加上问号，表示该参数可选。</p>

<pre>
<code>app.get(&#39;/hello/:who?&#39;,function(req,res) {
	if(req.params.id) {
    	res.end(&quot;Hello, &quot; + req.params.who + &quot;.&quot;);
	}
    else {
    	res.send(&quot;Hello, Guest.&quot;);
	}
});</code></pre>

<p>下面是一些更复杂的模式匹配的例子。</p>

<pre>
<code>app.get(&#39;/forum/:fid/thread/:tid&#39;, middleware)

// 匹配/commits/71dbb9c
// 或/commits/71dbb9c..4c084f9这样的git格式的网址
app.get(/^\/commits\/(\w+)(?:\.\.(\w+))?$/, function(req, res){
  var from = req.params[0];
  var to = req.params[1] || &#39;HEAD&#39;;
  res.send(&#39;commit range &#39; + from + &#39;..&#39; + to);
});</code></pre>

<h3>set方法</h3>

<p>set方法用于指定变量的值。</p>

<pre>
<code>app.set(&quot;views&quot;, __dirname + &quot;/views&quot;);

app.set(&quot;view engine&quot;, &quot;jade&quot;);</code></pre>

<p>上面代码使用set方法，为系统变量&ldquo;views&rdquo;和&ldquo;view engine&rdquo;指定值。</p>

<h3>response对象</h3>

<p><strong>（1）response.redirect方法</strong></p>

<p>response.redirect方法允许网址的重定向。</p>

<pre>
<code>response.redirect(&quot;/hello/anime&quot;);
response.redirect(&quot;http://www.example.com&quot;);
response.redirect(301, &quot;http://www.example.com&quot;);</code></pre>

<p><strong>（2）response.sendFile方法</strong></p>

<p>response.sendFile方法用于发送文件。</p>

<pre>
<code>response.sendFile(&quot;/path/to/anime.mp4&quot;);</code></pre>

<p><strong>（3）response.render方法</strong></p>

<p>response.render方法用于渲染网页模板。</p>

<pre>
<code>app.get(&quot;/&quot;, function(request, response) {
  response.render(&quot;index&quot;, { message: &quot;Hello World&quot; });
});</code></pre>

<p>上面代码使用render方法，将message变量传入index模板，渲染成HTML网页。</p>

<h3>requst对象</h3>

<p><strong>（1）request.ip</strong></p>

<p>request.ip属性用于获得HTTP请求的IP地址。</p>

<p><strong>（2）request.files</strong></p>

<p>request.files用于获取上传的文件。</p>

<h3>搭建HTTPs服务器</h3>

<p>使用Express搭建HTTPs加密服务器，也很简单。</p>

<pre>
<code>var fs = require(&#39;fs&#39;);
var options = {
  key: fs.readFileSync(&#39;E:/ssl/myserver.key&#39;),
  cert: fs.readFileSync(&#39;E:/ssl/myserver.crt&#39;),
  passphrase: &#39;1234&#39;
};

var https = require(&#39;https&#39;);
var express = require(&#39;express&#39;);
var app = express();

app.get(&#39;/&#39;, function(req, res){
  res.send(&#39;Hello World Expressjs&#39;);
});

var server = https.createServer(options, app);
server.listen(8084);
console.log(&#39;Server is running on port 8084&#39;);
</code></pre>

<h2>项目开发实例</h2>

<h3>编写启动脚本</h3>

<p>上一节使用express命令自动建立项目，也可以不使用这个命令，手动新建所有文件。</p>

<p>先建立一个项目目录（假定这个目录叫做demo）。进入该目录，新建一个package.json文件，写入项目的配置信息。</p>

<pre>
<code>{
   &quot;name&quot;: &quot;demo&quot;,
   &quot;description&quot;: &quot;My First Express App&quot;,
   &quot;version&quot;: &quot;0.0.1&quot;,
   &quot;dependencies&quot;: {
      &quot;express&quot;: &quot;3.x&quot;
   }
}</code></pre>

<p>在项目目录中，新建文件app.js。项目的代码就放在这个文件里面。</p>

<pre>
<code>var express = require(&#39;express&#39;);
var app = express();</code></pre>

<p>上面代码首先加载express模块，赋给变量express。然后，生成express实例，赋给变量app。</p>

<p>接着，设定express实例的参数。</p>

<pre>
<code>// 设定port变量，意为访问端口
app.set(&#39;port&#39;, process.env.PORT || 3000);

// 设定views变量，意为视图存放的目录
app.set(&#39;views&#39;, path.join(__dirname, &#39;views&#39;));

// 设定view engine变量，意为网页模板引擎
app.set(&#39;view engine&#39;, &#39;jade&#39;);

app.use(express.favicon());
app.use(express.logger(&#39;dev&#39;));
app.use(express.bodyParser());
app.use(express.methodOverride());
app.use(app.router);

// 设定静态文件目录，比如本地文件
// 目录为demo/public/images，访问
// 网址则显示为http://localhost:3000/images
app.use(express.static(path.join(__dirname, &#39;public&#39;)));</code></pre>

<p>上面代码中的set方法用于设定内部变量，use方法用于调用express的中间件。</p>

<p>最后，调用实例方法listen，让其监听事先设定的端口（3000）。</p>

<pre>
<code>app.listen(app.get(&#39;port&#39;));</code></pre>

<p>这时，运行下面的命令，就可以在浏览器访问http://127.0.0.1:3000。</p>

<pre>
<code>node app.js</code></pre>

<p>网页提示&ldquo;Cannot GET /&rdquo;，表示没有为网站的根路径指定可以显示的内容。所以，下一步就是配置路由。</p>

<h3>配置路由</h3>

<p>所谓&ldquo;路由&rdquo;，就是指为不同的访问路径，指定不同的处理方法。</p>

<p><strong>（1）指定根路径</strong></p>

<p>在app.js之中，先指定根路径的处理方法。</p>

<pre>
<code>app.get(&#39;/&#39;, function(req, res) {
   res.send(&#39;Hello World&#39;);
});</code></pre>

<p>上面代码的get方法，表示处理客户端发出的GET请求。相应的，还有app.post、app.put、app.del（delete是JavaScript保留字，所以改叫del）方法。</p>

<p>get方法的第一个参数是访问路径，正斜杠（/）就代表根路径；第二个参数是回调函数，它的req参数表示客户端发来的HTTP请求，res参数代表发向客户端的HTTP回应，这两个参数都是对象。在回调函数内部，使用HTTP回应的send方法，表示向浏览器发送一个字符串。然后，运行下面的命令。</p>

<pre>
<code>node app.js</code></pre>

<p>此时，在浏览器中访问http://127.0.0.1:3000，网页就会显示&ldquo;Hello World&rdquo;。</p>

<p>如果需要指定HTTP头信息，回调函数就必须换一种写法，要使用setHeader方法与end方法。</p>

<pre>
<code>app.get(&#39;/&#39;, function(req, res){
  var body = &#39;Hello World&#39;;
  res.setHeader(&#39;Content-Type&#39;, &#39;text/plain&#39;);
  res.setHeader(&#39;Content-Length&#39;, body.length);
  res.end(body);
});</code></pre>

<p><strong>（2）指定特定路径</strong></p>

<p>上面是处理根目录的情况，下面再举一个例子。假定用户访问/api路径，希望返回一个JSON字符串。这时，get可以这样写。</p>

<pre>
<code>app.get(&#39;/api&#39;, function(request, response) {
   response.send({name:&quot;张三&quot;,age:40});
});</code></pre>

<p>上面代码表示，除了发送字符串，send方法还可以直接发送对象。重新启动node以后，再访问路径/api，浏览器就会显示一个JSON对象。</p>

<pre>
<code>{
  &quot;name&quot;: &quot;张三&quot;,
  &quot;age&quot;: 40
}</code></pre>

<p>我们也可以把app.get的回调函数，封装成模块。先在routes目录下面建立一个api.js文件。</p>

<pre>
<code>// routes/api.js

exports.index = function (req, res){
  res.json(200, {name:&quot;张三&quot;,age:40});
}</code></pre>

<p>然后，在app.js中加载这个模块。</p>

<pre>
<code>// app.js

var api = require(&#39;./routes/api&#39;);
app.get(&#39;/api&#39;, api.index);</code></pre>

<p>现在访问时，就会显示与上一次同样的结果。</p>

<p>如果只向浏览器发送简单的文本信息，上面的方法已经够用；但是如果要向浏览器发送复杂的内容，还是应该使用网页模板。</p>

<h3>静态网页模板</h3>

<p>在项目目录之中，建立一个子目录views，用于存放网页模板。</p>

<p>假定这个项目有三个路径：根路径（/）、自我介绍（/about）和文章（/article）。那么，app.js可以这样写：</p>

<pre>
<code>var express = require(&#39;express&#39;);
var app = express();

app.get(&#39;/&#39;, function (req, res) {
    res.sendFile(__dirname + &#39;/views/index.html&#39;);
});

app.get(&#39;/about&#39;, (req, res) =&gt; {
    res.sendFile(__dirname + &#39;/views/about.html&#39;);
});

app.get(&#39;/article&#39;, (req, res) =&gt; {
    res.sendFile(__dirname + &#39;/views/article.html&#39;);
});

app.listen(3000);</code></pre>

<p>上面代码表示，三个路径分别对应views目录中的三个模板：index.html、about.html和article.html。另外，向服务器发送信息的方法，从send变成了sendfile，后者专门用于发送文件。</p>

<p>假定index.html的内容如下：</p>

<pre>
<code>&lt;html&gt;
&lt;head&gt;
   &lt;title&gt;首页&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;h1&gt;Express Demo&lt;/h1&gt;

&lt;footer&gt;
&lt;p&gt;
   &lt;a href=&quot;/&quot;&gt;首页&lt;/a&gt; - &lt;a href=&quot;/about&quot;&gt;自我介绍&lt;/a&gt; - &lt;a href=&quot;/article&quot;&gt;文章&lt;/a&gt;
&lt;/p&gt;
&lt;/footer&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre>

<p>上面代码是一个静态网页。如果想要展示动态内容，就必须使用动态网页模板。</p>

<h2>动态网页模板</h2>

<p>网站真正的魅力在于动态网页，下面我们来看看，如何制作一个动态网页的网站。</p>

<h3>安装模板引擎</h3>

<p>Express支持多种模板引擎，这里采用Handlebars模板引擎的服务器端版本<a href="https://github.com/donpark/hbs">hbs</a>模板引擎。</p>

<p>先安装hbs。</p>

<pre>
<code>npm install hbs --save-dev</code></pre>

<p>上面代码将hbs模块，安装在项目目录的子目录node_modules之中。save-dev参数表示，将依赖关系写入package.json文件。安装以后的package.json文件变成下面这样：</p>

<pre>
<code>// package.json文件

{
  &quot;name&quot;: &quot;demo&quot;,
  &quot;description&quot;: &quot;My First Express App&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;dependencies&quot;: {
    &quot;express&quot;: &quot;3.x&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;hbs&quot;: &quot;~2.3.1&quot;
  }
}</code></pre>

<p>安装模板引擎之后，就要改写app.js。</p>

<pre>
<code>// app.js文件

var express = require(&#39;express&#39;);
var app = express();

// 加载hbs模块
var hbs = require(&#39;hbs&#39;);

// 指定模板文件的后缀名为html
app.set(&#39;view engine&#39;, &#39;html&#39;);

// 运行hbs模块
app.engine(&#39;html&#39;, hbs.__express);

app.get(&#39;/&#39;, function (req, res){
	res.render(&#39;index&#39;);
});

app.get(&#39;/about&#39;, function(req, res) {
	res.render(&#39;about&#39;);
});

app.get(&#39;/article&#39;, function(req, res) {
	res.render(&#39;article&#39;);
});</code></pre>

<p>上面代码改用render方法，对网页模板进行渲染。render方法的参数就是模板的文件名，默认放在子目录views之中，后缀名已经在前面指定为html，这里可以省略。所以，res.render(&lsquo;index&rsquo;) 就是指，把子目录views下面的index.html文件，交给模板引擎hbs渲染。</p>

<h3>新建数据脚本</h3>

<p>渲染是指将数据代入模板的过程。实际运用中，数据都是保存在数据库之中的，这里为了简化问题，假定数据保存在一个脚本文件中。</p>

<p>在项目目录中，新建一个文件blog.js，用于存放数据。blog.js的写法符合CommonJS规范，使得它可以被require语句加载。</p>

<pre>
<code>// blog.js文件

var entries = [
	{&quot;id&quot;:1, &quot;title&quot;:&quot;第一篇&quot;, &quot;body&quot;:&quot;正文&quot;, &quot;published&quot;:&quot;6/2/2013&quot;},
	{&quot;id&quot;:2, &quot;title&quot;:&quot;第二篇&quot;, &quot;body&quot;:&quot;正文&quot;, &quot;published&quot;:&quot;6/3/2013&quot;},
	{&quot;id&quot;:3, &quot;title&quot;:&quot;第三篇&quot;, &quot;body&quot;:&quot;正文&quot;, &quot;published&quot;:&quot;6/4/2013&quot;},
	{&quot;id&quot;:4, &quot;title&quot;:&quot;第四篇&quot;, &quot;body&quot;:&quot;正文&quot;, &quot;published&quot;:&quot;6/5/2013&quot;},
	{&quot;id&quot;:5, &quot;title&quot;:&quot;第五篇&quot;, &quot;body&quot;:&quot;正文&quot;, &quot;published&quot;:&quot;6/10/2013&quot;},
	{&quot;id&quot;:6, &quot;title&quot;:&quot;第六篇&quot;, &quot;body&quot;:&quot;正文&quot;, &quot;published&quot;:&quot;6/12/2013&quot;}
];

exports.getBlogEntries = function (){
   return entries;
}

exports.getBlogEntry = function (id){
   for(var i=0; i &lt; entries.length; i++){
      if(entries[i].id == id) return entries[i];
   }
}</code></pre>

<h3>新建网页模板</h3>

<p>接着，新建模板文件index.html。</p>

<pre>
<code>&lt;!-- views/index.html文件 --&gt;

&lt;h1&gt;文章列表&lt;/h1&gt;

{{#each entries}}
   &lt;p&gt;
      &lt;a href=&quot;/article/{{id}}&quot;&gt;{{title}}&lt;/a&gt;&lt;br/&gt;
      Published: {{published}}
   &lt;/p&gt;
{{/each}}</code></pre>

<p>模板文件about.html。</p>

<pre>
<code>&lt;!-- views/about.html文件 --&gt;

&lt;h1&gt;自我介绍&lt;/h1&gt;

&lt;p&gt;正文&lt;/p&gt;</code></pre>

<p>模板文件article.html。</p>

<pre>
<code>&lt;!-- views/article.html文件 --&gt;

&lt;h1&gt;{{blog.title}}&lt;/h1&gt;
Published: {{blog.published}}

&lt;p/&gt;

{{blog.body}}</code></pre>

<p>可以看到，上面三个模板文件都只有网页主体。因为网页布局是共享的，所以布局的部分可以单独新建一个文件layout.html。</p>

<pre>
<code>&lt;!-- views/layout.html文件 --&gt;

&lt;html&gt;

&lt;head&gt;
   &lt;title&gt;{{title}}&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;

	{{{body}}}

   &lt;footer&gt;
      &lt;p&gt;
         &lt;a href=&quot;/&quot;&gt;首页&lt;/a&gt; - &lt;a href=&quot;/about&quot;&gt;自我介绍&lt;/a&gt;
      &lt;/p&gt;
   &lt;/footer&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre>

<h3>渲染模板</h3>

<p>最后，改写app.js文件。</p>

<pre>
<code>// app.js文件

var express = require(&#39;express&#39;);
var app = express();

var hbs = require(&#39;hbs&#39;);

// 加载数据模块
var blogEngine = require(&#39;./blog&#39;);

app.set(&#39;view engine&#39;, &#39;html&#39;);
app.engine(&#39;html&#39;, hbs.__express);
app.use(express.bodyParser());

app.get(&#39;/&#39;, function(req, res) {
   res.render(&#39;index&#39;,{title:&quot;最近文章&quot;, entries:blogEngine.getBlogEntries()});
});

app.get(&#39;/about&#39;, function(req, res) {
   res.render(&#39;about&#39;, {title:&quot;自我介绍&quot;});
});

app.get(&#39;/article/:id&#39;, function(req, res) {
   var entry = blogEngine.getBlogEntry(req.params.id);
   res.render(&#39;article&#39;,{title:entry.title, blog:entry});
});

app.listen(3000);</code></pre>

<p>上面代码中的render方法，现在加入了第二个参数，表示模板变量绑定的数据。</p>

<p>现在重启node服务器，然后访问http://127.0.0.1:3000。</p>

<pre>
<code>node app.js</code></pre>

<p>可以看得，模板已经使用加载的数据渲染成功了。</p>

<h3>指定静态文件目录</h3>

<p>模板文件默认存放在views子目录。这时，如果要在网页中加载静态文件（比如样式表、图片等），就需要另外指定一个存放静态文件的目录。</p>

<pre>
<code>app.use(express.static(&#39;public&#39;));</code></pre>

<p>上面代码在文件app.js之中，指定静态文件存放的目录是public。于是，当浏览器发出非HTML文件请求时，服务器端就到public目录寻找这个文件。比如，浏览器发出如下的样式表请求：</p>

<pre>
<code>&lt;link href=&quot;/bootstrap/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;</code></pre>

<p>服务器端就到public/bootstrap/css/目录中寻找bootstrap.css文件。</p>

<h2>Express.Router用法</h2>

<p>从Express 4.0开始，路由器功能成了一个单独的组件<code>Express.Router</code>。它好像小型的express应用程序一样，有自己的use、get、param和route方法。</p>

<h3>基本用法</h3>

<p>首先，<code>Express.Router</code>是一个构造函数，调用后返回一个路由器实例。然后，使用该实例的HTTP动词方法，为不同的访问路径，指定回调函数；最后，挂载到某个路径。</p>

<pre>
<code>var router = express.Router();

router.get(&#39;/&#39;, function(req, res) {
  res.send(&#39;首页&#39;);
});

router.get(&#39;/about&#39;, function(req, res) {
  res.send(&#39;关于&#39;);
});

app.use(&#39;/&#39;, router);
</code></pre>

<p>上面代码先定义了两个访问路径，然后将它们挂载到根目录。如果最后一行改为app.use(&lsquo;/app&rsquo;, router)，则相当于为<code>/app</code>和<code>/app/about</code>这两个路径，指定了回调函数。</p>

<p>这种路由器可以自由挂载的做法，为程序带来了更大的灵活性，既可以定义多个路由器实例，也可以为将同一个路由器实例挂载到多个路径。</p>

<h3>router.route方法</h3>

<p>router实例对象的route方法，可以接受访问路径作为参数。</p>

<pre>
<code>var router = express.Router();

router.route(&#39;/api&#39;)
	.post(function(req, res) {
		// ...
	})
	.get(function(req, res) {
		Bear.find(function(err, bears) {
			if (err) res.send(err);
			res.json(bears);
		});
	});

app.use(&#39;/&#39;, router);</code></pre>

<h3>router中间件</h3>

<p>use方法为router对象指定中间件，即在数据正式发给用户之前，对数据进行处理。下面就是一个中间件的例子。</p>

<pre>
<code>router.use(function(req, res, next) {
	console.log(req.method, req.url);
	next();
});</code></pre>

<p>上面代码中，回调函数的next参数，表示接受其他中间件的调用。函数体中的next()，表示将数据传递给下一个中间件。</p>

<p>注意，中间件的放置顺序很重要，等同于执行顺序。而且，中间件必须放在HTTP动词方法之前，否则不会执行。</p>

<h3>对路径参数的处理</h3>

<p>router对象的param方法用于路径参数的处理，可以</p>

<pre>
<code>router.param(&#39;name&#39;, function(req, res, next, name) {
	// 对name进行验证或其他处理&hellip;&hellip;
	console.log(name);
	req.name = name;
	next();
});

router.get(&#39;/hello/:name&#39;, function(req, res) {
	res.send(&#39;hello &#39; + req.name + &#39;!&#39;);
});</code></pre>

<p>上面代码中，get方法为访问路径指定了name参数，param方法则是对name参数进行处理。注意，param方法必须放在HTTP动词方法之前。</p>

<h3>app.route</h3>

<p>假定app是Express的实例对象，Express 4.0为该对象提供了一个route属性。app.route实际上是express.Router()的缩写形式，除了直接挂载到根路径。因此，对同一个路径指定get和post方法的回调函数，可以写成链式形式。</p>

<pre>
<code>app.route(&#39;/login&#39;)
	.get(function(req, res) {
		res.send(&#39;this is the login form&#39;);
	})
	.post(function(req, res) {
		console.log(&#39;processing&#39;);
		res.send(&#39;processing the login form!&#39;);
	});</code></pre>

<p>上面代码的这种写法，显然非常简洁清晰。</p>

<h2>上传文件</h2>

<p>首先，在网页插入上传文件的表单。</p>

<pre>
<code>&lt;form action=&quot;/pictures/upload&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;
  Select an image to upload:
  &lt;input type=&quot;file&quot; name=&quot;image&quot;&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Upload Image&quot;&gt;
&lt;/form&gt;
</code></pre>

<p>然后，服务器脚本建立指向<code>/upload</code>目录的路由。这时可以安装multer模块，它提供了上传文件的许多功能。</p>

<pre>
<code>var express = require(&#39;express&#39;);
var router = express.Router();
var multer = require(&#39;multer&#39;);

var uploading = multer({
  dest: __dirname + &#39;../public/uploads/&#39;,
  // 设定限制，每次最多上传1个文件，文件大小不超过1MB
  limits: {fileSize: 1000000, files:1},
})

router.post(&#39;/upload&#39;, uploading, function(req, res) {

})

module.exports = router
</code></pre>

<p>上面代码是上传文件到本地目录。下面是上传到Amazon S3的例子。</p>

<p>首先，在S3上面新增CORS配置文件。</p>

<pre>
<code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;CORSConfiguration xmlns=&quot;http://s3.amazonaws.com/doc/2006-03-01/&quot;&gt;
  &lt;CORSRule&gt;
    &lt;AllowedOrigin&gt;*&lt;/AllowedOrigin&gt;
    &lt;AllowedMethod&gt;GET&lt;/AllowedMethod&gt;
    &lt;AllowedMethod&gt;POST&lt;/AllowedMethod&gt;
    &lt;AllowedMethod&gt;PUT&lt;/AllowedMethod&gt;
    &lt;AllowedHeader&gt;*&lt;/AllowedHeader&gt;
  &lt;/CORSRule&gt;
&lt;/CORSConfiguration&gt;
</code></pre>

<p>上面的配置允许任意电脑向你的bucket发送HTTP请求。</p>

<p>然后，安装aws-sdk。</p>

<pre>
<code>$ npm install aws-sdk --save
</code></pre>

<p>下面是服务器脚本。</p>

<pre>
<code>var express = require(&#39;express&#39;);
var router = express.Router();
var aws = require(&#39;aws-sdk&#39;);

router.get(&#39;/&#39;, function(req, res) {
  res.render(&#39;index&#39;)
})

var AWS_ACCESS_KEY = &#39;your_AWS_access_key&#39;
var AWS_SECRET_KEY = &#39;your_AWS_secret_key&#39;
var S3_BUCKET = &#39;images_upload&#39;

router.get(&#39;/sign&#39;, function(req, res) {
  aws.config.update({accessKeyId: AWS_ACCESS_KEY, secretAccessKey: AWS_SECRET_KEY});

  var s3 = new aws.S3()
  var options = {
    Bucket: S3_BUCKET,
    Key: req.query.file_name,
    Expires: 60,
    ContentType: req.query.file_type,
    ACL: &#39;public-read&#39;
  }

  s3.getSignedUrl(&#39;putObject&#39;, options, function(err, data){
    if(err) return res.send(&#39;Error with S3&#39;)

    res.json({
      signed_request: data,
      url: &#39;https://s3.amazonaws.com/&#39; + S3_BUCKET + &#39;/&#39; + req.query.file_name
    })
  })
})

module.exports = router
</code></pre>

<p>上面代码中，用户访问<code>/sign</code>路径，正确登录后，会收到一个JSON对象，里面是S3返回的数据和一个暂时用来接收上传文件的URL，有效期只有60秒。</p>

<p>浏览器代码如下。</p>

<pre>
<code>// HTML代码为
// &lt;br&gt;Please select an image
// &lt;input type=&quot;file&quot; id=&quot;image&quot;&gt;
// &lt;br&gt;
// &lt;img id=&quot;preview&quot;&gt;

document.getElementById(&quot;image&quot;).onchange = function() {
  var file = document.getElementById(&quot;image&quot;).files[0]
  if (!file) return

  sign_request(file, function(response) {
    upload(file, response.signed_request, response.url, function() {
      document.getElementById(&quot;preview&quot;).src = response.url
    })
  })
}

function sign_request(file, done) {
  var xhr = new XMLHttpRequest()
  xhr.open(&quot;GET&quot;, &quot;/sign?file_name=&quot; + file.name + &quot;&amp;file_type=&quot; + file.type)

  xhr.onreadystatechange = function() {
    if(xhr.readyState === 4 &amp;&amp; xhr.status === 200) {
      var response = JSON.parse(xhr.responseText)
      done(response)
    }
  }
  xhr.send()
}

function upload(file, signed_request, url, done) {
  var xhr = new XMLHttpRequest()
  xhr.open(&quot;PUT&quot;, signed_request)
  xhr.setRequestHeader(&#39;x-amz-acl&#39;, &#39;public-read&#39;)
  xhr.onload = function() {
    if (xhr.status === 200) {
      done()
    }
  }

  xhr.send(file)
}
</code></pre>

<p>上面代码首先监听file控件的change事件，一旦有变化，就先向服务器要求一个临时的上传URL，然后向该URL上传文件。</p>

<h2>参考链接</h2>

<ul>
	<li>Raymond Camden,&nbsp;<a href="http://net.tutsplus.com/tutorials/javascript-ajax/introduction-to-express/">Introduction to Express</a></li>
	<li>Christopher Buecheler,&nbsp;<a href="http://cwbuecheler.com/web/tutorials/2013/node-express-mongo/">Getting Started With Node.js, Express, MongoDB</a></li>
	<li>Stephen Sugden,&nbsp;<a href="http://stephensugden.com/middleware_guide/">A short guide to Connect Middleware</a></li>
	<li>Evan Hahn,&nbsp;<a href="http://evanhahn.com/understanding-express/">Understanding Express.js</a></li>
	<li>Chris Sevilleja,&nbsp;<a href="http://scotch.io/tutorials/javascript/learn-to-use-the-new-router-in-expressjs-4">Learn to Use the New Router in ExpressJS 4.0</a></li>
	<li>Stefan Fidanov,&nbsp;<a href="http://www.terlici.com/2015/05/23/uploading-files-S3.html">Limitless file uploading to Amazon S3 with Node &amp; Express</a></li>
</ul>
