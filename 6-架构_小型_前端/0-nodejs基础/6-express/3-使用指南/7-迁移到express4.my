<h1>迁移到 Express 4</h1>

<h2>概览</h2>

<p>Express 4 是对 Express 3 的一个颠覆性改变，也就是说如果您更新了 Express， Express 3 应用会无法工作。</p>

<p>该章包含如下内容：</p>

<ul>
	<li><a href="http://www.expressjs.com.cn/guide/migrating-4.html#changes">Express 4 的变化。</a></li>
	<li>一个从 Express 3 迁移到 Express 4 的<a href="http://www.expressjs.com.cn/guide/migrating-4.html#example-migration">实例</a>。</li>
	<li><a href="http://www.expressjs.com.cn/guide/migrating-4.html#app-gen">迁移到 Express 4 应用生成器。</a></li>
</ul>

<h2>Express 4 的变化</h2>

<p>Express 4 的主要变化如下：</p>

<ul>
	<li><a href="http://www.expressjs.com.cn/guide/migrating-4.html#core-changes">对 Express 内核和中间件系统的改进：&nbsp;</a>不再依赖 Connect 和内置的中间件，您需要自己添加中间件。</li>
	<li><a href="http://www.expressjs.com.cn/guide/migrating-4.html#routing">对路由系统的改进</a></li>
	<li><a href="http://www.expressjs.com.cn/guide/migrating-4.html#other-changes">其他变化。</a></li>
</ul>

<p>其他变化请参考：</p>

<ul>
	<li><a href="https://github.com/strongloop/express/wiki/New-features-in-4.x">4.x 中的新功能</a></li>
	<li><a href="https://github.com/strongloop/express/wiki/Migrating-from-3.x-to-4.x">从 3.x 迁移到 4.x</a></li>
</ul>

<h3>对 Express 内核和中间件系统的改进</h3>

<p>Express 4 不再依赖 Connect，而且从内核中移除了除&nbsp;<code>express.static</code>&nbsp;外的所有内置中间件。也就是说现在的 Express 是一个独立的路由和中间件 Web 框架，Express 的版本升级不再受中间件更新的影响。</p>

<p>移除了内置的中间件后，您必须显式地添加所有运行应用需要的中间件。请遵循如下步骤：</p>

<ol>
	<li>安装模块：<code>npm install --save &lt;module-name&gt;</code></li>
	<li>在应用中引入模块：<code>require(&#39;module-name&#39;)</code></li>
	<li>按照文档的描述使用模块：<code>app.use( ... )</code></li>
</ol>

<p>下表列出了 Express 3 和 Express 4 中对应的中间件。</p>

<table border="1">
	<tbody>
		<tr>
			<th>Express 3</th>
			<th>Express 4</th>
		</tr>
		<tr>
			<td><code>express.bodyParser</code></td>
			<td><a href="https://github.com/expressjs/body-parser">body-parser</a>&nbsp;+&nbsp;<a href="https://github.com/expressjs/multer">multer</a></td>
		</tr>
		<tr>
			<td><code>express.compress</code></td>
			<td><a href="https://github.com/expressjs/compression">compression</a></td>
		</tr>
		<tr>
			<td><code>express.cookieSession</code></td>
			<td><a href="https://github.com/expressjs/cookie-session">cookie-session</a></td>
		</tr>
		<tr>
			<td><code>express.cookieParser</code></td>
			<td><a href="https://github.com/expressjs/cookie-parser">cookie-parser</a></td>
		</tr>
		<tr>
			<td><code>express.logger</code></td>
			<td><a href="https://github.com/expressjs/morgan">morgan</a></td>
		</tr>
		<tr>
			<td><code>express.session</code></td>
			<td><a href="https://github.com/expressjs/session">express-session</a></td>
		</tr>
		<tr>
			<td><code>express.favicon</code></td>
			<td><a href="https://github.com/expressjs/serve-favicon">serve-favicon</a></td>
		</tr>
		<tr>
			<td><code>express.responseTime</code></td>
			<td><a href="https://github.com/expressjs/response-time">response-time</a></td>
		</tr>
		<tr>
			<td><code>express.errorHandler</code></td>
			<td><a href="https://github.com/expressjs/errorhandler">errorhandler</a></td>
		</tr>
		<tr>
			<td><code>express.methodOverride</code></td>
			<td><a href="https://github.com/expressjs/method-override">method-override</a></td>
		</tr>
		<tr>
			<td><code>express.timeout</code></td>
			<td><a href="https://github.com/expressjs/timeout">connect-timeout</a></td>
		</tr>
		<tr>
			<td><code>express.vhost</code></td>
			<td><a href="https://github.com/expressjs/vhost">vhost</a></td>
		</tr>
		<tr>
			<td><code>express.csrf</code></td>
			<td><a href="https://github.com/expressjs/csurf">csurf</a></td>
		</tr>
		<tr>
			<td><code>express.directory</code></td>
			<td><a href="https://github.com/expressjs/serve-index">serve-index</a></td>
		</tr>
		<tr>
			<td><code>express.static</code></td>
			<td><a href="https://github.com/expressjs/serve-static">serve-static</a></td>
		</tr>
	</tbody>
</table>

<p>这里是 Express 4 的&nbsp;<a href="https://github.com/senchalabs/connect#middleware">所有中间件列表</a>&nbsp;。</p>

<p>多数情况下，您可以直接使用 Express 4 中对应的中间件替换 Express 3 中的中间件，请参考 GitHub 中的模块文档了解更多信息。</p>

<h4><code>app.use</code>&nbsp;可以接收参数了</h4>

<p>在 Express 4 中，可以从路由句柄中读取参数，以该参数的值作为路径加载中间件，比如像下面这样：</p>

<pre>
<code>app.use(&#39;/book/:id&#39;, function(req, res, next) {
  console.log(&#39;ID:&#39;, req.params.id);
  next();
});
</code></pre>

<h3>路由系统</h3>

<p>应用现在隐式地加载路由中间件，因此不需要担心涉及到&nbsp;<code>router</code>&nbsp;中间件对路由中间件加载顺序的问题了。</p>

<p>定义路由的方式依然未变，但是新的路由系统有两个新功能能帮助您组织路由：</p>

<ul>
	<li>添加了一个新方法&nbsp;<code>app.route()</code>，可以为路由路径创建链式路由句柄。</li>
	<li>添加了一个新类&nbsp;<code>express.Router</code>，可以创建可挂载的模块化路由句柄。</li>
</ul>

<h4><code>app.route()</code>&nbsp;方法</h4>

<p>新增加的&nbsp;<code>app.route()</code>&nbsp;方法可为路由路径创建链式路由句柄。由于路径在一个地方指定，会让路由更加模块化，也能减少代码冗余和拼写错误。请参考&nbsp;<a href="http://www.expressjs.com.cn/4x/api.html#router"><code>Router()</code>&nbsp;文档</a>&nbsp;获取更多关于路由的信息。。</p>

<p>下面是一个使用&nbsp;<code>app.route()</code>&nbsp;方法定义链式路由句柄的例子。</p>

<pre>
<code>app.route(&#39;/book&#39;)
  .get(function(req, res) {
    res.send(&#39;Get a random book&#39;);
  })
  .post(function(req, res) {
    res.send(&#39;Add a book&#39;);
  })
  .put(function(req, res) {
    res.send(&#39;Update the book&#39;);
  });
</code></pre>

<h4><code>express.Router</code>&nbsp;类</h4>

<p>另外一个帮助组织路由的是新加的&nbsp;<code>express.Router</code>&nbsp;类，可使用它创建可挂载的模块化路由句柄。<code>Router</code>&nbsp;类是一个完整的中间件和路由系统，鉴于此，人们常称之为&ldquo;迷你应用&rdquo;。</p>

<p>下面的例子创建了一个模块化的路由，并加载了一个中间件，然后定义了一些路由，并且在主应用中将其挂载到指定路径。</p>

<p>在应用目录下创建文件&nbsp;<code>birds.js</code>，其内容如下：</p>

<pre>
<code>var express = require(&#39;express&#39;);
var router = express.Router();

// 特针对于该路由的中间件
router.use(function timeLog(req, res, next) {
  console.log(&#39;Time: &#39;, Date.now());
  next();
});
// 定义网站主页的路由
router.get(&#39;/&#39;, function(req, res) {
  res.send(&#39;Birds home page&#39;);
});
// 定义 about 页面的路由
router.get(&#39;/about&#39;, function(req, res) {
  res.send(&#39;About birds&#39;);
});

module.exports = router;
</code></pre>

<p>然后，在应用中加载该路由：</p>

<pre>
<code>var birds = require(&#39;./birds&#39;);
...
app.use(&#39;/birds&#39;, birds);
</code></pre>

<p>应用现在就可以处理发送到&nbsp;<code>/birds</code>&nbsp;和&nbsp;<code>/birds/about</code>&nbsp;的请求，并且会调用特针对于该路由的&nbsp;<code>timeLog</code>&nbsp;中间件。</p>

<h3>其他变化</h3>

<p>下表列出了 Express 4 中其他一些尽管不大，但是非常重要的变化。</p>

<table border="1">
	<tbody>
		<tr>
			<th>对象</th>
			<th>描述</th>
		</tr>
		<tr>
			<td>Node</td>
			<td>&gt;Express 4 需要 Node 0.10.x 或以上版本，已经放弃了对 Node 0.8.x 的支持。</td>
		</tr>
		<tr>
			<td>
			<p><code>http.createServer()</code></p>
			</td>
			<td>
			<p><code>http</code>&nbsp;模块不再是必须的了，除非您需要直接使用它（socket.io/SPDY/HTTPS）。现在可以使用&nbsp;<code>app.listen()</code>&nbsp;启动应用了。</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><code>app.configure()</code></p>
			</td>
			<td>
			<p>已经删除&nbsp;<code>app.configure()</code>，使用&nbsp;<code>process.env.NODE_ENV</code>&nbsp;或者&nbsp;<code>app.get(&#39;env&#39;)</code>&nbsp;检测环境并配置应用。</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><code>json spaces</code></p>
			</td>
			<td>
			<p>Express 4 默认禁用&nbsp;<code>json spaces</code>&nbsp;属性。</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><code>req.accepted()</code></p>
			</td>
			<td>
			<p>使用&nbsp;<code>req.accepts()</code>,&nbsp;<code>req.acceptsEncodings()</code>,&nbsp;<code>req.acceptsCharsets()</code>&nbsp;和&nbsp;<code>req.acceptsLanguages()</code>、</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><code>res.location()</code></p>
			</td>
			<td>
			<p>不再解析相对 URLs。</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><code>req.params</code></p>
			</td>
			<td>
			<p>从数组变为对象。</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><code>res.locals</code></p>
			</td>
			<td>
			<p>从函数变为对象。</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><code>res.headerSent</code></p>
			</td>
			<td>
			<p>变为&nbsp;<code>res.headersSent</code>。</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><code>app.route</code></p>
			</td>
			<td>
			<p>变为&nbsp;<code>app.mountpath</code>。</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><code>res.on(&#39;header&#39;)</code></p>
			</td>
			<td>
			<p>已删除。</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><code>res.charset</code></p>
			</td>
			<td>
			<p>已删除。</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><code>res.setHeader(&#39;Set-Cookie&#39;, val)</code></p>
			</td>
			<td>
			<p>F功能仅限于设置基本的 cookie 值，使用&nbsp;<code>res.cookie()</code>&nbsp;访问更多功能。</p>
			</td>
		</tr>
	</tbody>
</table>

<h2>迁移示例</h2>

<p>下面是一个从 Express 3 迁移到 Express 4 的例子，请留意&nbsp;<code>app.js</code>&nbsp;和&nbsp;<code>package.json</code>。</p>

<h3>Express 3 应用</h3>

<h4><code>app.js</code></h4>

<p>请看如下 Express 3 应用，其&nbsp;<code>app.js</code>&nbsp;文件内容如下：</p>

<pre>
<code>var express = require(&#39;express&#39;);
var routes = require(&#39;./routes&#39;);
var user = require(&#39;./routes/user&#39;);
var http = require(&#39;http&#39;);
var path = require(&#39;path&#39;);

var app = express();

// 适用开发和生产环境
app.set(&#39;port&#39;, process.env.PORT || 3000);
app.set(&#39;views&#39;, path.join(__dirname, &#39;views&#39;));
app.set(&#39;view engine&#39;, &#39;jade&#39;);
app.use(express.favicon());
app.use(express.logger(&#39;dev&#39;));
app.use(express.methodOverride());
app.use(express.session({ secret: &#39;your secret here&#39; }));
app.use(express.bodyParser());
app.use(app.router);
app.use(express.static(path.join(__dirname, &#39;public&#39;)));

// 只针对开发环境
if (&#39;development&#39; == app.get(&#39;env&#39;)) {
  app.use(express.errorHandler());
}

app.get(&#39;/&#39;, routes.index);
app.get(&#39;/users&#39;, user.list);

http.createServer(app).listen(app.get(&#39;port&#39;), function(){
  console.log(&#39;Express server listening on port &#39; + app.get(&#39;port&#39;));
});
</code></pre>

<h4><code>package.json</code></h4>

<p>相对应的&nbsp;<code>package.json</code>&nbsp;文件内容如下：</p>

<pre>
<code>{
  &quot;name&quot;: &quot;application-name&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;private&quot;: true,
  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;node app.js&quot;
  },
  &quot;dependencies&quot;: {
    &quot;express&quot;: &quot;3.12.0&quot;,
    &quot;jade&quot;: &quot;*&quot;
  }
}
</code></pre>

<h3>迁移过程</h3>

<p>首先安装 Express 4 应用需要的中间件，使用如下命令将 Express 和 Jade 更新至最新版本：</p>

<pre>
<code>$ npm install serve-favicon morgan method-override express-session body-parser multer errorhandler express@latest jade@latest --save
</code></pre>

<p>按如下方式修改&nbsp;<code>app.js</code>&nbsp;文件：</p>

<ol>
	<li>
	<p>这些内置中间件&nbsp;<code>express.favicon</code>,&nbsp;<code>express.logger</code>,&nbsp;<code>express.methodOverride</code>,&nbsp;<code>express.session</code>,&nbsp;<code>express.bodyParser</code>&nbsp;and&nbsp;<code>express.errorHandler</code>在&nbsp;<code>express</code>&nbsp;对象中已经没有了，您必须手动安装相应的中间件，并在应用中加载它们。</p>
	</li>
	<li>
	<p>不需要加载&nbsp;<code>app.router</code>，它不再是一个合法的 Express 4 对象，删掉&nbsp;<code>app.use(app.router);</code>。</p>
	</li>
	<li>
	<p>确保加载中间件的顺序正确，加载完应用路由后再加载&nbsp;<code>errorHandler</code>。</p>
	</li>
</ol>

<h3>Express 4 应用</h3>

<h4><code>package.json</code></h4>

<p>运行上述&nbsp;<code>npm</code>&nbsp;命令后，会将&nbsp;<code>package.json</code>&nbsp;文件更新为：</p>

<pre>
<code>{
  &quot;name&quot;: &quot;application-name&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;private&quot;: true,
  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;node app.js&quot;
  },
  &quot;dependencies&quot;: {
    &quot;body-parser&quot;: &quot;^1.5.2&quot;,
    &quot;errorhandler&quot;: &quot;^1.1.1&quot;,
    &quot;express&quot;: &quot;^4.8.0&quot;,
    &quot;express-session&quot;: &quot;^1.7.2&quot;,
    &quot;jade&quot;: &quot;^1.5.0&quot;,
    &quot;method-override&quot;: &quot;^2.1.2&quot;,
    &quot;morgan&quot;: &quot;^1.2.2&quot;,
    &quot;multer&quot;: &quot;^0.1.3&quot;,
    &quot;serve-favicon&quot;: &quot;^2.0.1&quot;
  }
}
</code></pre>

<h4><code>app.js</code></h4>

<p>然后删掉无效的代码，加载需要的中间件，再做一些必要的修改，新的&nbsp;<code>app.js</code>&nbsp;内容如下：</p>

<pre>
<code>var http = require(&#39;http&#39;);
var express = require(&#39;express&#39;);
var routes = require(&#39;./routes&#39;);
var user = require(&#39;./routes/user&#39;);
var path = require(&#39;path&#39;);

var favicon = require(&#39;serve-favicon&#39;);
var logger = require(&#39;morgan&#39;);
var methodOverride = require(&#39;method-override&#39;);
var session = require(&#39;express-session&#39;);
var bodyParser = require(&#39;body-parser&#39;);
var multer = require(&#39;multer&#39;);
var errorHandler = require(&#39;errorhandler&#39;);

var app = express();

// 适用开发和生产环境
app.set(&#39;port&#39;, process.env.PORT || 3000);
app.set(&#39;views&#39;, path.join(__dirname, &#39;views&#39;));
app.set(&#39;view engine&#39;, &#39;jade&#39;);
app.use(favicon(__dirname + &#39;/public/favicon.ico&#39;));
app.use(logger(&#39;dev&#39;));
app.use(methodOverride());
app.use(session({ resave: true,
                  saveUninitialized: true,
                  secret: &#39;uwotm8&#39; }));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(multer());
app.use(express.static(path.join(__dirname, &#39;public&#39;)));

app.get(&#39;/&#39;, routes.index);
app.get(&#39;/users&#39;, user.list);

// 错误处理中间件应当在路由加载之后才能加载
if (&#39;development&#39; == app.get(&#39;env&#39;)) {
  app.use(errorHandler());
}

var server = http.createServer(app);
server.listen(app.get(&#39;port&#39;), function(){
  console.log(&#39;Express server listening on port &#39; + app.get(&#39;port&#39;));
});
</code></pre>

<p>除非需要直接使用&nbsp;<code>http</code>&nbsp;模块（socket.io/SPDY/HTTPS），否则不必加载它，可使用如下方式启动应用：</p>

<pre>
<code>app.listen(app.get(&#39;port&#39;), function(){
  console.log(&#39;Express server listening on port &#39; + app.get(&#39;port&#39;));
});</code></pre>

<h3>运行应用</h3>

<p>迁移完成后，应用就变成了 Express 4 应用。为了确保迁移成功，使用如下命令启动应用：</p>

<pre>
<code>$ node .
</code></pre>

<p>输入&nbsp;<a href="http://localhost:3000/">http://localhost:3000</a>&nbsp;即可看到经由 Express 4 渲染的主页。</p>

<h2>迁移到 Express 4 应用生成器</h2>

<p>生成 Express 应用的命令行还是&nbsp;<code>express</code>，为了升级到最新版本，您必须首先卸载 Express 3 的应用生成器，然后安装新的&nbsp;<code>express-generator</code>。</p>

<h3>安装</h3>

<p>如果您已经安装了 Express 3 应用生成器，请使用如下命令卸载：</p>

<pre>
<code>$ npm uninstall -g express
</code></pre>

<p>根据您的文件目录权限，您可能需要以&nbsp;<code>sudo</code>&nbsp;权限执行该命令。</p>

<p>然后安装新的生成器：</p>

<pre>
<code>$ npm install -g express-generator
</code></pre>

<p>根据您的文件目录权限，您可能需要以&nbsp;<code>sudo</code>&nbsp;权限执行该命令。</p>

<p>现在系统的&nbsp;<code>express</code>&nbsp;命令就升级为 Express 4 应用生成器了。</p>

<h3>应用生成器的变化</h3>

<p>除如下选项外，大部分命令参数和使用方法都维持不变：</p>

<ul>
	<li>删掉了&nbsp;<code>--sessions</code>&nbsp;o选项。</li>
	<li>删掉了&nbsp;<code>--jshtml</code>&nbsp;选项。</li>
	<li>增加了&nbsp;<code>--hogan</code>&nbsp;选项以支持&nbsp;<a href="http://twitter.github.io/hogan.js/">Hogan.js</a>。</li>
</ul>

<h3>实例</h3>

<p>运行下述命令创建一个 Express 4 应用：</p>

<pre>
<code>$ express app4
</code></pre>

<p>如果查看&nbsp;<code>app4/app.js</code>&nbsp;的内容，会发现应用需要的所有中间件（不包括&nbsp;<code>express.static</code>）都作为独立模块载入，而且再不显式地加载&nbsp;<code>router</code>&nbsp;中间件。</p>

<p>您可能还会发现，和旧的生成器生成的应用相比，&nbsp;<code>app.js</code>&nbsp;现在成了一个 Node 模块。</p>

<p>安装完依赖后，使用如下命令启动应用：</p>

<pre>
<code>$ npm start
</code></pre>

<p>如果看一看&nbsp;<code>package.json</code>&nbsp;文件中的 npm 启动脚本，会发现启动应用的真正命令是&nbsp;<code>node ./bin/www</code>，在 Express 3 中则为&nbsp;<code>node app.js</code>。</p>

<p>Express 4 应用生成器生成的&nbsp;<code>app.js</code>&nbsp;是一个 Node 模块，不能作为应用（除非修改代码）单独启动，需要通过一个 Node 文件加载并启动，这里这个文件就是&nbsp;<code>node ./bin/www</code>。</p>

<p>创建或启动 Express 应用时，<code>bin</code>&nbsp;目录或者文件名没有后缀的&nbsp;<code>www</code>&nbsp;文件都不是必需的，它们只是生成器推荐的做法，请根据需要修改。</p>

<p>如果不想保留&nbsp;<code>www</code>，想让应用变成 Express 3 的形式，则需要删除&nbsp;<code>module.exports = app;</code>，并在&nbsp;<code>app.js</code>&nbsp;末尾粘贴如下代码。</p>

<pre>
<code>app.set(&#39;port&#39;, process.env.PORT || 3000);

var server = app.listen(app.get(&#39;port&#39;), function() {
  debug(&#39;Express server listening on port &#39; + server.address().port);
});
</code></pre>

<p>记得在&nbsp;<code>app.js</code>&nbsp;上方加入如下代码加载&nbsp;<code>debug</code>&nbsp;模块。</p>

<pre>
<code>var debug = require(&#39;debug&#39;)(&#39;app4&#39;);
</code></pre>

<p>然后将&nbsp;<code>package.json</code>&nbsp;文件中的&nbsp;<code>&quot;start&quot;: &quot;node ./bin/www&quot;</code>&nbsp;修改为&nbsp;<code>&quot;start&quot;: &quot;node app.js&quot;</code>。</p>

<p>现在就将&nbsp;<code>./bin/www</code>&nbsp;的功能又改回到&nbsp;<code>app.js</code>&nbsp;中了。我们并不推荐这样做，这个练习只是为了帮助大家理解&nbsp;<code>./bin/www</code>&nbsp;是如何工作的，以及为什么&nbsp;<code>app.js</code>不能再自己启动。</p>
