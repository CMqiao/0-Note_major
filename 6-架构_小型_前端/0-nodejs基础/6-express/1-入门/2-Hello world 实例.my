<h1>Hello world 实例</h1>

<p>继续之前请务必按照&nbsp;<a href="http://www.expressjs.com.cn/starter/installing.html">Installing</a>&nbsp;章节执行了所有的前期准备工作。</p>

<p>接下来，我们一起创建一个基本的 Express 应用。</p>

<p>注意：这里所创建是一个最最简单的 Express 应用，并且仅仅只有一个文件 &mdash; 和通过&nbsp;<a href="http://www.expressjs.com.cn/starter/generator.html">Express 应用生成器</a>&nbsp;所创建的应用_完全不一样_，Express 应用生成器所创建的应用框架包含多个 JavaScript 文件、Jade 模板和针对不同用途的子目录。</p>

<p>进入&nbsp;<code>myapp</code>&nbsp;目录，创建一个名为&nbsp;<code>app.js</code>&nbsp;的文件，然后将下列代码复制进去：</p>

<pre>
<code>var express = require(&#39;express&#39;);
var app = express();

app.get(&#39;/&#39;, function (req, res) {
  res.send(&#39;Hello World!&#39;);
});

var server = app.listen(3000, function () {
  var host = server.address().address;
  var port = server.address().port;

  console.log(&#39;Example app listening at http://%s:%s&#39;, host, port);
});
</code></pre>

<p>上面的代码启动一个服务并监听从 3000 端口进入的所有连接请求。他将对所有 (<code>/</code>) URL 或&nbsp;<em>路由</em>&nbsp;返回 &ldquo;Hello World!&rdquo; 字符串。对于其他所有路径全部返回&nbsp;<strong>404 Not Found</strong>。</p>

<p><code>req</code>&nbsp;(请求) 和&nbsp;<code>res</code>&nbsp;(响应) 与 Node 提供的对象完全一致，因此，你可以调用&nbsp;<code>req.pipe()</code>、<code>req.on(&#39;data&#39;, callback)</code>&nbsp;以及任何 Node 提供的方法。</p>

<p>通过如下命令启动此应用：</p>

<pre>
<code>$ node app.js
</code></pre>

<p>然后在浏览器中打开&nbsp;<a href="http://localhost:3000/">http://localhost:3000/</a>&nbsp;并查看输出结果。</p>
