<h1>React 入门实例教程</h1>

<p>作者：&nbsp;<a href="http://www.ruanyifeng.com/">阮一峰</a></p>

<p>现在最热门的前端框架，毫无疑问是&nbsp;<a href="https://facebook.github.io/react/" target="_blank">React</a>&nbsp;。</p>

<p>上周，基于 React 的&nbsp;<a href="http://facebook.github.io/react-native/" target="_blank">React Native</a>&nbsp;发布，结果一天之内，就获得了 5000 颗星，受瞩目程度可见一斑。</p>

<p>React 起源于 Facebook 的内部项目，因为该公司对市场上所有&nbsp;<a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html" target="_blank">JavaScript MVC 框架</a>，都不满意，就决定自己写一套，用来架设&nbsp;<a href="https://instagram.com/" target="_blank">Instagram</a>&nbsp;的网站。做出来以后，发现这套东西很好用，就在2013年5月<a href="http://facebook.github.io/react/blog/2013/06/05/why-react.html" target="_blank">开源</a>了。</p>

<p><img alt="" src="http://image.beekka.com/blog/2015/bg2015033101.png" title="" /></p>

<p>由于 React 的设计思想极其独特，属于革命性创新，性能出众，代码逻辑却非常简单。所以，越来越多的人开始关注和使用，认为它可能是将来 Web 开发的主流工具。</p>

<p>这个项目本身也越滚越大，从最早的UI引擎变成了一整套前后端通吃的 Web App 解决方案。衍生的 React Native 项目，目标更是宏伟，希望用写 Web App 的方式去写 Native App。如果能够实现，整个互联网行业都会被颠覆，因为同一组人只需要写一次 UI ，就能同时运行在服务器、浏览器和手机（参见<a href="http://www.ruanyifeng.com/blog/2015/02/future-of-dom.html" target="_blank">《也许，DOM 不是答案》</a>）。</p>

<p><img alt="" src="http://image.beekka.com/blog/2015/bg2015031302.jpg" title="" /></p>

<p>既然 React 这么热门，看上去充满希望，当然应该好好学一下。从技术角度，可以满足好奇心，提高技术水平；从职业角度，有利于求职和晋升，有利于参与潜力大的项目。但是，好的 React 教程却不容易找到，这一方面因为这项技术太新，刚刚开始走红，大家都没有经验，还在摸索之中；另一方面因为 React 本身还在不断变动，API 一直在调整，至今没发布1.0版。</p>

<p><a href="https://github.com/ruanyf/react-demos" target="_blank"><img alt="" src="http://image.beekka.com/blog/2015/bg2015033103.png" title="" /></a></p>

<p>我学习 React 时，就很苦恼。有的教程讨论一些细节问题，对入门没帮助；有的教程写得不错，但比较短，无助于看清全貌。我断断续续学了几个月，看过二十几篇教程，在这个过程中，将对自己有帮助的 Demo 都收集下来，做成了一个库&nbsp;<a href="https://github.com/ruanyf/react-demos" target="_blank">React Demos</a>&nbsp;。</p>

<p><a href="https://github.com/ruanyf/react-demos" target="_blank"><img alt="" src="http://image.beekka.com/blog/2015/bg2015033104.png" title="" /></a></p>

<p>下面，我就根据<a href="https://github.com/ruanyf/react-demos" target="_blank">这个库</a>，写一篇全面又易懂的 React 入门教程。你只需要跟着每一个 Demo 做一遍，就能初步掌握 React 。当然，前提是你必须拥有基本 JavaScript 和 DOM 知识，但是你读完就会发现，React 所要求的预备知识真的很少。</p>

<h2>零、安装</h2>

<p>React 的安装包，可以到<a href="https://facebook.github.io/react/downloads.html" target="_blank">官网</a>下载。不过，<a href="https://github.com/ruanyf/react-demos" target="_blank"><code>React Demos</code></a>&nbsp;已经自带 React 源码，不用另外安装，只需把这个库拷贝到你的硬盘就行了。</p>

<blockquote>
<pre>
<code>
$ git clone <a href="mailto:git@github">git@github</a>.com:ruanyf/react-demos.git
</code></pre>
</blockquote>

<p>如果你没安装 git， 那就直接下载&nbsp;<a href="https://github.com/ruanyf/react-demos/archive/master.zip" target="_blank">zip 压缩包</a>。</p>

<p><a href="https://github.com/ruanyf/react-demos" target="_blank"><img alt="" src="http://image.beekka.com/blog/2015/bg2015033105.png" title="" /></a></p>

<p>下面要讲解的12个例子在各个&nbsp;<code>Demo</code>&nbsp;子目录，每个目录都有一个&nbsp;<code>index.html</code>&nbsp;文件，在浏览器打开这个文件（大多数情况下双击即可），就能立刻看到效果。</p>

<p>需要说明的是，React 可以在浏览器运行，也可以在服务器运行，但是本教程只涉及浏览器。一方面是为了尽量保持简单，另一方面 React 的语法是一致的，服务器的用法与浏览器差别不大。<a href="https://github.com/ruanyf/react-demos/tree/master/demo13" target="_blank"><code>Demo13</code></a>&nbsp;是服务器首屏渲染的例子，有兴趣的朋友可以自己去看源码。</p>

<h2>一、HTML 模板</h2>

<p>使用 React 的网页源码，结构大致如下。</p>

<blockquote>
<pre>
<code>
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id=&quot;example&quot;&gt;&lt;/div&gt;
    &lt;script type=&quot;text/babel&quot;&gt;
      // ** Our code goes here! **
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
</blockquote>

<p>上面代码有两个地方需要注意。首先，最后一个&nbsp;<code>&lt;script&gt;</code>&nbsp;标签的&nbsp;<code>type</code>&nbsp;属性为&nbsp;<code>text/babel</code>&nbsp;。这是因为 React 独有的 JSX 语法，跟 JavaScript 不兼容。凡是使用 JSX 的地方，都要加上&nbsp;<code>type=&quot;text/babel&quot;</code>&nbsp;。</p>

<p>其次，上面代码一共用了三个库：&nbsp;<code>react.js</code>&nbsp;、<code>react-dom.js</code>&nbsp;和&nbsp;<code>Browser.js</code>&nbsp;，它们必须首先加载。其中，<code>react.js</code>&nbsp;是 React 的核心库，<code>react-dom.js</code>&nbsp;是提供与 DOM 相关的功能，<code>Browser.js</code>&nbsp;的作用是将 JSX 语法转为 JavaScript 语法，这一步很消耗时间，实际上线的时候，应该将它放到服务器完成。</p>

<blockquote>
<pre>
<code>
$ babel src --out-dir build
</code></pre>
</blockquote>

<p>上面命令可以将&nbsp;<code>src</code>&nbsp;子目录的&nbsp;<code>js</code>&nbsp;文件进行语法转换，转码后的文件全部放在&nbsp;<code>build</code>子目录。</p>

<h2>二、ReactDOM.render()</h2>

<p>ReactDOM.render 是 React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点。</p>

<blockquote>
<pre>
<code>
ReactDOM.render(
  &lt;h1&gt;Hello, world!&lt;/h1&gt;,
  document.getElementById(&#39;example&#39;)
);
</code></pre>
</blockquote>

<p>上面代码将一个&nbsp;<code>h1</code>&nbsp;标题，插入&nbsp;<code>example</code>&nbsp;节点（查看&nbsp;<a href="https://github.com/ruanyf/react-demos/blob/master/demo01/index.html" target="_blank"><code>demo01</code></a>），运行结果如下。</p>

<p><img alt="" src="http://image.beekka.com/blog/2015/bg2015033109.png" title="" /></p>

<h2>三、JSX 语法</h2>

<p>上一节的代码， HTML 语言直接写在 JavaScript 语言之中，不加任何引号，这就是&nbsp;<a href="http://facebook.github.io/react/docs/displaying-data.html#jsx-syntax" target="_blank">JSX 的语法</a>，它允许 HTML 与 JavaScript 的混写（查看&nbsp;<a href="https://github.com/ruanyf/react-demos/blob/master/demo02/index.html" target="_blank"><code>Demo02</code></a>&nbsp;）。</p>

<blockquote>
<pre>
<code>
var names = [&#39;Alice&#39;, &#39;Emily&#39;, &#39;Kate&#39;];

ReactDOM.render(
  &lt;div&gt;
  {
    names.map(function (name) {
      return &lt;div&gt;Hello, {name}!&lt;/div&gt;
    })
  }
  &lt;/div&gt;,
  document.getElementById(&#39;example&#39;)
);
</code></pre>
</blockquote>

<p>上面代码体现了 JSX 的基本语法规则：遇到 HTML 标签（以&nbsp;<code>&lt;</code>&nbsp;开头），就用 HTML 规则解析；遇到代码块（以&nbsp;<code>{</code>&nbsp;开头），就用 JavaScript 规则解析。上面代码的运行结果如下。</p>

<p><img alt="" src="http://image.beekka.com/blog/2015/bg2015033106.png" title="" /></p>

<p>JSX 允许直接在模板插入 JavaScript 变量。如果这个变量是一个数组，则会展开这个数组的所有成员（查看&nbsp;<a href="https://github.com/ruanyf/react-demos/blob/master/demo03/index.html" target="_blank"><code>demo03</code></a>&nbsp;）。</p>

<blockquote>
<pre>
<code>
var arr = [
  &lt;h1&gt;Hello world!&lt;/h1&gt;,
  &lt;h2&gt;React is awesome&lt;/h2&gt;,
];
ReactDOM.render(
  &lt;div&gt;{arr}&lt;/div&gt;,
  document.getElementById(&#39;example&#39;)
);
</code></pre>
</blockquote>

<p>上面代码的<code>arr</code>变量是一个数组，结果 JSX 会把它的所有成员，添加到模板，运行结果如下。</p>

<p><img alt="" src="http://image.beekka.com/blog/2015/bg2015033107.png" title="" /></p>

<h2>四、组件</h2>

<p>React 允许将代码封装成组件（component），然后像插入普通 HTML 标签一样，在网页中插入这个组件。React.createClass 方法就用于生成一个组件类（查看&nbsp;<a href="https://github.com/ruanyf/react-demos/blob/master/demo04/index.html" target="_blank"><code>demo04</code></a>）。</p>

<blockquote>
<pre>
<code>
var HelloMessage = React.createClass({
  render: function() {
    return &lt;h1&gt;Hello {this.props.name}&lt;/h1&gt;;
  }
});

ReactDOM.render(
  &lt;HelloMessage name=&quot;John&quot; /&gt;,
  document.getElementById(&#39;example&#39;)
);
</code></pre>
</blockquote>

<p>上面代码中，变量&nbsp;<code>HelloMessage</code>&nbsp;就是一个组件类。模板插入&nbsp;<code>&lt;HelloMessage /&gt;</code>&nbsp;时，会自动生成&nbsp;<code>HelloMessage</code>&nbsp;的一个实例（下文的&quot;组件&quot;都指组件类的实例）。所有组件类都必须有自己的&nbsp;<code>render</code>&nbsp;方法，用于输出组件。</p>

<p>注意，组件类的第一个字母必须大写，否则会报错，比如<code>HelloMessage</code>不能写成<code>helloMessage</code>。另外，组件类只能包含一个顶层标签，否则也会报错。</p>

<blockquote>
<pre>
<code>
var HelloMessage = React.createClass({
  render: function() {
    return &lt;h1&gt;
      Hello {this.props.name}
    &lt;/h1&gt;&lt;p&gt;
      some text
    &lt;/p&gt;;
  }
});
</code></pre>
</blockquote>

<p>上面代码会报错，因为<code>HelloMessage</code>组件包含了两个顶层标签：<code>h1</code>和<code>p</code>。</p>

<p>组件的用法与原生的 HTML 标签完全一致，可以任意加入属性，比如&nbsp;<code>&lt;HelloMessage name=&quot;John&quot;&gt;</code>&nbsp;，就是&nbsp;<code>HelloMessage</code>&nbsp;组件加入一个&nbsp;<code>name</code>&nbsp;属性，值为&nbsp;<code>John</code>。组件的属性可以在组件类的&nbsp;<code>this.props</code>&nbsp;对象上获取，比如&nbsp;<code>name</code>&nbsp;属性就可以通过&nbsp;<code>this.props.name</code>&nbsp;读取。上面代码的运行结果如下。</p>

<p><img alt="" src="http://image.beekka.com/blog/2015/bg2015033108.png" title="" /></p>

<p>添加组件属性，有一个地方需要注意，就是&nbsp;<code>class</code>&nbsp;属性需要写成&nbsp;<code>className</code>&nbsp;，<code>for</code>&nbsp;属性需要写成&nbsp;<code>htmlFor</code>&nbsp;，这是因为&nbsp;<code>class</code>&nbsp;和&nbsp;<code>for</code>&nbsp;是 JavaScript 的保留字。</p>

<h2>五、this.props.children</h2>

<p><code>this.props</code>&nbsp;对象的属性与组件的属性一一对应，但是有一个例外，就是&nbsp;<code>this.props.children</code>&nbsp;属性。它表示组件的所有子节点（查看&nbsp;<a href="https://github.com/ruanyf/react-demos/blob/master/demo05/index.html" target="_blank"><code>demo05</code></a>）。</p>

<blockquote>
<pre>
<code>
var NotesList = React.createClass({
  render: function() {
    return (
      &lt;ol&gt;
      {
        React.Children.map(this.props.children, function (child) {
          return &lt;li&gt;{child}&lt;/li&gt;;
        })
      }
      &lt;/ol&gt;
    );
  }
});

ReactDOM.render(
  &lt;NotesList&gt;
    &lt;span&gt;hello&lt;/span&gt;
    &lt;span&gt;world&lt;/span&gt;
  &lt;/NotesList&gt;,
  document.body
);
</code></pre>
</blockquote>

<p>上面代码的&nbsp;<code>NoteList</code>&nbsp;组件有两个&nbsp;<code>span</code>&nbsp;子节点，它们都可以通过&nbsp;<code>this.props.children</code>&nbsp;读取，运行结果如下。</p>

<p><img alt="" src="http://image.beekka.com/blog/2015/bg2015033110.png" title="" /></p>

<p>这里需要注意，&nbsp;<code>this.props.children</code>&nbsp;的值有三种可能：如果当前组件没有子节点，它就是&nbsp;<code>undefined</code>&nbsp;;如果有一个子节点，数据类型是&nbsp;<code>object</code>&nbsp;；如果有多个子节点，数据类型就是&nbsp;<code>array</code>&nbsp;。所以，处理&nbsp;<code>this.props.children</code>&nbsp;的时候要小心。</p>

<p>React 提供一个工具方法&nbsp;<a href="https://facebook.github.io/react/docs/top-level-api.html#react.children" target="_blank"><code>React.Children</code></a>&nbsp;来处理&nbsp;<code>this.props.children</code>&nbsp;。我们可以用&nbsp;<code>React.Children.map</code>&nbsp;来遍历子节点，而不用担心&nbsp;<code>this.props.children</code>&nbsp;的数据类型是&nbsp;<code>undefined</code>&nbsp;还是&nbsp;<code>object</code>。更多的&nbsp;<code>React.Children</code>&nbsp;的方法，请参考<a href="https://facebook.github.io/react/docs/top-level-api.html#react.children" target="_blank">官方文档</a>。</p>

<h2>六、PropTypes</h2>

<p>组件的属性可以接受任意值，字符串、对象、函数等等都可以。有时，我们需要一种机制，验证别人使用组件时，提供的参数是否符合要求。</p>

<p>组件类的<code>PropTypes</code>属性，就是用来验证组件实例的属性是否符合要求（查看&nbsp;<a href="https://github.com/ruanyf/react-demos/blob/master/demo06/index.html" target="_blank"><code>demo06</code></a>）。</p>

<blockquote>
<pre>
<code>
var MyTitle = React.createClass({
  propTypes: {
    title: React.PropTypes.string.isRequired,
  },

  render: function() {
     return &lt;h1&gt; {this.props.title} &lt;/h1&gt;;
   }
});
</code></pre>
</blockquote>

<p>上面的<code>Mytitle</code>组件有一个<code>title</code>属性。<code>PropTypes</code>&nbsp;告诉 React，这个&nbsp;<code>title</code>&nbsp;属性是必须的，而且它的值必须是字符串。现在，我们设置&nbsp;<code>title</code>&nbsp;属性的值是一个数值。</p>

<blockquote>
<pre>
<code>
var data = 123;

ReactDOM.render(
  &lt;MyTitle title={data} /&gt;,
  document.body
);
</code></pre>
</blockquote>

<p>这样一来，<code>title</code>属性就通不过验证了。控制台会显示一行错误信息。</p>

<blockquote>
<pre>
<code>
Warning: Failed propType: Invalid prop `title` of type `number` supplied to `MyTitle`, expected `string`.</code></pre>
</blockquote>

<p>更多的<code>PropTypes</code>设置，可以查看<a href="http://facebook.github.io/react/docs/reusable-components.html" target="_blank">官方文档</a>。</p>

<p>此外，<code>getDefaultProps</code>&nbsp;方法可以用来设置组件属性的默认值。</p>

<blockquote>
<pre>
<code>
var MyTitle = React.createClass({
  getDefaultProps : function () {
    return {
      title : &#39;Hello World&#39;
    };
  },

  render: function() {
     return &lt;h1&gt; {this.props.title} &lt;/h1&gt;;
   }
});

ReactDOM.render(
  &lt;MyTitle /&gt;,
  document.body
);
</code></pre>
</blockquote>

<p>上面代码会输出&quot;Hello World&quot;。</p>

<h2>七、获取真实的DOM节点</h2>

<p>组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual DOM）。只有当它插入文档以后，才会变成真实的 DOM 。根据 React 的设计，所有的 DOM 变动，都先在虚拟 DOM 上发生，然后再将实际发生变动的部分，反映在真实 DOM上，这种算法叫做&nbsp;<a href="http://calendar.perfplanet.com/2013/diff/" target="_blank">DOM diff</a>&nbsp;，它可以极大提高网页的性能表现。</p>

<p>但是，有时需要从组件获取真实 DOM 的节点，这时就要用到&nbsp;<code>ref</code>&nbsp;属性（查看&nbsp;<a href="https://github.com/ruanyf/react-demos/blob/master/demo07/index.html" target="_blank">demo07</a>）。</p>

<blockquote>
<pre>
<code>
var MyComponent = React.createClass({
  handleClick: function() {
    this.refs.myTextInput.focus();
  },
  render: function() {
    return (
      &lt;div&gt;
        &lt;input type=&quot;text&quot; ref=&quot;myTextInput&quot; /&gt;
        &lt;input type=&quot;button&quot; value=&quot;Focus the text input&quot; onClick={this.handleClick} /&gt;
      &lt;/div&gt;
    );
  }
});

ReactDOM.render(
  &lt;MyComponent /&gt;,
  document.getElementById(&#39;example&#39;)
);
</code></pre>
</blockquote>

<p>上面代码中，组件&nbsp;<code>MyComponent</code>&nbsp;的子节点有一个文本输入框，用于获取用户的输入。这时就必须获取真实的 DOM 节点，虚拟 DOM 是拿不到用户输入的。为了做到这一点，文本输入框必须有一个&nbsp;<code>ref</code>&nbsp;属性，然后&nbsp;<code>this.refs.[refName]</code>&nbsp;就会返回这个真实的 DOM 节点。</p>

<p>需要注意的是，由于&nbsp;<code>this.refs.[refName]</code>&nbsp;属性获取的是真实 DOM ，所以必须等到虚拟 DOM 插入文档以后，才能使用这个属性，否则会报错。上面代码中，通过为组件指定&nbsp;<code>Click</code>&nbsp;事件的回调函数，确保了只有等到真实 DOM 发生&nbsp;<code>Click</code>&nbsp;事件之后，才会读取&nbsp;<code>this.refs.[refName]</code>&nbsp;属性。</p>

<p>React 组件支持很多事件，除了&nbsp;<code>Click</code>&nbsp;事件以外，还有&nbsp;<code>KeyDown</code>&nbsp;、<code>Copy</code>、<code>Scroll</code>等，完整的事件清单请查看<a href="http://facebook.github.io/react/docs/events.html#supported-events" target="_blank">官方文档</a>。</p>

<h2>八、this.state</h2>

<p>组件免不了要与用户互动，React 的一大创新，就是将组件看成是一个状态机，一开始有一个初始状态，然后用户互动，导致状态变化，从而触发重新渲染 UI （查看&nbsp;<a href="https://github.com/ruanyf/react-demos/blob/master/demo08/index.html" target="_blank"><code>demo08</code></a>&nbsp;）。</p>

<blockquote>
<pre>
<code>
var LikeButton = React.createClass({
  getInitialState: function() {
    return {liked: false};
  },
  handleClick: function(event) {
    this.setState({liked: !this.state.liked});
  },
  render: function() {
    var text = this.state.liked ? &#39;like&#39; : &#39;haven\&#39;t liked&#39;;
    return (
      &lt;p onClick={this.handleClick}&gt;
        You {text} this. Click to toggle.
      &lt;/p&gt;
    );
  }
});

ReactDOM.render(
  &lt;LikeButton /&gt;,
  document.getElementById(&#39;example&#39;)
);
</code></pre>
</blockquote>

<p>上面代码是一个&nbsp;<code>LikeButton</code>&nbsp;组件，它的&nbsp;<code>getInitialState</code>&nbsp;方法用于定义初始状态，也就是一个对象，这个对象可以通过&nbsp;<code>this.state</code>&nbsp;属性读取。当用户点击组件，导致状态变化，<code>this.setState</code>&nbsp;方法就修改状态值，每次修改以后，自动调用&nbsp;<code>this.render</code>&nbsp;方法，再次渲染组件。</p>

<p>由于&nbsp;<code>this.props</code>&nbsp;和&nbsp;<code>this.state</code>&nbsp;都用于描述组件的特性，可能会产生混淆。一个简单的区分方法是，<code>this.props</code>&nbsp;表示那些一旦定义，就不再改变的特性，而&nbsp;<code>this.state</code>&nbsp;是会随着用户互动而产生变化的特性。</p>

<h2>九、表单</h2>

<p>用户在表单填入的内容，属于用户跟组件的互动，所以不能用&nbsp;<code>this.props</code>&nbsp;读取（查看&nbsp;<a href="https://github.com/ruanyf/react-demos/blob/master/demo09/index.html" target="_blank"><code>demo9</code></a>&nbsp;）。</p>

<blockquote>
<pre>
<code>
var Input = React.createClass({
  getInitialState: function() {
    return {value: &#39;Hello!&#39;};
  },
  handleChange: function(event) {
    this.setState({value: event.target.value});
  },
  render: function () {
    var value = this.state.value;
    return (
      &lt;div&gt;
        &lt;input type=&quot;text&quot; value={value} onChange={this.handleChange} /&gt;
        &lt;p&gt;{value}&lt;/p&gt;
      &lt;/div&gt;
    );
  }
});

ReactDOM.render(&lt;Input/&gt;, document.body);
</code></pre>
</blockquote>

<p>上面代码中，文本输入框的值，不能用&nbsp;<code>this.props.value</code>&nbsp;读取，而要定义一个&nbsp;<code>onChange</code>&nbsp;事件的回调函数，通过&nbsp;<code>event.target.value</code>&nbsp;读取用户输入的值。<code>textarea</code>元素、<code>select</code>元素、<code>radio</code>元素都属于这种情况，更多介绍请参考<a href="http://facebook.github.io/react/docs/forms.html" target="_blank">官方文档</a>。</p>

<h2>十、组件的生命周期</h2>

<p>组件的<a href="https://facebook.github.io/react/docs/working-with-the-browser.html#component-lifecycle" target="_blank">生命周期</a>分成三个状态：</p>

<blockquote>
<ul>
	<li>Mounting：已插入真实 DOM</li>
	<li>Updating：正在被重新渲染</li>
	<li>Unmounting：已移出真实 DOM</li>
</ul>
</blockquote>

<p>React 为每个状态都提供了两种处理函数，<code>will</code>&nbsp;函数在进入状态之前调用，<code>did</code>&nbsp;函数在进入状态之后调用，三种状态共计五种处理函数。</p>

<blockquote>
<ul>
	<li>componentWillMount()</li>
	<li>componentDidMount()</li>
	<li>componentWillUpdate(object nextProps, object nextState)</li>
	<li>componentDidUpdate(object prevProps, object prevState)</li>
	<li>componentWillUnmount()</li>
</ul>
</blockquote>

<p>此外，React 还提供两种特殊状态的处理函数。</p>

<blockquote>
<ul>
	<li>componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用</li>
	<li>shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用</li>
</ul>
</blockquote>

<p>这些方法的详细说明，可以参考<a href="http://facebook.github.io/react/docs/component-specs.html#lifecycle-methods" target="_blank">官方文档</a>。下面是一个例子（查看&nbsp;<a href="https://github.com/ruanyf/react-demos/blob/master/demo10/index.html" target="_blank"><code>demo10</code></a>&nbsp;）。</p>

<blockquote>
<pre>
<code>
var Hello = React.createClass({
  getInitialState: function () {
    return {
      opacity: 1.0
    };
  },

  componentDidMount: function () {
    this.timer = setInterval(function () {
      var opacity = this.state.opacity;
      opacity -= .05;
      if (opacity &lt; 0.1) {
        opacity = 1.0;
      }
      this.setState({
        opacity: opacity
      });
    }.bind(this), 100);
  },

  render: function () {
    return (
      &lt;div style={{opacity: this.state.opacity}}&gt;
        Hello {this.props.name}
      &lt;/div&gt;
    );
  }
});

ReactDOM.render(
  &lt;Hello name=&quot;world&quot;/&gt;,
  document.body
);
</code></pre>
</blockquote>

<p>上面代码在<code>hello</code>组件加载以后，通过&nbsp;<code>componentDidMount</code>&nbsp;方法设置一个定时器，每隔100毫秒，就重新设置组件的透明度，从而引发重新渲染。</p>

<p>另外，组件的<code>style</code>属性的设置方式也值得注意，不能写成</p>

<blockquote>
<pre>
<code>
style=&quot;opacity:{this.state.opacity};&quot;
</code></pre>
</blockquote>

<p>而要写成</p>

<blockquote>
<pre>
<code>
style={{opacity: this.state.opacity}}
</code></pre>
</blockquote>

<p>这是因为&nbsp;<a href="https://facebook.github.io/react/tips/inline-styles.html" target="_blank">React 组件样式</a>是一个对象，所以第一重大括号表示这是 JavaScript 语法，第二重大括号表示样式对象。</p>

<h2>十一、Ajax</h2>

<p>组件的数据来源，通常是通过 Ajax 请求从服务器获取，可以使用&nbsp;<code>componentDidMount</code>&nbsp;方法设置 Ajax 请求，等到请求成功，再用&nbsp;<code>this.setState</code>&nbsp;方法重新渲染 UI （查看&nbsp;<a href="https://github.com/ruanyf/react-demos/blob/master/demo11/index.html" target="_blank"><code>demo11</code></a>&nbsp;）。</p>

<blockquote>
<pre>
<code>
var UserGist = React.createClass({
  getInitialState: function() {
    return {
      username: &#39;&#39;,
      lastGistUrl: &#39;&#39;
    };
  },

  componentDidMount: function() {
    $.get(this.props.source, function(result) {
      var lastGist = result[0];
      if (this.isMounted()) {
        this.setState({
          username: lastGist.owner.login,
          lastGistUrl: lastGist.html_url
        });
      }
    }.bind(this));
  },

  render: function() {
    return (
      &lt;div&gt;
        {this.state.username}&#39;s last gist is
        &lt;a href={this.state.lastGistUrl}&gt;here&lt;/a&gt;.
      &lt;/div&gt;
    );
  }
});

ReactDOM.render(
  &lt;UserGist source=&quot;<a href="https://api.github.com/users/octocat/gists">https://api.github.com/users/octocat/gists</a>&quot; /&gt;,
  document.body
);
</code></pre>
</blockquote>

<p>上面代码使用 jQuery 完成 Ajax 请求，这是为了便于说明。React 本身没有任何依赖，完全可以不用jQuery，而使用其他库。</p>

<p>我们甚至可以把一个Promise对象传入组件，请看<a href="https://github.com/ruanyf/react-demos/blob/master/demo12/index.html" target="_blank"><code>Demo12</code></a>。</p>

<blockquote>
<pre>
<code>
ReactDOM.render(
  &lt;RepoList
    promise={$.getJSON(&#39;<a href="https://api.github.com/search/repositories">https://api.github.com/search/repositories</a>?q=javascript&amp;sort=stars&#39;)}
  /&gt;,
  document.body
);
</code></pre>
</blockquote>

<p>上面代码从Github的API抓取数据，然后将Promise对象作为属性，传给<code>RepoList</code>组件。</p>

<p>如果Promise对象正在抓取数据（pending状态），组件显示&quot;正在加载&quot;；如果Promise对象报错（rejected状态），组件显示报错信息；如果Promise对象抓取数据成功（fulfilled状态），组件显示获取的数据。</p>

<blockquote>
<pre>
<code>
var RepoList = React.createClass({
  getInitialState: function() {
    return { loading: true, error: null, data: null};
  },

  componentDidMount() {
    this.props.promise.then(
      value =&gt; this.setState({loading: false, data: value}),
      error =&gt; this.setState({loading: false, error: error}));
  },

  render: function() {
    if (this.state.loading) {
      return &lt;span&gt;Loading...&lt;/span&gt;;
    }
    else if (this.state.error !== null) {
      return &lt;span&gt;Error: {this.state.error.message}&lt;/span&gt;;
    }
    else {
      var repos = this.state.data.items;
      var repoList = repos.map(function (repo) {
        return (
          &lt;li&gt;
            &lt;a href={repo.html_url}&gt;{repo.name}&lt;/a&gt; ({repo.stargazers_count} stars) &lt;br/&gt; {repo.description}
          &lt;/li&gt;
        );
      });
      return (
        &lt;main&gt;
          &lt;h1&gt;Most Popular JavaScript Projects in Github&lt;/h1&gt;
          &lt;ol&gt;{repoList}&lt;/ol&gt;
        &lt;/main&gt;
      );
    }
  }
});
</code></pre>
</blockquote>

<h2>十二、参考链接</h2>

<ol start="1">
	<li><a href="http://facebook.github.io/react" target="_blank">React&#39;s official site</a></li>
	<li><a href="https://github.com/facebook/react/tree/master/examples" target="_blank">React&#39;s official examples</a></li>
	<li><a href="http://facebook.github.io/react/docs/glossary.html" target="_blank">React (Virtual) DOM Terminology</a>, by Sebastian Markb&aring;ge</li>
	<li><a href="http://www.jackcallister.com/2015/01/05/the-react-quick-start-guide.html" target="_blank">The React Quick Start Guide</a>, by Jack Callister</li>
	<li><a href="https://scotch.io/tutorials/learning-react-getting-started-and-concepts" target="_blank">Learning React.js: Getting Started and Concepts</a>, by Ken Wheeler</li>
	<li><a href="http://ryanclark.me/getting-started-with-react/" target="_blank">Getting started with React</a>, by Ryan Clark</li>
	<li><a href="https://zapier.com/engineering/react-js-tutorial-guide-gotchas/" target="_blank">React JS Tutorial and Guide to the Gotchas</a>, by Justin Deal</li>
	<li><a href="https://github.com/BinaryMuse/react-primer" target="_blank">React Primer</a>, by Binary Muse</li>
	<li><a href="http://blog.zigomir.com/react.js/jquery/2015/01/11/jquery-versus-react-thinking.html" target="_blank">jQuery versus React.js thinking</a>, by zigomir</li>
</ol>
