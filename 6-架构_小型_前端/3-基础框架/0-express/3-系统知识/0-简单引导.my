<h1>Node.js Express 框架</h1>

<hr />
<h2>Express 简介</h2>

<p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。</p>

<p>使用 Express 可以快速地搭建一个完整功能的网站。</p>

<p>Express 框架核心特性：</p>

<ul>
	<li>
	<p>可以设置中间件来响应 HTTP 请求。</p>
	</li>
	<li>
	<p>定义了路由表用于执行不同的 HTTP 请求动作。</p>
	</li>
	<li>
	<p>可以通过向模板传递参数来动态渲染 HTML 页面。</p>
	</li>
</ul>

<hr />
<h2>安装 Express</h2>

<p>安装 Express 并将其保存到依赖列表中：</p>

<pre>
$ cnpm install express --save</pre>

<p>以上命令会将 Express 框架安装在当前目录的&nbsp;<strong>node_modules</strong>&nbsp;目录中，&nbsp;<strong>node_modules</strong>&nbsp;目录下会自动创建 express 目录。以下几个重要的模块是需要与 express 框架一起安装的：</p>

<ul>
	<li>
	<p><strong>body-parser</strong>&nbsp;- node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。</p>
	</li>
	<li>
	<p><strong>cookie-parser</strong>&nbsp;- 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。</p>
	</li>
	<li>
	<p><strong>multer</strong>&nbsp;- node.js 中间件，用于处理 enctype=&quot;multipart/form-data&quot;（设置表单的MIME编码）的表单数据。</p>
	</li>
</ul>

<pre>
$ cnpm install body-parser --save
$ cnpm install cookie-parser --save
$ cnpm install multer --save</pre>

<p>安装完后，我们可以查看下 express 使用的版本号：</p>

<pre>
$ cnpm list express
/data/www/node
└── express@4.15.2  -&gt; /Users/tianqixin/www/node/node_modules/.4.15.2@express</pre>

<hr />
<h2>第一个 Express 框架实例</h2>

<p>接下来我们使用 Express 框架来输出 &quot;Hello World&quot;。</p>

<p>以下实例中我们引入了 express 模块，并在客户端发起请求后，响应 &quot;Hello World&quot; 字符串。</p>

<p>创建 express_demo.js 文件，代码如下所示：</p>

<h3>express_demo.js 文件代码：</h3>

<p>//express_demo.js 文件<br />
var express = require(&#39;express&#39;);<br />
var app = express();<br />
&nbsp;<br />
app.get(&#39;/&#39;, function (req, res) {<br />
&nbsp; &nbsp;res.send(&#39;Hello World&#39;);<br />
})<br />
&nbsp;<br />
var server = app.listen(8081, function () {<br />
&nbsp;<br />
&nbsp; var host = server.address().address<br />
&nbsp; var port = server.address().port<br />
&nbsp;<br />
&nbsp; console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port)<br />
&nbsp;<br />
})</p>

<p>执行以上代码：</p>

<pre>
$ node express_demo.js 
应用实例，访问地址为 http://0.0.0.0:8081</pre>

<p>在浏览器中访问 http://127.0.0.1:8081，结果如下图所示：</p>

<p><img src="http://www.runoob.com/wp-content/uploads/2015/09/nodejs_sample.jpg" /></p>

<hr />
<h2>请求和响应</h2>

<p>Express 应用使用回调函数的参数：&nbsp;<strong>request</strong>&nbsp;和&nbsp;<strong>response</strong>&nbsp;对象来处理请求和响应的数据。</p>

<pre>
app.get(&#39;/&#39;, function (req, res) {
   // --
})</pre>

<p><strong>request</strong>&nbsp;和&nbsp;<strong>response</strong>&nbsp;对象的具体介绍：</p>

<p><strong>Request 对象</strong>&nbsp;- request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：</p>

<ol>
	<li>req.app：当callback为外部文件时，用req.app访问express的实例</li>
	<li>req.baseUrl：获取路由当前安装的URL路径</li>
	<li>req.body / req.cookies：获得「请求主体」/ Cookies</li>
	<li>req.fresh / req.stale：判断请求是否还「新鲜」</li>
	<li>req.hostname / req.ip：获取主机名和IP地址</li>
	<li>req.originalUrl：获取原始请求URL</li>
	<li>req.params：获取路由的parameters</li>
	<li>req.path：获取请求路径</li>
	<li>req.protocol：获取协议类型</li>
	<li>req.query：获取URL的查询参数串</li>
	<li>req.route：获取当前匹配的路由</li>
	<li>req.subdomains：获取子域名</li>
	<li>req.accepts()：检查可接受的请求的文档类型</li>
	<li>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages：返回指定字符集的第一个可接受字符编码</li>
	<li>req.get()：获取指定的HTTP请求头</li>
	<li>req.is()：判断请求头Content-Type的MIME类型</li>
</ol>

<p><strong>Response 对象</strong>&nbsp;- response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：</p>

<ol>
	<li>res.app：同req.app一样</li>
	<li>res.append()：追加指定HTTP头</li>
	<li>res.set()在res.append()后将重置之前设置的头</li>
	<li>res.cookie(name，value [，option])：设置Cookie</li>
	<li>opition: domain / expires / httpOnly / maxAge / path / secure / signed</li>
	<li>res.clearCookie()：清除Cookie</li>
	<li>res.download()：传送指定路径的文件</li>
	<li>res.get()：返回指定的HTTP头</li>
	<li>res.json()：传送JSON响应</li>
	<li>res.jsonp()：传送JSONP响应</li>
	<li>res.location()：只设置响应的Location HTTP头，不设置状态码或者close response</li>
	<li>res.redirect()：设置响应的Location HTTP头，并且设置状态码302</li>
	<li>res.render(view,[locals],callback)：渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。</li>
	<li>res.send()：传送HTTP响应</li>
	<li>res.sendFile(path [，options] [，fn])：传送指定路径的文件 -会自动根据文件extension设定Content-Type</li>
	<li>res.set()：设置HTTP头，传入object可以一次设置多个头</li>
	<li>res.status()：设置HTTP状态码</li>
	<li>res.type()：设置Content-Type的MIME类型</li>
</ol>

<hr />
<h2>路由</h2>

<p>我们已经了解了 HTTP 请求的基本应用，而路由决定了由谁(指定脚本)去响应客户端请求。</p>

<p>在HTTP请求中，我们可以通过路由提取出请求的URL以及GET/POST参数。</p>

<p>接下来我们扩展 Hello World，添加一些功能来处理更多类型的 HTTP 请求。</p>

<p>创建 express_demo2.js 文件，代码如下所示：</p>

<h3>express_demo2.js 文件代码：</h3>

<p>var express = require(&#39;express&#39;);<br />
var app = express();<br />
&nbsp;<br />
// &nbsp;主页输出 &quot;Hello World&quot;<br />
app.get(&#39;/&#39;, function (req, res) {<br />
&nbsp; &nbsp;console.log(&quot;主页 GET 请求&quot;);<br />
&nbsp; &nbsp;res.send(&#39;Hello GET&#39;);<br />
})<br />
&nbsp;<br />
&nbsp;<br />
// &nbsp;POST 请求<br />
app.post(&#39;/&#39;, function (req, res) {<br />
&nbsp; &nbsp;console.log(&quot;主页 POST 请求&quot;);<br />
&nbsp; &nbsp;res.send(&#39;Hello POST&#39;);<br />
})<br />
&nbsp;<br />
// &nbsp;/del_user 页面响应<br />
app.get(&#39;/del_user&#39;, function (req, res) {<br />
&nbsp; &nbsp;console.log(&quot;/del_user 响应 DELETE 请求&quot;);<br />
&nbsp; &nbsp;res.send(&#39;删除页面&#39;);<br />
})<br />
&nbsp;<br />
// &nbsp;/list_user 页面 GET 请求<br />
app.get(&#39;/list_user&#39;, function (req, res) {<br />
&nbsp; &nbsp;console.log(&quot;/list_user GET 请求&quot;);<br />
&nbsp; &nbsp;res.send(&#39;用户列表页面&#39;);<br />
})<br />
&nbsp;<br />
// 对页面 abcd, abxcd, ab123cd, 等响应 GET 请求<br />
app.get(&#39;/ab*cd&#39;, function(req, res) { &nbsp;&nbsp;<br />
&nbsp; &nbsp;console.log(&quot;/ab*cd GET 请求&quot;);<br />
&nbsp; &nbsp;res.send(&#39;正则匹配&#39;);<br />
})<br />
&nbsp;<br />
&nbsp;<br />
var server = app.listen(8081, function () {<br />
&nbsp;<br />
&nbsp; var host = server.address().address<br />
&nbsp; var port = server.address().port<br />
&nbsp;<br />
&nbsp; console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port)<br />
&nbsp;<br />
})</p>

<p>执行以上代码：</p>

<pre>
$ node express_demo2.js 
应用实例，访问地址为 http://0.0.0.0:8081</pre>

<p>接下来你可以尝试访问 http://127.0.0.1:8081 不同的地址，查看效果。</p>

<p>在浏览器中访问 http://127.0.0.1:8081/list_user，结果如下图所示：</p>

<p><img src="http://www.runoob.com/wp-content/uploads/2015/09/express2.jpg" style="height:519px; width:800px" /></p>

<p>在浏览器中访问 http://127.0.0.1:8081/abcd，结果如下图所示：</p>

<p><img src="http://www.runoob.com/wp-content/uploads/2015/09/express1.jpg" style="height:528px; width:800px" /></p>

<p>在浏览器中访问 http://127.0.0.1:8081/abcdefg，结果如下图所示：</p>

<p><img src="http://www.runoob.com/wp-content/uploads/2015/09/express3.jpg" style="height:487px; width:800px" /></p>

<hr />
<h2>静态文件</h2>

<p>Express 提供了内置的中间件<strong>&nbsp;express.static&nbsp;</strong>来设置静态文件如：图片， CSS, JavaScript 等。</p>

<p>你可以使用<strong>&nbsp;express.static&nbsp;</strong>中间件来设置静态文件路径。例如，如果你将图片， CSS, JavaScript 文件放在 public 目录下，你可以这么写：</p>

<pre>
app.use(express.static(&#39;public&#39;));</pre>

<p>我们可以到 public/images 目录下放些图片,如下所示：</p>

<pre>
node_modules
server.js
public/
public/images
public/images/logo.png</pre>

<p>让我们再修改下 &quot;Hello World&quot; 应用添加处理静态文件的功能。</p>

<p>创建 express_demo3.js 文件，代码如下所示：</p>

<h3>express_demo3.js 文件代码：</h3>

<p>var express = require(&#39;express&#39;);<br />
var app = express();<br />
&nbsp;<br />
app.use(express.static(&#39;public&#39;));<br />
&nbsp;<br />
app.get(&#39;/&#39;, function (req, res) {<br />
&nbsp; &nbsp;res.send(&#39;Hello World&#39;);<br />
})<br />
&nbsp;<br />
var server = app.listen(8081, function () {<br />
&nbsp;<br />
&nbsp; var host = server.address().address<br />
&nbsp; var port = server.address().port<br />
&nbsp;<br />
&nbsp; console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port)<br />
&nbsp;<br />
})</p>

<p>执行以上代码：</p>

<pre>
$ node express_demo3.js 
应用实例，访问地址为 http://0.0.0.0:8081</pre>

<p>执行以上代码：</p>

<p>在浏览器中访问 http://127.0.0.1:8081/images/logo.png（本实例采用了菜鸟教程的logo），结果如下图所示：</p>

<p><img src="http://www.runoob.com/wp-content/themes/runoob/assets/img/runoob-logo.png" /></p>

<hr />
<h2>GET 方法</h2>

<p>以下实例演示了在表单中通过 GET 方法提交两个参数，我们可以使用 server.js 文件内的&nbsp;<strong>process_get</strong>&nbsp;路由器来处理输入：</p>

<h3>index.htm 文件代码：</h3>

<p>&lt;html&gt;<br />
&lt;body&gt;<br />
&lt;form action=&quot;http://127.0.0.1:8081/process_get&quot; method=&quot;GET&quot;&gt;<br />
First Name: &lt;input type=&quot;text&quot; name=&quot;first_name&quot;&gt; &nbsp;&lt;br&gt;<br />
&nbsp;<br />
Last Name: &lt;input type=&quot;text&quot; name=&quot;last_name&quot;&gt;<br />
&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;<br />
&lt;/form&gt;<br />
&lt;/body&gt;<br />
&lt;/html&gt;</p>

<h3>server.js 文件代码：</h3>

<p>var express = require(&#39;express&#39;);<br />
var app = express();<br />
&nbsp;<br />
app.use(express.static(&#39;public&#39;));<br />
&nbsp;<br />
app.get(&#39;/index.htm&#39;, function (req, res) {<br />
&nbsp; &nbsp;res.sendFile( __dirname + &quot;/&quot; + &quot;index.htm&quot; );<br />
})<br />
&nbsp;<br />
app.get(&#39;/process_get&#39;, function (req, res) {<br />
&nbsp;<br />
&nbsp; &nbsp;// 输出 JSON 格式<br />
&nbsp; &nbsp;var response = {<br />
&nbsp; &nbsp; &nbsp; &nbsp;&quot;first_name&quot;:req.query.first_name,<br />
&nbsp; &nbsp; &nbsp; &nbsp;&quot;last_name&quot;:req.query.last_name<br />
&nbsp; &nbsp;};<br />
&nbsp; &nbsp;console.log(response);<br />
&nbsp; &nbsp;res.end(JSON.stringify(response));<br />
})<br />
&nbsp;<br />
var server = app.listen(8081, function () {<br />
&nbsp;<br />
&nbsp; var host = server.address().address<br />
&nbsp; var port = server.address().port<br />
&nbsp;<br />
&nbsp; console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port)<br />
&nbsp;<br />
})</p>

<p>执行以上代码：</p>

<pre>
node server.js 
应用实例，访问地址为 http://0.0.0.0:8081</pre>

<p>浏览器访问 http://127.0.0.1:8081/index.htm，如图所示：</p>

<p><img src="http://www.runoob.com/wp-content/uploads/2015/09/express5.jpg" /></p>

<p>现在你可以向表单输入数据，并提交，如下演示：</p>

<p><img src="http://www.runoob.com/wp-content/uploads/2015/09/nodejs-gif6.gif" /></p>

<hr />
<h2>POST 方法</h2>

<p>以下实例演示了在表单中通过 POST 方法提交两个参数，我们可以使用 server.js 文件内的&nbsp;<strong>process_post</strong>&nbsp;路由器来处理输入：</p>

<h3>index.htm 文件代码：</h3>

<p>&lt;html&gt;<br />
&lt;body&gt;<br />
&lt;form action=&quot;http://127.0.0.1:8081/process_post&quot; method=&quot;POST&quot;&gt;<br />
First Name: &lt;input type=&quot;text&quot; name=&quot;first_name&quot;&gt; &nbsp;&lt;br&gt;<br />
&nbsp;<br />
Last Name: &lt;input type=&quot;text&quot; name=&quot;last_name&quot;&gt;<br />
&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;<br />
&lt;/form&gt;<br />
&lt;/body&gt;<br />
&lt;/html&gt;</p>

<h3>server.js 文件代码：</h3>

<p>var express = require(&#39;express&#39;);<br />
var app = express();<br />
var bodyParser = require(&#39;body-parser&#39;);<br />
&nbsp;<br />
// 创建 application/x-www-form-urlencoded 编码解析<br />
var urlencodedParser = bodyParser.urlencoded({ extended: false })<br />
&nbsp;<br />
app.use(express.static(&#39;public&#39;));<br />
&nbsp;<br />
app.get(&#39;/index.htm&#39;, function (req, res) {<br />
&nbsp; &nbsp;res.sendFile( __dirname + &quot;/&quot; + &quot;index.htm&quot; );<br />
})<br />
&nbsp;<br />
app.post(&#39;/process_post&#39;, urlencodedParser, function (req, res) {<br />
&nbsp;<br />
&nbsp; &nbsp;// 输出 JSON 格式<br />
&nbsp; &nbsp;var response = {<br />
&nbsp; &nbsp; &nbsp; &nbsp;&quot;first_name&quot;:req.body.first_name,<br />
&nbsp; &nbsp; &nbsp; &nbsp;&quot;last_name&quot;:req.body.last_name<br />
&nbsp; &nbsp;};<br />
&nbsp; &nbsp;console.log(response);<br />
&nbsp; &nbsp;res.end(JSON.stringify(response));<br />
})<br />
&nbsp;<br />
var server = app.listen(8081, function () {<br />
&nbsp;<br />
&nbsp; var host = server.address().address<br />
&nbsp; var port = server.address().port<br />
&nbsp;<br />
&nbsp; console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port)<br />
&nbsp;<br />
})</p>

<p>执行以上代码：</p>

<pre>
$ node server.js
应用实例，访问地址为 http://0.0.0.0:8081</pre>

<p>浏览器访问 http://127.0.0.1:8081/index.htm，如图所示：</p>

<p><img src="http://www.runoob.com/wp-content/uploads/2015/09/express5.jpg" /></p>

<p>现在你可以向表单输入数据，并提交，如下演示：</p>

<p><img src="http://www.runoob.com/wp-content/uploads/2015/09/nodejs-gif7.gif" /></p>

<hr />
<h2>文件上传</h2>

<p>以下我们创建一个用于上传文件的表单，使用 POST 方法，表单 enctype 属性设置为 multipart/form-data。</p>

<h3>index.htm 文件代码：</h3>

<p>&lt;html&gt;<br />
&lt;head&gt;<br />
&lt;title&gt;文件上传表单&lt;/title&gt;<br />
&lt;/head&gt;<br />
&lt;body&gt;<br />
&lt;h3&gt;文件上传：&lt;/h3&gt;<br />
选择一个文件上传: &lt;br /&gt;<br />
&lt;form action=&quot;/file_upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;<br />
&lt;input type=&quot;file&quot; name=&quot;image&quot; size=&quot;50&quot; /&gt;<br />
&lt;br /&gt;<br />
&lt;input type=&quot;submit&quot; value=&quot;上传文件&quot; /&gt;<br />
&lt;/form&gt;<br />
&lt;/body&gt;<br />
&lt;/html&gt;</p>

<h3>server.js 文件代码：</h3>

<p>var express = require(&#39;express&#39;);<br />
var app = express();<br />
var fs = require(&quot;fs&quot;);<br />
&nbsp;<br />
var bodyParser = require(&#39;body-parser&#39;);<br />
var multer &nbsp;= require(&#39;multer&#39;);<br />
&nbsp;<br />
app.use(express.static(&#39;public&#39;));<br />
app.use(bodyParser.urlencoded({ extended: false }));<br />
app.use(multer({ dest: &#39;/tmp/&#39;}).array(&#39;image&#39;));<br />
&nbsp;<br />
app.get(&#39;/index.htm&#39;, function (req, res) {<br />
&nbsp; &nbsp;res.sendFile( __dirname + &quot;/&quot; + &quot;index.htm&quot; );<br />
})<br />
&nbsp;<br />
app.post(&#39;/file_upload&#39;, function (req, res) {<br />
&nbsp;<br />
&nbsp; &nbsp;console.log(req.files[0]); &nbsp;// 上传的文件信息<br />
&nbsp;<br />
&nbsp; &nbsp;var des_file = __dirname + &quot;/&quot; + req.files[0].originalname;<br />
&nbsp; &nbsp;fs.readFile( req.files[0].path, function (err, data) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; fs.writeFile(des_file, data, function (err) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if( err ){<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log( err );<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}else{<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;response = {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;message:&#39;File uploaded successfully&#39;,&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;filename:req.files[0].originalname<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; };<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log( response );<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; res.end( JSON.stringify( response ) );<br />
&nbsp; &nbsp; &nbsp; &nbsp;});<br />
&nbsp; &nbsp;});<br />
})<br />
&nbsp;<br />
var server = app.listen(8081, function () {<br />
&nbsp;<br />
&nbsp; var host = server.address().address<br />
&nbsp; var port = server.address().port<br />
&nbsp;<br />
&nbsp; console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port)<br />
&nbsp;<br />
})</p>

<p>执行以上代码：</p>

<pre>
$ node server.js 
应用实例，访问地址为 http://0.0.0.0:8081</pre>

<p>浏览器访问 http://127.0.0.1:8081/index.htm，如图所示：</p>

<p><img src="http://www.runoob.com/wp-content/uploads/2015/09/express6.jpg" /></p>

<p>现在你可以向表单输入数据，并提交，如下演示：</p>

<p><img src="http://www.runoob.com/wp-content/uploads/2015/09/nodejs-gif8.gif" /></p>

<hr />
<h2>Cookie 管理</h2>

<p>我们可以使用中间件向 Node.js 服务器发送 cookie 信息，以下代码输出了客户端发送的 cookie 信息：</p>

<h3>express_cookie.js 文件代码：</h3>

<p>// express_cookie.js 文件<br />
var express &nbsp; &nbsp; &nbsp;= require(&#39;express&#39;)<br />
var cookieParser = require(&#39;cookie-parser&#39;)<br />
var util = require(&#39;util&#39;);<br />
&nbsp;<br />
var app = express()<br />
app.use(cookieParser())<br />
&nbsp;<br />
app.get(&#39;/&#39;, function(req, res) {<br />
&nbsp; &nbsp; console.log(&quot;Cookies: &quot; + util.inspect(req.cookies));<br />
})<br />
&nbsp;<br />
app.listen(8081)</p>

<p>执行以上代码：</p>

<pre>
$ node express_cookie.js </pre>

<p>现在你可以访问 http://127.0.0.1:8081 并查看终端信息的输出，如下演示：</p>

<p><img src="http://www.runoob.com/wp-content/uploads/2015/09/nodejs-gif9.gif" /></p>

<h2>相关资料</h2>

<ul>
	<li>Express官网：&nbsp;<a href="http://expressjs.com/" target="_blank">http://expressjs.com/</a></li>
	<li>Express4.x API 中文版：&nbsp;<a href="https://www.runoob.com/w3cnote/express-4-x-api.html" target="_blank">Express4.x API Chinese</a></li>
	<li>Express4.x API：<a href="http://expressjs.com/zh-cn/4x/api.html" target="_blank">http://expressjs.com/zh-cn/4x/api.html</a></li>
</ul>
