<h1>ES6箭头函数</h1>

<p>（Arrow Functions）</p>

<p>ES6可以使用&ldquo;箭头&rdquo;（=&gt;）定义函数，注意是函数，不要使用这种方式定义类（构造器）。</p>

<p>快速理解：函数 = 参数 =&gt; 返回结果</p>

<h2>一、语法</h2>

<h3>1. 具有一个参数的简单函数</h3>

<p>var single = a =&gt; a<br />
single(&#39;hello, world&#39;) // &#39;hello, world&#39;</p>

<h3>2. 没有参数的需要用在箭头前加上小括号</h3>

<p>var log = () =&gt; {<br />
&nbsp; &nbsp; alert(&#39;no param&#39;)<br />
}</p>

<h3>3. 多个参数需要用到小括号，参数间逗号间隔，例如两个数字相加</h3>

<p>var add = (a, b) =&gt; a + b<br />
add(3, 8) // 11</p>

<h3>4. 函数体多条语句需要用到大括号</h3>

<p>var add = (a, b) =&gt; {<br />
&nbsp; &nbsp; if (typeof a == &#39;number&#39; &amp;&amp; typeof b == &#39;number&#39;) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; return a + b<br />
&nbsp; &nbsp; } else {<br />
&nbsp; &nbsp; &nbsp; &nbsp; return 0<br />
&nbsp; &nbsp; }<br />
}</p>

<h3>5. 返回对象时需要用小括号包起来，因为大括号被占用解释为代码块了</h3>

<p>var getHash = arr =&gt; {<br />
&nbsp; &nbsp; // ...<br />
&nbsp; &nbsp; return ({<br />
&nbsp; &nbsp; &nbsp; &nbsp; name: &#39;Jack&#39;,<br />
&nbsp; &nbsp; &nbsp; &nbsp; age: 33<br />
&nbsp; &nbsp; })<br />
}</p>

<h3>6. 直接作为事件handler</h3>

<p>document.addEventListener(&#39;click&#39;, ev =&gt; {<br />
&nbsp; &nbsp; console.log(ev)<br />
})<br />
　　</p>

<h3>7. 作为数组排序回调</h3>

<p>var arr = [1, 9 , 2, 4, 3, 8].sort((a, b) =&gt; {<br />
&nbsp; &nbsp; if (a - b &gt; 0 ) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; return 1<br />
&nbsp; &nbsp; } else {<br />
&nbsp; &nbsp; &nbsp; &nbsp; return -1<br />
&nbsp; &nbsp; }<br />
})<br />
arr // [1, 2, 3, 4, 8, 9]</p>

<h2>二、缩写介绍</h2>

<p>render: h =&gt; h(App)&nbsp;是下面内容的缩写：</p>

<h3>1、正常写法</h3>

<p>render: function (createElement) {<br />
&nbsp; &nbsp; return createElement(App);<br />
}</p>

<h3>2、ES6语法写法</h3>

<p>进一步缩写为(ES6 语法)：<br />
render (createElement) {<br />
&nbsp; &nbsp; return createElement(App);<br />
}</p>

<p>再进一步缩写为：<br />
render (h){<br />
&nbsp; &nbsp; return h(App);<br />
}</p>

<h3>3、箭头函数写法</h3>

<p>按照 ES6 箭头函数的写法，就得到了：<br />
render :&nbsp; h&nbsp;=&gt;&nbsp;h(App);</p>

<h2>三、注意点</h2>

<h3>1. typeof运算符和普通的function一样</h3>

<p>var func = a =&gt; a<br />
console.log(typeof func); // &quot;function&quot;<br />
　　</p>

<h3>2. instanceof也返回true，表明也是Function的实例</h3>

<p>console.log(func instanceof Function); // true<br />
　　</p>

<h3>3. this固定，不再善变</h3>

<p>obj = {<br />
&nbsp; &nbsp; data: [&#39;John Backus&#39;, &#39;John Hopcroft&#39;],<br />
&nbsp; &nbsp; init: function() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; document.onclick = ev =&gt; {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; alert(this.data) // [&#39;John Backus&#39;, &#39;John Hopcroft&#39;]<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
&nbsp; &nbsp; &nbsp; &nbsp; // 非箭头函数<br />
&nbsp; &nbsp; &nbsp; &nbsp; // document.onclick = function(ev) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; // &nbsp; &nbsp; alert(this.data) // undefined<br />
&nbsp; &nbsp; &nbsp; &nbsp; // }<br />
&nbsp; &nbsp; }<br />
}<br />
obj.init()<br />
这个很有用，再不用写me，self，_this了，或者bind。</p>

<h3>4. 箭头函数不能用new</h3>

<p>var Person = (name, age) =&gt; {<br />
&nbsp; &nbsp; this.name = name<br />
&nbsp; &nbsp; this.age = age<br />
}<br />
var p = new Func(&#39;John&#39;, 33) // error</p>

<h3>5. 不能使用argument</h3>

<p>var func = () =&gt; {<br />
&nbsp; &nbsp; console.log(arguments)<br />
}<br />
func(55) //</p>

<p>对于5，在Firefox36里测试是可以输出55的，貌似并没有这个限制</p>
