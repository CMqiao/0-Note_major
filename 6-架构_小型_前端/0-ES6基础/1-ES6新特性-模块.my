<h1>ES6新特性之模块Module用法详解</h1>

<p>这篇文章主要介绍了ES6新特性之模块Module用法,简要说明了模块Module的概念、功能并结合实例形式分析了模块Module的使用方法与相关注意事项,需要的朋友可以参考下</p>

<p>本文实例讲述了ES6新特性之模块Module用法。分享给大家供大家参考，具体如下：</p>

<h2><strong>一、Module简介</strong></h2>

<p>ES6的Class只是面向对象编程的语法糖，升级了ES5的构造函数的原型链继承的写法，并没有解决模块化问题。Module功能就是为了解决这个问题而提出的。</p>

<p>历史上，JavaScript一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其他语言都有这项功能。</p>

<p>在ES6之前，社区制定了一些模块加载方案，最主要的有CommonJS和AMD两种。前者用于服务器，后者用于浏览器。ES6在语言规格的层面上，实现了模块功能，而且实现得相当简单，完全可以取代现有的CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。</p>

<p>ES6模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系（这种加载称为&ldquo;编译时加载&rdquo;），以及输入和输出的变量。CommonJS和AMD模块，都只能在运行时确定这些东西。</p>

<p>浏览器使用ES6模块的语法如下。</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>
			</td>
			<td>
			<p><code>&lt;script type=</code><code>&quot;module&quot;</code> <code>src=</code><code>&quot;fs.js&quot;</code><code>&gt;&lt;/script&gt;</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>上面代码在网页中插入一个模块fs.js，由于type属性设为module，所以浏览器知道这是一个ES6模块。</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>
			</td>
			<td>
			<p><code>// ES6加载模块</code></p>

			<p><code>import { stat, exists, readFile } from </code><code>&#39;fs&#39;</code><code>;</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>上面代码通过import去加载一个Module，加载其中的一些方法。</p>

<h2><strong>二、import 和 export</strong></h2>

<p>模块功能主要由两个命令构成：export和import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。</p>

<p>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。下面是一个JS文件，里面使用export命令输出变量。</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>

			<p>3</p>

			<p>4</p>
			</td>
			<td>
			<p><code>// profile.js</code></p>

			<p><code>export </code><code>var</code> <code>firstName = </code><code>&#39;Michael&#39;</code><code>;</code></p>

			<p><code>export </code><code>var</code> <code>lastName = </code><code>&#39;Jackson&#39;</code><code>;</code></p>

			<p><code>export </code><code>var</code> <code>year = 1958;</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>export的写法，除了像上面这样，还有另外一种。(推荐这种，因为这样就可以在脚本尾部，一眼看清楚输出了哪些变量。)</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>

			<p>3</p>

			<p>4</p>

			<p>5</p>
			</td>
			<td>
			<p><code>// profile.js</code></p>

			<p><code>var</code> <code>firstName = </code><code>&#39;Michael&#39;</code><code>;</code></p>

			<p><code>var</code> <code>lastName = </code><code>&#39;Jackson&#39;</code><code>;</code></p>

			<p><code>var</code> <code>year = 1958;</code></p>

			<p><code>export {firstName, lastName, year};</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>export命令除了输出变量，还可以输出函数或类（class）。通常情况下，export输出的变量就是本来的名字，但是可以使用as关键字重命名。</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>

			<p>3</p>

			<p>4</p>

			<p>5</p>

			<p>6</p>

			<p>7</p>
			</td>
			<td>
			<p><code>function</code> <code>v1() { ... }</code></p>

			<p><code>function</code> <code>v2() { ... }</code></p>

			<p><code>export {</code></p>

			<p><code>&nbsp;&nbsp;</code><code>v1 as streamV1,</code></p>

			<p><code>&nbsp;&nbsp;</code><code>v2 as streamV2,</code></p>

			<p><code>&nbsp;&nbsp;</code><code>v2 as streamLatestVersion</code></p>

			<p><code>};</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>使用export命令定义了模块的对外接口以后，其他JS文件就可以通过import命令加载这个模块（文件）。</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>

			<p>3</p>

			<p>4</p>

			<p>5</p>
			</td>
			<td>
			<p><code>// main.js</code></p>

			<p><code>import {firstName, lastName, year} from </code><code>&#39;./profile&#39;</code><code>;</code></p>

			<p><code>function</code> <code>setName(element) {</code></p>

			<p><code>&nbsp;&nbsp;</code><code>element.textContent = firstName + </code><code>&#39; &#39;</code> <code>+ lastName;</code></p>

			<p><code>}</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>上面代码的import命令，就用于加载profile.js文件，并从中输入变量。import命令接受一个对象（用大括号表示），里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同。</p>

<p>如果想为输入的变量重新取一个名字，import命令要使用as关键字，将输入的变量重命名。</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>
			</td>
			<td>
			<p><code>import { lastName as surname } from </code><code>&#39;./profile&#39;</code><code>;</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>import命令具有提升效果，会提升到整个模块的头部，首先执行。</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>
			</td>
			<td>
			<p><code>foo();</code></p>

			<p><code>import { foo } from </code><code>&#39;my_module&#39;</code><code>;</code></p>
			</td>
		</tr>
	</tbody>
</table>

<h2><strong>三、模块的整体加载</strong></h2>

<p>除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。</p>

<p>有一个circle.js文件，它输出两个方法area和circumference。</p>

<p>现在，加载这个模块。</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>

			<p>3</p>

			<p>4</p>
			</td>
			<td>
			<p><code>// main.js</code></p>

			<p><code>import { area, circumference } from </code><code>&#39;./circle&#39;</code><code>;</code></p>

			<p><code>console.log(</code><code>&#39;圆面积：&#39;</code> <code>+ area(4));</code></p>

			<p><code>console.log(</code><code>&#39;圆周长：&#39;</code> <code>+ circumference(14));</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>上面写法是逐一指定要加载的方法，整体加载的写法如下。</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>

			<p>3</p>
			</td>
			<td>
			<p><code>import * as circle from </code><code>&#39;./circle&#39;</code><code>;</code></p>

			<p><code>console.log(</code><code>&#39;圆面积：&#39;</code> <code>+ circle.area(4));</code></p>

			<p><code>console.log(</code><code>&#39;圆周长：&#39;</code> <code>+ circle.circumference(14));</code></p>
			</td>
		</tr>
	</tbody>
</table>

<h2><strong>四、export default</strong></h2>

<p>为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到export default命令，为模块指定默认输出。</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>

			<p>3</p>

			<p>4</p>
			</td>
			<td>
			<p><code>// export-default.js</code></p>

			<p><code>export </code><code>default</code> <code>function</code> <code>() {</code></p>

			<p><code>&nbsp;&nbsp;</code><code>console.log(</code><code>&#39;foo&#39;</code><code>);</code></p>

			<p><code>}</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>上面代码是一个模块文件export-default.js，它的默认输出是一个函数。</p>

<p>其他模块加载该模块时，import命令可以为该匿名函数指定任意名字。</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>

			<p>3</p>
			</td>
			<td>
			<p><code>// import-default.js</code></p>

			<p><code>import customName from </code><code>&#39;./export-default&#39;</code><code>;</code></p>

			<p><code>customName(); </code><code>// &#39;foo&#39;</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>需要注意的是，这时import命令后面，不使用大括号。</p>

<p>本质上，export default就是输出一个叫做default的变量或方法，然后系统允许你为它取任意名字。它后面不能跟变量声明语句。</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>

			<p>3</p>

			<p>4</p>

			<p>5</p>
			</td>
			<td>
			<p><code>// 正确</code></p>

			<p><code>var</code> <code>a = 1;</code></p>

			<p><code>export </code><code>default</code> <code>a;</code></p>

			<p><code>// 错误</code></p>

			<p><code>export </code><code>default</code> <code>var</code> <code>a = 1;</code></p>
			</td>
		</tr>
	</tbody>
</table>

<h2><strong>五、ES6模块加载的实质</strong></h2>

<p>ES6模块加载的机制，与CommonJS模块完全不同。CommonJS模块输出的是一个值的拷贝，而ES6模块输出的是值的引用。</p>

<p>CommonJS模块输出的是被输出值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。请看下面这个模块文件lib.js的例子。</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>

			<p>3</p>

			<p>4</p>

			<p>5</p>

			<p>6</p>

			<p>7</p>

			<p>8</p>

			<p>9</p>
			</td>
			<td>
			<p><code>// lib.js</code></p>

			<p><code>var</code> <code>counter = 3;</code></p>

			<p><code>function</code> <code>incCounter() {</code></p>

			<p><code>&nbsp;</code><code>counter++;</code></p>

			<p><code>}</code></p>

			<p><code>module.exports = {</code></p>

			<p><code>&nbsp;</code><code>counter: counter,</code></p>

			<p><code>&nbsp;</code><code>incCounter: incCounter,</code></p>

			<p><code>};</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>上面代码输出内部变量counter和改写这个变量的内部方法incCounter。然后，在main.js里面加载这个模块。</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>

			<p>3</p>

			<p>4</p>

			<p>5</p>
			</td>
			<td>
			<p><code>// main.js</code></p>

			<p><code>var</code> <code>mod = require(</code><code>&#39;./lib&#39;</code><code>);</code></p>

			<p><code>console.log(mod.counter); </code><code>// 3</code></p>

			<p><code>mod.incCounter();</code></p>

			<p><code>console.log(mod.counter); </code><code>// 3</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>上面代码说明，lib.js模块加载以后，它的内部变化就影响不到输出的mod.counter了。这是因为mod.counter是一个原始类型的值，会被缓存。除非写成一个函数，才能得到内部变动后的值。</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>

			<p>3</p>

			<p>4</p>

			<p>5</p>

			<p>6</p>

			<p>7</p>

			<p>8</p>

			<p>9</p>

			<p>10</p>

			<p>11</p>
			</td>
			<td>
			<p><code>// lib.js</code></p>

			<p><code>var</code> <code>counter = 3;</code></p>

			<p><code>function</code> <code>incCounter() {</code></p>

			<p><code>&nbsp;</code><code>counter++;</code></p>

			<p><code>}</code></p>

			<p><code>module.exports = {</code></p>

			<p><code>&nbsp;</code><code>get counter() {</code></p>

			<p><code>&nbsp;&nbsp;</code><code>return</code> <code>counter</code></p>

			<p><code>&nbsp;</code><code>},</code></p>

			<p><code>&nbsp;</code><code>incCounter: incCounter,</code></p>

			<p><code>};</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>上面代码中，输出的counter属性实际上是一个取值器函数。现在再执行main.js，就可以正确读取内部变量counter的变动了。</p>

<p>ES6模块的运行机制与CommonJS不一样，它遇到模块加载命令import时，不会去执行模块，而是只生成一个动态的只读引用。等到真的需要用到时，再到模块里面去取值，换句话说，ES6的输入有点像Unix系统的&ldquo;符号连接&rdquo;，原始值变了，import输入的值也会跟着变。因此，ES6模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</p>

<p>还是举上面的例子。</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>

			<p>3</p>

			<p>4</p>

			<p>5</p>

			<p>6</p>

			<p>7</p>

			<p>8</p>

			<p>9</p>

			<p>10</p>
			</td>
			<td>
			<p><code>// lib.js</code></p>

			<p><code>export let counter = 3;</code></p>

			<p><code>export </code><code>function</code> <code>incCounter() {</code></p>

			<p><code>&nbsp;</code><code>counter++;</code></p>

			<p><code>}</code></p>

			<p><code>// main.js</code></p>

			<p><code>import { counter, incCounter } from </code><code>&#39;./lib&#39;</code><code>;</code></p>

			<p><code>console.log(counter); </code><code>// 3</code></p>

			<p><code>incCounter();</code></p>

			<p><code>console.log(counter); </code><code>// 4</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>上面代码说明，ES6模块输入的变量counter是活的，完全反应其所在模块lib.js内部的变化。</p>

<p>由于ES6输入的模块变量，只是一个&ldquo;符号连接&rdquo;，所以这个变量是只读的，对它进行重新赋值会报错。</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>

			<p>3</p>

			<p>4</p>

			<p>5</p>

			<p>6</p>
			</td>
			<td>
			<p><code>// lib.js</code></p>

			<p><code>export let obj = {};</code></p>

			<p><code>// main.js</code></p>

			<p><code>import { obj } from </code><code>&#39;./lib&#39;</code><code>;</code></p>

			<p><code>obj.prop = 123; </code><code>// OK</code></p>

			<p><code>obj = {}; </code><code>// TypeError</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>上面代码中，main.js从lib.js输入变量obj，可以对obj添加属性，但是重新赋值就会报错。因为变量obj指向的地址是只读的，不能重新赋值，这就好比main.js创造了一个名为obj的const变量。</p>

<p>最后，export通过接口，输出的是同一个值。不同的脚本加载这个接口，得到的都是同样的实例。</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>

			<p>3</p>

			<p>4</p>

			<p>5</p>

			<p>6</p>

			<p>7</p>

			<p>8</p>

			<p>9</p>

			<p>10</p>

			<p>11</p>
			</td>
			<td>
			<p><code>// mod.js</code></p>

			<p><code>function</code> <code>C() {</code></p>

			<p><code>&nbsp;</code><code>this</code><code>.sum = 0;</code></p>

			<p><code>&nbsp;</code><code>this</code><code>.add = </code><code>function</code> <code>() {</code></p>

			<p><code>&nbsp;&nbsp;</code><code>this</code><code>.sum += 1;</code></p>

			<p><code>&nbsp;</code><code>};</code></p>

			<p><code>&nbsp;</code><code>this</code><code>.show = </code><code>function</code> <code>() {</code></p>

			<p><code>&nbsp;&nbsp;</code><code>console.log(</code><code>this</code><code>.sum);</code></p>

			<p><code>&nbsp;</code><code>};</code></p>

			<p><code>}</code></p>

			<p><code>export let c = </code><code>new</code> <code>C();</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>上面的脚本mod.js，输出的是一个C的实例。不同的脚本加载这个模块，得到的都是同一个实例。</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>

			<p>3</p>

			<p>4</p>

			<p>5</p>

			<p>6</p>

			<p>7</p>

			<p>8</p>

			<p>9</p>
			</td>
			<td>
			<p><code>// x.js</code></p>

			<p><code>import {c} from </code><code>&#39;./mod&#39;</code><code>;</code></p>

			<p><code>c.add();</code></p>

			<p><code>// y.js</code></p>

			<p><code>import {c} from </code><code>&#39;./mod&#39;</code><code>;</code></p>

			<p><code>c.show();</code></p>

			<p><code>// main.js</code></p>

			<p><code>import </code><code>&#39;./x&#39;</code><code>;</code></p>

			<p><code>import </code><code>&#39;./y&#39;</code><code>;</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>现在执行main.js，输出的是1。这就证明了x.js和y.js加载的都是C的同一个实例。</p>

<p>希望本文所述对大家ECMAScript程序设计有所帮助。</p>

<h4>您可能感兴趣的文章:</h4>

<ul>
	<li><a href="https://www.jb51.net/article/110062.htm" target="_blank" title="ES6新特性之Symbol类型用法分析">ES6新特性之Symbol类型用法分析</a></li>
	<li><a href="https://www.jb51.net/article/110196.htm" target="_blank" title="ES6新特性之函数的扩展实例详解">ES6新特性之函数的扩展实例详解</a></li>
	<li><a href="https://www.jb51.net/article/110184.htm" target="_blank" title="ES6新特性之解构、参数、模块和记号用法示例">ES6新特性之解构、参数、模块和记号用法示例</a></li>
	<li><a href="https://www.jb51.net/article/110174.htm" target="_blank" title="ES6新特性之数组、Math和扩展操作符用法示例">ES6新特性之数组、Math和扩展操作符用法示例</a></li>
	<li><a href="https://www.jb51.net/article/110168.htm" target="_blank" title="ES6新特性之变量和字符串用法示例">ES6新特性之变量和字符串用法示例</a></li>
	<li><a href="https://www.jb51.net/article/110148.htm" target="_blank" title="ES6(ECMAScript 6)新特性之模板字符串用法分析">ES6(ECMAScript 6)新特性之模板字符串用法分析</a></li>
	<li><a href="https://www.jb51.net/article/89553.htm" target="_blank" title="深入浅出ES6新特性之函数默认参数和箭头函数">深入浅出ES6新特性之函数默认参数和箭头函数</a></li>
	<li><a href="https://www.jb51.net/article/89087.htm" target="_blank" title="JavaScript中的Reflect对象详解(ES6新特性)">JavaScript中的Reflect对象详解(ES6新特性)</a></li>
	<li><a href="https://www.jb51.net/article/87494.htm" target="_blank" title="JavaScript ES6的新特性使用新方法定义Class">JavaScript ES6的新特性使用新方法定义Class</a></li>
	<li><a href="https://www.jb51.net/article/80725.htm" target="_blank" title="ES6的新特性概览">ES6的新特性概览</a></li>
	<li><a href="https://www.jb51.net/article/114567.htm" target="_blank" title="ES6新特性之类(Class)和继承(Extends)相关概念与用法分析">ES6新特性之类(Class)和继承(Extends)相关概念与用法分析</a></li>
</ul>
