<h1>js 中 Map/Set 集合</h1>

<h3>Map</h3>

<p><code>Map</code>是一组键值对的结构，具有极快的查找速度。</p>

<p>使用map.set的时候，有时通过key遍历就不行了，使用下面的方式可以遍历。</p>

<p>同时，map对象转string对象，稍微麻烦一点，先<strong>JSON.stringify(map) 转成string，但此时的string不能用，会多出双引号。要JSON.parse转成正常点的对象，再转字符串。</strong></p>

<p>function showMap(){</p>

<p>&nbsp;&nbsp; &nbsp;var map = new Map();<br />
&nbsp;&nbsp; &nbsp;map[&quot;name&quot;] = &quot;wang&quot;;</p>

<p>&nbsp;&nbsp; &nbsp;alert(JSON.stringify(map));</p>

<p><strong>&nbsp;&nbsp; &nbsp;var mstr = JSON.stringify(map); &nbsp; &nbsp; &nbsp;//mstr = &quot;{&quot;name&quot;:&quot;wang&quot;}&quot;, map = Map(0) {}<br />
&nbsp; &nbsp; var jsonstr = JSON.parse(mstr); &nbsp; &nbsp; &nbsp;//jsonstr = {name: &quot;wang&quot;}<br />
&nbsp; &nbsp; var str = JSON.stringify(jsonstr);&nbsp; &nbsp; //str = &quot;{&quot;name&quot;:&quot;wang&quot;}&quot;</strong><br />
&nbsp; &nbsp; alert( str );&nbsp;&nbsp;</p>

<p><strong>&nbsp;&nbsp; &nbsp;var object = {&quot;name&quot;:&quot;wang&quot;}; &nbsp; &nbsp; &nbsp; &nbsp; //object = {name: &quot;wang&quot;}<br />
&nbsp;&nbsp; &nbsp;var objStr = JSON.stringify(object); &nbsp;//objStr = &quot;{&quot;name&quot;:&quot;wang&quot;}&quot;</strong><br />
&nbsp;&nbsp; &nbsp;alert( objStr );</p>

<p><strong>&nbsp; &nbsp; //map 里的遍历，map.size, 在map.set方式设值时可用，在map[name] = &quot;wang&quot;，时就不可以用。</strong></p>

<p>&nbsp; &nbsp; var count = 0;<br />
&nbsp;&nbsp; &nbsp;for(var key in map)<br />
&nbsp;&nbsp; &nbsp;{<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;count++;<br />
&nbsp;&nbsp; &nbsp;}<br />
&nbsp;&nbsp; &nbsp;alert(count);<br />
}</p>

<p>举个例子，假设要根据同学的名字查找对应的成绩，如果用<code>Array</code>实现，需要两个<code>Array</code>：&nbsp;</p>

<pre>
1 var names = [&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;];
2 var scores = [95, 75, 85]; </pre>

<p>给定一个名字，要查找对应的成绩，就先要在names中找到对应的位置，再从scores取出对应的成绩，Array越长，耗时越长。</p>

<p>如果用Map实现，只需要一个&ldquo;名字&rdquo;-&ldquo;成绩&rdquo;的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用JavaScript写一个Map如下：&nbsp;</p>

<pre>
1 var m = new Map([[&#39;Michael&#39;, 95], [&#39;Bob&#39;, 75], [&#39;Tracy&#39;, 85]]);
2 m.get(&#39;Michael&#39;); // 95 </pre>

<p>初始化<code>Map</code>需要一个二维数组，或者直接初始化一个空<code>Map</code>。<code>Map</code>具有以下方法：&nbsp;</p>

<pre>
1 var m = new Map(); // 空Map
2 m.set(&#39;Adam&#39;, 67); // 添加新的key-value
3 m.set(&#39;Bob&#39;, 59);
4 m.has(&#39;Adam&#39;); // 是否存在key &#39;Adam&#39;: true
5 m.get(&#39;Adam&#39;); // 67
6 m.delete(&#39;Adam&#39;); // 删除key &#39;Adam&#39;
7 m.get(&#39;Adam&#39;); // undefined </pre>

<p>&nbsp;</p>

<p>由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：</p>

<pre>
1 var m = new Map();
2 m.set(&#39;Adam&#39;, 67);
3 m.set(&#39;Adam&#39;, 88);
4 m.get(&#39;Adam&#39;); // 88 </pre>

<h3>Set</h3>

<p><code>Set</code>和<code>Map</code>类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在<code>Set</code>中，没有重复的key。</p>

<p>要创建一个<code>Set</code>，需要提供一个<code>Array</code>作为输入，或者直接创建一个空<code>Set</code>：&nbsp;</p>

<pre>
var s1 = new Set(); // 空Set
var s2 = new Set([1, 2, 3]); // 含1, 2, 3 </pre>

<p>重复元素在<code>Set</code>中自动被过滤：&nbsp;</p>

<pre>
var s = new Set([1, 2, 3, 3, &#39;3&#39;]);
s; // Set {1, 2, 3, &quot;3&quot;} </pre>

<p>注意数字<code>3</code>和字符串<code>&#39;3&#39;</code>是不同的元素。</p>

<p>通过<code>add(key)</code>方法可以添加元素到<code>Set</code>中，可以重复添加，但不会有效果：&nbsp;</p>

<pre>
&gt;&gt;&gt; s.add(4)
&gt;&gt;&gt; s
{1, 2, 3, 4}
&gt;&gt;&gt; s.add(4)
&gt;&gt;&gt; s
{1, 2, 3, 4} </pre>

<p>通过<code>delete(key)</code>方法可以删除元素：&nbsp;</p>

<pre>
var s = new Set([1, 2, 3]);
s; // Set {1, 2, 3}
s.delete(3);
s; // Set {1, 2} </pre>
