<h1><a href="http://www.cnblogs.com/itlkNote/p/6830682.html" id="cb_post_title_url">npm 常用命令详解</a></h1>

<p><strong><strong>本文以Windows平台上做测试，以gulp为示例做教程，出自作者白树，转载请声明！</strong></strong></p>

<h2>目录</h2>

<ul>
	<li>npm是什么</li>
	<li>npm install 安装模块</li>
	<li>npm uninstall 卸载模块</li>
	<li>npm update 更新模块</li>
	<li>npm outdated 检查模块是否已经过时</li>
	<li>npm ls 查看安装的模块</li>
	<li>npm init 在项目中引导创建一个package.json文件</li>
	<li>npm help 查看某条命令的详细帮助</li>
	<li>npm root 查看包的安装路径</li>
	<li>npm config 管理npm的配置路径</li>
	<li>npm cache 管理模块的缓存</li>
	<li>npm start 启动模块</li>
	<li>npm stop 停止模块</li>
	<li>npm restart 重新启动模块</li>
	<li>npm test 测试模块</li>
	<li>npm version 查看模块版本</li>
	<li>npm view 查看模块的注册信息</li>
	<li>npm&nbsp;adduser&nbsp;&nbsp;用户登录</li>
	<li>npm publish 发布模块</li>
	<li>npm access 在发布的包上设置访问级别</li>
	<li>npm package.json的语法</li>
</ul>

<h2>npm是什么</h2>

<p>NPM的全称是Node Package Manager，是随同NodeJS一起安装的包管理和分发工具，它很方便让JavaScript开发者下载、安装、上传以及管理已经安装的包。</p>

<h2>npm install 安装模块</h2>

<p>基础语法</p>

<pre>
npm install (with no args, in package dir)
npm install [&lt;@scope&gt;/]&lt;name&gt;
npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;tag&gt;
npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;version&gt;
npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;version range&gt;
npm install &lt;tarball file&gt;
npm install &lt;tarball url&gt;
npm install &lt;folder&gt;

alias: npm i
common options: [-S|--save|-D|--save-dev|-O|--save-optional] [-E|--save-exact] [--dry-run]</pre>

<p>安装包，默认会安装最新的版本</p>

<pre>
npm install gulp</pre>

<p><img alt="" src="https://images2015.cnblogs.com/blog/278431/201606/278431-20160612163826965-609701972.png" /></p>

<p>安装指定版本</p>

<pre>
npm install gulp@3.9.1</pre>

<p>安装包并将信息保持到项目的package.json文件中</p>

<p><img alt="" src="https://images2015.cnblogs.com/blog/278431/201606/278431-20160608175914183-728696602.jpg" /></p>

<p>项目对模块的依赖可以使用下面的 3 种方法来表示（假设当前版本号是 1.1.0 ）：</p>

<ul>
	<li>兼容模块新发布的补丁版本：~1.1.0、1.1.x、1.1</li>
	<li>兼容模块新发布的小版本、补丁版本：^1.1.0、1.x、1</li>
	<li>兼容模块新发布的大版本、小版本、补丁版本：*、x</li>
</ul>

<p><strong>-S, --save 安装包信息将加入到dependencies（生产阶段的依赖）</strong></p>

<pre>
npm install gulp --save 或 npm install gulp -S</pre>

<p>package.json 文件的 dependencies 字段：</p>

<pre>
&quot;dependencies&quot;: {
    &quot;gulp&quot;: &quot;^3.9.1&quot;
}</pre>

<p><strong>-D, --save-dev 安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它</strong></p>

<pre>
npm install gulp --save-dev 或 npm install gulp -D</pre>

<p>package.json 文件的 devDependencies字段：</p>

<pre>
&quot;devDependencies&quot;: {
    &quot;gulp&quot;: &quot;^3.9.1&quot;
}</pre>

<p><strong>-O, --save-optional 安装包信息将加入到optionalDependencies（可选阶段的依赖）</strong></p>

<pre>
npm install gulp --save-optional 或 npm install gulp -O</pre>

<p>package.json 文件的optionalDependencies字段：</p>

<pre>
&quot;optionalDependencies&quot;: {
    &quot;gulp&quot;: &quot;^3.9.1&quot;
}</pre>

<p><strong>-E, --save-exact 精确安装指定模块版本</strong></p>

<pre>
npm install gulp --save-exact 或 npm install gulp -E</pre>

<p>输入命令<strong>npm install gulp -ES，</strong>留意package.json 文件的 dependencies 字段，以看出版本号中的<strong>^</strong>消失了</p>

<pre>
&quot;dependencies&quot;: {
    &quot;gulp&quot;: &quot;3.9.1&quot;
}</pre>

<p>模块的依赖都被写入了package.json文件后，他人打开项目的根目录（项目开源、内部团队合作），使用npm install命令可以根据dependencies配置安装所有的依赖包</p>

<pre>
npm install</pre>

<p><img alt="" src="https://images2015.cnblogs.com/blog/278431/201606/278431-20160608180225886-1359105042.jpg" /></p>

<p>本地安装（local）</p>

<pre>
npm install gulp</pre>

<p>全局安装（global）,使用&nbsp;-g 或 --global</p>

<pre>
npm install gulp -g</pre>

<h2>npm uninstall&nbsp;卸载模块&nbsp;</h2>

<p>基础语法</p>

<pre>
npm uninstall [&lt;@scope&gt;/]&lt;pkg&gt;[@&lt;version&gt;]... [-S|--save|-D|--save-dev|-O|--save-optional]

aliases: remove, rm, r, un, unlink</pre>

<p>如卸载开发版本的模块</p>

<pre>
npm uninstall gulp --save-dev</pre>

<h2>npm update&nbsp;更新模块</h2>

<p>基础语法</p>

<pre>
npm update [-g] [&lt;pkg&gt;...]</pre>

<h2>npm outdated&nbsp;检查模块是否已经过时</h2>

<p>基础语法</p>

<pre>
npm outdated [[&lt;@scope&gt;/]&lt;pkg&gt; ...]</pre>

<p>此命令会列出所有已经过时的包，可以及时进行包的更新</p>

<p><img alt="" src="https://images2015.cnblogs.com/blog/278431/201606/278431-20160608184648105-1925655942.jpg" /></p>

<h2>npm ls&nbsp;查看安装的模块</h2>

<p>基础语法</p>

<pre>
npm ls [[&lt;@scope&gt;/]&lt;pkg&gt; ...]

aliases: list, la, ll</pre>

<p>查看全局安装的模块及依赖&nbsp;</p>

<pre>
npm ls -g </pre>

<h2>npm init&nbsp;在项目中引导创建一个package.json文件</h2>

<p>安装包的信息可保持到项目的package.json文件中，以便后续的其它的项目开发或者他人合作使用，也说package.json在项目中是必不可少的。</p>

<pre>
npm init [-f|--force|-y|--yes]</pre>

<p><img alt="" src="https://images2015.cnblogs.com/blog/278431/201606/278431-20160612103551324-1085207978.gif" /></p>

<h2>npm help 查看某条命令的详细帮助&nbsp;</h2>

<p>基础语法</p>

<pre>
npm help &lt;term&gt; [&lt;terms..&gt;]</pre>

<p>例如输入<code>npm help install，系统在默认的浏览器或者默认的编辑器中打开本地nodejs安装包的文件/nodejs/node_modules/npm/html/doc/cli/npm-install.html</code></p>

<pre>
npm help install</pre>

<h2><strong>npm&nbsp;root&nbsp;</strong>查看包的安装路径</h2>

<p>输出&nbsp;node_modules的路径</p>

<pre>
npm root [-g]</pre>

<h2><strong>npm config&nbsp;</strong>管理npm的配置路径</h2>

<p>基础语法</p>

<pre>
npm config set &lt;key&gt; &lt;value&gt; [-g|--global]
npm config get &lt;key&gt;
npm config delete &lt;key&gt;
npm config list
npm config edit
npm get &lt;key&gt;
npm set &lt;key&gt; &lt;value&gt; [-g|--global]
</pre>

<p>对于config这块用得最多应该是<strong>设置代理，解决npm安装一些模块失败的问题</strong></p>

<p>例如我在公司内网，因为公司的防火墙原因，无法完成任何模块的安装，这个时候设置代理可以解决</p>

<pre>
npm config set proxy=http://xxx</pre>

<p>又如国内的网络环境问题，某官方的IP可能被和谐了，幸好国内有好心人，搭建了镜像，此时我们简单设置镜像</p>

<pre>
npm config set registry=&quot;http://r.cnpmjs.org&quot;</pre>

<p>也可以临时配置，如安装淘宝镜像</p>

<pre>
npm install -g cnpm --registry=https://registry.npm.taobao.org</pre>

<h2>npm cache 管理模块的缓存</h2>

<p>基础语法</p>

<pre>
npm cache add &lt;tarball file&gt;
npm cache add &lt;folder&gt;
npm cache add &lt;tarball url&gt;
npm cache add &lt;name&gt;@&lt;version&gt;

npm cache ls [&lt;path&gt;]

npm cache clean [&lt;path&gt;]</pre>

<p>最常用命令无非清除npm本地缓存</p>

<pre>
npm cache clean</pre>

<h2>npm start 启动模块</h2>

<p>基础语法</p>

<pre>
npm start [-- &lt;args&gt;]</pre>

<p>该命令写在package.json文件scripts的start字段中，可以自定义命令来配置一个服务器环境和安装一系列的必要程序，如</p>

<pre>
&quot;scripts&quot;: {
    &quot;start&quot;: &quot;gulp -ws&quot;
}</pre>

<p>此时在cmd中输入npm start命令相当于执行gulpfile.js文件自定义的watch和server命令。</p>

<p>如果package.json文件没有设置start，则将直接启动node server.js</p>

<h2>npm stop 停止模块</h2>

<p>基础语法</p>

<pre>
npm stop [-- &lt;args&gt;]</pre>

<h2>npm restart 重新启动模块</h2>

<p>基础语法</p>

<pre>
npm restart [-- &lt;args&gt;]</pre>

<h2>npm test 测试模块</h2>

<p>基础语法</p>

<pre>
npm test [-- &lt;args&gt;]
npm tst [-- &lt;args&gt;]</pre>

<p>该命令写在package.json文件scripts的test字段中，可以自定义该命令来执行一些操作，如</p>

<pre>
&quot;scripts&quot;: {
    &quot;test&quot;: &quot;gulp release&quot;
},</pre>

<p>此时在cmd中输入npm test命令相当于执行gulpfile.js文件自定义的release命令。</p>

<h2>npm version 查看模块版本</h2>

<p>基础语法</p>

<pre>
npm version [&lt;newversion&gt; | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]

&#39;npm [-v | --version]&#39; to print npm version
&#39;npm view &lt;pkg&gt; version&#39; to view a package&#39;s published version
&#39;npm ls&#39; to inspect current package/dependency versions</pre>

<p>&nbsp;</p>

<p>查看模块的版本</p>

<pre>
npm version</pre>

<p><img alt="" src="https://images2015.cnblogs.com/blog/278431/201606/278431-20160612110731949-822739413.png" /></p>

<h2>npm view 查看模块的注册信息</h2>

<p>基础语法</p>

<pre>
npm view [&lt;@scope&gt;/]&lt;name&gt;[@&lt;version&gt;] [&lt;field&gt;[.&lt;subfield&gt;]...]

aliases: info, show, v</pre>

<p>查看模块的依赖关系</p>

<pre>
npm view gulp dependencies</pre>

<p>查看模块的源文件地址</p>

<pre>
npm view gulp repository.url</pre>

<p>查看模块的贡献者，包含邮箱地址</p>

<pre>
npm view npm contributors</pre>

<h2>npm&nbsp;adduser 用户登录</h2>

<p>基础语法</p>

<pre>
npm adduser [--registry=url] [--scope=@orgname] [--always-auth]</pre>

<h2><img alt="" src="https://images2015.cnblogs.com/blog/278431/201701/278431-20170117152013911-489932696.png" /></h2>

<p>发布模板到npm社区前需要先登录，然后再进入发布的操作</p>

<h2>npm publish&nbsp;发布模块</h2>

<p>基础语法</p>

<pre>
npm publish [&lt;tarball&gt;|&lt;folder&gt;] [--tag &lt;tag&gt;] [--access &lt;public|restricted&gt;]

Publishes &#39;.&#39; if no argument supplied
Sets tag &#39;latest&#39; if no --tag specified</pre>

<h2><img alt="" src="https://images2015.cnblogs.com/blog/278431/201701/278431-20170117152224005-1557216239.png" /></h2>

<h2>npm access&nbsp;在发布的包上设置访问级别</h2>

<p>基础语法</p>

<p>&nbsp;</p>

<pre>
npm access public [&lt;package&gt;]
npm access restricted [&lt;package&gt;]

npm access grant &lt;read-only|read-write&gt; &lt;scope:team&gt; [&lt;package&gt;]
npm access revoke &lt;scope:team&gt; [&lt;package&gt;]

npm access ls-packages [&lt;user&gt;|&lt;scope&gt;|&lt;scope:team&gt;]
npm access ls-collaborators [&lt;package&gt; [&lt;user&gt;]]
npm access edit [&lt;package&gt;]</pre>

<p>&nbsp;</p>

<h2>npm package.json的语法</h2>

<p>英文原版：<a href="https://docs.npmjs.com/files/package.json" target="_blank">https://docs.npmjs.com/files/package.json</a></p>

<p>这块内容好多，国内有好心人整理：《<a href="https://github.com/ericdum/mujiang.info/issues/6/" target="_blank">npm的package.json中文文档</a>》，从这份文档拷贝出一些比较常见的，如下：</p>

<p><strong>默认值</strong></p>

<p>npm会根据包内容设置一些默认值。</p>

<ul>
	<li>
	<p><code>&quot;scripts&quot;: {&quot;start&quot;: &quot;node server.js&quot;}</code></p>

	<p>如果包的根目录有<code>server.js</code>文件，npm会默认将<code>start</code>命令设置为<code>node server.js</code>。</p>
	</li>
	<li>
	<p><code>&quot;scripts&quot;:{&quot;preinstall&quot;: &quot;node-waf clean || true; node-waf configure build&quot;}</code></p>

	<p>如果包的根目录有<code>wscript</code>文件，npm会默认将<code>preinstall</code>命令用node-waf进行编译。</p>
	</li>
	<li>
	<p><code>&quot;scripts&quot;:{&quot;preinstall&quot;: &quot;node-gyp rebuild&quot;}</code></p>

	<p>如果包的根目录有<code>binding.gyp</code>文件，npm会默认将<code>preinstall</code>命令用node-gyp进行编译。</p>
	</li>
	<li>
	<p><code>&quot;contributors&quot;: [...]</code></p>

	<p>如果包的根目录有<code>AUTHORS</code>文件，npm会默认逐行按<code>Name &lt;email&gt; (url)</code>格式处理，邮箱和url是可选的。#号和空格开头的行会被忽略。</p>
	</li>
</ul>

<p><strong>name</strong></p>

<p>在package.json中最重要的就是name和version字段。他们都是必须的，如果没有就无法install。name和version一起组成的标识在假设中是唯一的。改变包应该同时改变version。</p>

<p>name是这个东西的名字。注意：</p>

<ul>
	<li>不要把node或者js放在名字中。因为你写了package.json它就被假定成为了js，不过你可以用&quot;engine&quot;字段指定一个引擎（见后文）。</li>
	<li>这个名字会作为在URL的一部分、命令行的参数或者文件夹的名字。任何non-url-safe的字符都是不能用的。</li>
	<li>这个名字可能会作为参数被传入require()，所以它应该比较短，但也要意义清晰。</li>
	<li>在你爱上你的名字之前，你可能要去npm registry查看一下这个名字是否已经被使用了。<a href="http://registry.npmjs.org/">http://registry.npmjs.org/</a></li>
</ul>

<p><strong>version</strong></p>

<p>version必须能被<a href="https://github.com/isaacs/node-semver">node-semver</a>解析，它被包在npm的依赖中。（要自己用可以执行<code>npm install semver</code>）</p>

<p>可用的&ldquo;数字&rdquo;或者&ldquo;范围&rdquo;见<a href="https://npmjs.org/doc/misc/semver.html">semver(7)</a>.</p>

<p><strong>description</strong></p>

<p>放简介，字符串，方便在<code>npm search</code>中搜索</p>

<p><strong>keywords</strong></p>

<p>关键字，数组、字符串，方便在<code>npm search</code>中搜索</p>

<p><strong>bugs</strong></p>

<p>你项目的提交问题的url和（或）邮件地址</p>

<pre>
{
 &quot;url&quot; : &quot;http://github.com/owner/project/issues&quot;, 
&quot;email&quot; : &quot;project@hostname.com&quot;
}</pre>

<p><strong>license</strong></p>

<p>你应该要指定一个许可证，让人知道使用的权利和限制的。</p>

<p>最简单的方法是，假如你用一个像BSD或者MIT这样通用的许可证，就只需要指定一个许可证的名字，像这样：</p>

<pre>
{ &quot;license&quot; : &quot;BSD&quot; }</pre>

<p>如果你又更复杂的许可条件，或者想要提供给更多地细节，可以这样:</p>

<pre>
&quot;licenses&quot; : [
  { &quot;type&quot; : &quot;MyLicense&quot;
  , &quot;url&quot; : &quot;http://github.com/owner/project/path/to/license&quot;
  }
]</pre>

<p><strong>repository</strong></p>

<p>指定你的代码存放的地方。这个对希望贡献的人有帮助。如果git仓库在github上，那么<code>npm docs</code>命令能找到你。</p>

<p>这样做：</p>

<p>&nbsp;</p>

<pre>
&quot;repository&quot; :
  { &quot;type&quot; : &quot;git&quot;
  , &quot;url&quot; : &quot;http://github.com/isaacs/npm.git&quot;
  }

&quot;repository&quot; :
  { &quot;type&quot; : &quot;svn&quot;
  , &quot;url&quot; : &quot;http://v8.googlecode.com/svn/trunk/&quot;
  }</pre>

<p>&nbsp;</p>

<p>URL应该是公开的（即便是只读的）能直接被未经过修改的版本控制程序处理的url。不应该是一个html的项目页面。因为它是给计算机看的。</p>

<p><strong>scripts</strong></p>

<p>&ldquo;scripts&rdquo;是一个由脚本命令组成的hash对象，他们在包不同的生命周期中被执行。key是生命周期事件，value是要运行的命令。</p>

<p>参考上面的<a href="http://www.cnblogs.com/PeunZhang/p/5553574.html#npm-start">npm start</a>、<a href="http://www.cnblogs.com/PeunZhang/p/5553574.html#npm-test">npm test</a>命令</p>

<p>更多详细请看&nbsp;<a href="https://npmjs.org/doc/misc/npm-scripts.html">npm-scripts(7)</a></p>

<p><strong>config</strong></p>

<p>&quot;config&quot; hash可以用来配置用于包脚本中的跨版本参数。在实例中，如果一个包有下面的配置：</p>

<pre>
{
 &quot;name&quot; : &quot;foo&quot;,
 &quot;config&quot; : { &quot;port&quot; : &quot;8080&quot; } 
}</pre>

<p>然后有一个&ldquo;start&rdquo;命令引用了<code>npm_package_config_port</code>环境变量，用户可以通过<code>npm config set foo:port 8001</code>来重写他。</p>

<p>参见&nbsp;<a href="https://npmjs.org/doc/misc/npm-config.html">npm-config(7)</a>&nbsp;和&nbsp;<a href="https://npmjs.org/doc/misc/npm-scripts.html">npm-scripts(7)</a>。</p>

<p><strong>dependencies</strong></p>

<p>依赖是给一组包名指定版本范围的一个hash。这个版本范围是一个由一个或多个空格分隔的字符串。依赖还可以用tarball或者git URL。</p>

<p>请不要将测试或过渡性的依赖放在<code>dependencies</code>hash中。见下文的<code>devDependencies</code></p>

<p><strong>详见<a href="https://npmjs.org/doc/misc/semver.html">semver(7)</a>.</strong></p>

<ul>
	<li><code>version</code>&nbsp;必须完全和<code>version</code>一致</li>
	<li><code>&gt;version</code>&nbsp;必须比<code>version</code>大</li>
	<li><code>&gt;=version</code>&nbsp;同上</li>
	<li><code>&lt;version</code>&nbsp;同上</li>
	<li><code>&lt;=version</code>&nbsp;同上</li>
	<li><code>~version</code>&nbsp;大约一样，见<a href="https://npmjs.org/doc/misc/semver.html">semver(7)</a></li>
	<li><code>1.2.x</code>&nbsp;1.2.0, 1.2.1, 等，但不包括1.3.0</li>
	<li><code>http://...</code>&nbsp;见下文&#39;依赖URL&#39;</li>
	<li><code>*</code>&nbsp;所有</li>
	<li><code>&quot;&quot;</code>&nbsp;空，同<code>*</code></li>
	<li><code>version1 - version2</code>&nbsp;同&nbsp;<code>&gt;=version1 &lt;=version2</code>.</li>
	<li><code>range1 || range2</code>&nbsp;二选一。</li>
	<li><code>git...</code>&nbsp;见下文&#39;依赖Git URL&#39;</li>
	<li><code>user/repo</code>&nbsp;见下文&#39;GitHub URLs&#39;</li>
</ul>

<p>比如下面都是合法的：</p>

<p>&nbsp;</p>

<pre>
{ &quot;dependencies&quot; :
  { &quot;foo&quot; : &quot;1.0.0 - 2.9999.9999&quot;
  , &quot;bar&quot; : &quot;&gt;=1.0.2 &lt;2.1.2&quot;
  , &quot;baz&quot; : &quot;&gt;1.0.2 &lt;=2.3.4&quot;
  , &quot;boo&quot; : &quot;2.0.1&quot;
  , &quot;qux&quot; : &quot;&lt;1.0.0 || &gt;=2.3.1 &lt;2.4.5 || &gt;=2.5.2 &lt;3.0.0&quot;
  , &quot;asd&quot; : &quot;http://asdf.com/asdf.tar.gz&quot;
  , &quot;til&quot; : &quot;~1.2&quot;
  , &quot;elf&quot; : &quot;~1.2.3&quot;
  , &quot;two&quot; : &quot;2.x&quot;
  , &quot;thr&quot; : &quot;3.3.x&quot;
  }
}</pre>

<p>&nbsp;</p>

<p><strong>devDependencies</strong></p>

<p>如果有人要使用你的模块，那么他们可能不需要你开发使用的外部测试或者文档框架。</p>

<p>在这种情况下，最好将这些附属的项目列在<code>devDependencies</code>中。</p>

<p>这些东西会在执行<code>npm link</code>或者<code>npm install</code>的时候初始化，并可以像其他npm配置参数一样管理。详见<a href="https://npmjs.org/doc/misc/npm-config.html">npm-config(7)</a>。</p>

<p>对于非特定平台的构建步骤，比如需要编译CoffeeScript，可以用<code>prepublish</code>脚本去实现，并把它依赖的包放在devDependency中。（译者注：prepublish定义了在执行<code>npm publish</code>的时候先行执行的脚本）</p>

<p>比如：</p>

<p>&nbsp;</p>

<pre>
{ &quot;name&quot;: &quot;ethopia-waza&quot;,
  &quot;description&quot;: &quot;a delightfully fruity coffee varietal&quot;,
  &quot;version&quot;: &quot;1.2.3&quot;,
  &quot;devDependencies&quot;: {
    &quot;coffee-script&quot;: &quot;~1.6.3&quot;
  },
  &quot;scripts&quot;: {
    &quot;prepublish&quot;: &quot;coffee -o lib/ -c src/waza.coffee&quot;
  },
  &quot;main&quot;: &quot;lib/waza.js&quot;
}</pre>

<p>&nbsp;</p>

<p><code>prepublish</code>脚本会在publishing前运行，这样用户就不用自己去require来编译就能使用。并且在开发模式中（比如本地运行<code>npm install</code>）会运行这个脚本以便更好地测试。</p>

<p>&nbsp;</p>
