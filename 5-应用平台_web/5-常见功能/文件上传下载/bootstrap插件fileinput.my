<h1>JS组件系列&mdash;&mdash;Bootstrap文件上传组件：bootstrap fileinput</h1>

<p>前言：之前的三篇介绍了下bootstrap table的一些常见用法，发现博主对这种扁平化的风格有点着迷了。前两天做一个excel导入的功能，前端使用原始的input type=&#39;file&#39;这种标签，效果不忍直视，于是博主下定决心要找一个好看的上传组件换掉它。既然bootstrap开源，那么社区肯定有很多关于它的组件，肯定也有这种常见的上传组件吧。经过一番查找，功夫不负有心人，还是被博主找到了这个组件：bootstrap fileinput。关于这个组件的简单应用，博客园大牛<a href="http://home.cnblogs.com/u/wuhuacong/">伍华聪</a>写过一篇<a href="http://www.cnblogs.com/wuhuacong/p/4774396.html" id="cb_post_title_url">基于Metronic的Bootstrap开发框架经验总结（5）--Bootstrap文件上传插件File Input的使用</a>，只不过很多细节都没有涉及，于是博主在完成开发任务之余，总结了下这个组件的一些常见用法。在此记录下，就算做个笔记吧，也给需要使用的朋友提供点方便。</p>

<p>源码以及API地址：</p>

<p>bootstrap-fileinput源码：<a href="https://github.com/kartik-v/bootstrap-fileinput" target="_blank">https://github.com/kartik-v/bootstrap-fileinput</a></p>

<p>bootstrap-fileinput在线API：<a href="http://plugins.krajee.com/file-input" target="_blank">http://plugins.krajee.com/file-input</a></p>

<p>bootstrap-fileinput Demo展示：<a href="http://plugins.krajee.com/file-basic-usage-demo" target="_blank">http://plugins.krajee.com/file-basic-usage-demo</a></p>

<p>bootstrap-fileinput Demo：<a href="http://plugins.krajee.com/file-input/demo">http://plugins.krajee.com/file-input/demo</a></p>

<h2>一、效果展示</h2>

<h3>&nbsp;1、原始的input type=&#39;file&#39;，简直不忍直视。</h3>

<p><img alt="" src="http://images2015.cnblogs.com/blog/459756/201511/459756-20151130161734202-228707288.png" style="width:800px" /></p>

<h3>2、不做任何装饰的bootstrap fileinput：（<strong>bootstrap fileinput初级进化</strong>）</h3>

<p><img alt="" src="http://images2015.cnblogs.com/blog/459756/201511/459756-20151130161922843-1891343241.png" style="width:800px" /></p>

<p><img alt="" src="http://images2015.cnblogs.com/blog/459756/201511/459756-20151130161933968-836604043.png" style="width:800px" /></p>

<h3><strong>3、bootstrap fileinput高级进化：中文化、可拖拽上传、文件扩展名校验（如果不是需要的文件，不让上传）</strong></h3>

<p><img alt="" src="http://images2015.cnblogs.com/blog/459756/201511/459756-20151130162045327-940796504.png" style="width:800px" /></p>

<p><img alt="" src="http://images2015.cnblogs.com/blog/459756/201511/459756-20151130162500937-237229304.png" style="width:800px" /></p>

<p>拖拽上传</p>

<p><img alt="" src="http://images2015.cnblogs.com/blog/459756/201511/459756-20151130162854593-321792055.png" style="width:800px" /></p>

<p>上传中</p>

<p><img alt="" src="http://images2015.cnblogs.com/blog/459756/201511/459756-20151130162516155-799138384.png" style="width:800px" /></p>

<p><img alt="" src="http://images2015.cnblogs.com/blog/459756/201511/459756-20151130162544718-1563321595.png" style="width:800px" /></p>

<h3><strong>4、bootstrap fileinput究极进化：允许同时多线程上传多个文件。</strong></h3>

<p><img alt="" src="http://images2015.cnblogs.com/blog/459756/201511/459756-20151130162914343-1637129542.png" style="width:800px" /></p>

<p>上传中</p>

<p><img alt="" src="http://images2015.cnblogs.com/blog/459756/201511/459756-20151130162952093-1071235538.png" style="width:800px" /></p>

<p>上传完成后</p>

<p><img alt="" src="http://images2015.cnblogs.com/blog/459756/201511/459756-20151130163018452-1190195138.png" style="width:800px" /></p>

<h2>二、代码示例</h2>

<p><a href="http://home.cnblogs.com/u/wuhuacong/">&nbsp;</a>怎么样？效果如何？不要急，我们一步一步来实现以上的效果。</p>

<h3>1、cshtml页面</h3>

<p>首先引入需要的js和css文件。</p>

<pre>
　　　　　　  //bootstrap fileinput
            bundles.Add(new ScriptBundle(&quot;~/Content/bootstrap-fileinput/js&quot;).Include(
                        &quot;~/Content/bootstrap-fileinput/js/fileinput.min.js&quot;,
                        &quot;~/Content/bootstrap-fileinput/js/fileinput_locale_zh.js&quot;));
            bundles.Add(new StyleBundle(&quot;~/Content/bootstrap-fileinput/css&quot;).Include(
                        &quot;~/Content/bootstrap-fileinput/css/fileinput.min.css&quot;));</pre>

<pre>
@Scripts.Render(&quot;~/Content/bootstrap-fileinput/js&quot;)
@Styles.Render(&quot;~/Content/bootstrap-fileinput/css&quot;)</pre>

<p>然后定义input type=&#39;file&#39;标签</p>

<pre>
&lt;form&gt;
    &lt;div class=&quot;modal fade&quot; id=&quot;myModal&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-labelledby=&quot;myModalLabel&quot;&gt;
        &lt;div class=&quot;modal-dialog modal-lg&quot; role=&quot;document&quot;&gt;
            &lt;div class=&quot;modal-content&quot;&gt;
                &lt;div class=&quot;modal-header&quot;&gt;
                    &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;&lt;/button&gt;
                    &lt;h4 class=&quot;modal-title&quot; id=&quot;myModalLabel&quot;&gt;请选择Excel文件&lt;/h4&gt;
                &lt;/div&gt;
                &lt;div class=&quot;modal-body&quot;&gt;
                    &lt;a href=&quot;~/Data/ExcelTemplate/Order.xlsx&quot; class=&quot;form-control&quot; style=&quot;border:none;&quot;&gt;下载导入模板&lt;/a&gt;
                    &lt;input type=&quot;file&quot; name=&quot;txt_file&quot; id=&quot;txt_file&quot; multiple class=&quot;file-loading&quot; /&gt;
                &lt;/div&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/form&gt;
</pre>

<p>重点看这一句：</p>

<pre>
&lt;input type=&quot;file&quot; name=&quot;txt_file&quot; id=&quot;txt_file&quot; multiple class=&quot;file-loading&quot; /&gt;</pre>

<p><strong>multiple表示允许同时上传多个文件，class=&ldquo;file-loading&rdquo;表示标签的样式。这里很重要，如果class=&quot;file&quot;，则中文化不能生效。</strong></p>

<h3>2、js初始化</h3>

<pre>
$(function () {
    //0.初始化fileinput
    var oFileInput = new FileInput();
    oFileInput.Init(&quot;txt_file&quot;, &quot;/api/OrderApi/ImportOrder&quot;);
});
</pre>

<pre>
//初始化fileinput
var FileInput = function () {
    var oFile = new Object();

    //初始化fileinput控件（第一次初始化）
    oFile.Init = function(ctrlName, uploadUrl) {
    var control = $(&#39;#&#39; + ctrlName);

    //初始化上传控件的样式
    control.fileinput({
        language: &#39;zh&#39;, //设置语言
        uploadUrl: uploadUrl, //上传的地址
        allowedFileExtensions: [&#39;jpg&#39;, &#39;gif&#39;, &#39;png&#39;],//接收的文件后缀
        showUpload: true, //是否显示上传按钮
        showCaption: false,//是否显示标题
        browseClass: &quot;btn btn-primary&quot;, //按钮样式     
        //dropZoneEnabled: false,//是否显示拖拽区域
        //minImageWidth: 50, //图片的最小宽度
        //minImageHeight: 50,//图片的最小高度
        //maxImageWidth: 1000,//图片的最大宽度
        //maxImageHeight: 1000,//图片的最大高度
        //maxFileSize: 0,//单位为kb，如果为0表示不限制文件大小
        //minFileCount: 0,
        maxFileCount: 10, //表示允许同时上传的最大文件个数
        enctype: &#39;multipart/form-data&#39;,
        validateInitialCount:true,
        previewFileIcon: &quot;&lt;i class=&#39;glyphicon glyphicon-king&#39;&gt;&lt;/i&gt;&quot;,
        msgFilesTooMany: &quot;选择上传的文件数量({n}) 超过允许的最大数值{m}！&quot;,
    });

    //导入文件上传完成之后的事件
    $(&quot;#txt_file&quot;).on(&quot;fileuploaded&quot;, function (event, data, previewId, index) {
        $(&quot;#myModal&quot;).modal(&quot;hide&quot;);
        var data = data.response.lstOrderImport;
        if (data == undefined) {
            toastr.error(&#39;文件格式类型不正确&#39;);
            return;
        }
        //1.初始化表格
        var oTable = new TableInit();
        oTable.Init(data);
        $(&quot;#div_startimport&quot;).show();
    });
}
    return oFile;
};
</pre>

<p>说明：</p>

<p>（1）fileinput()方法里面传入的是一个json数据，它里面有很多属性，每个属性代表着初始化上传控件的时候的特性，如果这些属性都不设置，则表示使用默认的设置。如果园友们想看看它里面有哪些属性，可以打开fileinput.js的源码，在它的最后如图：</p>

<p><img alt="" src="http://images2015.cnblogs.com/blog/459756/201511/459756-20151130164419483-421618128.png" style="width:800px" /></p>

<p>这些属性如果不特意设置，就会使用默认值。</p>

<p>（2）$(&quot;#txt_file&quot;).on(&quot;fileuploaded&quot;, function (event, data, previewId, index) {}这个方法注册上传完成后的回调事件。也就是后天处理上传的文件之后进入这个方法里面处理。</p>

<h3>3、后台C#对应的方法</h3>

<p>&nbsp;还记得在js里面初始化控件方法fileinput()里面有一个参数url吗，这个url对应的值就指示C#后天对应的处理方法。还是贴出后台的处理方法。</p>

<pre>
　　　　 [ActionName(&quot;ImportOrder&quot;)]
        public object ImportOrder()
        {
            var oFile = HttpContext.Current.Request.Files[&quot;txt_file&quot;];
            var lstOrderImport = new List&lt;DTO_TO_ORDER_IMPORT&gt;();

            #region 0.数据准备
            var lstExistOrder = orderManager.Find();
            var lstOrderNo = lstExistOrder.Select(x =&gt; x.ORDER_NO).ToList();
            var lstTmModel = modelManager.Find();
            var lstTmMaterial = materialManager.Find();
            //var iMax_Import_Index = lstExistOrder.Max(x =&gt; x.IMPORT_INDEX);
            //iMax_Import_Index = iMax_Import_Index == null ? 0 : iMax_Import_Index.Value;
            #endregion

            #region 1.通过Stream得到Workbook对象
            IWorkbook workbook = null;
            if (oFile.FileName.EndsWith(&quot;.xls&quot;))
            {
                workbook = new HSSFWorkbook(oFile.InputStream);
            }
            else if(oFile.FileName.EndsWith(&quot;.xlsx&quot;))
            {
                workbook = new XSSFWorkbook(oFile.InputStream);
            }
            if (workbook == null)
            {
                return new { };
            }

            //...............处理excel的逻辑


            //orderManager.Add(lstOrder);
            lstOrderImport = lstOrderImport.OrderBy(x =&gt; x.IMPORT_STATU).ToList();
            return new { lstOrderImport = lstOrderImport };
        }
</pre>

<p>由于博主的项目是上传excel，所以这里用是用的NPOI的逻辑，如果是上传图片等文件，可以使用GDI去处理图片。</p>

<h3>4、同时上传多个文件</h3>

<p>同时上传多个文件的时候，前台会发送多个异步的请求到后台，也就是说，当同时上传三个文件的时候，后台的ImportOrder方法会进入三次。这样就能使用多线程同时去处理三个文件。</p>

<h2>三、总结</h2>

<p>关于bootstrap fileinput的基础使用大概就介绍完了，其实就是一个上传的组件，也不存在什么高级用法。重点是把界面做得更加友好，更好的增加用户体验。</p>

<p>&nbsp;</p>
