<h1>Nginx的配置文件nginx.conf配置详解</h1>

<p>&nbsp;</p>

<p>user&nbsp;nginx&nbsp;nginx&nbsp;;</p>

<p>Nginx用户及组：用户&nbsp;组。window下不指定</p>

<p>&nbsp;</p>

<p>worker_processes&nbsp;8;</p>

<p>工作进程：数目。根据硬件调整，通常等于CPU数量或者2倍于CPU。</p>

<p>&nbsp;</p>

<p>error_log&nbsp;&nbsp;logs/error.log;&nbsp;&nbsp;</p>

<p>error_log&nbsp;&nbsp;logs/error.log&nbsp;&nbsp;notice;&nbsp;&nbsp;</p>

<p>error_log&nbsp;&nbsp;logs/error.log&nbsp;&nbsp;info;&nbsp;&nbsp;</p>

<p>错误日志：存放路径。</p>

<p>&nbsp;</p>

<p>pid&nbsp;logs/nginx.pid;</p>

<p>pid（进程标识符）：存放路径。</p>

<p>&nbsp;</p>

<p>worker_rlimit_nofile&nbsp;204800;</p>

<p>指定进程可以打开的最大描述符：数目。</p>

<p>这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit&nbsp;-n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit&nbsp;-n&nbsp;的值保持一致。</p>

<p>现在在linux&nbsp;2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。</p>

<p>这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</p>

<p>&nbsp;</p>

<p>events</p>

<p>{</p>

<p>use&nbsp;epoll;</p>

<p>使用epoll的I/O&nbsp;模型。linux建议epoll，FreeBSD建议采用kqueue，window下不指定。</p>

<p>补充说明:</p>

<p>与apache相类，nginx针对不同的操作系统，有不同的事件模型</p>

<p>A）标准事件模型</p>

<p>Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</p>

<p>B）高效事件模型</p>

<p>Kqueue：使用于FreeBSD&nbsp;4.1+,&nbsp;OpenBSD&nbsp;2.9+,&nbsp;NetBSD&nbsp;2.0&nbsp;和&nbsp;MacOS&nbsp;X.使用双处理器的MacOS&nbsp;X系统使用kqueue可能会造成内核崩溃。</p>

<p>Epoll：使用于Linux内核2.6版本及以后的系统。</p>

<p>/dev/poll：使用于Solaris&nbsp;7&nbsp;11/99+，HP/UX&nbsp;11.22+&nbsp;(eventport)，IRIX&nbsp;6.5.15+&nbsp;和&nbsp;Tru64&nbsp;UNIX&nbsp;5.1A+。</p>

<p>Eventport：使用于Solaris&nbsp;10。&nbsp;为了防止出现内核崩溃的问题，&nbsp;有必要安装安全补丁。</p>

<p>&nbsp;</p>

<p>worker_connections&nbsp;204800;</p>

<p>没个工作进程的最大连接数量。根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。worker_processes*worker_connections</p>

<p>keepalive_timeout&nbsp;60;</p>

<p>keepalive超时时间。</p>

<p>&nbsp;</p>

<p>client_header_buffer_size&nbsp;4k;</p>

<p>客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</p>

<p>分页大小可以用命令getconf&nbsp;PAGESIZE&nbsp;取得。</p>

<p>[root@web001&nbsp;~]#&nbsp;getconf&nbsp;PAGESIZE</p>

<p>4096</p>

<p>但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为&ldquo;系统分页大小&rdquo;的整倍数。</p>

<p>&nbsp;</p>

<p>open_file_cache&nbsp;max=65535&nbsp;inactive=60s;</p>

<p>这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</p>

<p>&nbsp;</p>

<p>open_file_cache_valid&nbsp;80s;</p>

<p>这个是指多长时间检查一次缓存的有效信息。</p>

<p>&nbsp;</p>

<p>open_file_cache_min_uses&nbsp;1;</p>

<p>open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</p>

<p>}</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>##设定http服务器，利用它的反向代理功能提供负载均衡支持</p>

<p>http</p>

<p>{</p>

<p>include&nbsp;mime.types;</p>

<p>设定mime类型,类型由mime.type文件定义</p>

<p>&nbsp;</p>

<p>default_type&nbsp;application/octet-stream;</p>

<p>&nbsp;</p>

<p>log_format&nbsp;main &#39;$remote_addr&nbsp;-&nbsp;$remote_user&nbsp;[$time_local]&nbsp;&quot;$request&quot;&nbsp;&#39;</p>

<p>&#39;$status&nbsp;$body_bytes_sent&nbsp;&quot;$http_referer&quot;&nbsp;&#39;</p>

<p>&#39;&quot;$http_user_agent&quot;&nbsp;&quot;$http_x_forwarded_for&quot;&#39;;</p>

<p>log_format&nbsp;log404 &#39;$status&nbsp;[$time_local]&nbsp;$remote_addr&nbsp;$host$request_uri&nbsp;$sent_http_location&#39;;</p>

<p>日志格式设置。</p>

<p>$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</p>

<p>$remote_user：用来记录客户端用户名称；</p>

<p>$time_local：&nbsp;用来记录访问时间与时区；</p>

<p>$request：&nbsp;用来记录请求的url与http协议；</p>

<p>$status：&nbsp;用来记录请求状态；成功是200，</p>

<p>$body_bytes_sent&nbsp;：记录发送给客户端文件主体内容大小；</p>

<p>$http_referer：用来记录从那个页面链接访问过来的；</p>

<p>$http_user_agent：记录客户浏览器的相关信息；</p>

<p>通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</p>

<p>&nbsp;</p>

<p>access_log&nbsp;&nbsp;logs/host.access.log&nbsp;&nbsp;main;</p>

<p>access_log&nbsp;&nbsp;logs/host.access.404.log&nbsp;&nbsp;log404;</p>

<p>用了log_format指令设置了日志格式之后，需要用access_log指令指定日志文件的存放路径；</p>

<p>&nbsp;</p>

<p>server_names_hash_bucket_size&nbsp;128;</p>

<p>#保存服务器名字的hash表是由指令server_names_hash_max_size&nbsp;和server_names_hash_bucket_size所控制的。参数hash&nbsp;bucket&nbsp;size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash&nbsp;bucket&nbsp;size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键&nbsp;值。因此，如果Nginx给出需要增大hash&nbsp;max&nbsp;size&nbsp;或&nbsp;hash&nbsp;bucket&nbsp;size的提示，那么首要的是增大前一个参数的大小.</p>

<p>&nbsp;</p>

<p>client_header_buffer_size&nbsp;4k;</p>

<p>客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf&nbsp;PAGESIZE取得。</p>

<p>&nbsp;</p>

<p>large_client_header_buffers&nbsp;8&nbsp;128k;</p>

<p>客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果</p>

<p>header过大，它会使用large_client_header_buffers来读取。</p>

<p>&nbsp;</p>

<p>open_file_cache&nbsp;max=102400&nbsp;inactive=20s;</p>

<p>这个指令指定缓存是否启用。<br />
例:&nbsp;open_file_cache&nbsp;max=1000&nbsp;inactive=20s;&nbsp;</p>

<p>open_file_cache_valid&nbsp;30s;&nbsp;</p>

<p>open_file_cache_min_uses&nbsp;2;&nbsp;</p>

<p>open_file_cache_errors&nbsp;on;</p>

<p>&nbsp;</p>

<p>open_file_cache_errors<br />
语法:open_file_cache_errors&nbsp;on&nbsp;|&nbsp;off&nbsp;默认值:open_file_cache_errors&nbsp;off&nbsp;使用字段:http,&nbsp;server,&nbsp;location&nbsp;这个指令指定是否在搜索一个文件是记录cache错误.</p>

<p>open_file_cache_min_uses</p>

<p>语法:open_file_cache_min_uses&nbsp;number&nbsp;默认值:open_file_cache_min_uses&nbsp;1&nbsp;使用字段:http,&nbsp;server,&nbsp;location&nbsp;这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.<br />
open_file_cache_valid</p>

<p>语法:open_file_cache_valid&nbsp;time&nbsp;默认值:open_file_cache_valid&nbsp;60&nbsp;使用字段:http,&nbsp;server,&nbsp;location&nbsp;这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>client_max_body_size&nbsp;300m;</p>

<p>设定通过nginx上传文件的大小</p>

<p>&nbsp;</p>

<p>sendfile&nbsp;on;</p>

<p>sendfile指令指定&nbsp;nginx&nbsp;是否调用sendfile&nbsp;函数（zero&nbsp;copy&nbsp;方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</p>

<p>&nbsp;</p>

<p>tcp_nopush&nbsp;on;</p>

<p>此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</p>

<p>&nbsp;</p>

<p>proxy_connect_timeout&nbsp;90;&nbsp;<br />
后端服务器连接的超时时间_发起握手等候响应超时时间</p>

<p>&nbsp;</p>

<p>proxy_read_timeout&nbsp;180;</p>

<p>连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</p>

<p>&nbsp;</p>

<p>proxy_send_timeout&nbsp;180;</p>

<p>后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</p>

<p>&nbsp;</p>

<p>proxy_buffer_size&nbsp;256k;</p>

<p>设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</p>

<p>&nbsp;</p>

<p>proxy_buffers&nbsp;4&nbsp;256k;</p>

<p>设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</p>

<p>&nbsp;</p>

<p>proxy_busy_buffers_size&nbsp;256k;</p>

<p>&nbsp;</p>

<p>proxy_temp_file_write_size&nbsp;256k;</p>

<p>设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</p>

<p>&nbsp;</p>

<p>proxy_temp_path&nbsp;/data0/proxy_temp_dir;</p>

<p>proxy_temp_path和proxy_cache_path指定的路径必须在同一分区</p>

<p><br />
proxy_cache_path&nbsp;/data0/proxy_cache_dir&nbsp;levels=1:2&nbsp;keys_zone=cache_one:200m&nbsp;inactive=1d&nbsp;max_size=30g;<br />
#设置内存缓存空间大小为200MB，1天没有被访问的内容自动清除，硬盘缓存空间大小为30GB。</p>

<p>keepalive_timeout&nbsp;120;</p>

<p>keepalive超时时间。</p>

<p>&nbsp;</p>

<p>tcp_nodelay&nbsp;on;</p>

<p>&nbsp;</p>

<p>client_body_buffer_size&nbsp;512k;<br />
如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。<br />
无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500&nbsp;Internal&nbsp;Server&nbsp;Error错误</p>

<p>&nbsp;</p>

<p>proxy_intercept_errors&nbsp;on;</p>

<p>表示使nginx阻止HTTP应答代码为400或者更高的应答。</p>

<p>&nbsp;</p>

<p>upstream&nbsp;bakend&nbsp;{</p>

<p>server&nbsp;127.0.0.1:8027;</p>

<p>server&nbsp;127.0.0.1:8028;</p>

<p>server&nbsp;127.0.0.1:8029;</p>

<p>hash&nbsp;$request_uri;</p>

<p>}</p>

<p>nginx的upstream目前支持4种方式的分配</p>

<p>1、轮询（默认）</p>

<p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p>

<p>2、weight<br />
指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。<br />
例如：<br />
upstream&nbsp;bakend&nbsp;{<br />
server&nbsp;192.168.0.14&nbsp;weight=10;<br />
server&nbsp;192.168.0.15&nbsp;weight=10;<br />
}</p>

<p>2、ip_hash<br />
每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。<br />
例如：<br />
upstream&nbsp;bakend&nbsp;{<br />
ip_hash;<br />
server&nbsp;192.168.0.14:88;<br />
server&nbsp;192.168.0.15:80;<br />
}</p>

<p>3、fair（第三方）<br />
按后端服务器的响应时间来分配请求，响应时间短的优先分配。<br />
upstream&nbsp;backend&nbsp;{<br />
server&nbsp;server1;<br />
server&nbsp;server2;<br />
fair;<br />
}</p>

<p>4、url_hash（第三方）</p>

<p>按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</p>

<p>例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</p>

<p>upstream&nbsp;backend&nbsp;{<br />
server&nbsp;squid1:3128;<br />
server&nbsp;squid2:3128;<br />
hash&nbsp;$request_uri;<br />
hash_method&nbsp;crc32;<br />
}</p>

<p>tips:</p>

<p>upstream&nbsp;bakend{#定义负载均衡设备的Ip及设备状态}{<br />
ip_hash;<br />
server&nbsp;127.0.0.1:9090&nbsp;down;<br />
server&nbsp;127.0.0.1:8080&nbsp;weight=2;<br />
server&nbsp;127.0.0.1:6060;<br />
server&nbsp;127.0.0.1:7070&nbsp;backup;<br />
}<br />
在需要使用负载均衡的server中增加<br />
proxy_pass&nbsp;http://bakend/;</p>

<p>每个设备的状态设置为:<br />
1.down表示单前的server暂时不参与负载<br />
2.weight为weight越大，负载的权重就越大。<br />
3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误<br />
4.fail_timeout:max_fails次失败后，暂停的时间。<br />
5.backup：&nbsp;其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</p>

<p>nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</p>

<p>client_body_in_file_only设置为On&nbsp;可以讲client&nbsp;post过来的数据记录到文件中用来做debug<br />
client_body_temp_path设置记录文件的目录&nbsp;可以设置最多3层目录</p>

<p>location对URL进行匹配.可以进行重定向或者进行新的代理&nbsp;负载均衡</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>##配置虚拟机</p>

<p>server</p>

<p>{</p>

<p>listen&nbsp;80;</p>

<p>配置监听端口</p>

<p>&nbsp;</p>

<p>server_name&nbsp;image.***.com;</p>

<p>配置访问域名</p>

<p>&nbsp;</p>

<p>location&nbsp;~*&nbsp;\.(mp3|exe)$&nbsp;{</p>

<p>对以&ldquo;mp3或exe&rdquo;结尾的地址进行负载均衡</p>

<p>&nbsp;</p>

<p>proxy_pass&nbsp;http://img_relay$request_uri;</p>

<p>设置被代理服务器的端口或套接字，以及URL</p>

<p>&nbsp;</p>

<p>proxy_set_header&nbsp;Host&nbsp;$host;</p>

<p>proxy_set_header&nbsp;X-Real-IP&nbsp;$remote_addr;</p>

<p>proxy_set_header&nbsp;X-Forwarded-For&nbsp;$proxy_add_x_forwarded_for;</p>

<p>以上三行，目的是将代理服务器收到的用户的信息传到真实服务器上</p>

<p>}</p>

<p>&nbsp;</p>

<p>location&nbsp;/face&nbsp;{</p>

<p>if&nbsp;($http_user_agent&nbsp;~*&nbsp;&quot;xnp&quot;)&nbsp;{</p>

<p>rewrite&nbsp;^(.*)$&nbsp;http://211.151.188.190:8080/face.jpg&nbsp;redirect;</p>

<p>}</p>

<p>proxy_pass&nbsp;http://img_relay$request_uri;</p>

<p>proxy_set_header&nbsp;Host&nbsp;$host;</p>

<p>proxy_set_header&nbsp;X-Real-IP&nbsp;$remote_addr;</p>

<p>proxy_set_header&nbsp;X-Forwarded-For&nbsp;$proxy_add_x_forwarded_for;</p>

<p>error_page&nbsp;404&nbsp;502&nbsp;=&nbsp;@fetch;</p>

<p>}</p>

<p>location&nbsp;@fetch&nbsp;{</p>

<p>access_log&nbsp;/data/logs/face.log&nbsp;log404;</p>

<p>rewrite&nbsp;^(.*)$&nbsp;http://211.151.188.190:8080/face.jpg&nbsp;redirect;</p>

<p>}</p>

<p>location&nbsp;/image&nbsp;{</p>

<p>if&nbsp;($http_user_agent&nbsp;~*&nbsp;&quot;xnp&quot;)&nbsp;{</p>

<p>rewrite&nbsp;^(.*)$&nbsp;http://211.151.188.190:8080/face.jpg&nbsp;redirect;</p>

<p>}</p>

<p>proxy_pass&nbsp;http://img_relay$request_uri;</p>

<p>proxy_set_header&nbsp;Host&nbsp;$host;</p>

<p>proxy_set_header&nbsp;X-Real-IP&nbsp;$remote_addr;</p>

<p>proxy_set_header&nbsp;X-Forwarded-For&nbsp;$proxy_add_x_forwarded_for;</p>

<p>error_page&nbsp;404&nbsp;502&nbsp;=&nbsp;@fetch;</p>

<p>}</p>

<p>location&nbsp;@fetch&nbsp;{</p>

<p>access_log&nbsp;/data/logs/image.log&nbsp;log404;</p>

<p>rewrite&nbsp;^(.*)$&nbsp;http://211.151.188.190:8080/face.jpg&nbsp;redirect;</p>

<p>}</p>

<p>}</p>

<p>&nbsp;</p>

<p>##其他举例</p>

<p>server</p>

<p>{</p>

<p>listen&nbsp;80;</p>

<p>server_name&nbsp;*.***.com&nbsp;*.***.cn;</p>

<p>location&nbsp;~*&nbsp;\.(mp3|exe)$&nbsp;{</p>

<p>proxy_pass&nbsp;http://img_relay$request_uri;</p>

<p>proxy_set_header&nbsp;Host&nbsp;$host;</p>

<p>proxy_set_header&nbsp;X-Real-IP&nbsp;$remote_addr;</p>

<p>proxy_set_header&nbsp;X-Forwarded-For&nbsp;$proxy_add_x_forwarded_for;</p>

<p>}</p>

<p>location&nbsp;/&nbsp;{</p>

<p>if&nbsp;($http_user_agent&nbsp;~*&nbsp;&quot;xnp&quot;)&nbsp;{</p>

<p>rewrite&nbsp;^(.*)$&nbsp;http://i1.***img.com/help/noimg.gif&nbsp;redirect;</p>

<p>}</p>

<p>proxy_pass&nbsp;http://img_relay$request_uri;</p>

<p>proxy_set_header&nbsp;Host&nbsp;$host;</p>

<p>proxy_set_header&nbsp;X-Real-IP&nbsp;$remote_addr;</p>

<p>proxy_set_header&nbsp;X-Forwarded-For&nbsp;$proxy_add_x_forwarded_for;</p>

<p>#error_page&nbsp;404&nbsp;http://i1.***img.com/help/noimg.gif;</p>

<p>error_page&nbsp;404&nbsp;502&nbsp;=&nbsp;@fetch;</p>

<p>}</p>

<p>location&nbsp;@fetch&nbsp;{</p>

<p>access_log&nbsp;/data/logs/baijiaqi.log&nbsp;log404;</p>

<p>rewrite&nbsp;^(.*)$&nbsp;http://i1.***img.com/help/noimg.gif&nbsp;redirect;</p>

<p>}</p>

<p>}</p>

<p>server</p>

<p>{</p>

<p>listen&nbsp;80;</p>

<p>server_name&nbsp;*.***img.com;</p>

<p>&nbsp;</p>

<p>location&nbsp;~*&nbsp;\.(mp3|exe)$&nbsp;{</p>

<p>proxy_pass&nbsp;http://img_relay$request_uri;</p>

<p>proxy_set_header&nbsp;Host&nbsp;$host;</p>

<p>proxy_set_header&nbsp;X-Real-IP&nbsp;$remote_addr;</p>

<p>proxy_set_header&nbsp;X-Forwarded-For&nbsp;$proxy_add_x_forwarded_for;</p>

<p>}</p>

<p>location&nbsp;/&nbsp;{</p>

<p>if&nbsp;($http_user_agent&nbsp;~*&nbsp;&quot;xnp&quot;)&nbsp;{</p>

<p>rewrite&nbsp;^(.*)$&nbsp;http://i1.***img.com/help/noimg.gif;</p>

<p>}</p>

<p>proxy_pass&nbsp;http://img_relay$request_uri;</p>

<p>proxy_set_header&nbsp;Host&nbsp;$host;</p>

<p>proxy_set_header&nbsp;X-Real-IP&nbsp;$remote_addr;</p>

<p>proxy_set_header&nbsp;X-Forwarded-For&nbsp;$proxy_add_x_forwarded_for;</p>

<p>#error_page&nbsp;404&nbsp;http://i1.***img.com/help/noimg.gif;</p>

<p>error_page&nbsp;404&nbsp;=&nbsp;@fetch;</p>

<p>}</p>

<p>#access_log&nbsp;off;</p>

<p>location&nbsp;@fetch&nbsp;{</p>

<p>access_log&nbsp;/data/logs/baijiaqi.log&nbsp;log404;</p>

<p>rewrite&nbsp;^(.*)$&nbsp;http://i1.***img.com/help/noimg.gif&nbsp;redirect;</p>

<p>}</p>

<p>}</p>

<p>server</p>

<p>{</p>

<p>listen&nbsp;8080;</p>

<p>server_name&nbsp;ngx-ha.***img.com;</p>

<p>location&nbsp;/&nbsp;{</p>

<p>stub_status&nbsp;on;</p>

<p>access_log&nbsp;off;</p>

<p>}</p>

<p>}</p>

<p>server&nbsp;{</p>

<p>listen&nbsp;80;</p>

<p>server_name&nbsp;imgsrc1.***.net;</p>

<p>root&nbsp;html;</p>

<p>}</p>

<p>&nbsp;</p>

<p>server&nbsp;{</p>

<p>listen&nbsp;80;</p>

<p>server_name&nbsp;***.com&nbsp;w.***.com;</p>

<p>#&nbsp;access_log&nbsp;/usr/local/nginx/logs/access_log&nbsp;main;</p>

<p>location&nbsp;/&nbsp;{</p>

<p>rewrite&nbsp;^(.*)$&nbsp;http://www.***.com/&nbsp;;</p>

<p>}</p>

<p>}</p>

<p>server&nbsp;{</p>

<p>listen&nbsp;80;</p>

<p>server_name&nbsp;*******.com&nbsp;w.*******.com;</p>

<p>#&nbsp;access_log&nbsp;/usr/local/nginx/logs/access_log&nbsp;main;</p>

<p>location&nbsp;/&nbsp;{</p>

<p>rewrite&nbsp;^(.*)$&nbsp;http://www.*******.com/;</p>

<p>}</p>

<p>}</p>

<p>server&nbsp;{</p>

<p>listen&nbsp;80;</p>

<p>server_name&nbsp;******.com;</p>

<p>#&nbsp;access_log&nbsp;/usr/local/nginx/logs/access_log&nbsp;main;</p>

<p>location&nbsp;/&nbsp;{</p>

<p>rewrite&nbsp;^(.*)$&nbsp;http://www.******.com/;</p>

<p>}</p>

<p>}</p>

<p>location&nbsp;/NginxStatus&nbsp;{<br />
stub_status&nbsp;on;<br />
access_log&nbsp;on;<br />
auth_basic&nbsp;&quot;NginxStatus&quot;;<br />
auth_basic_user_file&nbsp;conf/htpasswd;<br />
}</p>

<p>#设定查看Nginx状态的地址</p>

<p>&nbsp;</p>

<p>location&nbsp;~&nbsp;/\.ht&nbsp;{<br />
deny&nbsp;all;<br />
}</p>

<p>#禁止访问.htxxx文件</p>

<p>}</p>

<p>&nbsp;</p>

<p>注释：变量</p>

<p>Ngx_http_core_module模块支持内置变量，他们的名字和apache的内置变量是一致的。</p>

<p>首先是说明客户请求title中的行，例如$http_user_agent,$http_cookie等等。</p>

<p>此外还有其它的一些变量</p>

<p>$args此变量与请求行中的参数相等</p>

<p>$content_length等于请求行的&ldquo;Content_Length&rdquo;的值。</p>

<p>$content_type等同与请求头部的&rdquo;Content_Type&rdquo;的值</p>

<p>$document_root等同于当前请求的root指令指定的值</p>

<p>$document_uri与$uri一样</p>

<p>$host与请求头部中&ldquo;Host&rdquo;行指定的值或是request到达的server的名字（没有Host行）一样</p>

<p>$limit_rate允许限制的连接速率</p>

<p>$request_method等同于request的method，通常是&ldquo;GET&rdquo;或&ldquo;POST&rdquo;</p>

<p>$remote_addr客户端ip</p>

<p>$remote_port客户端port</p>

<p>$remote_user等同于用户名，由ngx_http_auth_basic_module认证</p>

<p>$request_filename当前请求的文件的路径名，由root或alias和URI&nbsp;request组合而成</p>

<p>$request_body_file</p>

<p>$request_uri含有参数的完整的初始URI</p>

<p>$query_string与$args一样</p>

<p>$sheeme&nbsp;http模式（http,https）尽在要求是评估例如</p>

<p>Rewrite&nbsp;^(.+)$&nbsp;$sheme://example.com$;&nbsp;Redirect;</p>

<p>$server_protocol等同于request的协议，使用&ldquo;HTTP/或&ldquo;HTTP/</p>

<p>$server_addr&nbsp;request到达的server的ip，一般获得此变量的值的目的是进行系统调用。为了避免系统调用，有必要在listen指令中指明ip，并使用bind参数。</p>

<p>$server_name请求到达的服务器名</p>

<p>$server_port请求到达的服务器的端口号</p>

<p>$uri等同于当前request中的URI，可不同于初始值，例如内部重定向时或使用index</p>
