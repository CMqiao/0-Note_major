<p>Validate.js表单验证独立页面</p>

<div class="main">
<div class="section_main">
<div class="section_auto"><!-- 详细内容 -->
<h4>最简单的使用</h4>

<pre>
&lt;script src=&quot;http://qidian.gtimg.com/lulu/theme/modern/js/plugin/sea.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
seajs.config({
    &#39;base&#39;: &#39;http://qidian.gtimg.com/lulu/theme/modern/js&#39;
}).use([&#39;common/ui/Validate&#39;], function(Validate) {
    new Validate($(&#39;#form&#39;), callback, options);
});</pre>

<h4>基于HTML5的表单验证</h4>

<h5>①. 基本说明</h5>

<p>基于HTML5规范的表单验证交互组件。依赖ErrorTip组件。</p>

<ul>
	<li>内置type类型包括：<code>email</code>, <code>tel</code>, <code>url</code>, <code>zipcode</code>, <code>number</code>, <code>date</code>, <code>hour</code>, <code>minute</code>, <code>time</code>, <code>date-range</code>. 在高版本IE浏览器的向下兼容模式下，会自动将一些type直接text化，这在原生浏览器下是没有问题的。真实用户场景不会存在此问题，如果大家实在拗不过测试同学，可以在<code>type</code>类型后面加个空格，例如<code>type=&#39;email &#39;</code>. 这些类型输入框默认内置正则表达式。</li>
	<li>自定义正则表达式，使用原生HTML5属性<code>pattern</code>. 例如：<code>pattern=&quot;^\d{16}$&quot;</code>.</li>
	<li>范围超出，如数值输入，range数值范围选择，以及日期和时间的起止限制，使用原生<code>min</code>, <code>max</code>, <code>step</code>属性。</li>
	<li>内容长度限制，使用原生<code>maxlength</code>, 以及<code>minlength</code>。本组件会自动选择超出部分的文字。</li>
	<li>内置计数和计数验证功能，只要使用UI组件通用的HTML和类名结构(可参考文本框和文本域静态UI组件相关文档)。中英文计数规则使用<code>lang</code>属性控制。没有<code>lang</code>属性，表示中英文<code>1:1</code>; <code>lang=&quot;en&quot;</code>表示后面的数值是字符数，1个汉字等于2个英文字符, <code>lang=&quot;zh&quot;</code>表示后面的数值是汉字数，2个字母等于1个汉字。</li>
</ul>

<p><strong>验证规则</strong></p>

<p>默认不验证，点击&ldquo;提交&rdquo;按钮后开启即时验证，所有有误内容标红，但是提示tips只会出现在第一个或当前active控件上。</p>

<p>如果不走表单，或者一开始就验证，后面均有使用示意。</p>

<h5>② 测试兼演示</h5>

<div class="clearfix">邮箱*
<div class="ovh">type=&#39;email &#39;, required, 复制：a.b.c@qq.com</div>
</div>

<div class="clearfix mt15">手机号*
<div class="ovh pb2">type=&#39;tel&#39;, required, 复制：13208033621</div>
</div>

<div class="clearfix mt15">银行账户*
<div class="ovh">pattern=&quot;^\d{16}$&quot;, required, 复制：0000111100001111</div>
</div>

<div class="clearfix mt15">每日限额*
<div class="ovh">type=&#39;number &#39;, min=&#39;5&#39;, max=&#39;50&#39;, required</div>
</div>

<div class="clearfix mt15">密码*
<div class="ovh">required</div>
</div>

<div class="clearfix mt15">确认密码*
<div class="ovh">required</div>
</div>

<div class="clearfix mt15">您的性别*
<div class="ovh">男士 女士</div>
</div>

<div class="clearfix mt15">个人网站
<div class="ovh">type=&#39;url&#39;</div>
</div>

<div class="clearfix mt15">所在城市*
<div class="cell">请选择深圳上海北京成都武汉 required</div>
</div>

<div class="clearfix mt15">请假时间
<div class="cell">min=&quot;2015-07-10&quot;, max=&quot;2015-12-01&quot;</div>
</div>

<div class="clearfix mt15">月份跨度
<div class="cell">min=&quot;2015-07-10&quot;, max=&quot;2015-12-01&quot;</div>
</div>

<div class="clearfix mt15">姓名
<div class="cell">
<div class="l ui_input_x" style="width:300px">
<div class="ui_input">&nbsp;</div>
0/20</div>
minlength=&quot;2&quot;, maxlength=&quot;20&quot;, lang=&quot;zh&quot;(2个字母1个汉字)</div>
</div>

<div class="fix mt15">证件照*
<div class="cell">上传照片</div>
</div>

<div class="clearfix mt15">备注
<div class="cell">
<div class="l ui_textarea_x" style="width:500px">
<div class="ui_textarea">&nbsp;</div>
0/200</div>
minlength=&quot;5&quot;, maxlength=&quot;200&quot;</div>
</div>

<div class="clearfix mt15">&nbsp;
<div class="cell">我已阅读本规范内容</div>
</div>

<div class="clearfix mt20">&nbsp;
<div class="cell">提交</div>
</div>
<!-- 上传文件的表单 -->

<pre>
// 表单验证
var pwd = $(&#39;#pwd&#39;), pwdAgain = $(&#39;#pwdAgain&#39;);
// 文件上传按钮元素
var btnFile = $(&#39;label[for=&quot;validateFile&quot;]&#39;);
// 隐藏input框
var hiddenFile = $(&#39;#idImgUrl&#39;);
// 如果选择文件
$(&#39;#validateFile&#39;).change(function() {
    // 直接trigger hidden input框change事件
    hiddenFile.val(&#39;xxx.png&#39;).trigger(&#39;change&#39;);
});
// 验证绑定
new Validate($(&#39;#validateForm&#39;), function() {
    new Dialog().alert(&#39;全部验证通过&#39;);
}, {
    validate: [{                                  // 演示替换内置的提示
        id: &#39;bankAccount&#39;,
        prompt: {
            unmatch: &#39;银行账户只能是16位数值&#39;     // 否则提示文字就是内置的&ldquo;内容格式不符合要求&rdquo; 
        }
    }, {
       id: &#39;pwd&#39;,                                 // 演示添加自定义的验证
        method: function(el) {
            var valueAgain = pwdAgain.val();
            if (valueAgain &amp;&amp; el.val() != valueAgain) {
                return &#39;前后密码不一致&#39;;
            } else {
                pwdAgain.removeClass(&#39;error&#39;);
            }
        } 
    }, {
        id: &#39;pwdAgain&#39;,
        method: function(el) {
            if (el.val() != pwd.val()) {
                return &#39;前后密码不一致&#39;;
            } else {
                pwd.removeClass(&#39;error&#39;);
            }
        }
    }, {
        id: &#39;idImgUrl&#39;,                           // 验证头像必传
        method: function(el) {
            // el指存放身份证图片地址的hidden类型的input框
            // 隐藏元素无法定位，转移提示元素给按钮
               如果目标静态，建议放在外面；
               如果是动态的，则必须用在method方法中
            el.data(&#39;target&#39;, btnFile);
            // 返回错误提示
            if (el.val() == &#39;&#39;) {
                return &#39;尚未上传头像&#39;;
            }
        }
    }]
});</pre>

<p>证件照验证相关HTML代码：</p>

<pre>
&lt;label for=&quot;validateFile&quot; class=&quot;ui_button&quot;&gt;上传照片&lt;/label&gt;
&lt;input type=&quot;hidden&quot; id=&quot;idImgUrl&quot;&gt;

&lt;!-- 在验证form之外的上传头像form --&gt;
&lt;!-- 上传文件的表单 --&gt;
&lt;form&gt;&lt;input type=&quot;file&quot; id=&quot;validateFile&quot; class=&quot;clip&quot; accept=&quot;image/*&quot;&gt;&lt;/form&gt;</pre>

<p>注意，上面<code>hidden</code> input没有添加<code>required</code>属性，所以对应的是自定义的method方法。如果添加了<code>required</code>属性，如下：</p>

<pre>
&lt;input type=&quot;hidden&quot; id=&quot;idImgUrl&quot; <strong>required</strong>&gt;</pre>

<p>则自定义验证的参数不能使用<code>method</code>方法，而需要使用<code>prompt</code>. 例如：</p>

<pre>
{                                  // required设置时候的处理
    id: &#39;idImgUrl&#39;,
    prompt: {
        ignore: &#39;尚未上传头像&#39;     // 如果值是字符串，则需要在语句外面转移提示元素。如果是函数，可以写在里面。 
    }
}</pre>

<h5>③ 语法和API</h5>

<pre>
new Validate($(&#39;form&#39;), callback, options);</pre>

<p>你没有看错，<strong>1行代码就可以满足各种验证需求</strong>。另外，也可以使用包装器方法：</p>

<pre>
$(form).validate(callback, options);</pre>

<p>其中，<code>callback</code>是所有表单验证通过后的回调方法。</p>

<p><code>options</code>为可选参数，具体见下表：</p>

<div class="table_x">
<table class="ui_table" style="width:100%">
	<tbody>
		<tr>
			<th scope="col">参数名称</th>
			<th scope="col">支持类型</th>
			<th scope="col">默认值</th>
			<th scope="col">释义</th>
		</tr>
		<tr>
			<td>validate</td>
			<td>Array</td>
			<td><code>[]</code></td>
			<td>内置验证以外的自定义提示和验证方法。为对象数组集。如<code>[{}, {}]</code>, 其中，每个对象格式对下：
			<pre>
id: &#39;&#39;,                 // 元素的id, 必须
prompt: {               // 用来替换内置的提示文字，支持Function类型，
                           可动态返回提示字符串内容
    ignore: &#39;&#39;,         // 值为空时候的提示文字
    unmatch: &#39;&#39;,        // 格式不匹配时的提示，参见上面例子银行账户提示
    out: {              // 值范围超出时的提示文字
        min: &#39;&#39;,
        max: &#39;&#39;,
        step: &#39;&#39;
    },
    overflow: {         // 内容长度超出时候的提示文字
        minlength: &#39;&#39;,
        maxlength: &#39;&#39;
    }
},
method: $.noop          // 其他自定义的验证，例如本例的前后密码一致验证
                           其中上下文this指当前实例对象，支持一个参数，
                           为当前表单元素
                        // 返回错误提示内容字符串，其他返回值(包括undefined)
                           都认为是验证通过</pre>
			</td>
		</tr>
		<tr>
			<td>multiple</td>
			<td>Boolean</td>
			<td><code>true</code></td>
			<td>提交时候是全部错误高亮，还是仅仅第一个</td>
		</tr>
		<tr>
			<td>immediate</td>
			<td>Boolean</td>
			<td><code>true</code></td>
			<td>是否在表单提交后开启即时验证</td>
		</tr>
		<tr>
			<td>label<sup>New</sup></td>
			<td>Boolean</td>
			<td><code>false</code></td>
			<td>是否使用关联label元素中裸露的文字作为提示关键字，默认关闭</td>
		</tr>
		<tr>
		</tr>
		<tr>
			<td>onSuccess</td>
			<td>Function</td>
			<td><code>$.noop</code></td>
			<td>当前表单元素验证通过时候执行的回调。</td>
		</tr>
		<tr>
		</tr>
		<tr>
			<td>onError</td>
			<td>Function</td>
			<td><code>$.noop</code></td>
			<td>当前表单元素验证没有通过的时候执行的回调。</td>
		</tr>
	</tbody>
</table>
</div>

<h5>④ 一些重要说明</h5>

<ol>
	<li>
	<p>请使用原生<code>&lt;form&gt;</code>元素，内置<code>submit</code>类型按钮，默认<code>disabled</code>. 防止JS还没有初始化，用户点击按钮，触发原始的表单提交。</p>

	<p>另外，由于原生按钮在低版本IE下有黑色线框以及尺寸不好控制，可以使用<code>&lt;label&gt;</code>元素<code>for</code>属性和按钮的<code>id</code>属性进行关联。例如：</p>

	<pre>
&lt;input type=&quot;submit&quot; id=&quot;validateSubmit&quot; disabled class=&quot;clip&quot;&gt;
&lt;label for=&quot;validateSubmit&quot; class=&quot;ui_button ui_button_primary&quot;&gt;提交&lt;/label&gt;</pre>
	</li>
	<li>
	<p>支持自定义的文字提示和额外的自定义验证，就是使用<code>validate</code>可选参数就可以了，支持的基本参数可参见上面关于&ldquo;option可选参数&rdquo;的表格。</p>

	<p>需要进一步补充说明的是，自定义提示文字，支持Function类型参数，实现动态提示效果。例如<code>unmatch</code>只是单纯的类似&ldquo;不匹配&rdquo;的含糊提示。从用户角度讲，存在提示细分的需求，此时，可以使用Function类型值做进一步的提示内容细分处理。例如下面链接地址细分提示演示代码（取自实际项目）：</p>

	<pre>
validate: [{
    id: &#39;some_id&#39;,
    prompt: {
        unmatch: function(el) {
            var value = el.val(), arr = value.split(&#39;://&#39;);
            if (arr.length &lt;= 1 || (arr[0] != &#39;http&#39; &amp;&amp; arr[0] != &#39;https&#39;)) {
                return &#39;必须以http(s)://开始&#39;;
            }
            return &#39;链接地址错误&#39;;
        }
    }
}]</pre>

	<p>正如所见，当使用Function类型参数时候，支持一个可选参数，和method参数一样，表示当前验证元素空间的jQuery包装器对象。上下文<code>this</code>指当前DOM元素。</p>
	</li>
	<li>
	<p>支持<code>hidden</code>类型的元素验证，但是，由于errroTip提示无法定位隐藏元素，因此，请使用类似下面的代码转移最终真正的提示元素：</p>

	<pre>
$(&#39;input[type=&quot;hidden&quot;]&#39;).data(&#39;target&#39;, $(target));</pre>
	</li>
</ol>

<h5>⑤ 非表单元素的验证</h5>

<p>从我个人理想主义的角度讲，我希望所有的验证和提交走原生的<code>form</code>元素。</p>

<p>但是实际情况下，有时候提交按钮就是普通的元素标签，例如，Dialog弹框的确认按钮。此时无法触发弹框内的<code>form</code>元素的<code>submit</code>事件。</p>

<p>还有的时候，压根就没有使用form元素。</p>

<p>遇到上面两种情况，我们该如何是好？不要担心，Validate.js支持普通元素的验证处理。</p>

<p>参考下面的例子，一个<code>input</code>框在普通的<code>div</code>中有个普通的<code>a</code>标签按钮。</p>

<div class="bgwh p10" id="notForm"><a class="ui_icon_search" href="javascript:">搜索</a> <a class="ui_button ui_button_primary ml10" href="javascript:">搜索</a></div>

<pre>
&lt;div id=&quot;notForm&quot; class=&quot;p10 bgwh&quot;&gt;
    &lt;span class=&quot;ui_input ui_search_input&quot;&gt;
        &lt;input type=&quot;search&quot; required&gt;
        &lt;a href=&quot;javascript:&quot; class=&quot;ui_icon_search&quot;&gt;搜索&lt;/a&gt;
    &lt;/span&gt;
    &lt;a href=&quot;javascript:&quot; class=&quot;ui_button ui_button_primary&quot;&gt;搜索&lt;/a&gt;
&lt;/div&gt;</pre>

<p>JS代码如下：</p>

<pre>
// 非表单元素验证
var noForm = $(&#39;#notForm&#39;);
var noFormValidate = new Validate(noForm, null, {});
noForm.find(&#39;a&#39;).click(function() {
    if (noFormValidate.isAllPass()) {
        new Dialog().alert(&#39;无表单验证通过&#39;);
    }
});</pre>

<p>跟原生<code>form</code>验证相同之处在于支持自定义的提示和自定义的验证方法，一次全局验证后，开启即时验证；不一样的地方在于，验证成功的方法(<code>isAllPass</code>方法)需要自己调用，回调也是需要自己处理的。</p>

<p>关键就是：<code><em>验证实例</em>.isAllPass()</code>方法。</p>

<p>上面的JS代码解读就是：</p>

<p>给元素注册验证方法(会验证所有表单类型子元素)，当点击按钮的时候，如果全部通过(同时悄悄开始了即时验证)，则弹出弹框。</p>

<h5>⑥ 扩展自定义的验证类型<sup>New</sup></h5>

<p>除了内置的<code>email</code>, <code>tel</code>等类型，Validate还支持自定义的类型，例如，下面扩展了短信验证码、座机移机身份证号码验证类型。</p>

<pre>
$.validate.reg = $.extend({}, $.validate.reg || {}, {
    code: &#39;^\\d{6}$&#39;,
    phone: &#39;^\\d+(?:\\-\\d+)*$&#39;,
    id: &#39;^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}([0-9]|[Xx])$&#39;
});
$.validate.name = $.extend({}, $.validate.name || {}, {
    code: &#39;短信验证码&#39;,
    phone: &#39;座机&#39;,
    id: &#39;身份证号码&#39;
});</pre>

<p>使用的时候，指定<code>type</code>值就可以，例如：</p>

<pre>
座机：&lt;input type=&quot;phone&quot;&gt;</pre>

<h5>⑦ 一开始就开启失焦验证</h5>

<p>搜索</p>

<pre>
// 一开始就失焦验证
var blurForm = $(&#39;#blurForm&#39;);
var blurValidate = new Validate(blurForm, function() {
    new Dialog().alert(&#39;验证通过&#39;);
});
// 添加失焦验证事件处理
blurForm.find(&#39;:input&#39;).each(function() {
    $(this).blur(function() {
        if (!blurForm.data(&#39;immediate&#39;)) {
            // 如果没有开启即时验证
            $.validate.focusable = 0;
            blurValidate.isPass($(this));
        }
    });
});
                    </pre>
</div>
</div>
</div>
