<h1><a href="https://www.cnblogs.com/jiangds/p/6596595.html" id="cb_post_title_url">UML各种图总结-精华</a></h1>

<p>UML（Unified Modeling Language）是一种统一建模语言，为面向对象开发系统的产品进行说明、可视化、和编制文档的一种标准语言。下面将对UML的九种图+包图的基本概念进行介绍以及各个图的使用场景。</p>

<p>速记：</p>

<p>用例图</p>

<p>类图、对象图</p>

<p>序列图，协作图，状态图，活动图&nbsp; ==&gt; 这四个图都是针对对象的。其中活动图是一种特殊的状态图，产品有时候也会用到。</p>

<p>构件图</p>

<p>部署图</p>

<p>&nbsp;</p>

<h3>一、基本概念　　</h3>

<p>　　如下图所示，UML图分为用例视图、设计视图、进程视图、实现视图和拓扑视图，又可以静动分为静态视图和动态视图。静态图分为：用例图，类图，对象图，包图，构件图，部署图。动态图分为：状态图，活动图，协作图，序列图。</p>

<p><img alt="" src="https://images2015.cnblogs.com/blog/1039166/201703/1039166-20170321200512502-745718093.png" style="height:451px; width:424px" /></p>

<p>　　<strong>1、用例图（UseCase Diagrams）：</strong>&nbsp;</p>

<p>&nbsp; 　　用例图主要回答了两个问题：1、是谁用软件。2、软件的功能。从用户的角度描述了系统的功能，并指出各个功能的执行者，强调用户的使用者，系统为执行者完成哪些功能。</p>

<p><img alt="" src="https://images2015.cnblogs.com/blog/1039166/201703/1039166-20170321200647752-1036489242.png" style="height:204px; width:433px" /></p>

<p>　　<strong>2、类图（Class Diagrams）：</strong></p>

<p><strong>　　　</strong>　用户根据用例图抽象成类，描述类的内部结构和类与类之间的关系，是一种静态结构图。&nbsp;在UML类图中，常见的有以下几种关系:&nbsp;泛化（Generalization）,&nbsp;&nbsp;实现（Realization），关联（Association)，聚合（Aggregation），组合(Composition)，依赖(Dependency)。</p>

<p>&nbsp; 　　　各种关系的强弱顺序：&nbsp;泛化&nbsp;=&nbsp;实现&nbsp;&gt;&nbsp;组合&nbsp;&gt;&nbsp;聚合&nbsp;&gt;&nbsp;关联&nbsp;&gt;&nbsp;依赖</p>

<p>　　<strong>3、对象图（Object Diagrams）:</strong></p>

<p><strong>　　　</strong>　描述的是参与<strong>交互的各个对象在交互过程中某一时刻的状态</strong>。对象图可以被看作是类图在某一时刻的实例。</p>

<p>　　　　　　<img alt="" src="https://images2015.cnblogs.com/blog/1039166/201703/1039166-20170321204533627-793289969.jpg" /></p>

<p>　　<strong>4、状态图（Statechart Diagrams）：</strong></p>

<p><strong>　　　　</strong>是一种由状态、变迁、事件和活动组成的状态机，用来描述<u><strong>类的对象所有可能的状态</strong></u>以及时间发生时状态的转移条件。</p>

<p>　　　　　　<img alt="" src="https://images2015.cnblogs.com/blog/1039166/201703/1039166-20170322150222080-857452152.gif" /></p>

<p>　　<strong>5、活动图（Activity Diagrams）：</strong></p>

<p><strong>　　　　<u>是状态图的一种特殊情况</u></strong>，这些状态大都处于活动状态。本质是一种流程图，它描述了活动到活动的控制流。　　　　</p>

<p><strong>交互图强调的是对象到对象的控制流，而活动图则强调的是从活动到活动的控制流</strong>。</p>

<p>活动图是一种表述过程基理、业务过程以及工作流的技术。</p>

<p>它可以用来对业务过程、工作流建模，也可以对用例实现甚至是程序实现来建模。</p>

<p>　　　　　　<img alt="" src="https://images2015.cnblogs.com/blog/1039166/201703/1039166-20170322151313549-1985497360.jpg" /></p>

<p>　　5.1&nbsp;带泳道的活动图</p>

<p>　　　　　　泳道表明每个活动是由哪些人或哪些部门负责完成。</p>

<p>　　　　　　<img alt="" src="https://images2015.cnblogs.com/blog/1039166/201703/1039166-20170322152410361-482057773.jpg" /></p>

<p>　　5.2&nbsp;带对象流的活动图</p>

<p>　　　　用活动图描述某个对象时，可以把涉及到的对象放置在活动图中，并用一个依赖将其连接到进行创建、修改和撤销的动作状态或者活动状态上，对象的这种使用方法就构成了对象流。对象流用带有箭头的虚线表示。</p>

<p>　　　　<img alt="" src="https://images2015.cnblogs.com/blog/1039166/201703/1039166-20170322152434705-1009260673.jpg" /></p>

<p>　　<strong>6、序列图-时序图（Sequence Diagrams）：</strong></p>

<p><strong>　　　　</strong>交互图的一种，描述了<strong>对象之间消息发送的先后顺序，强调时间顺序</strong>。</p>

<p>　　　　序列图的主要用途是把用例表达的需求，转化为进一步、更加正式层次的精细表达。用例常常被细化为一个或者更多的序列图。同时序列图更有效地描述如何分配各个类的职责以及各类具有相应职责的原因。</p>

<p>　　　　<img alt="" src="https://images2015.cnblogs.com/blog/1039166/201703/1039166-20170322160556283-490349890.jpg" /></p>

<p>　　消息用从一个对象的生命线到另一个对象生命线的箭头表示。箭头以时间顺序在图中从上到下排列。&nbsp;</p>

<p>　　序列图中涉及的元素：</p>

<p>　　6.1 生命线</p>

<p>　　　　生命线名称可带下划线。当使用下划线时，意味着序列图中的生命线代表一个类的特定实例。</p>

<p>　　　　<img alt="" src="https://images2015.cnblogs.com/blog/1039166/201703/1039166-20170323102912455-1219449106.png" style="height:168px; width:337px" /></p>

<p>　　6.2 同步消息</p>

<p>　　　　同步等待消息</p>

<p>　　　　<img alt="" src="https://images2015.cnblogs.com/blog/1039166/201703/1039166-20170323103344815-667545820.png" style="height:170px; width:323px" /></p>

<p>　　6.3 异步消息</p>

<p>　　　　异步发送消息，不需等待</p>

<p>　　　　<img alt="" src="https://images2015.cnblogs.com/blog/1039166/201703/1039166-20170323103907408-1194389045.png" style="height:200px; width:308px" />　　　　</p>

<p>　　6.4 注释</p>

<p>　　　　<img alt="" src="https://images2015.cnblogs.com/blog/1039166/201703/1039166-20170323103940596-1452375633.png" style="height:194px; width:271px" /></p>

<p>　　6.5 约束</p>

<p>　　　　<img alt="" src="https://images2015.cnblogs.com/blog/1039166/201703/1039166-20170323104208361-1274035050.png" style="height:157px; width:289px" /></p>

<p>　　6.6 组合　　　　</p>

<p>　　　　<strong>组合片段</strong><strong>用来解决交互执行的条件及方式</strong>。它允许在序列图中直接表示逻辑组件，用于通过指定条件或子进程的应用区域，为任何生命线的任何部分定义特殊条件和子进程。常用的组合片段有：抉择、选项、循环、并行。</p>

<p>　　<strong>7、协作图（Collaboration Diagrams）：</strong></p>

<p><strong>　　　　</strong>交互图的一种，描述了收发消息的对象的组织关系，强调<strong>对象之间的合作关系</strong>。</p>

<p><strong>　　　　</strong>时序图按照时间顺序布图，而协作图按照空间结构布图</p>

<p>　　　　<img alt="" src="https://images2015.cnblogs.com/blog/1039166/201703/1039166-20170322170433174-1921890453.png" /></p>

<p>&nbsp;</p>

<p>　　<strong>8、构件图（Component Diagrams）：</strong></p>

<p><strong>　　　　</strong>构件图是用来表示系统中构件与构件之间，类或接口与构件之间的关系图。其中，构建图之间的关系表现为依赖关系，定义的类或接口与类之间的关系表现为依赖关系或实现关系。</p>

<p>　　　　<img alt="" src="https://images2015.cnblogs.com/blog/1039166/201703/1039166-20170322172749565-807855921.jpg" /></p>

<p><strong>　　9<strong>、部署图（Deployment Diagrams）：</strong></strong></p>

<p><strong><strong>　　　　</strong></strong>描述了系统运行时进行处理的结点以及在结点上活动的构件的配置。强调了物理设备以及之间的连接关系。</p>

<p>部署模型的目的：</p>

<p>描述一个具体应用的主要部署结构，通过对各种硬件，在硬件中的软件以及各种连接协议的显示，可以很好的描述系统是如何部署的；平衡系统运行时的计算资源分布；可以通过连接描述组织的硬件网络结构或者是嵌入式系统等具有多种硬件和软件相关的系统运行模型。</p>

<p><img alt="" src="https://images2015.cnblogs.com/blog/1039166/201703/1039166-20170322173357830-751987477.jpg" /></p>

<h3>二、图的差异比较</h3>

<p>　　1.序列图(时序图)VS协作图</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;序列图和协作图都是交互图。二者在语义上等价，可以相互转化。但是侧重点不同：序列图侧重时间顺序，协作图侧重对象间的关系。</p>

<p>共同点：时序图与协作图均显示了对象间的交互。</p>

<p>不同点：时序图强调交互的时间次序。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;协作图强调交互的空间结构。</p>

<p>&nbsp;　 &nbsp;2.状态图VS活动图</p>

<p>&nbsp; &nbsp; &nbsp;&nbsp;状态图和活动图都是行为图。状态图侧重从行为的结果来描述，活动图侧重从行为的动作来描述。状态图描述了一个具体对象的可能状态以及他们之间的转换。在实际的项目中，活动图并不是必须的，需要满足以下条件：1、出现并行过程&amp;行为；2、描述算法；3、跨越多个用例的活动图。</p>

<p>&nbsp;　 &nbsp;3.活动图VS交互图</p>

<p>　　二者都涉及到对象和他们之间传递的关系。区别在于交互图观察的是传送消息的对象，而活动图观察的是对象之间传递的消息。看似语义相同，但是他们是从不同的角度来观察整个系统的。</p>

<h3>三、UML与软件工程</h3>

<p>　　UML图是软件工程的组成部分，软件工程从宏观的角度保证了软件开发的各个过程的质量。而UML作为一种建模语言，更加有效的实现了软件工程的要求。</p>

<p>　　如下图，在软件的各个开发阶段需要的UML图。</p>

<p>　　<img alt="" src="https://images2015.cnblogs.com/blog/1039166/201703/1039166-20170322174207940-1684357546.png" style="height:556px; width:623px" /></p>

<p>　　下表是UML使用人员图示：</p>

<p>　　<img alt="" src="https://images2015.cnblogs.com/blog/1039166/201703/1039166-20170322174409783-1233312213.png" style="height:383px; width:687px" /></p>

<p>&nbsp;</p>
