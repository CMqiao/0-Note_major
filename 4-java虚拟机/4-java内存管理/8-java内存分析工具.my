<h1>java内存分析工具</h1>

<p>前段时间做了一个项目,Exception in thread &quot;main&quot;&nbsp;<a href="http://lib.csdn.net/base/java" target="_blank" title="Java 知识库">Java</a>.lang.OutOfMemoryError:&nbsp;<a href="http://lib.csdn.net/base/java" target="_blank" title="Java 知识库">Java&nbsp;</a>heap space</p>

<p>出现这个错误,所以需要查找原因,所以就用到这个工具,安装比较麻烦,贴出来和大家共享一下:</p>

<p>第一步:下载Eclipse MAT</p>

<p>下载地址:http://www.eclipse.org/mat/downloads.<a href="http://lib.csdn.net/base/php" target="_blank" title="PHP知识库">PHP</a></p>

<p><img alt="" src="http://my.csdn.net/uploads/201207/03/1341298086_2737.png" /></p>

<p>第二步:下载之后将压缩包解压,放置到Myeclipse 的\MyEclipse 9\dropins目录下</p>

<p><strong>解压后会看见这些文件:&nbsp;纠正下面一个错别字不是&quot;写&quot;是 &quot;下&quot;</strong></p>

<p><img alt="" src="http://my.csdn.net/uploads/201207/03/1341298525_9258.png" /></p>

<p>第三步:按照下图,A,B,C的顺序进行对应的文件的创建</p>

<p><img alt="" src="http://my.csdn.net/uploads/201207/03/1341298891_1913.png" /></p>

<p>第四部:重启Myeclipse,打开Window-&gt;Perferences,你会看见这个项目:</p>

<p><img alt="" src="http://my.csdn.net/uploads/201207/03/1341299078_7045.png" /></p>

<p>&nbsp;</p>

<p>简单的说一下使用(控制台的)如果是tomcat或者是别的服务器需要你去查如何配置JVM参数:</p>

<p>以下是一个会导致<strong>java.lang.OutOfMemoryError:&nbsp;<a href="http://lib.csdn.net/base/java" target="_blank" title="Java 知识库">java&nbsp;</a>heap space</strong>的程序代码:(very easy)</p>

<p>&nbsp;</p>

<p><strong>[java]</strong>&nbsp;<a href="http://blog.csdn.net/yanghongchang_/article/details/7711911#" target="_blank" title="view plain">view plain</a><a href="http://blog.csdn.net/yanghongchang_/article/details/7711911#" target="_blank" title="copy">copy</a></p>

<p><embed allowscriptaccess="always" bgcolor="#ffffff" height="18" pluginspage="http://www.macromedia.com/go/getflashplayer" quality="best" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" type="application/x-shockwave-flash" width="18" wmode="transparent"></embed></p>

<ol start="1">
	<li>package&nbsp;org.lx.test;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>import&nbsp;java.util.Date;&nbsp;&nbsp;</li>
	<li>import&nbsp;java.util.HashMap;&nbsp;&nbsp;</li>
	<li>import&nbsp;java.util.Map;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;OutOfMemoryTest&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;Integer,Date&gt;&nbsp;map=new&nbsp;HashMap&lt;Integer,&nbsp;Date&gt;();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;600000000;&nbsp;i++)&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map.put(i,&nbsp;new&nbsp;Date());&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p><br />
首先在运行之前有一些参数需要设置:</p>

<p>&nbsp;</p>

<p><img alt="" src="http://my.csdn.net/uploads/201207/03/1341299379_7666.png" /></p>

<p>然后就到了参数设置的页面,按照A,B的顺序设置参数:(-XX:+HeapDumpOnOutOfMemoryError)避免写错误可以copy</p>

<p><img alt="" src="http://my.csdn.net/uploads/201207/03/1341299580_1973.png" /></p>

<p>运行错误的程序代码会看见以下结果:</p>

<p><img alt="" src="http://my.csdn.net/uploads/201207/03/1341299670_1083.png" /></p>

<p>那么这时候就生成了一个文件<strong>java_pid3708.hprof</strong>,这个文件 在你的项目的根目录下(myeclipse10)</p>

<p><img alt="" src="http://my.csdn.net/uploads/201207/03/1341299823_3634.png" /></p>

<p>那么接下来我们就打开这个文件进行分析如何打开见下图:(选中刚刚在项目根目录下生成的文件<strong>java_pid3708.hprof</strong>打开)</p>

<p><img alt="" src="http://my.csdn.net/uploads/201207/03/1341300019_6946.png" /></p>

<p>打开之后你会看见下图就OK了:</p>

<p><img alt="" src="http://my.csdn.net/uploads/201207/03/1341300185_1883.png" /></p>

<p>&nbsp;</p>

<p>至于这其中问题如何查找请参考以下连接:</p>

<p>以下文章已经说的非常详细了:</p>

<p>1.<a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-ecl-ma/index.html?ca=drs-" target="_blank">使用 Eclipse Memory Analyzer 进行堆转储文件分析</a></p>

<p>2.<a href="http://coderj.org/blog/2011/08/02/%E4%BD%BF%E7%94%A8mat%E8%BF%9B%E8%A1%8Cdump%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/" target="_blank">使用mat进行dump文件分析</a></p>

<p>如有问题,请指正!谢谢!</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>在工作中可能会遇到内存溢出这种灾难性的问题，那么程序肯定是存在问题，找出问题至关重要，上一篇文章讲了jmap命令的使用方法，当然用jmap导出的文件我们也看不懂啊，那就交给memory analyzer(mat)这个工具，让他帮助我们来观察程序的内存分布情况吧。</p>

<p>&nbsp;</p>

<ul>
	<li><a href="http://my.oschina.net/biezhi/blog/286223#OSC_h2_1">1.&nbsp;用jmap生成堆信息</a></li>
	<li><a href="http://my.oschina.net/biezhi/blog/286223#OSC_h2_2">2.&nbsp;将堆信息导入到mat中分析 &nbsp;&nbsp;</a></li>
	<li><a href="http://my.oschina.net/biezhi/blog/286223#OSC_h2_3">3. 生成分析报告</a></li>
	<li><a href="http://my.oschina.net/biezhi/blog/286223#OSC_h4_4">Histogram</a></li>
	<li><a href="http://my.oschina.net/biezhi/blog/286223#OSC_h4_5">Dominator Tree</a></li>
	<li><a href="http://my.oschina.net/biezhi/blog/286223#OSC_h4_6">Top consumers</a></li>
	<li><a href="http://my.oschina.net/biezhi/blog/286223#OSC_h4_7">Leak Suspects</a></li>
</ul>

<blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;MAT 不是一个万能工具，它并不能处理所有类型的堆存储文件。但是比较主流的厂家和格式，例如 Sun, HP, SAP 所采用的 HPROF 二进制堆存储文件，以及 IBM 的 PHD 堆存储文件等都能被很好的解析。下面来看看要怎么做呢，也许对你有用。官方文档：<a href="http://help.eclipse.org/luna/index.jsp?topic=/org.eclipse.mat.ui.help/welcome.html" rel="nofollow" target="_blank">http://help.eclipse.org/luna/index.jsp?topic=/org.eclipse.mat.ui.help/welcome.html</a></p>
</blockquote>

<p>造成OutOfMemoryError原因一般有2种：</p>

<p><strong>1、内存泄露，对象已经死了，无法通过垃圾收集器进行自动回收，通过找出泄露的代码位置和原因，才好确定解决方案；<br />
2、内存溢出，内存中的对象都还必须存活着，这说明Java堆分配空间不足，检查堆设置大小（-Xmx与-Xms），检查代码是否存在对象生命周期太长、持有状态时间过长的情况。</strong></p>

<p><strong>&nbsp;</strong></p>

<h2>1.&nbsp;用jmap生成堆信息</h2>

<p><a href="http://static.oschina.net/uploads/space/2014/0702/100252_ot9E_1767531.png" target="_blank"><iframe frameborder="0" id="iframe_0.4867432443260682" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://static.oschina.net/uploads/space/2014/0702/100252_ot9E_1767531.png?_=3821569%22%20style=%22border:none;max-width:1611px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.4867432443260682',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></a></p>

<p>这样在E盘的jmap文件夹里会有一个map.bin的堆信息文件&nbsp;</p>

<h2>2.&nbsp;将堆信息导入到mat中分析 &nbsp;&nbsp;</h2>

<p><a href="http://static.oschina.net/uploads/space/2014/0702/101421_bdMx_1767531.png" target="_blank"><iframe frameborder="0" id="iframe_0.6209251051325895" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://static.oschina.net/uploads/space/2014/0702/101421_bdMx_1767531.png?_=3821569%22%20style=%22border:none;max-width:1611px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.6209251051325895',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></a></p>

<p>&nbsp;</p>

<h2>3. 生成分析报告</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;mat可以为我们生成多个报告：</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://static.oschina.net/uploads/space/2014/0702/140753_cUoj_1767531.png" target="_blank"><iframe frameborder="0" id="iframe_0.15838216542674255" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://static.oschina.net/uploads/space/2014/0702/140753_cUoj_1767531.png?_=3821569%22%20style=%22border:none;max-width:1611px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.15838216542674255',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://static.oschina.net/uploads/space/2014/0702/140754_Uq2P_1767531.png" target="_blank"><iframe frameborder="0" id="iframe_0.7486069418836567" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://static.oschina.net/uploads/space/2014/0702/140754_Uq2P_1767531.png?_=3821569%22%20style=%22border:none;max-width:1611px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.7486069418836567',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></a></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://static.oschina.net/uploads/space/2014/0702/140755_JHbD_1767531.png" target="_blank"><iframe frameborder="0" id="iframe_0.8644022041253672" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://static.oschina.net/uploads/space/2014/0702/140755_JHbD_1767531.png?_=3821569%22%20style=%22border:none;max-width:1611px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.8644022041253672',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://static.oschina.net/uploads/space/2014/0702/140755_iAe6_1767531.png" target="_blank"><iframe frameborder="0" id="iframe_0.13656557011085213" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://static.oschina.net/uploads/space/2014/0702/140755_iAe6_1767531.png?_=3821569%22%20style=%22border:none;max-width:1611px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.13656557011085213',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></a></p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;下面来看看生成的这些数据对我们有什么帮助</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://static.oschina.net/uploads/space/2014/0702/114056_IgFu_1767531.png" target="_blank"><iframe frameborder="0" id="iframe_0.8081671547049323" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://static.oschina.net/uploads/space/2014/0702/114056_IgFu_1767531.png?_=3821569%22%20style=%22border:none;max-width:1611px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.8081671547049323',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></a></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;从上图可以看到它的大部分功能，在饼图上,你会发现转储的大小和数量的类,对象和类加载器。<br />
正确的下面,饼图给出了一个印象最大的对象转储。移动你的鼠标一片看到对象中的对象的细节检查在左边。下面的Action标签中：</p>

<ol>
	<li>
	<ol>
		<li>
		<ul>
			<li>
			<p><strong>Histogram可以列出内存中的对象，对象的个数以及大小。</strong></p>
			</li>
			<li>
			<p><strong>Dominator Tree可以列出那个线程，以及线程下面的那些对象占用的空间。</strong></p>
			</li>
			<li>
			<p><strong>Top consumers通过图形列出最大的object。</strong></p>
			</li>
			<li>
			<p><strong>Leak Suspects通过MA自动分析泄漏的原因。</strong></p>
			</li>
		</ul>
		</li>
	</ol>
	</li>
</ol>

<h4><strong>Histogram</strong></h4>

<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;</strong><strong><a href="http://static.oschina.net/uploads/space/2014/0702/120039_qSi5_1767531.png" target="_blank"><iframe frameborder="0" id="iframe_0.702331300409704" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://static.oschina.net/uploads/space/2014/0702/120039_qSi5_1767531.png?_=3821569%22%20style=%22border:none;max-width:1611px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.702331300409704',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></a></strong></p>

<ul>
	<li>
	<p><strong>Class Name ： 类名称，java类名</strong></p>
	</li>
	<li>
	<p><strong>Objects ： 类的对象的数量，这个对象被创建了多少个</strong></p>
	</li>
	<li>
	<p><strong>Shallow Heap ：一个对象内存的消耗大小，不包含对其他对象的引用</strong></p>
	</li>
</ul>

<ul>
	<li>
	<p><strong>Retained Heap ：是shallow Heap的总和，也就是该对象被GC之后所能回收到内存的总和</strong></p>
	</li>
</ul>

<p>&nbsp;</p>

<hr />
<p>一般来说,<strong>Shallow Heap</strong>堆中的对象是它的大小和保留内存大小相同的对象是堆内存的数量时,将释放对象被垃圾收集。<br />
保留设置一组主要的对象,例如一个特定类的所有对象,或所有对象的一个特定的类装入器装入的类或者只是一群任意对象,是释放的组对象如果所有对象的主要设置变得难以接近的。保留设置包括这些对象以及所有其他对象只能通过这些对象。保留大小是总堆大小中包含的所有对象的保留。<em>摘自eclipse</em></p>

<hr />
<p>关于的详细讲解，建议大家查看<a href="http://bjyzxxds.iteye.com/blog/1532937" rel="nofollow" target="_blank">Shallow heap &amp; Retained heap</a>，这是个很重要的概念。</p>

<p><a href="http://static.oschina.net/uploads/space/2014/0702/143746_3JnJ_1767531.png" target="_blank"><iframe frameborder="0" id="iframe_0.2879590279145139" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://static.oschina.net/uploads/space/2014/0702/143746_3JnJ_1767531.png?_=3821569%22%20style=%22border:none;max-width:1611px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.2879590279145139',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></a></p>

<p>这儿借助工具提供的regex正则搜索一下我们自己的类，排序后看看哪些相对是占用比较大的。</p>

<p><a href="http://static.oschina.net/uploads/space/2014/0702/144056_NLi7_1767531.png" target="_blank"><iframe frameborder="0" id="iframe_0.8502062824777814" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://static.oschina.net/uploads/space/2014/0702/144056_NLi7_1767531.png?_=3821569%22%20style=%22border:none;max-width:1611px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.8502062824777814',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></a></p>

<p>左边可以看到类的详细使用，比如所属包，父类是谁，所属的类加载器，内存地址，占用大小和回收情况等</p>

<p><a href="http://static.oschina.net/uploads/space/2014/0702/144418_r62H_1767531.png" target="_blank"><iframe frameborder="0" id="iframe_0.7632284219021821" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://static.oschina.net/uploads/space/2014/0702/144418_r62H_1767531.png?_=3821569%22%20style=%22border:none;max-width:1611px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.7632284219021821',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></a></p>

<p>这儿有个工具可以根据自己的需求分组查找，默认根据class分组，类似我们sql里的group by了~~</p>

<p><a href="http://static.oschina.net/uploads/space/2014/0702/145027_tqXs_1767531.png" target="_blank"><iframe frameborder="0" id="iframe_0.7077488545767099" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://static.oschina.net/uploads/space/2014/0702/145027_tqXs_1767531.png?_=3821569%22%20style=%22border:none;max-width:1611px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.7077488545767099',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></a></p>

<p>这里可以看到上面3个选项，分别生成overview、leak suspects、top components数据，但是这儿生成的不是图表，如果要看图表在<a href="http://static.oschina.net/uploads/space/2014/0702/150452_97xc_1767531.png" target="_blank"><iframe frameborder="0" id="iframe_0.6709050838846846" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://static.oschina.net/uploads/space/2014/0702/150452_97xc_1767531.png?_=3821569%22%20style=%22border:none;max-width:1611px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.6709050838846846',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></a>（Overview）中的Action标签里点击查看。</p>

<p>这个是Overview中的&nbsp;Heap Dump Overview视图，从工具栏中点开，这是一个全局的内存占用信息</p>

<table>
	<tbody>
		<tr>
			<td>Used heap dump</td>
			<td>79.7 MB</td>
		</tr>
		<tr>
			<td>Number of objects</td>
			<td>1,535,626</td>
		</tr>
		<tr>
			<td>Number of classes</td>
			<td>8,459</td>
		</tr>
		<tr>
			<td>Number of class loaders</td>
			<td>74</td>
		</tr>
		<tr>
			<td>Number of GC roots</td>
			<td>2,722</td>
		</tr>
		<tr>
			<td>Format</td>
			<td>hprof</td>
		</tr>
		<tr>
			<td>JVM version</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>Time</td>
			<td>格林尼治标准时间+0800上午9时20分37秒</td>
		</tr>
		<tr>
			<td>Date</td>
			<td>2014-7-2</td>
		</tr>
		<tr>
			<td>Identifier size</td>
			<td>32-bit</td>
		</tr>
		<tr>
			<td>File path</td>
			<td>E:\jmap\map.bin</td>
		</tr>
		<tr>
			<td>File length</td>
			<td>108,102,005</td>
		</tr>
		<tr>
			<td>
			<ul>
				<li>
				<p>Total: 12 entries</p>
				</li>
			</ul>
			</td>
			<td>&nbsp;</td>
		</tr>
	</tbody>
</table>

<p>然后可以点开SystemProperties和Thread Overview进行查看，我这里就不贴了内容比较多。</p>

<h4><strong><strong>Dominator Tree</strong></strong></h4>

<p><a href="http://static.oschina.net/uploads/space/2014/0702/145926_K3ET_1767531.png" target="_blank"><iframe frameborder="0" id="iframe_0.5950821193873594" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://static.oschina.net/uploads/space/2014/0702/145926_K3ET_1767531.png?_=3821569%22%20style=%22border:none;max-width:1611px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.5950821193873594',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></a></p>

<p>我们可以看到ibatis占了较多内存</p>

<h4>Top consumers</h4>

<p><strong><a href="http://static.oschina.net/uploads/space/2014/0702/150647_zCDB_1767531.png" target="_blank"><iframe frameborder="0" id="iframe_0.7333122115670061" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://static.oschina.net/uploads/space/2014/0702/150647_zCDB_1767531.png?_=3821569%22%20style=%22border:none;max-width:1611px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.7333122115670061',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></a></strong></p>

<p><strong>这张图展示的是占用内存比较多的</strong><strong>对象的分布，下面是具体的一些类和占用。</strong></p>

<p><strong><a href="http://static.oschina.net/uploads/space/2014/0702/150945_hmjj_1767531.png" target="_blank"><iframe frameborder="0" id="iframe_0.6696629982546589" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://static.oschina.net/uploads/space/2014/0702/150945_hmjj_1767531.png?_=3821569%22%20style=%22border:none;max-width:1611px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.6696629982546589',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></a></strong></p>

<p><strong>按等级分布的类使用情况，其实也就是按使用次数查看，java.lang.Class被排在第一</strong></p>

<p><strong><a href="http://static.oschina.net/uploads/space/2014/0702/151054_d2Q1_1767531.png" target="_blank"><iframe frameborder="0" id="iframe_0.03724105204274797" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://static.oschina.net/uploads/space/2014/0702/151054_d2Q1_1767531.png?_=3821569%22%20style=%22border:none;max-width:1611px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.03724105204274797',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></a></strong></p>

<p>还有一张图是我们比较关心的，那就是按包名看占用，根据包我们知道哪些公共用的到jar或自己的包占用</p>

<p><a href="http://static.oschina.net/uploads/space/2014/0702/151609_GMMg_1767531.png" target="_blank"><iframe frameborder="0" id="iframe_0.47431729543001966" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://static.oschina.net/uploads/space/2014/0702/151609_GMMg_1767531.png?_=3821569%22%20style=%22border:none;max-width:1611px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.47431729543001966',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></a></p>

<p>这样就可以看到包和包中哪些类的占用比较高。</p>

<h4>Leak Suspects</h4>

<p><strong><a href="http://static.oschina.net/uploads/space/2014/0702/151929_mYHX_1767531.png" target="_blank"><iframe frameborder="0" id="iframe_0.7423998903719902" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://static.oschina.net/uploads/space/2014/0702/151929_mYHX_1767531.png?_=3821569%22%20style=%22border:none;max-width:1611px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.7423998903719902',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></a></strong></p>

<p>从这份报告，看到该图深色区域被怀疑有内存泄漏，可以发现整个heap只有79.7M内存，深色区域就占了62%。所以，MAT通过简单的报告就说明了项目是有可疑代码的，具体点开详情来找到类，</p>

<p><a href="http://static.oschina.net/uploads/space/2014/0702/152211_lLLc_1767531.png" target="_blank"><iframe frameborder="0" id="iframe_0.4635208014708623" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://static.oschina.net/uploads/space/2014/0702/152211_lLLc_1767531.png?_=3821569%22%20style=%22border:none;max-width:1611px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.4635208014708623',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></a></p>

<p><a href="http://static.oschina.net/uploads/space/2014/0702/155719_7qTp_1767531.png" target="_blank"><iframe frameborder="0" id="iframe_0.11038182779981476" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://static.oschina.net/uploads/space/2014/0702/155719_7qTp_1767531.png?_=3821569%22%20style=%22border:none;max-width:1611px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.11038182779981476',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></a></p>

<p><a href="http://static.oschina.net/uploads/space/2014/0702/160132_F64s_1767531.png" target="_blank"><iframe frameborder="0" id="iframe_0.6074820998049566" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://static.oschina.net/uploads/space/2014/0702/160132_F64s_1767531.png?_=3821569%22%20style=%22border:none;max-width:1611px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.6074820998049566',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></a></p>

<p>点击鼠标，在List Objects-&gt; with outgoing references下可以查看该类都引用了什么对象，由此查看是否因为其他对象导致的内存问题。</p>

<p>下面继续查看pool的gc ROOT</p>

<p>如下图所示的上下文菜单中选择 Path To GC Roots -&gt; exclude weak references, 过滤掉弱引用，因为在这里弱引用不是引起问题的关键。</p>

<p>进入查看即可，我这儿的代码没有问题，就不用贴了。</p>

<p><a href="http://static.oschina.net/uploads/space/2014/0702/155212_BekS_1767531.png" target="_blank"><iframe frameborder="0" id="iframe_0.9514110908666524" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://static.oschina.net/uploads/space/2014/0702/155212_BekS_1767531.png?_=3821569%22%20style=%22border:none;max-width:1611px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.9514110908666524',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></a></p>

<hr />
<p>The classloader/component&nbsp;<strong>&quot;org.apache.catalina.loader.WebappClassLoader @ 0xa34cde8&quot;</strong>&nbsp;occupies&nbsp;<strong>19,052,864 (22.80%)</strong>&nbsp;bytes. The memory is accumulated in one instance of&nbsp;<strong>&quot;java.util.HashMap$Entry[]&quot;</strong>&nbsp;loaded by&nbsp;<strong>&quot;&lt;system class loader&gt;&quot;</strong>.<br />
<br />
<strong>Keywords</strong><br />
java.util.HashMap$Entry[]<br />
org.apache.catalina.loader.WebappClassLoader @ 0xa34cde8</p>

<hr />
<p>这段话是在工具中提示的，他告诉我们WebappClassLoader占了<strong>19,052,864&nbsp;</strong>字节的容量，这是tomcat的类加载器，JDK自带的系统类加载器中占用比较多的是HashMap。这个其实比较正常，大家经常用map作为存储容器。</p>

<p>除了在上一页看到的描述外，还有Shortest Paths To the Accumulation Point和Accumulated Objects部分，这里说明了从GC root到聚集点的最短路径，以及完整的reference chain。观察Accumulated Objects部分，java.util.HashMap的retained heap(size)最大，所以明显类实例都聚集在HashMap中了。</p>

<p><a href="http://static.oschina.net/uploads/space/2014/0702/155256_saNb_1767531.png" target="_blank"><iframe frameborder="0" id="iframe_0.6510391007854242" scrolling="no" src="data:text/html;charset=utf8,%3Cstyle%3Ebody%7Bmargin:0;padding:0%7D%3C/style%3E%3Cimg%20id=%22img%22%20src=%22http://static.oschina.net/uploads/space/2014/0702/155256_saNb_1767531.png?_=3821569%22%20style=%22border:none;max-width:1611px%22%3E%3Cscript%3Ewindow.onload%20=%20function%20()%20%7Bvar%20img%20=%20document.getElementById('img');%20window.parent.postMessage(%7BiframeId:'iframe_0.6510391007854242',width:img.width,height:img.height%7D,%20'http://www.cnblogs.com');%7D%3C/script%3E"></iframe></a></p>

<p>来看看Accumulated Objects by Class区域，这里能找到被聚集的对象实例的类名。java.util.HashMap类上头条了，被实例化了5573次，从这儿看出这个程序不存在什么问题，因为这个数字是比较正常的，但是当出问题的时候我们都会看到比较大的自定义类会在前面，而且占用是相当高。</p>

<p>当然，mat这个工具还有很多的用法，这里把我了解的分享给大家，不管如何，最终我们需要得出系统的内存占用，然后对其进行代码或架构，服务器的优化措施！</p>
