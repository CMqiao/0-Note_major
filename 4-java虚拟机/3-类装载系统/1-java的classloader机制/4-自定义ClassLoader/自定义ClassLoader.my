<h1>自定义ClassLoader</h1>

<p>不知道大家有没有发现，不管是Bootstrap ClassLoader还是ExtClassLoader等，这些类加载器都只是加载指定的目录下的jar包或者资源。如果在某种情况下，我们需要动态加载一些东西呢？比如从D盘某个文件夹加载一个class文件，或者从网络上下载class主内容然后再进行加载，这样可以吗？</p>

<p>如果要这样做的话，需要我们自定义一个classloader。</p>

<h2>自定义步骤</h2>

<ol>
	<li>编写一个类继承自ClassLoader抽象类。</li>
	<li>复写它的<code>findClass()</code>方法。</li>
	<li>在<code>findClass()</code>方法中调用<code>defineClass()</code>。</li>
</ol>

<h3>defineClass()</h3>

<p>这个方法在编写自定义classloader的时候非常重要，它能将class二进制内容转换成Class对象，如果不符合要求的会抛出各种异常。</p>

<h2>注意点：</h2>

<p><strong>一个ClassLoader创建时如果没有指定parent，那么它的parent默认就是AppClassLoader。</strong></p>

<p>上面说的是，如果自定义一个ClassLoader，默认的parent父加载器是AppClassLoader，因为这样就能够保证它能访问系统内置加载器加载成功的class文件。</p>

<h2>自定义ClassLoader示例之DiskClassLoader。</h2>

<p>假设我们需要一个自定义的classloader,默认加载路径为<code>D:\lib</code>下的jar包和资源。</p>

<p>我们写编写一个测试用的类文件，Test.java</p>

<h4>Test.java</h4>

<pre>
<code>package com.frank.test;

public class Test {

    public void say(){
        System.out.println(&quot;Say Hello&quot;);
    }

}</code></pre>

<p>&nbsp;</p>

<p>然后将它编译过年class文件Test.class放到<code>D:\lib</code>这个路径下。</p>

<h4>DiskClassLoader</h4>

<p>我们编写DiskClassLoader的代码。</p>

<pre>
<code>import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;


public class DiskClassLoader extends ClassLoader {

    private String mLibPath;

    public DiskClassLoader(String path) {
        // TODO Auto-generated constructor stub
        mLibPath = path;
    }

    @Override
    protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException {
        // TODO Auto-generated method stub

        String fileName = getFileName(name);

        File file = new File(mLibPath,fileName);

        try {
            FileInputStream is = new FileInputStream(file);

            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            int len = 0;
            try {
                while ((len = is.read()) != -1) {
                    bos.write(len);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

            byte[] data = bos.toByteArray();
            is.close();
            bos.close();

            return defineClass(name,data,0,data.length);

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        return super.findClass(name);
    }

    //获取要加载 的class文件名
    private String getFileName(String name) {
        // TODO Auto-generated method stub
        int index = name.lastIndexOf(&#39;.&#39;);
        if(index == -1){ 
            return name+&quot;.class&quot;;
        }else{
            return name.substring(index)+&quot;.class&quot;;
        }
    }

}</code></pre>

<p>&nbsp;</p>

<p>我们在<code>findClass()</code>方法中定义了查找class的方法，然后数据通过<code>defineClass()</code>生成了Class对象。</p>

<h4>测试</h4>

<p>现在我们要编写测试代码。我们知道如果调用一个Test对象的say方法，它会输出&rdquo;Say Hello&rdquo;这条字符串。但现在是我们把Test.class放置在应用工程所有的目录之外，我们需要加载它，然后执行它的方法。具体效果如何呢？我们编写的DiskClassLoader能不能顺利完成任务呢？我们拭目以待。</p>

<pre>
<code>import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class ClassLoaderTest {

    public static void main(String[] args) {
        // TODO Auto-generated method stub

        //创建自定义classloader对象。
        DiskClassLoader diskLoader = new DiskClassLoader(&quot;D:\\lib&quot;);
        try {
            //加载class文件
            Class c = diskLoader.loadClass(&quot;com.frank.test.Test&quot;);

            if(c != null){
                try {
                    Object obj = c.newInstance();
                    Method method = c.getDeclaredMethod(&quot;say&quot;,null);
                    //通过反射调用Test类的say方法
                    method.invoke(obj, null);
                } catch (InstantiationException | IllegalAccessException 
                        | NoSuchMethodException
                        | SecurityException | 
                        IllegalArgumentException | 
                        InvocationTargetException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        } catch (ClassNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }

}
</code></pre>

<p>&nbsp;</p>

<p>我们点击运行按钮，结果显示。</p>

<p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170210192355807?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYnJpYmx1ZQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" /></p>

<p>可以看到，Test类的say方法正确执行，也就是我们写的DiskClassLoader编写成功。</p>

<h1>回首</h1>

<p>讲了这么大的篇幅，自定义ClassLoader才姗姗来迟。 很多同学可能觉得前面有些啰嗦，但我按照自己的思路，我觉得还是有必要的。因为我是围绕一个关键字进行讲解的。</p>

<p><strong>关键字是什么？</strong></p>

<h2>关键字 路径</h2>

<ul>
	<li>从开篇的环境变量</li>
	<li>到3个主要的JDK自带的类加载器</li>
	<li>到自定义的ClassLoader</li>
</ul>

<p>它们的关联部分就是路径，也就是要加载的class或者是资源的路径。&nbsp;<br />
BootStrap ClassLoader、ExtClassLoader、AppClassLoader都是加载指定路径下的jar包。如果我们要突破这种限制，实现自己某些特殊的需求，我们就得自定义ClassLoader，自已指定加载的路径，可以是磁盘、内存、网络或者其它。</p>

<p><strong>所以，你说路径能不能成为它们的关键字？</strong></p>

<p>当然上面的只是我个人的看法，可能不正确，但现阶段，这样有利于自己的学习理解。</p>

<h1>自定义ClassLoader还能做什么？</h1>

<p>突破了JDK系统内置加载路径的限制之后，我们就可以编写自定义ClassLoader，然后剩下的就叫给开发者你自己了。你可以按照自己的意愿进行业务的定制，将ClassLoader玩出花样来。</p>

<h2>玩出花之Class解密类加载器</h2>

<p>常见的用法是将Class文件按照某种加密手段进行加密，然后按照规则编写自定义的ClassLoader进行解密，这样我们就可以在程序中加载特定了类，并且这个类只能被我们自定义的加载器进行加载，提高了程序的安全性。</p>

<p>下面，我们编写代码。</p>

<h3>1.定义加密解密协议</h3>

<p>加密和解密的协议有很多种，具体怎么定看业务需要。在这里，为了便于演示，我简单地将加密解密定义为异或运算。当一个文件进行异或运算后，产生了加密文件，再进行一次异或后，就进行了解密。</p>

<h3>2.编写加密工具类</h3>

<pre>
<code>import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;


public class FileUtils {

    public static void test(String path){
        File file = new File(path);
        try {
            FileInputStream fis = new FileInputStream(file);
            FileOutputStream fos = new FileOutputStream(path+&quot;en&quot;);
            int b = 0;
            int b1 = 0;
            try {
                while((b = fis.read()) != -1){
                    //每一个byte异或一个数字2
                    fos.write(b ^ 2);
                }
                fos.close();
                fis.close();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}
</code></pre>

<p>&nbsp;</p>

<p>我们再写测试代码</p>

<pre>
<code>FileUtils.test(&quot;D:\\lib\\Test.class&quot;);</code></pre>

<ul>
	<li>1</li>
</ul>

<ul>
	<li>1</li>
</ul>

<p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170210192432620?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYnJpYmx1ZQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" />&nbsp;<br />
然后可以看见路径<code>D:\\lib\\Test.class</code>下Test.class生成了Test.classen文件。</p>

<h3>编写自定义classloader，DeClassLoader</h3>

<pre>
<code>import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;


public class DeClassLoader extends ClassLoader {

    private String mLibPath;

    public DeClassLoader(String path) {
        // TODO Auto-generated constructor stub
        mLibPath = path;
    }

    @Override
    protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException {
        // TODO Auto-generated method stub

        String fileName = getFileName(name);

        File file = new File(mLibPath,fileName);

        try {
            FileInputStream is = new FileInputStream(file);

            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            int len = 0;
            byte b = 0;
            try {
                while ((len = is.read()) != -1) {
                    //将数据异或一个数字2进行解密
                    b = (byte) (len ^ 2);
                    bos.write(b);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

            byte[] data = bos.toByteArray();
            is.close();
            bos.close();

            return defineClass(name,data,0,data.length);

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        return super.findClass(name);
    }

    //获取要加载 的class文件名
    private String getFileName(String name) {
        // TODO Auto-generated method stub
        int index = name.lastIndexOf(&#39;.&#39;);
        if(index == -1){ 
            return name+&quot;.classen&quot;;
        }else{
            return name.substring(index+1)+&quot;.classen&quot;;
        }
    }

}</code></pre>

<p>&nbsp;</p>

<h3>测试</h3>

<p>我们可以在ClassLoaderTest.java中的main方法中如下编码：</p>

<pre>
<code>DeClassLoader diskLoader = new DeClassLoader(&quot;D:\\lib&quot;);
        try {
            //加载class文件
            Class c = diskLoader.loadClass(&quot;com.frank.test.Test&quot;);

            if(c != null){
                try {
                    Object obj = c.newInstance();
                    Method method = c.getDeclaredMethod(&quot;say&quot;,null);
                    //通过反射调用Test类的say方法
                    method.invoke(obj, null);
                } catch (InstantiationException | IllegalAccessException 
                        | NoSuchMethodException
                        | SecurityException | 
                        IllegalArgumentException | 
                        InvocationTargetException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        } catch (ClassNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }</code></pre>

<p>&nbsp;</p>

<p>查看运行结果是：</p>

<p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170210192355807?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYnJpYmx1ZQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" /></p>

<p>可以看到了，同样成功了。现在，我们有两个自定义的ClassLoader:DiskClassLoader和DeClassLoader，我们可以尝试一下，看看DiskClassLoader能不能加载Test.classen文件也就是Test.class加密后的文件。</p>

<p>我们首先移除<code>D:\\lib\\Test.class</code>文件，只剩下一下Test.classen文件，然后进行代码的测试。</p>

<pre>
<code>DeClassLoader diskLoader1 = new DeClassLoader(&quot;D:\\lib&quot;);
        try {
            //加载class文件
            Class c = diskLoader1.loadClass(&quot;com.frank.test.Test&quot;);

            if(c != null){
                try {
                    Object obj = c.newInstance();
                    Method method = c.getDeclaredMethod(&quot;say&quot;,null);
                    //通过反射调用Test类的say方法
                    method.invoke(obj, null);
                } catch (InstantiationException | IllegalAccessException 
                        | NoSuchMethodException
                        | SecurityException | 
                        IllegalArgumentException | 
                        InvocationTargetException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        } catch (ClassNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        DiskClassLoader diskLoader = new DiskClassLoader(&quot;D:\\lib&quot;);
        try {
            //加载class文件
            Class c = diskLoader.loadClass(&quot;com.frank.test.Test&quot;);

            if(c != null){
                try {
                    Object obj = c.newInstance();
                    Method method = c.getDeclaredMethod(&quot;say&quot;,null);
                    //通过反射调用Test类的say方法
                    method.invoke(obj, null);
                } catch (InstantiationException | IllegalAccessException 
                        | NoSuchMethodException
                        | SecurityException | 
                        IllegalArgumentException | 
                        InvocationTargetException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        } catch (ClassNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }
</code></pre>

<p>&nbsp;</p>

<p>运行结果：&nbsp;<br />
<img alt="这里写图片描述" src="http://img.blog.csdn.net/20170210192518030?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYnJpYmx1ZQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" /></p>

<p>我们可以看到。DeClassLoader运行正常，而DiskClassLoader却找不到Test.class的类,并且它也无法加载Test.classen文件。</p>
